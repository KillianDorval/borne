
borneSimulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fda4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002424  0800ff54  0800ff54  0001ff54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012378  08012378  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08012378  08012378  00022378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012380  08012380  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012380  08012380  00022380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012384  08012384  00022384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08012388  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007908  2000007c  08012404  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007984  08012404  00037984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c510  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000055b2  00000000  00000000  0005c5bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d0  00000000  00000000  00061b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001458  00000000  00000000  00063140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d0b1  00000000  00000000  00064598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e59b  00000000  00000000  00091649  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec36d  00000000  00000000  000afbe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019bf51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060d0  00000000  00000000  0019bfcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ff3c 	.word	0x0800ff3c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	0800ff3c 	.word	0x0800ff3c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <HAL_Init+0x40>)
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <HAL_Init+0x40>)
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <HAL_Init+0x40>)
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 fa2b 	bl	8000a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f00e f8aa 	bl	800e72c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fa35 	bl	8000a72 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 fa0b 	bl	8000a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000014 	.word	0x20000014
 800063c:	20000004 	.word	0x20000004
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000004 	.word	0x20000004
 8000668:	20000224 	.word	0x20000224

0800066c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000224 	.word	0x20000224

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800069c:	d005      	beq.n	80006aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_Delay+0x40>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006aa:	bf00      	nop
 80006ac:	f7ff ffde 	bl	800066c <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d8f7      	bhi.n	80006ac <HAL_Delay+0x28>
  {
  }
}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000004 	.word	0x20000004

080006c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d101      	bne.n	80006da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e0ed      	b.n	80008b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d102      	bne.n	80006ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f00e f848 	bl	800e77c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f022 0202 	bic.w	r2, r2, #2
 80006fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006fc:	f7ff ffb6 	bl	800066c <HAL_GetTick>
 8000700:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000702:	e012      	b.n	800072a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000704:	f7ff ffb2 	bl	800066c <HAL_GetTick>
 8000708:	4602      	mov	r2, r0
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	2b0a      	cmp	r3, #10
 8000710:	d90b      	bls.n	800072a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000716:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2205      	movs	r2, #5
 8000722:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e0c5      	b.n	80008b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f003 0302 	and.w	r3, r3, #2
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1e5      	bne.n	8000704 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f042 0201 	orr.w	r2, r2, #1
 8000746:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000748:	f7ff ff90 	bl	800066c <HAL_GetTick>
 800074c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800074e:	e012      	b.n	8000776 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000750:	f7ff ff8c 	bl	800066c <HAL_GetTick>
 8000754:	4602      	mov	r2, r0
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	2b0a      	cmp	r3, #10
 800075c:	d90b      	bls.n	8000776 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2205      	movs	r2, #5
 800076e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e09f      	b.n	80008b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	2b00      	cmp	r3, #0
 8000782:	d0e5      	beq.n	8000750 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7e1b      	ldrb	r3, [r3, #24]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d108      	bne.n	800079e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	e007      	b.n	80007ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7e5b      	ldrb	r3, [r3, #25]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d108      	bne.n	80007c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	e007      	b.n	80007d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80007d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	7e9b      	ldrb	r3, [r3, #26]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d108      	bne.n	80007f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f042 0220 	orr.w	r2, r2, #32
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	e007      	b.n	8000802 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f022 0220 	bic.w	r2, r2, #32
 8000800:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	7edb      	ldrb	r3, [r3, #27]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d108      	bne.n	800081c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f022 0210 	bic.w	r2, r2, #16
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	e007      	b.n	800082c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f042 0210 	orr.w	r2, r2, #16
 800082a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7f1b      	ldrb	r3, [r3, #28]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d108      	bne.n	8000846 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f042 0208 	orr.w	r2, r2, #8
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	e007      	b.n	8000856 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f022 0208 	bic.w	r2, r2, #8
 8000854:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	7f5b      	ldrb	r3, [r3, #29]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d108      	bne.n	8000870 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f042 0204 	orr.w	r2, r2, #4
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	e007      	b.n	8000880 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f022 0204 	bic.w	r2, r2, #4
 800087e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	431a      	orrs	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	691b      	ldr	r3, [r3, #16]
 800088e:	431a      	orrs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	ea42 0103 	orr.w	r1, r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	1e5a      	subs	r2, r3, #1
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	430a      	orrs	r2, r1
 80008a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2201      	movs	r2, #1
 80008b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60d3      	str	r3, [r2, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f0:	d301      	bcc.n	80009f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00f      	b.n	8000a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <SysTick_Config+0x40>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fe:	210f      	movs	r1, #15
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f7ff ff8e 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <SysTick_Config+0x40>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SysTick_Config+0x40>)
 8000a10:	2207      	movs	r2, #7
 8000a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	e000e010 	.word	0xe000e010

08000a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff47 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a4c:	f7ff ff5c 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	6978      	ldr	r0, [r7, #20]
 8000a58:	f7ff ff8e 	bl	8000978 <NVIC_EncodePriority>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff5d 	bl	8000924 <__NVIC_SetPriority>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffb0 	bl	80009e0 <SysTick_Config>
 8000a80:	4603      	mov	r3, r0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000a9c:	4baa      	ldr	r3, [pc, #680]	; (8000d48 <HAL_ETH_Init+0x2bc>)
 8000a9e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d101      	bne.n	8000ab2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e185      	b.n	8000dbe <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d106      	bne.n	8000acc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f00d f876 	bl	800dbb8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	4b9e      	ldr	r3, [pc, #632]	; (8000d4c <HAL_ETH_Init+0x2c0>)
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	4a9d      	ldr	r2, [pc, #628]	; (8000d4c <HAL_ETH_Init+0x2c0>)
 8000ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ada:	6453      	str	r3, [r2, #68]	; 0x44
 8000adc:	4b9b      	ldr	r3, [pc, #620]	; (8000d4c <HAL_ETH_Init+0x2c0>)
 8000ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000ae8:	4b99      	ldr	r3, [pc, #612]	; (8000d50 <HAL_ETH_Init+0x2c4>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	4a98      	ldr	r2, [pc, #608]	; (8000d50 <HAL_ETH_Init+0x2c4>)
 8000aee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000af2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000af4:	4b96      	ldr	r3, [pc, #600]	; (8000d50 <HAL_ETH_Init+0x2c4>)
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a1b      	ldr	r3, [r3, #32]
 8000afc:	4994      	ldr	r1, [pc, #592]	; (8000d50 <HAL_ETH_Init+0x2c4>)
 8000afe:	4313      	orrs	r3, r2
 8000b00:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f042 0201 	orr.w	r2, r2, #1
 8000b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b18:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000b1a:	f7ff fda7 	bl	800066c <HAL_GetTick>
 8000b1e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000b20:	e011      	b.n	8000b46 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000b22:	f7ff fda3 	bl	800066c <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b30:	d909      	bls.n	8000b46 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2203      	movs	r2, #3
 8000b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e13b      	b.n	8000dbe <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1e4      	bne.n	8000b22 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f023 031c 	bic.w	r3, r3, #28
 8000b66:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000b68:	f001 fdb0 	bl	80026cc <HAL_RCC_GetHCLKFreq>
 8000b6c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	4a78      	ldr	r2, [pc, #480]	; (8000d54 <HAL_ETH_Init+0x2c8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d908      	bls.n	8000b88 <HAL_ETH_Init+0xfc>
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4a77      	ldr	r2, [pc, #476]	; (8000d58 <HAL_ETH_Init+0x2cc>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d804      	bhi.n	8000b88 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	61fb      	str	r3, [r7, #28]
 8000b86:	e027      	b.n	8000bd8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	4a73      	ldr	r2, [pc, #460]	; (8000d58 <HAL_ETH_Init+0x2cc>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d908      	bls.n	8000ba2 <HAL_ETH_Init+0x116>
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	4a72      	ldr	r2, [pc, #456]	; (8000d5c <HAL_ETH_Init+0x2d0>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d804      	bhi.n	8000ba2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f043 030c 	orr.w	r3, r3, #12
 8000b9e:	61fb      	str	r3, [r7, #28]
 8000ba0:	e01a      	b.n	8000bd8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	4a6d      	ldr	r2, [pc, #436]	; (8000d5c <HAL_ETH_Init+0x2d0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d903      	bls.n	8000bb2 <HAL_ETH_Init+0x126>
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	4a6c      	ldr	r2, [pc, #432]	; (8000d60 <HAL_ETH_Init+0x2d4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d911      	bls.n	8000bd6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	4a6a      	ldr	r2, [pc, #424]	; (8000d60 <HAL_ETH_Init+0x2d4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d908      	bls.n	8000bcc <HAL_ETH_Init+0x140>
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	4a69      	ldr	r2, [pc, #420]	; (8000d64 <HAL_ETH_Init+0x2d8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d804      	bhi.n	8000bcc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	e005      	b.n	8000bd8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	61fb      	str	r3, [r7, #28]
 8000bd4:	e000      	b.n	8000bd8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000bd6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	69fa      	ldr	r2, [r7, #28]
 8000bde:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000be0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000be4:	2100      	movs	r1, #0
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f000 fb16 	bl	8001218 <HAL_ETH_WritePHYRegister>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00b      	beq.n	8000c0a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000bf6:	6939      	ldr	r1, [r7, #16]
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f000 fba3 	bl	8001344 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2201      	movs	r2, #1
 8000c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e0d9      	b.n	8000dbe <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000c0a:	20ff      	movs	r0, #255	; 0xff
 8000c0c:	f7ff fd3a 	bl	8000684 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f000 80a7 	beq.w	8000d68 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000c1a:	f7ff fd27 	bl	800066c <HAL_GetTick>
 8000c1e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	461a      	mov	r2, r3
 8000c26:	2101      	movs	r1, #1
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 fa8d 	bl	8001148 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000c2e:	f7ff fd1d 	bl	800066c <HAL_GetTick>
 8000c32:	4602      	mov	r2, r0
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d90f      	bls.n	8000c60 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000c44:	6939      	ldr	r1, [r7, #16]
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 fb7c 	bl	8001344 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e0ae      	b.n	8000dbe <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0da      	beq.n	8000c20 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000c6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c6e:	2100      	movs	r1, #0
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 fad1 	bl	8001218 <HAL_ETH_WritePHYRegister>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00b      	beq.n	8000c94 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000c80:	6939      	ldr	r1, [r7, #16]
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 fb5e 	bl	8001344 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000c90:	2301      	movs	r3, #1
 8000c92:	e094      	b.n	8000dbe <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000c94:	f7ff fcea 	bl	800066c <HAL_GetTick>
 8000c98:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 fa50 	bl	8001148 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000ca8:	f7ff fce0 	bl	800066c <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d90f      	bls.n	8000cda <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000cbe:	6939      	ldr	r1, [r7, #16]
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 fb3f 	bl	8001344 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e071      	b.n	8000dbe <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f003 0320 	and.w	r3, r3, #32
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0da      	beq.n	8000c9a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	461a      	mov	r2, r3
 8000cea:	211f      	movs	r1, #31
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fa2b 	bl	8001148 <HAL_ETH_ReadPHYRegister>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d00b      	beq.n	8000d10 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000cfc:	6939      	ldr	r1, [r7, #16]
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f000 fb20 	bl	8001344 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e056      	b.n	8000dbe <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d004      	beq.n	8000d24 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	e002      	b.n	8000d2a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	e037      	b.n	8000dac <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	e032      	b.n	8000dac <HAL_ETH_Init+0x320>
 8000d46:	bf00      	nop
 8000d48:	03938700 	.word	0x03938700
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40013800 	.word	0x40013800
 8000d54:	01312cff 	.word	0x01312cff
 8000d58:	02160ebf 	.word	0x02160ebf
 8000d5c:	039386ff 	.word	0x039386ff
 8000d60:	05f5e0ff 	.word	0x05f5e0ff
 8000d64:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	085b      	lsrs	r3, r3, #1
 8000d76:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	2100      	movs	r1, #0
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 fa49 	bl	8001218 <HAL_ETH_WritePHYRegister>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d00b      	beq.n	8000da4 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000d90:	6939      	ldr	r1, [r7, #16]
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 fad6 	bl	8001344 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e00c      	b.n	8000dbe <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000da4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000da8:	f7ff fc6c 	bl	8000684 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000dac:	6939      	ldr	r1, [r7, #16]
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 fac8 	bl	8001344 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2201      	movs	r2, #1
 8000db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3720      	adds	r7, #32
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop

08000dc8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d101      	bne.n	8000de8 <HAL_ETH_DMATxDescListInit+0x20>
 8000de4:	2302      	movs	r3, #2
 8000de6:	e052      	b.n	8000e8e <HAL_ETH_DMATxDescListInit+0xc6>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2202      	movs	r2, #2
 8000df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e030      	b.n	8000e66 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	015b      	lsls	r3, r3, #5
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e14:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e1c:	fb02 f303 	mul.w	r3, r2, r3
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	4413      	add	r3, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d105      	bne.n	8000e3e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d208      	bcs.n	8000e5a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	015b      	lsls	r3, r3, #5
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	4413      	add	r3, r2
 8000e52:	461a      	mov	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	e002      	b.n	8000e60 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d3ca      	bcc.n	8000e04 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e78:	3310      	adds	r3, #16
 8000e7a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	371c      	adds	r7, #28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b087      	sub	sp, #28
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d101      	bne.n	8000eba <HAL_ETH_DMARxDescListInit+0x20>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e056      	b.n	8000f68 <HAL_ETH_DMARxDescListInit+0xce>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e034      	b.n	8000f40 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	015b      	lsls	r3, r3, #5
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ee6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000eee:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	461a      	mov	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d105      	bne.n	8000f18 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d208      	bcs.n	8000f34 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	015b      	lsls	r3, r3, #5
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	e002      	b.n	8000f3a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d3c6      	bcc.n	8000ed6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f52:	330c      	adds	r3, #12
 8000f54:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	371c      	adds	r7, #28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <HAL_ETH_TransmitFrame+0x24>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e0cd      	b.n	8001134 <HAL_ETH_TransmitFrame+0x1c0>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e0b8      	b.n	8001134 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	da09      	bge.n	8000fe0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2212      	movs	r2, #18
 8000fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0a9      	b.n	8001134 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d915      	bls.n	8001016 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	4a54      	ldr	r2, [pc, #336]	; (8001140 <HAL_ETH_TransmitFrame+0x1cc>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	0a9b      	lsrs	r3, r3, #10
 8000ff4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	4b51      	ldr	r3, [pc, #324]	; (8001140 <HAL_ETH_TransmitFrame+0x1cc>)
 8000ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8000ffe:	0a9b      	lsrs	r3, r3, #10
 8001000:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001004:	fb01 f303 	mul.w	r3, r1, r3
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d005      	beq.n	800101a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	e001      	b.n	800101a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001016:	2301      	movs	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d11c      	bne.n	800105a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800102e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800103a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800104a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	461a      	mov	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
 8001058:	e04b      	b.n	80010f2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	e044      	b.n	80010ea <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800106e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d107      	bne.n	8001086 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001084:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800108e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3b01      	subs	r3, #1
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	429a      	cmp	r2, r3
 8001098:	d116      	bne.n	80010c8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80010a8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	4a25      	ldr	r2, [pc, #148]	; (8001144 <HAL_ETH_TransmitFrame+0x1d0>)
 80010ae:	fb02 f203 	mul.w	r2, r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80010ba:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80010c6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010d6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	461a      	mov	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	3301      	adds	r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d3b6      	bcc.n	8001060 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010fa:	3314      	adds	r3, #20
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00d      	beq.n	8001122 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800110e:	3314      	adds	r3, #20
 8001110:	2204      	movs	r2, #4
 8001112:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800111c:	3304      	adds	r3, #4
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	371c      	adds	r7, #28
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	ac02b00b 	.word	0xac02b00b
 8001144:	fffffa0c 	.word	0xfffffa0c

08001148 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	460b      	mov	r3, r1
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b82      	cmp	r3, #130	; 0x82
 8001168:	d101      	bne.n	800116e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800116a:	2302      	movs	r3, #2
 800116c:	e050      	b.n	8001210 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2282      	movs	r2, #130	; 0x82
 8001172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f003 031c 	and.w	r3, r3, #28
 8001184:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8a1b      	ldrh	r3, [r3, #16]
 800118a:	02db      	lsls	r3, r3, #11
 800118c:	b29b      	uxth	r3, r3
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4313      	orrs	r3, r2
 8001192:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001194:	897b      	ldrh	r3, [r7, #10]
 8001196:	019b      	lsls	r3, r3, #6
 8001198:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	4313      	orrs	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f023 0302 	bic.w	r3, r3, #2
 80011a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011ba:	f7ff fa57 	bl	800066c <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80011c0:	e015      	b.n	80011ee <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80011c2:	f7ff fa53 	bl	800066c <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d0:	d309      	bcc.n	80011e6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e014      	b.n	8001210 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e4      	bne.n	80011c2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	460b      	mov	r3, r1
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b42      	cmp	r3, #66	; 0x42
 8001238:	d101      	bne.n	800123e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800123a:	2302      	movs	r3, #2
 800123c:	e04e      	b.n	80012dc <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2242      	movs	r2, #66	; 0x42
 8001242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f003 031c 	and.w	r3, r3, #28
 8001254:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8a1b      	ldrh	r3, [r3, #16]
 800125a:	02db      	lsls	r3, r3, #11
 800125c:	b29b      	uxth	r3, r3
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4313      	orrs	r3, r2
 8001262:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	019b      	lsls	r3, r3, #6
 8001268:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	4313      	orrs	r3, r2
 8001270:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	b29a      	uxth	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001294:	f7ff f9ea 	bl	800066c <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800129a:	e015      	b.n	80012c8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800129c:	f7ff f9e6 	bl	800066c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012aa:	d309      	bcc.n	80012c0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e00d      	b.n	80012dc <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1e4      	bne.n	800129c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <HAL_ETH_Start+0x16>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e01f      	b.n	800133a <HAL_ETH_Start+0x56>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2202      	movs	r2, #2
 8001306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fa1c 	bl	8001748 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 fa36 	bl	8001782 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 fa80 	bl	800181c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fa4d 	bl	80017bc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 fa62 	bl	80017ec <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0b0      	sub	sp, #192	; 0xc0
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d007      	beq.n	800136a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001360:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001368:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001372:	2300      	movs	r3, #0
 8001374:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800138a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138e:	663b      	str	r3, [r7, #96]	; 0x60
 8001390:	e001      	b.n	8001396 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80013a0:	2300      	movs	r3, #0
 80013a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80013b0:	2340      	movs	r3, #64	; 0x40
 80013b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001418:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800141c:	4bac      	ldr	r3, [pc, #688]	; (80016d0 <ETH_MACDMAConfig+0x38c>)
 800141e:	4013      	ands	r3, r2
 8001420:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001424:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001428:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800142a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800142c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800142e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001430:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001436:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800143a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800143c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800143e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001444:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001448:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800144a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800144c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800144e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001450:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001454:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001458:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800145a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800145e:	4313      	orrs	r3, r2
 8001460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800146c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001478:	2001      	movs	r0, #1
 800147a:	f7ff f903 	bl	8000684 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001486:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001488:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800148a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800148c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800148e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001490:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001492:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001496:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800149c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800149e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80014a2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80014a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80014a8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80014ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80014b4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80014b6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff f8de 	bl	8000684 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014d0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80014da:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80014e4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014f4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80014f8:	4013      	ands	r3, r2
 80014fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80014fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001502:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001508:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800150a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800150e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001514:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800151a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800151c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001520:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001522:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001526:	4313      	orrs	r3, r2
 8001528:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001534:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff f89f 	bl	8000684 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800154e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001550:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001554:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800156a:	2001      	movs	r0, #1
 800156c:	f7ff f88a 	bl	8000684 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001578:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800157e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001582:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001588:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800158c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800159e:	2304      	movs	r3, #4
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80015a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80015a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ce:	3318      	adds	r3, #24
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015da:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <ETH_MACDMAConfig+0x390>)
 80015dc:	4013      	ands	r3, r2
 80015de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80015e2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80015e4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80015e6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80015e8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80015ea:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80015ec:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80015ee:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80015f0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80015f2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80015f4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80015f6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80015f8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80015fa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80015fe:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001600:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001602:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001604:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001608:	4313      	orrs	r3, r2
 800160a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001616:	3318      	adds	r3, #24
 8001618:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800161c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001626:	3318      	adds	r3, #24
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff f828 	bl	8000684 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800163c:	3318      	adds	r3, #24
 800163e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001642:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001648:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800164a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800164c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800164e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001650:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001654:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001658:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800165a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800165c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800165e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff f801 	bl	8000684 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800168e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d10f      	bne.n	80016b8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a0:	331c      	adds	r3, #28
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b4:	331c      	adds	r3, #28
 80016b6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	461a      	mov	r2, r3
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f809 	bl	80016d8 <ETH_MACAddressConfig>
}
 80016c6:	bf00      	nop
 80016c8:	37c0      	adds	r7, #192	; 0xc0
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	ff20810f 	.word	0xff20810f
 80016d4:	f8de3f23 	.word	0xf8de3f23

080016d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3305      	adds	r3, #5
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	3204      	adds	r2, #4
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <ETH_MACAddressConfig+0x68>)
 80016fa:	4413      	add	r3, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3303      	adds	r3, #3
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	061a      	lsls	r2, r3, #24
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3302      	adds	r3, #2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	041b      	lsls	r3, r3, #16
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3301      	adds	r3, #1
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	4313      	orrs	r3, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	7812      	ldrb	r2, [r2, #0]
 8001722:	4313      	orrs	r3, r2
 8001724:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <ETH_MACAddressConfig+0x6c>)
 800172a:	4413      	add	r3, r2
 800172c:	461a      	mov	r2, r3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	6013      	str	r3, [r2, #0]
}
 8001732:	bf00      	nop
 8001734:	371c      	adds	r7, #28
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40028040 	.word	0x40028040
 8001744:	40028044 	.word	0x40028044

08001748 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0208 	orr.w	r2, r2, #8
 8001762:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800176c:	2001      	movs	r0, #1
 800176e:	f000 f87f 	bl	8001870 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	601a      	str	r2, [r3, #0]
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0204 	orr.w	r2, r2, #4
 800179c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80017a6:	2001      	movs	r0, #1
 80017a8:	f000 f862 	bl	8001870 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	601a      	str	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017cc:	3318      	adds	r3, #24
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017dc:	3318      	adds	r3, #24
 80017de:	601a      	str	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fc:	3318      	adds	r3, #24
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f042 0202 	orr.w	r2, r2, #2
 8001808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800180c:	3318      	adds	r3, #24
 800180e:	601a      	str	r2, [r3, #0]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001830:	3318      	adds	r3, #24
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800183c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001840:	3318      	adds	r3, #24
 8001842:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184c:	3318      	adds	r3, #24
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001852:	2001      	movs	r0, #1
 8001854:	f000 f80c 	bl	8001870 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001862:	3318      	adds	r3, #24
 8001864:	601a      	str	r2, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <ETH_Delay+0x34>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <ETH_Delay+0x38>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0a5b      	lsrs	r3, r3, #9
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800188c:	bf00      	nop
  } 
  while (Delay --);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1e5a      	subs	r2, r3, #1
 8001892:	60fa      	str	r2, [r7, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f9      	bne.n	800188c <ETH_Delay+0x1c>
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	20000014 	.word	0x20000014
 80018a8:	10624dd3 	.word	0x10624dd3

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e177      	b.n	8001bb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 8166 	bne.w	8001bb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x4a>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b12      	cmp	r3, #18
 80018f4:	d123      	bne.n	800193e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	08da      	lsrs	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3208      	adds	r2, #8
 80018fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	69b9      	ldr	r1, [r7, #24]
 800193a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0203 	and.w	r2, r3, #3
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d00b      	beq.n	8001992 <HAL_GPIO_Init+0xe6>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d007      	beq.n	8001992 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001986:	2b11      	cmp	r3, #17
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b12      	cmp	r3, #18
 8001990:	d130      	bne.n	80019f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 0201 	and.w	r2, r3, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80c0 	beq.w	8001bb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b65      	ldr	r3, [pc, #404]	; (8001bcc <HAL_GPIO_Init+0x320>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a64      	ldr	r2, [pc, #400]	; (8001bcc <HAL_GPIO_Init+0x320>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b62      	ldr	r3, [pc, #392]	; (8001bcc <HAL_GPIO_Init+0x320>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4e:	4a60      	ldr	r2, [pc, #384]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <HAL_GPIO_Init+0x328>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d037      	beq.n	8001aea <HAL_GPIO_Init+0x23e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a56      	ldr	r2, [pc, #344]	; (8001bd8 <HAL_GPIO_Init+0x32c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d031      	beq.n	8001ae6 <HAL_GPIO_Init+0x23a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a55      	ldr	r2, [pc, #340]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d02b      	beq.n	8001ae2 <HAL_GPIO_Init+0x236>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a54      	ldr	r2, [pc, #336]	; (8001be0 <HAL_GPIO_Init+0x334>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d025      	beq.n	8001ade <HAL_GPIO_Init+0x232>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a53      	ldr	r2, [pc, #332]	; (8001be4 <HAL_GPIO_Init+0x338>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01f      	beq.n	8001ada <HAL_GPIO_Init+0x22e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_GPIO_Init+0x33c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x22a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a51      	ldr	r2, [pc, #324]	; (8001bec <HAL_GPIO_Init+0x340>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x226>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a50      	ldr	r2, [pc, #320]	; (8001bf0 <HAL_GPIO_Init+0x344>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x222>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <HAL_GPIO_Init+0x348>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x21e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4e      	ldr	r2, [pc, #312]	; (8001bf8 <HAL_GPIO_Init+0x34c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x21a>
 8001ac2:	2309      	movs	r3, #9
 8001ac4:	e012      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ac6:	230a      	movs	r3, #10
 8001ac8:	e010      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001aca:	2308      	movs	r3, #8
 8001acc:	e00e      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ace:	2307      	movs	r3, #7
 8001ad0:	e00c      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ad2:	2306      	movs	r3, #6
 8001ad4:	e00a      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	e008      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ada:	2304      	movs	r3, #4
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x240>
 8001aea:	2300      	movs	r3, #0
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	f002 0203 	and.w	r2, r2, #3
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001afc:	4934      	ldr	r1, [pc, #208]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b0a:	4b3c      	ldr	r3, [pc, #240]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b2e:	4a33      	ldr	r2, [pc, #204]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b34:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b58:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5e:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b82:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bac:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b0f      	cmp	r3, #15
 8001bbc:	f67f ae84 	bls.w	80018c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3724      	adds	r7, #36	; 0x24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40021400 	.word	0x40021400
 8001bec:	40021800 	.word	0x40021800
 8001bf0:	40021c00 	.word	0x40021c00
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	40022400 	.word	0x40022400
 8001bfc:	40013c00 	.word	0x40013c00

08001c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e001      	b.n	8001c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	401a      	ands	r2, r3
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d104      	bne.n	8001c86 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	041a      	lsls	r2, r3, #16
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9a:	b08f      	sub	sp, #60	; 0x3c
 8001c9c:	af0a      	add	r7, sp, #40	; 0x28
 8001c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e10f      	b.n	8001eca <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d106      	bne.n	8001cca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f00c fe95 	bl	800e9f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 f8be 	bl	8002e6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	687e      	ldr	r6, [r7, #4]
 8001cf6:	466d      	mov	r5, sp
 8001cf8:	f106 0410 	add.w	r4, r6, #16
 8001cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d08:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d0c:	1d33      	adds	r3, r6, #4
 8001d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d10:	6838      	ldr	r0, [r7, #0]
 8001d12:	f001 f849 	bl	8002da8 <USB_CoreInit>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0d0      	b.n	8001eca <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 f8ac 	bl	8002e8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	e04a      	b.n	8001dd0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	333d      	adds	r3, #61	; 0x3d
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	333c      	adds	r3, #60	; 0x3c
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	b298      	uxth	r0, r3
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3342      	adds	r3, #66	; 0x42
 8001d76:	4602      	mov	r2, r0
 8001d78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	333f      	adds	r3, #63	; 0x3f
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3344      	adds	r3, #68	; 0x44
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	3348      	adds	r3, #72	; 0x48
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3350      	adds	r3, #80	; 0x50
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d3af      	bcc.n	8001d3a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e044      	b.n	8001e6a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	1a9b      	subs	r3, r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	1a9b      	subs	r3, r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	3301      	adds	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d3b5      	bcc.n	8001de0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	687e      	ldr	r6, [r7, #4]
 8001e7c:	466d      	mov	r5, sp
 8001e7e:	f106 0410 	add.w	r4, r6, #16
 8001e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e92:	1d33      	adds	r3, r6, #4
 8001e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e96:	6838      	ldr	r0, [r7, #0]
 8001e98:	f001 f822 	bl	8002ee0 <USB_DevInit>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00d      	b.n	8001eca <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f001 f9df 	bl	8003286 <USB_DevDisconnect>

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001ed4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e22d      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d075      	beq.n	8001fde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ef2:	4ba3      	ldr	r3, [pc, #652]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d00c      	beq.n	8001f18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efe:	4ba0      	ldr	r3, [pc, #640]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d112      	bne.n	8001f30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f0a:	4b9d      	ldr	r3, [pc, #628]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f16:	d10b      	bne.n	8001f30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	4b99      	ldr	r3, [pc, #612]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d05b      	beq.n	8001fdc <HAL_RCC_OscConfig+0x108>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d157      	bne.n	8001fdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e208      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d106      	bne.n	8001f48 <HAL_RCC_OscConfig+0x74>
 8001f3a:	4b91      	ldr	r3, [pc, #580]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a90      	ldr	r2, [pc, #576]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e01d      	b.n	8001f84 <HAL_RCC_OscConfig+0xb0>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x98>
 8001f52:	4b8b      	ldr	r3, [pc, #556]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a8a      	ldr	r2, [pc, #552]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b88      	ldr	r3, [pc, #544]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a87      	ldr	r2, [pc, #540]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0xb0>
 8001f6c:	4b84      	ldr	r3, [pc, #528]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a83      	ldr	r2, [pc, #524]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b81      	ldr	r3, [pc, #516]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a80      	ldr	r2, [pc, #512]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe fb6e 	bl	800066c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f94:	f7fe fb6a 	bl	800066c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e1cd      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b76      	ldr	r3, [pc, #472]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0xc0>
 8001fb2:	e014      	b.n	8001fde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fb5a 	bl	800066c <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7fe fb56 	bl	800066c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e1b9      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fce:	4b6c      	ldr	r3, [pc, #432]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0xe8>
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d063      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fea:	4b65      	ldr	r3, [pc, #404]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff6:	4b62      	ldr	r3, [pc, #392]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d11c      	bne.n	800203c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002002:	4b5f      	ldr	r3, [pc, #380]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d116      	bne.n	800203c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	4b5c      	ldr	r3, [pc, #368]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_RCC_OscConfig+0x152>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d001      	beq.n	8002026 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e18d      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b56      	ldr	r3, [pc, #344]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4952      	ldr	r1, [pc, #328]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	e03a      	b.n	80020b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002044:	4b4f      	ldr	r3, [pc, #316]	; (8002184 <HAL_RCC_OscConfig+0x2b0>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7fe fb0f 	bl	800066c <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002052:	f7fe fb0b 	bl	800066c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e16e      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	4b46      	ldr	r3, [pc, #280]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b43      	ldr	r3, [pc, #268]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4940      	ldr	r1, [pc, #256]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
 8002084:	e015      	b.n	80020b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <HAL_RCC_OscConfig+0x2b0>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe faee 	bl	800066c <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002094:	f7fe faea 	bl	800066c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e14d      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d030      	beq.n	8002120 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d016      	beq.n	80020f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c6:	4b30      	ldr	r3, [pc, #192]	; (8002188 <HAL_RCC_OscConfig+0x2b4>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7fe face 	bl	800066c <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d4:	f7fe faca 	bl	800066c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e12d      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	4b26      	ldr	r3, [pc, #152]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x200>
 80020f2:	e015      	b.n	8002120 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCC_OscConfig+0x2b4>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fa:	f7fe fab7 	bl	800066c <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002102:	f7fe fab3 	bl	800066c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e116      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80a0 	beq.w	800226e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10f      	bne.n	800215e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800215a:	2301      	movs	r3, #1
 800215c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_OscConfig+0x2b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d121      	bne.n	80021ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_RCC_OscConfig+0x2b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_RCC_OscConfig+0x2b8>)
 8002170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002176:	f7fe fa79 	bl	800066c <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217c:	e011      	b.n	80021a2 <HAL_RCC_OscConfig+0x2ce>
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	42470000 	.word	0x42470000
 8002188:	42470e80 	.word	0x42470e80
 800218c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002190:	f7fe fa6c 	bl	800066c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e0cf      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a2:	4b6a      	ldr	r3, [pc, #424]	; (800234c <HAL_RCC_OscConfig+0x478>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x2f0>
 80021b6:	4b66      	ldr	r3, [pc, #408]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	4a65      	ldr	r2, [pc, #404]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6713      	str	r3, [r2, #112]	; 0x70
 80021c2:	e01c      	b.n	80021fe <HAL_RCC_OscConfig+0x32a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d10c      	bne.n	80021e6 <HAL_RCC_OscConfig+0x312>
 80021cc:	4b60      	ldr	r3, [pc, #384]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	4a5f      	ldr	r2, [pc, #380]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	6713      	str	r3, [r2, #112]	; 0x70
 80021d8:	4b5d      	ldr	r3, [pc, #372]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a5c      	ldr	r2, [pc, #368]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
 80021e4:	e00b      	b.n	80021fe <HAL_RCC_OscConfig+0x32a>
 80021e6:	4b5a      	ldr	r3, [pc, #360]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	4a59      	ldr	r2, [pc, #356]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	6713      	str	r3, [r2, #112]	; 0x70
 80021f2:	4b57      	ldr	r3, [pc, #348]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a56      	ldr	r2, [pc, #344]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d015      	beq.n	8002232 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002206:	f7fe fa31 	bl	800066c <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7fe fa2d 	bl	800066c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e08e      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002224:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0ee      	beq.n	800220e <HAL_RCC_OscConfig+0x33a>
 8002230:	e014      	b.n	800225c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002232:	f7fe fa1b 	bl	800066c <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fa17 	bl	800066c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e078      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002250:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1ee      	bne.n	800223a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800225c:	7dfb      	ldrb	r3, [r7, #23]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d105      	bne.n	800226e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002262:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	4a3a      	ldr	r2, [pc, #232]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d064      	beq.n	8002340 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002276:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b08      	cmp	r3, #8
 8002280:	d05c      	beq.n	800233c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d141      	bne.n	800230e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b32      	ldr	r3, [pc, #200]	; (8002354 <HAL_RCC_OscConfig+0x480>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe f9ec 	bl	800066c <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe f9e8 	bl	800066c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e04b      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69da      	ldr	r2, [r3, #28]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	019b      	lsls	r3, r3, #6
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	041b      	lsls	r3, r3, #16
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	491d      	ldr	r1, [pc, #116]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e0:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <HAL_RCC_OscConfig+0x480>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe f9c1 	bl	800066c <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe f9bd 	bl	800066c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e020      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x41a>
 800230c:	e018      	b.n	8002340 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <HAL_RCC_OscConfig+0x480>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7fe f9aa 	bl	800066c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe f9a6 	bl	800066c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e009      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HAL_RCC_OscConfig+0x47c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x448>
 800233a:	e001      	b.n	8002340 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40007000 	.word	0x40007000
 8002350:	40023800 	.word	0x40023800
 8002354:	42470060 	.word	0x42470060

08002358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0ca      	b.n	8002502 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b67      	ldr	r3, [pc, #412]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d90c      	bls.n	8002394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b64      	ldr	r3, [pc, #400]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b62      	ldr	r3, [pc, #392]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b6      	b.n	8002502 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b58      	ldr	r3, [pc, #352]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a57      	ldr	r2, [pc, #348]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 80023b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b52      	ldr	r3, [pc, #328]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a51      	ldr	r2, [pc, #324]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 80023ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b4f      	ldr	r3, [pc, #316]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494c      	ldr	r1, [pc, #304]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d044      	beq.n	8002478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b46      	ldr	r3, [pc, #280]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d119      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07d      	b.n	8002502 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d003      	beq.n	8002416 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	2b03      	cmp	r3, #3
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b3e      	ldr	r3, [pc, #248]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e06d      	b.n	8002502 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e065      	b.n	8002502 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002436:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f023 0203 	bic.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4933      	ldr	r1, [pc, #204]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002448:	f7fe f910 	bl	800066c <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7fe f90c 	bl	800066c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e04d      	b.n	8002502 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 020c 	and.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	429a      	cmp	r2, r3
 8002476:	d1eb      	bne.n	8002450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d20c      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b21      	ldr	r3, [pc, #132]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b1f      	ldr	r3, [pc, #124]	; (800250c <HAL_RCC_ClockConfig+0x1b4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e030      	b.n	8002502 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4915      	ldr	r1, [pc, #84]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490d      	ldr	r1, [pc, #52]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f81d 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80024e2:	4601      	mov	r1, r0
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	4a09      	ldr	r2, [pc, #36]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	fa21 f303 	lsr.w	r3, r1, r3
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80024fa:	2000      	movs	r0, #0
 80024fc:	f7fe f872 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023c00 	.word	0x40023c00
 8002510:	40023800 	.word	0x40023800
 8002514:	080122c8 	.word	0x080122c8
 8002518:	20000014 	.word	0x20000014

0800251c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	2300      	movs	r3, #0
 800252c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002532:	4b63      	ldr	r3, [pc, #396]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b04      	cmp	r3, #4
 800253c:	d007      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x32>
 800253e:	2b08      	cmp	r3, #8
 8002540:	d008      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x38>
 8002542:	2b00      	cmp	r3, #0
 8002544:	f040 80b4 	bne.w	80026b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002548:	4b5e      	ldr	r3, [pc, #376]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800254a:	60bb      	str	r3, [r7, #8]
       break;
 800254c:	e0b3      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800254e:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002550:	60bb      	str	r3, [r7, #8]
      break;
 8002552:	e0b0      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002554:	4b5a      	ldr	r3, [pc, #360]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800255c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255e:	4b58      	ldr	r3, [pc, #352]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d04a      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256a:	4b55      	ldr	r3, [pc, #340]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	f04f 0400 	mov.w	r4, #0
 8002574:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	ea03 0501 	and.w	r5, r3, r1
 8002580:	ea04 0602 	and.w	r6, r4, r2
 8002584:	4629      	mov	r1, r5
 8002586:	4632      	mov	r2, r6
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	f04f 0400 	mov.w	r4, #0
 8002590:	0154      	lsls	r4, r2, #5
 8002592:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002596:	014b      	lsls	r3, r1, #5
 8002598:	4619      	mov	r1, r3
 800259a:	4622      	mov	r2, r4
 800259c:	1b49      	subs	r1, r1, r5
 800259e:	eb62 0206 	sbc.w	r2, r2, r6
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	f04f 0400 	mov.w	r4, #0
 80025aa:	0194      	lsls	r4, r2, #6
 80025ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025b0:	018b      	lsls	r3, r1, #6
 80025b2:	1a5b      	subs	r3, r3, r1
 80025b4:	eb64 0402 	sbc.w	r4, r4, r2
 80025b8:	f04f 0100 	mov.w	r1, #0
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	00e2      	lsls	r2, r4, #3
 80025c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025c6:	00d9      	lsls	r1, r3, #3
 80025c8:	460b      	mov	r3, r1
 80025ca:	4614      	mov	r4, r2
 80025cc:	195b      	adds	r3, r3, r5
 80025ce:	eb44 0406 	adc.w	r4, r4, r6
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	0262      	lsls	r2, r4, #9
 80025dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80025e0:	0259      	lsls	r1, r3, #9
 80025e2:	460b      	mov	r3, r1
 80025e4:	4614      	mov	r4, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	4621      	mov	r1, r4
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f04f 0400 	mov.w	r4, #0
 80025f0:	461a      	mov	r2, r3
 80025f2:	4623      	mov	r3, r4
 80025f4:	f7fd fe54 	bl	80002a0 <__aeabi_uldivmod>
 80025f8:	4603      	mov	r3, r0
 80025fa:	460c      	mov	r4, r1
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	e049      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002600:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	f04f 0400 	mov.w	r4, #0
 800260a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	ea03 0501 	and.w	r5, r3, r1
 8002616:	ea04 0602 	and.w	r6, r4, r2
 800261a:	4629      	mov	r1, r5
 800261c:	4632      	mov	r2, r6
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	f04f 0400 	mov.w	r4, #0
 8002626:	0154      	lsls	r4, r2, #5
 8002628:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800262c:	014b      	lsls	r3, r1, #5
 800262e:	4619      	mov	r1, r3
 8002630:	4622      	mov	r2, r4
 8002632:	1b49      	subs	r1, r1, r5
 8002634:	eb62 0206 	sbc.w	r2, r2, r6
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	f04f 0400 	mov.w	r4, #0
 8002640:	0194      	lsls	r4, r2, #6
 8002642:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002646:	018b      	lsls	r3, r1, #6
 8002648:	1a5b      	subs	r3, r3, r1
 800264a:	eb64 0402 	sbc.w	r4, r4, r2
 800264e:	f04f 0100 	mov.w	r1, #0
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	00e2      	lsls	r2, r4, #3
 8002658:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800265c:	00d9      	lsls	r1, r3, #3
 800265e:	460b      	mov	r3, r1
 8002660:	4614      	mov	r4, r2
 8002662:	195b      	adds	r3, r3, r5
 8002664:	eb44 0406 	adc.w	r4, r4, r6
 8002668:	f04f 0100 	mov.w	r1, #0
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	02a2      	lsls	r2, r4, #10
 8002672:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002676:	0299      	lsls	r1, r3, #10
 8002678:	460b      	mov	r3, r1
 800267a:	4614      	mov	r4, r2
 800267c:	4618      	mov	r0, r3
 800267e:	4621      	mov	r1, r4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f04f 0400 	mov.w	r4, #0
 8002686:	461a      	mov	r2, r3
 8002688:	4623      	mov	r3, r4
 800268a:	f7fd fe09 	bl	80002a0 <__aeabi_uldivmod>
 800268e:	4603      	mov	r3, r0
 8002690:	460c      	mov	r4, r1
 8002692:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	3301      	adds	r3, #1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	60bb      	str	r3, [r7, #8]
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026b2:	60bb      	str	r3, [r7, #8]
      break;
 80026b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b6:	68bb      	ldr	r3, [r7, #8]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026c0:	40023800 	.word	0x40023800
 80026c4:	00f42400 	.word	0x00f42400
 80026c8:	007a1200 	.word	0x007a1200

080026cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000014 	.word	0x20000014

080026e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026e8:	f7ff fff0 	bl	80026cc <HAL_RCC_GetHCLKFreq>
 80026ec:	4601      	mov	r1, r0
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	0a9b      	lsrs	r3, r3, #10
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	4a03      	ldr	r2, [pc, #12]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40023800 	.word	0x40023800
 8002708:	080122d8 	.word	0x080122d8

0800270c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002710:	f7ff ffdc 	bl	80026cc <HAL_RCC_GetHCLKFreq>
 8002714:	4601      	mov	r1, r0
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0b5b      	lsrs	r3, r3, #13
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4a03      	ldr	r2, [pc, #12]	; (8002730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002722:	5cd3      	ldrb	r3, [r2, r3]
 8002724:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40023800 	.word	0x40023800
 8002730:	080122d8 	.word	0x080122d8

08002734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e03f      	b.n	80027c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f00c f8ae 	bl	800e8bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2224      	movs	r2, #36	; 0x24
 8002764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f90b 	bl	8002994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800278c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800279c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b088      	sub	sp, #32
 80027d2:	af02      	add	r7, sp, #8
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	f040 8083 	bne.w	80028f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_UART_Transmit+0x2e>
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e07b      	b.n	80028f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_UART_Transmit+0x40>
 800280a:	2302      	movs	r3, #2
 800280c:	e074      	b.n	80028f8 <HAL_UART_Transmit+0x12a>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2221      	movs	r2, #33	; 0x21
 8002820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002824:	f7fd ff22 	bl	800066c <HAL_GetTick>
 8002828:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	88fa      	ldrh	r2, [r7, #6]
 800282e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002836:	e042      	b.n	80028be <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284e:	d122      	bne.n	8002896 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2200      	movs	r2, #0
 8002858:	2180      	movs	r1, #128	; 0x80
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f850 	bl	8002900 <UART_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e046      	b.n	80028f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800287c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3302      	adds	r3, #2
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	e017      	b.n	80028be <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3301      	adds	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	e013      	b.n	80028be <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2200      	movs	r2, #0
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f82d 	bl	8002900 <UART_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e023      	b.n	80028f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	60ba      	str	r2, [r7, #8]
 80028b6:	781a      	ldrb	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1b7      	bne.n	8002838 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2200      	movs	r2, #0
 80028d0:	2140      	movs	r1, #64	; 0x40
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f814 	bl	8002900 <UART_WaitOnFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e00a      	b.n	80028f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
  }
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002910:	e02c      	b.n	800296c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d028      	beq.n	800296c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <UART_WaitOnFlagUntilTimeout+0x30>
 8002920:	f7fd fea4 	bl	800066c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	429a      	cmp	r2, r3
 800292e:	d21d      	bcs.n	800296c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800293e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e00f      	b.n	800298c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4013      	ands	r3, r2
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	429a      	cmp	r2, r3
 8002988:	d0c3      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002994:	b5b0      	push	{r4, r5, r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80029d4:	f023 030c 	bic.w	r3, r3, #12
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	68f9      	ldr	r1, [r7, #12]
 80029de:	430b      	orrs	r3, r1
 80029e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a00:	f040 80e4 	bne.w	8002bcc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4aab      	ldr	r2, [pc, #684]	; (8002cb8 <UART_SetConfig+0x324>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <UART_SetConfig+0x84>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4aaa      	ldr	r2, [pc, #680]	; (8002cbc <UART_SetConfig+0x328>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d16c      	bne.n	8002af2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a18:	f7ff fe78 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009a      	lsls	r2, r3, #2
 8002a26:	441a      	add	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4aa3      	ldr	r2, [pc, #652]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	011c      	lsls	r4, r3, #4
 8002a3c:	f7ff fe66 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	009a      	lsls	r2, r3, #2
 8002a4a:	441a      	add	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a56:	f7ff fe59 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009a      	lsls	r2, r3, #2
 8002a64:	441a      	add	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	4a93      	ldr	r2, [pc, #588]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2264      	movs	r2, #100	; 0x64
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	1aeb      	subs	r3, r5, r3
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	3332      	adds	r3, #50	; 0x32
 8002a84:	4a8e      	ldr	r2, [pc, #568]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a92:	441c      	add	r4, r3
 8002a94:	f7ff fe3a 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009a      	lsls	r2, r3, #2
 8002aa2:	441a      	add	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fbb2 f5f3 	udiv	r5, r2, r3
 8002aae:	f7ff fe2d 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009a      	lsls	r2, r3, #2
 8002abc:	441a      	add	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	4a7d      	ldr	r2, [pc, #500]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2264      	movs	r2, #100	; 0x64
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	1aeb      	subs	r3, r5, r3
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	3332      	adds	r3, #50	; 0x32
 8002adc:	4a78      	ldr	r2, [pc, #480]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	f003 0207 	and.w	r2, r3, #7
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4422      	add	r2, r4
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	e154      	b.n	8002d9c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002af2:	f7ff fdf7 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8002af6:	4602      	mov	r2, r0
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	009a      	lsls	r2, r3, #2
 8002b00:	441a      	add	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0c:	4a6c      	ldr	r2, [pc, #432]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	011c      	lsls	r4, r3, #4
 8002b16:	f7ff fde5 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	009a      	lsls	r2, r3, #2
 8002b24:	441a      	add	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b30:	f7ff fdd8 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009a      	lsls	r2, r3, #2
 8002b3e:	441a      	add	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	4a5d      	ldr	r2, [pc, #372]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	2264      	movs	r2, #100	; 0x64
 8002b54:	fb02 f303 	mul.w	r3, r2, r3
 8002b58:	1aeb      	subs	r3, r5, r3
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	3332      	adds	r3, #50	; 0x32
 8002b5e:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b6c:	441c      	add	r4, r3
 8002b6e:	f7ff fdb9 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8002b72:	4602      	mov	r2, r0
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	009a      	lsls	r2, r3, #2
 8002b7c:	441a      	add	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b88:	f7ff fdac 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009a      	lsls	r2, r3, #2
 8002b96:	441a      	add	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	4a47      	ldr	r2, [pc, #284]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	2264      	movs	r2, #100	; 0x64
 8002bac:	fb02 f303 	mul.w	r3, r2, r3
 8002bb0:	1aeb      	subs	r3, r5, r3
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	3332      	adds	r3, #50	; 0x32
 8002bb6:	4a42      	ldr	r2, [pc, #264]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	f003 0207 	and.w	r2, r3, #7
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4422      	add	r2, r4
 8002bc8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002bca:	e0e7      	b.n	8002d9c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a39      	ldr	r2, [pc, #228]	; (8002cb8 <UART_SetConfig+0x324>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <UART_SetConfig+0x24c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a38      	ldr	r2, [pc, #224]	; (8002cbc <UART_SetConfig+0x328>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d171      	bne.n	8002cc4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002be0:	f7ff fd94 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	009a      	lsls	r2, r3, #2
 8002bee:	441a      	add	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	4a31      	ldr	r2, [pc, #196]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	011c      	lsls	r4, r3, #4
 8002c04:	f7ff fd82 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	009a      	lsls	r2, r3, #2
 8002c12:	441a      	add	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c1e:	f7ff fd75 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8002c22:	4602      	mov	r2, r0
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009a      	lsls	r2, r3, #2
 8002c2c:	441a      	add	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	4a21      	ldr	r2, [pc, #132]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2264      	movs	r2, #100	; 0x64
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	1aeb      	subs	r3, r5, r3
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	3332      	adds	r3, #50	; 0x32
 8002c4c:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c58:	441c      	add	r4, r3
 8002c5a:	f7ff fd57 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	009a      	lsls	r2, r3, #2
 8002c68:	441a      	add	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c74:	f7ff fd4a 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	009a      	lsls	r2, r3, #2
 8002c82:	441a      	add	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	2264      	movs	r2, #100	; 0x64
 8002c98:	fb02 f303 	mul.w	r3, r2, r3
 8002c9c:	1aeb      	subs	r3, r5, r3
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	3332      	adds	r3, #50	; 0x32
 8002ca2:	4a07      	ldr	r2, [pc, #28]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4422      	add	r2, r4
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	e071      	b.n	8002d9c <UART_SetConfig+0x408>
 8002cb8:	40011000 	.word	0x40011000
 8002cbc:	40011400 	.word	0x40011400
 8002cc0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002cc4:	f7ff fd0e 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009a      	lsls	r2, r3, #2
 8002cd2:	441a      	add	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	4a31      	ldr	r2, [pc, #196]	; (8002da4 <UART_SetConfig+0x410>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	011c      	lsls	r4, r3, #4
 8002ce8:	f7ff fcfc 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009a      	lsls	r2, r3, #2
 8002cf6:	441a      	add	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d02:	f7ff fcef 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8002d06:	4602      	mov	r2, r0
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009a      	lsls	r2, r3, #2
 8002d10:	441a      	add	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	4a21      	ldr	r2, [pc, #132]	; (8002da4 <UART_SetConfig+0x410>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2264      	movs	r2, #100	; 0x64
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	1aeb      	subs	r3, r5, r3
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	3332      	adds	r3, #50	; 0x32
 8002d30:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <UART_SetConfig+0x410>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3c:	441c      	add	r4, r3
 8002d3e:	f7ff fcd1 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009a      	lsls	r2, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d58:	f7ff fcc4 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	009a      	lsls	r2, r3, #2
 8002d66:	441a      	add	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d72:	4a0c      	ldr	r2, [pc, #48]	; (8002da4 <UART_SetConfig+0x410>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	2264      	movs	r2, #100	; 0x64
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	1aeb      	subs	r3, r5, r3
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	3332      	adds	r3, #50	; 0x32
 8002d86:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <UART_SetConfig+0x410>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	f003 020f 	and.w	r2, r3, #15
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4422      	add	r2, r4
 8002d98:	609a      	str	r2, [r3, #8]
}
 8002d9a:	e7ff      	b.n	8002d9c <UART_SetConfig+0x408>
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bdb0      	pop	{r4, r5, r7, pc}
 8002da4:	51eb851f 	.word	0x51eb851f

08002da8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002da8:	b084      	sub	sp, #16
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	f107 001c 	add.w	r0, r7, #28
 8002db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d122      	bne.n	8002e06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa5c 	bl	80032b8 <USB_CoreReset>
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	e01a      	b.n	8002e3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fa50 	bl	80032b8 <USB_CoreReset>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8002e2e:	e005      	b.n	8002e3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10b      	bne.n	8002e5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f043 0206 	orr.w	r2, r3, #6
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f043 0220 	orr.w	r2, r3, #32
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e66:	b004      	add	sp, #16
 8002e68:	4770      	bx	lr

08002e6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f023 0201 	bic.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d106      	bne.n	8002eb8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	e00b      	b.n	8002ed0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	e001      	b.n	8002ed0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e003      	b.n	8002ed8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002ed0:	2032      	movs	r0, #50	; 0x32
 8002ed2:	f7fd fbd7 	bl	8000684 <HAL_Delay>

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	e009      	b.n	8002f14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	3340      	adds	r3, #64	; 0x40
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	3301      	adds	r3, #1
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b0e      	cmp	r3, #14
 8002f18:	d9f2      	bls.n	8002f00 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d112      	bne.n	8002f46 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
 8002f44:	e00b      	b.n	8002f5e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f64:	461a      	mov	r2, r3
 8002f66:	2300      	movs	r3, #0
 8002f68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f70:	4619      	mov	r1, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f78:	461a      	mov	r2, r3
 8002f7a:	680b      	ldr	r3, [r1, #0]
 8002f7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d10c      	bne.n	8002f9e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d104      	bne.n	8002f94 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f961 	bl	8003254 <USB_SetDevSpeed>
 8002f92:	e008      	b.n	8002fa6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f94:	2101      	movs	r1, #1
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f95c 	bl	8003254 <USB_SetDevSpeed>
 8002f9c:	e003      	b.n	8002fa6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f9e:	2103      	movs	r1, #3
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f957 	bl	8003254 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002fa6:	2110      	movs	r1, #16
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f90b 	bl	80031c4 <USB_FlushTxFifo>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f929 	bl	8003210 <USB_FlushRxFifo>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2300      	movs	r3, #0
 8002fde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	e043      	b.n	800307a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003008:	d118      	bne.n	800303c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301c:	461a      	mov	r2, r3
 800301e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	e013      	b.n	800304e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003032:	461a      	mov	r2, r3
 8003034:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e008      	b.n	800304e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003048:	461a      	mov	r2, r3
 800304a:	2300      	movs	r3, #0
 800304c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305a:	461a      	mov	r2, r3
 800305c:	2300      	movs	r3, #0
 800305e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306c:	461a      	mov	r2, r3
 800306e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003072:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	3301      	adds	r3, #1
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	429a      	cmp	r2, r3
 8003080:	d3b7      	bcc.n	8002ff2 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	e043      	b.n	8003110 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800309a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800309e:	d118      	bne.n	80030d2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b2:	461a      	mov	r2, r3
 80030b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e013      	b.n	80030e4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c8:	461a      	mov	r2, r3
 80030ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	e008      	b.n	80030e4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030de:	461a      	mov	r2, r3
 80030e0:	2300      	movs	r3, #0
 80030e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f0:	461a      	mov	r2, r3
 80030f2:	2300      	movs	r3, #0
 80030f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003102:	461a      	mov	r2, r3
 8003104:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003108:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	3301      	adds	r3, #1
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	429a      	cmp	r2, r3
 8003116:	d3b7      	bcc.n	8003088 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800312a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	2b01      	cmp	r3, #1
 8003130:	d111      	bne.n	8003156 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003138:	461a      	mov	r2, r3
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <USB_DevInit+0x2dc>)
 800313c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	f043 0303 	orr.w	r3, r3, #3
 8003154:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003162:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	2b00      	cmp	r3, #0
 8003168:	d105      	bne.n	8003176 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f043 0210 	orr.w	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <USB_DevInit+0x2e0>)
 800317c:	4313      	orrs	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f043 0208 	orr.w	r2, r3, #8
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d107      	bne.n	80031aa <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031b6:	b004      	add	sp, #16
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	00800100 	.word	0x00800100
 80031c0:	803c3800 	.word	0x803c3800

080031c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	019b      	lsls	r3, r3, #6
 80031d6:	f043 0220 	orr.w	r2, r3, #32
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3301      	adds	r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <USB_FlushTxFifo+0x48>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d901      	bls.n	80031f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e006      	b.n	80031fe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d0f0      	beq.n	80031de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	00030d40 	.word	0x00030d40

08003210 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2210      	movs	r2, #16
 8003220:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3301      	adds	r3, #1
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <USB_FlushRxFifo+0x40>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d901      	bls.n	8003234 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e006      	b.n	8003242 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b10      	cmp	r3, #16
 800323e:	d0f0      	beq.n	8003222 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	00030d40 	.word	0x00030d40

08003254 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	68f9      	ldr	r1, [r7, #12]
 8003270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003274:	4313      	orrs	r3, r2
 8003276:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80032a6:	2003      	movs	r0, #3
 80032a8:	f7fd f9ec 	bl	8000684 <HAL_Delay>

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3301      	adds	r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a13      	ldr	r2, [pc, #76]	; (800331c <USB_CoreReset+0x64>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e01b      	b.n	800330e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	daf2      	bge.n	80032c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f043 0201 	orr.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3301      	adds	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <USB_CoreReset+0x64>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e006      	b.n	800330e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d0f0      	beq.n	80032ee <USB_CoreReset+0x36>

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	00030d40 	.word	0x00030d40

08003320 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	ba5b      	rev16	r3, r3
 800332e:	b29b      	uxth	r3, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	061a      	lsls	r2, r3, #24
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	0e1b      	lsrs	r3, r3, #24
 8003360:	4313      	orrs	r3, r2
}
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003378:	f000 f8a6 	bl	80034c8 <mem_init>
  memp_init();
 800337c:	f000 fb3a 	bl	80039f4 <memp_init>
  pbuf_init();
  netif_init();
 8003380:	f000 fbf2 	bl	8003b68 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003384:	f005 ffac 	bl	80092e0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003388:	f001 fb4c 	bl	8004a24 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800338c:	f005 fedc 	bl	8009148 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80033a0:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <plug_holes+0x10c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d206      	bcs.n	80033b8 <plug_holes+0x20>
 80033aa:	4b3f      	ldr	r3, [pc, #252]	; (80034a8 <plug_holes+0x110>)
 80033ac:	f240 125d 	movw	r2, #349	; 0x15d
 80033b0:	493e      	ldr	r1, [pc, #248]	; (80034ac <plug_holes+0x114>)
 80033b2:	483f      	ldr	r0, [pc, #252]	; (80034b0 <plug_holes+0x118>)
 80033b4:	f00b fce8 	bl	800ed88 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80033b8:	4b3e      	ldr	r3, [pc, #248]	; (80034b4 <plug_holes+0x11c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d306      	bcc.n	80033d0 <plug_holes+0x38>
 80033c2:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <plug_holes+0x110>)
 80033c4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80033c8:	493b      	ldr	r1, [pc, #236]	; (80034b8 <plug_holes+0x120>)
 80033ca:	4839      	ldr	r0, [pc, #228]	; (80034b0 <plug_holes+0x118>)
 80033cc:	f00b fcdc 	bl	800ed88 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	791b      	ldrb	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d006      	beq.n	80033e6 <plug_holes+0x4e>
 80033d8:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <plug_holes+0x110>)
 80033da:	f240 125f 	movw	r2, #351	; 0x15f
 80033de:	4937      	ldr	r1, [pc, #220]	; (80034bc <plug_holes+0x124>)
 80033e0:	4833      	ldr	r0, [pc, #204]	; (80034b0 <plug_holes+0x118>)
 80033e2:	f00b fcd1 	bl	800ed88 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80033ee:	d906      	bls.n	80033fe <plug_holes+0x66>
 80033f0:	4b2d      	ldr	r3, [pc, #180]	; (80034a8 <plug_holes+0x110>)
 80033f2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80033f6:	4932      	ldr	r1, [pc, #200]	; (80034c0 <plug_holes+0x128>)
 80033f8:	482d      	ldr	r0, [pc, #180]	; (80034b0 <plug_holes+0x118>)
 80033fa:	f00b fcc5 	bl	800ed88 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80033fe:	4b29      	ldr	r3, [pc, #164]	; (80034a4 <plug_holes+0x10c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	8812      	ldrh	r2, [r2, #0]
 8003406:	4413      	add	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	429a      	cmp	r2, r3
 8003410:	d01f      	beq.n	8003452 <plug_holes+0xba>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	791b      	ldrb	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11b      	bne.n	8003452 <plug_holes+0xba>
 800341a:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <plug_holes+0x11c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	429a      	cmp	r2, r3
 8003422:	d016      	beq.n	8003452 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003424:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <plug_holes+0x12c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	429a      	cmp	r2, r3
 800342c:	d102      	bne.n	8003434 <plug_holes+0x9c>
      lfree = mem;
 800342e:	4a25      	ldr	r2, [pc, #148]	; (80034c4 <plug_holes+0x12c>)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	881a      	ldrh	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a19      	ldr	r2, [pc, #100]	; (80034a4 <plug_holes+0x10c>)
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	1a99      	subs	r1, r3, r2
 8003444:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <plug_holes+0x10c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	8812      	ldrh	r2, [r2, #0]
 800344c:	4413      	add	r3, r2
 800344e:	b28a      	uxth	r2, r1
 8003450:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8003452:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <plug_holes+0x10c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	8852      	ldrh	r2, [r2, #2]
 800345a:	4413      	add	r3, r2
 800345c:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d01a      	beq.n	800349c <plug_holes+0x104>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	791b      	ldrb	r3, [r3, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d116      	bne.n	800349c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <plug_holes+0x12c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	d102      	bne.n	800347e <plug_holes+0xe6>
      lfree = pmem;
 8003478:	4a12      	ldr	r2, [pc, #72]	; (80034c4 <plug_holes+0x12c>)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	881a      	ldrh	r2, [r3, #0]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4a06      	ldr	r2, [pc, #24]	; (80034a4 <plug_holes+0x10c>)
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	1a99      	subs	r1, r3, r2
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <plug_holes+0x10c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	8812      	ldrh	r2, [r2, #0]
 8003496:	4413      	add	r3, r2
 8003498:	b28a      	uxth	r2, r1
 800349a:	805a      	strh	r2, [r3, #2]
  }
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000098 	.word	0x20000098
 80034a8:	0800ff54 	.word	0x0800ff54
 80034ac:	0800ff84 	.word	0x0800ff84
 80034b0:	0800ff9c 	.word	0x0800ff9c
 80034b4:	2000009c 	.word	0x2000009c
 80034b8:	0800ffc4 	.word	0x0800ffc4
 80034bc:	0800ffe0 	.word	0x0800ffe0
 80034c0:	0800fffc 	.word	0x0800fffc
 80034c4:	200000a0 	.word	0x200000a0

080034c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80034ce:	4b19      	ldr	r3, [pc, #100]	; (8003534 <mem_init+0x6c>)
 80034d0:	3303      	adds	r3, #3
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b17      	ldr	r3, [pc, #92]	; (8003538 <mem_init+0x70>)
 80034da:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <mem_init+0x70>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80034e8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80034f6:	4b10      	ldr	r3, [pc, #64]	; (8003538 <mem_init+0x70>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80034fe:	4a0f      	ldr	r2, [pc, #60]	; (800353c <mem_init+0x74>)
 8003500:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003502:	4b0e      	ldr	r3, [pc, #56]	; (800353c <mem_init+0x74>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2201      	movs	r2, #1
 8003508:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800350a:	4b0c      	ldr	r3, [pc, #48]	; (800353c <mem_init+0x74>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003512:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <mem_init+0x74>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800351c:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <mem_init+0x70>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a07      	ldr	r2, [pc, #28]	; (8003540 <mem_init+0x78>)
 8003524:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000240 	.word	0x20000240
 8003538:	20000098 	.word	0x20000098
 800353c:	2000009c 	.word	0x2000009c
 8003540:	200000a0 	.word	0x200000a0

08003544 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d043      	beq.n	80035da <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d006      	beq.n	800356a <mem_free+0x26>
 800355c:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <mem_free+0xa4>)
 800355e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8003562:	4922      	ldr	r1, [pc, #136]	; (80035ec <mem_free+0xa8>)
 8003564:	4822      	ldr	r0, [pc, #136]	; (80035f0 <mem_free+0xac>)
 8003566:	f00b fc0f 	bl	800ed88 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <mem_free+0xb0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	429a      	cmp	r2, r3
 8003572:	d304      	bcc.n	800357e <mem_free+0x3a>
 8003574:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <mem_free+0xb4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	429a      	cmp	r2, r3
 800357c:	d306      	bcc.n	800358c <mem_free+0x48>
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <mem_free+0xa4>)
 8003580:	f240 12af 	movw	r2, #431	; 0x1af
 8003584:	491d      	ldr	r1, [pc, #116]	; (80035fc <mem_free+0xb8>)
 8003586:	481a      	ldr	r0, [pc, #104]	; (80035f0 <mem_free+0xac>)
 8003588:	f00b fbfe 	bl	800ed88 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <mem_free+0xb0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	429a      	cmp	r2, r3
 8003594:	d323      	bcc.n	80035de <mem_free+0x9a>
 8003596:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <mem_free+0xb4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	d21e      	bcs.n	80035de <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3b08      	subs	r3, #8
 80035a4:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	791b      	ldrb	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <mem_free+0x78>
 80035ae:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <mem_free+0xa4>)
 80035b0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80035b4:	4912      	ldr	r1, [pc, #72]	; (8003600 <mem_free+0xbc>)
 80035b6:	480e      	ldr	r0, [pc, #56]	; (80035f0 <mem_free+0xac>)
 80035b8:	f00b fbe6 	bl	800ed88 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <mem_free+0xc0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d202      	bcs.n	80035d2 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80035cc:	4a0d      	ldr	r2, [pc, #52]	; (8003604 <mem_free+0xc0>)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff fee0 	bl	8003398 <plug_holes>
 80035d8:	e002      	b.n	80035e0 <mem_free+0x9c>
    return;
 80035da:	bf00      	nop
 80035dc:	e000      	b.n	80035e0 <mem_free+0x9c>
    return;
 80035de:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	0800ff54 	.word	0x0800ff54
 80035ec:	08010028 	.word	0x08010028
 80035f0:	0800ff9c 	.word	0x0800ff9c
 80035f4:	20000098 	.word	0x20000098
 80035f8:	2000009c 	.word	0x2000009c
 80035fc:	0801004c 	.word	0x0801004c
 8003600:	08010064 	.word	0x08010064
 8003604:	200000a0 	.word	0x200000a0

08003608 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	3303      	adds	r3, #3
 8003618:	b29b      	uxth	r3, r3
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8003620:	887b      	ldrh	r3, [r7, #2]
 8003622:	2b0b      	cmp	r3, #11
 8003624:	d801      	bhi.n	800362a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003626:	230c      	movs	r3, #12
 8003628:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800362a:	887b      	ldrh	r3, [r7, #2]
 800362c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003630:	d901      	bls.n	8003636 <mem_trim+0x2e>
    return NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	e0b1      	b.n	800379a <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003636:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <mem_trim+0x19c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	d304      	bcc.n	800364a <mem_trim+0x42>
 8003640:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <mem_trim+0x1a0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	d306      	bcc.n	8003658 <mem_trim+0x50>
 800364a:	4b58      	ldr	r3, [pc, #352]	; (80037ac <mem_trim+0x1a4>)
 800364c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003650:	4957      	ldr	r1, [pc, #348]	; (80037b0 <mem_trim+0x1a8>)
 8003652:	4858      	ldr	r0, [pc, #352]	; (80037b4 <mem_trim+0x1ac>)
 8003654:	f00b fb98 	bl	800ed88 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003658:	4b52      	ldr	r3, [pc, #328]	; (80037a4 <mem_trim+0x19c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	429a      	cmp	r2, r3
 8003660:	d304      	bcc.n	800366c <mem_trim+0x64>
 8003662:	4b51      	ldr	r3, [pc, #324]	; (80037a8 <mem_trim+0x1a0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d301      	bcc.n	8003670 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	e094      	b.n	800379a <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b08      	subs	r3, #8
 8003674:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	4a4a      	ldr	r2, [pc, #296]	; (80037a4 <mem_trim+0x19c>)
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	881a      	ldrh	r2, [r3, #0]
 8003684:	8a7b      	ldrh	r3, [r7, #18]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b08      	subs	r3, #8
 800368c:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	8a3b      	ldrh	r3, [r7, #16]
 8003692:	429a      	cmp	r2, r3
 8003694:	d906      	bls.n	80036a4 <mem_trim+0x9c>
 8003696:	4b45      	ldr	r3, [pc, #276]	; (80037ac <mem_trim+0x1a4>)
 8003698:	f240 2206 	movw	r2, #518	; 0x206
 800369c:	4946      	ldr	r1, [pc, #280]	; (80037b8 <mem_trim+0x1b0>)
 800369e:	4845      	ldr	r0, [pc, #276]	; (80037b4 <mem_trim+0x1ac>)
 80036a0:	f00b fb72 	bl	800ed88 <iprintf>
  if (newsize > size) {
 80036a4:	887a      	ldrh	r2, [r7, #2]
 80036a6:	8a3b      	ldrh	r3, [r7, #16]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d901      	bls.n	80036b0 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e074      	b.n	800379a <mem_trim+0x192>
  }
  if (newsize == size) {
 80036b0:	887a      	ldrh	r2, [r7, #2]
 80036b2:	8a3b      	ldrh	r3, [r7, #16]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d101      	bne.n	80036bc <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	e06e      	b.n	800379a <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80036bc:	4b39      	ldr	r3, [pc, #228]	; (80037a4 <mem_trim+0x19c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	8812      	ldrh	r2, [r2, #0]
 80036c4:	4413      	add	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	791b      	ldrb	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d131      	bne.n	8003734 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80036d6:	8a7a      	ldrh	r2, [r7, #18]
 80036d8:	887b      	ldrh	r3, [r7, #2]
 80036da:	4413      	add	r3, r2
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3308      	adds	r3, #8
 80036e0:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <mem_trim+0x1b4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d105      	bne.n	80036f8 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80036ec:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <mem_trim+0x19c>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	897b      	ldrh	r3, [r7, #10]
 80036f2:	4413      	add	r3, r2
 80036f4:	4a31      	ldr	r2, [pc, #196]	; (80037bc <mem_trim+0x1b4>)
 80036f6:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80036f8:	4b2a      	ldr	r3, [pc, #168]	; (80037a4 <mem_trim+0x19c>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	897b      	ldrh	r3, [r7, #10]
 80036fe:	4413      	add	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	893a      	ldrh	r2, [r7, #8]
 800370c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8a7a      	ldrh	r2, [r7, #18]
 8003712:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	897a      	ldrh	r2, [r7, #10]
 8003718:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003722:	d039      	beq.n	8003798 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003724:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <mem_trim+0x19c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	8812      	ldrh	r2, [r2, #0]
 800372c:	4413      	add	r3, r2
 800372e:	897a      	ldrh	r2, [r7, #10]
 8003730:	805a      	strh	r2, [r3, #2]
 8003732:	e031      	b.n	8003798 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	f103 0214 	add.w	r2, r3, #20
 800373a:	8a3b      	ldrh	r3, [r7, #16]
 800373c:	429a      	cmp	r2, r3
 800373e:	d82b      	bhi.n	8003798 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003740:	8a7a      	ldrh	r2, [r7, #18]
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	4413      	add	r3, r2
 8003746:	b29b      	uxth	r3, r3
 8003748:	3308      	adds	r3, #8
 800374a:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800374c:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <mem_trim+0x19c>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	897b      	ldrh	r3, [r7, #10]
 8003752:	4413      	add	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8003756:	4b19      	ldr	r3, [pc, #100]	; (80037bc <mem_trim+0x1b4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	429a      	cmp	r2, r3
 800375e:	d202      	bcs.n	8003766 <mem_trim+0x15e>
      lfree = mem2;
 8003760:	4a16      	ldr	r2, [pc, #88]	; (80037bc <mem_trim+0x1b4>)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	881a      	ldrh	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8a7a      	ldrh	r2, [r7, #18]
 8003778:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	897a      	ldrh	r2, [r7, #10]
 800377e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003788:	d006      	beq.n	8003798 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <mem_trim+0x19c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	8812      	ldrh	r2, [r2, #0]
 8003792:	4413      	add	r3, r2
 8003794:	897a      	ldrh	r2, [r7, #10]
 8003796:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003798:	687b      	ldr	r3, [r7, #4]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000098 	.word	0x20000098
 80037a8:	2000009c 	.word	0x2000009c
 80037ac:	0800ff54 	.word	0x0800ff54
 80037b0:	08010078 	.word	0x08010078
 80037b4:	0800ff9c 	.word	0x0800ff9c
 80037b8:	08010090 	.word	0x08010090
 80037bc:	200000a0 	.word	0x200000a0

080037c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <mem_malloc+0x14>
    return NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e0c8      	b.n	8003966 <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	3303      	adds	r3, #3
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	2b0b      	cmp	r3, #11
 80037e4:	d801      	bhi.n	80037ea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80037e6:	230c      	movs	r3, #12
 80037e8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80037f0:	d901      	bls.n	80037f6 <mem_malloc+0x36>
    return NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e0b7      	b.n	8003966 <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80037f6:	4b5e      	ldr	r3, [pc, #376]	; (8003970 <mem_malloc+0x1b0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	4b5d      	ldr	r3, [pc, #372]	; (8003974 <mem_malloc+0x1b4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	83fb      	strh	r3, [r7, #30]
 8003804:	e0a7      	b.n	8003956 <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8003806:	4b5b      	ldr	r3, [pc, #364]	; (8003974 <mem_malloc+0x1b4>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	8bfb      	ldrh	r3, [r7, #30]
 800380c:	4413      	add	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	791b      	ldrb	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	f040 8098 	bne.w	800394a <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	8bfb      	ldrh	r3, [r7, #30]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	f1a3 0208 	sub.w	r2, r3, #8
 8003828:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800382a:	429a      	cmp	r2, r3
 800382c:	f0c0 808d 	bcc.w	800394a <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	8bfb      	ldrh	r3, [r7, #30]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f1a3 0208 	sub.w	r2, r3, #8
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	3314      	adds	r3, #20
 8003842:	429a      	cmp	r2, r3
 8003844:	d327      	bcc.n	8003896 <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8003846:	8bfa      	ldrh	r2, [r7, #30]
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	4413      	add	r3, r2
 800384c:	b29b      	uxth	r3, r3
 800384e:	3308      	adds	r3, #8
 8003850:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8003852:	4b48      	ldr	r3, [pc, #288]	; (8003974 <mem_malloc+0x1b4>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	8a7b      	ldrh	r3, [r7, #18]
 8003858:	4413      	add	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	881a      	ldrh	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8bfa      	ldrh	r2, [r7, #30]
 800386e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	8a7a      	ldrh	r2, [r7, #18]
 8003874:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2201      	movs	r2, #1
 800387a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003884:	d00a      	beq.n	800389c <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003886:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <mem_malloc+0x1b4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	8812      	ldrh	r2, [r2, #0]
 800388e:	4413      	add	r3, r2
 8003890:	8a7a      	ldrh	r2, [r7, #18]
 8003892:	805a      	strh	r2, [r3, #2]
 8003894:	e002      	b.n	800389c <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2201      	movs	r2, #1
 800389a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800389c:	4b34      	ldr	r3, [pc, #208]	; (8003970 <mem_malloc+0x1b0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d127      	bne.n	80038f6 <mem_malloc+0x136>
          struct mem *cur = lfree;
 80038a6:	4b32      	ldr	r3, [pc, #200]	; (8003970 <mem_malloc+0x1b0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80038ac:	e005      	b.n	80038ba <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80038ae:	4b31      	ldr	r3, [pc, #196]	; (8003974 <mem_malloc+0x1b4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	8812      	ldrh	r2, [r2, #0]
 80038b6:	4413      	add	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	791b      	ldrb	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <mem_malloc+0x10c>
 80038c2:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <mem_malloc+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1f0      	bne.n	80038ae <mem_malloc+0xee>
          }
          lfree = cur;
 80038cc:	4a28      	ldr	r2, [pc, #160]	; (8003970 <mem_malloc+0x1b0>)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80038d2:	4b27      	ldr	r3, [pc, #156]	; (8003970 <mem_malloc+0x1b0>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4b28      	ldr	r3, [pc, #160]	; (8003978 <mem_malloc+0x1b8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d00b      	beq.n	80038f6 <mem_malloc+0x136>
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <mem_malloc+0x1b0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	791b      	ldrb	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d006      	beq.n	80038f6 <mem_malloc+0x136>
 80038e8:	4b24      	ldr	r3, [pc, #144]	; (800397c <mem_malloc+0x1bc>)
 80038ea:	f240 22cf 	movw	r2, #719	; 0x2cf
 80038ee:	4924      	ldr	r1, [pc, #144]	; (8003980 <mem_malloc+0x1c0>)
 80038f0:	4824      	ldr	r0, [pc, #144]	; (8003984 <mem_malloc+0x1c4>)
 80038f2:	f00b fa49 	bl	800ed88 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80038f6:	88fa      	ldrh	r2, [r7, #6]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4413      	add	r3, r2
 80038fc:	3308      	adds	r3, #8
 80038fe:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <mem_malloc+0x1b8>)
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	4293      	cmp	r3, r2
 8003904:	d906      	bls.n	8003914 <mem_malloc+0x154>
 8003906:	4b1d      	ldr	r3, [pc, #116]	; (800397c <mem_malloc+0x1bc>)
 8003908:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800390c:	491e      	ldr	r1, [pc, #120]	; (8003988 <mem_malloc+0x1c8>)
 800390e:	481d      	ldr	r0, [pc, #116]	; (8003984 <mem_malloc+0x1c4>)
 8003910:	f00b fa3a 	bl	800ed88 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d006      	beq.n	800392c <mem_malloc+0x16c>
 800391e:	4b17      	ldr	r3, [pc, #92]	; (800397c <mem_malloc+0x1bc>)
 8003920:	f240 22d6 	movw	r2, #726	; 0x2d6
 8003924:	4919      	ldr	r1, [pc, #100]	; (800398c <mem_malloc+0x1cc>)
 8003926:	4817      	ldr	r0, [pc, #92]	; (8003984 <mem_malloc+0x1c4>)
 8003928:	f00b fa2e 	bl	800ed88 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d006      	beq.n	8003944 <mem_malloc+0x184>
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <mem_malloc+0x1bc>)
 8003938:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800393c:	4914      	ldr	r1, [pc, #80]	; (8003990 <mem_malloc+0x1d0>)
 800393e:	4811      	ldr	r0, [pc, #68]	; (8003984 <mem_malloc+0x1c4>)
 8003940:	f00b fa22 	bl	800ed88 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3308      	adds	r3, #8
 8003948:	e00d      	b.n	8003966 <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <mem_malloc+0x1b4>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	8bfb      	ldrh	r3, [r7, #30]
 8003950:	4413      	add	r3, r2
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003956:	8bfa      	ldrh	r2, [r7, #30]
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800395e:	429a      	cmp	r2, r3
 8003960:	f4ff af51 	bcc.w	8003806 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	200000a0 	.word	0x200000a0
 8003974:	20000098 	.word	0x20000098
 8003978:	2000009c 	.word	0x2000009c
 800397c:	0800ff54 	.word	0x0800ff54
 8003980:	080100b0 	.word	0x080100b0
 8003984:	0800ff9c 	.word	0x0800ff9c
 8003988:	080100cc 	.word	0x080100cc
 800398c:	080100fc 	.word	0x080100fc
 8003990:	0801012c 	.word	0x0801012c

08003994 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	3303      	adds	r3, #3
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	e011      	b.n	80039da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4413      	add	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3301      	adds	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	885b      	ldrh	r3, [r3, #2]
 80039de:	461a      	mov	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4293      	cmp	r3, r2
 80039e4:	dbe7      	blt.n	80039b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80039fa:	2300      	movs	r3, #0
 80039fc:	80fb      	strh	r3, [r7, #6]
 80039fe:	e009      	b.n	8003a14 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <memp_init+0x30>)
 8003a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff ffc3 	bl	8003994 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	3301      	adds	r3, #1
 8003a12:	80fb      	strh	r3, [r7, #6]
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d9f2      	bls.n	8003a00 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	0801223c 	.word	0x0801223c

08003a28 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d012      	beq.n	8003a64 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <do_memp_malloc_pool+0x38>
 8003a52:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <do_memp_malloc_pool+0x48>)
 8003a54:	f240 1249 	movw	r2, #329	; 0x149
 8003a58:	4906      	ldr	r1, [pc, #24]	; (8003a74 <do_memp_malloc_pool+0x4c>)
 8003a5a:	4807      	ldr	r0, [pc, #28]	; (8003a78 <do_memp_malloc_pool+0x50>)
 8003a5c:	f00b f994 	bl	800ed88 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	e000      	b.n	8003a66 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	08010150 	.word	0x08010150
 8003a74:	08010180 	.word	0x08010180
 8003a78:	080101a4 	.word	0x080101a4

08003a7c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d908      	bls.n	8003a9e <memp_malloc+0x22>
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <memp_malloc+0x3c>)
 8003a8e:	f240 1287 	movw	r2, #391	; 0x187
 8003a92:	490a      	ldr	r1, [pc, #40]	; (8003abc <memp_malloc+0x40>)
 8003a94:	480a      	ldr	r0, [pc, #40]	; (8003ac0 <memp_malloc+0x44>)
 8003a96:	f00b f977 	bl	800ed88 <iprintf>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e008      	b.n	8003ab0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <memp_malloc+0x48>)
 8003aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ffbe 	bl	8003a28 <do_memp_malloc_pool>
 8003aac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	08010150 	.word	0x08010150
 8003abc:	080101e0 	.word	0x080101e0
 8003ac0:	080101a4 	.word	0x080101a4
 8003ac4:	0801223c 	.word	0x0801223c

08003ac8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d006      	beq.n	8003aea <do_memp_free_pool+0x22>
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <do_memp_free_pool+0x40>)
 8003ade:	f240 129d 	movw	r2, #413	; 0x19d
 8003ae2:	490a      	ldr	r1, [pc, #40]	; (8003b0c <do_memp_free_pool+0x44>)
 8003ae4:	480a      	ldr	r0, [pc, #40]	; (8003b10 <do_memp_free_pool+0x48>)
 8003ae6:	f00b f94f 	bl	800ed88 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	08010150 	.word	0x08010150
 8003b0c:	08010200 	.word	0x08010200
 8003b10:	080101a4 	.word	0x080101a4

08003b14 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	6039      	str	r1, [r7, #0]
 8003b1e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d907      	bls.n	8003b36 <memp_free+0x22>
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <memp_free+0x44>)
 8003b28:	f240 12db 	movw	r2, #475	; 0x1db
 8003b2c:	490b      	ldr	r1, [pc, #44]	; (8003b5c <memp_free+0x48>)
 8003b2e:	480c      	ldr	r0, [pc, #48]	; (8003b60 <memp_free+0x4c>)
 8003b30:	f00b f92a 	bl	800ed88 <iprintf>
 8003b34:	e00c      	b.n	8003b50 <memp_free+0x3c>

  if (mem == NULL) {
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <memp_free+0x50>)
 8003b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b44:	6839      	ldr	r1, [r7, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff ffbe 	bl	8003ac8 <do_memp_free_pool>
 8003b4c:	e000      	b.n	8003b50 <memp_free+0x3c>
    return;
 8003b4e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	08010150 	.word	0x08010150
 8003b5c:	08010220 	.word	0x08010220
 8003b60:	080101a4 	.word	0x080101a4
 8003b64:	0801223c 	.word	0x0801223c

08003b68 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d105      	bne.n	8003b98 <netif_add+0x20>
 8003b8c:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <netif_add+0xa4>)
 8003b8e:	22fb      	movs	r2, #251	; 0xfb
 8003b90:	4923      	ldr	r1, [pc, #140]	; (8003c20 <netif_add+0xa8>)
 8003b92:	4824      	ldr	r0, [pc, #144]	; (8003c24 <netif_add+0xac>)
 8003b94:	f00b f8f8 	bl	800ed88 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3320      	adds	r3, #32
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f00b f8dc 	bl	800ed78 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8003bce:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <netif_add+0xb0>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	b2d1      	uxtb	r1, r2
 8003bd6:	4a14      	ldr	r2, [pc, #80]	; (8003c28 <netif_add+0xb0>)
 8003bd8:	7011      	strb	r1, [r2, #0]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a3a      	ldr	r2, [r7, #32]
 8003be4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f81f 	bl	8003c30 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	4798      	blx	r3
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <netif_add+0x8a>
    return NULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e007      	b.n	8003c12 <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <netif_add+0xb4>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8003c0a:	4a08      	ldr	r2, [pc, #32]	; (8003c2c <netif_add+0xb4>)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8003c10:	68fb      	ldr	r3, [r7, #12]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	0801023c 	.word	0x0801023c
 8003c20:	08010270 	.word	0x08010270
 8003c24:	08010288 	.word	0x08010288
 8003c28:	200000c8 	.word	0x200000c8
 8003c2c:	20003768 	.word	0x20003768

08003c30 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <netif_set_addr+0x1c>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10c      	bne.n	8003c66 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f81a 	bl	8003c88 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f862 	bl	8003d20 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8003c5c:	6839      	ldr	r1, [r7, #0]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f84a 	bl	8003cf8 <netif_set_gw>
 8003c64:	e00b      	b.n	8003c7e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f859 	bl	8003d20 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8003c6e:	6839      	ldr	r1, [r7, #0]
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f841 	bl	8003cf8 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f805 	bl	8003c88 <netif_set_ipaddr>
  }
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <netif_set_ipaddr+0x18>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	e002      	b.n	8003ca6 <netif_set_ipaddr+0x1e>
 8003ca0:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <netif_set_ipaddr+0x6c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d01c      	beq.n	8003cec <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	f107 020c 	add.w	r2, r7, #12
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f002 f83f 	bl	8005d40 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	f107 020c 	add.w	r2, r7, #12
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f005 fe63 	bl	8009998 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <netif_set_ipaddr+0x56>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	e000      	b.n	8003ce0 <netif_set_ipaddr+0x58>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f861 	bl	8003dae <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	080122b0 	.word	0x080122b0

08003cf8 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <netif_set_gw+0x16>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	e000      	b.n	8003d10 <netif_set_gw+0x18>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <netif_set_netmask+0x16>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	e000      	b.n	8003d38 <netif_set_netmask+0x18>
 8003d36:	2300      	movs	r3, #0
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8003d50:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <netif_set_default+0x1c>)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	2000376c 	.word	0x2000376c

08003d68 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d113      	bne.n	8003da6 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8003d9e:	2103      	movs	r1, #3
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f804 	bl	8003dae <netif_issue_reports>
    }
  }
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d011      	beq.n	8003de8 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f008 fbc6 	bl	800c574 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d012      	beq.n	8003e2c <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f007 ff66 	bl	800bcf8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <pbuf_pool_is_empty+0x14>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8003e3e:	bf00      	nop
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	20003770 	.word	0x20003770

08003e4c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
 8003e56:	460b      	mov	r3, r1
 8003e58:	80bb      	strh	r3, [r7, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d81c      	bhi.n	8003e9e <pbuf_alloc+0x52>
 8003e64:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <pbuf_alloc+0x20>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003e81 	.word	0x08003e81
 8003e70:	08003e87 	.word	0x08003e87
 8003e74:	08003e8d 	.word	0x08003e8d
 8003e78:	08003e93 	.word	0x08003e93
 8003e7c:	08003e99 	.word	0x08003e99
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8003e80:	2336      	movs	r3, #54	; 0x36
 8003e82:	82fb      	strh	r3, [r7, #22]
    break;
 8003e84:	e014      	b.n	8003eb0 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8003e86:	2322      	movs	r3, #34	; 0x22
 8003e88:	82fb      	strh	r3, [r7, #22]
    break;
 8003e8a:	e011      	b.n	8003eb0 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8003e8c:	230e      	movs	r3, #14
 8003e8e:	82fb      	strh	r3, [r7, #22]
    break;
 8003e90:	e00e      	b.n	8003eb0 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8003e92:	2300      	movs	r3, #0
 8003e94:	82fb      	strh	r3, [r7, #22]
    break;
 8003e96:	e00b      	b.n	8003eb0 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	82fb      	strh	r3, [r7, #22]
    break;
 8003e9c:	e008      	b.n	8003eb0 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8003e9e:	4ba5      	ldr	r3, [pc, #660]	; (8004134 <pbuf_alloc+0x2e8>)
 8003ea0:	f44f 728b 	mov.w	r2, #278	; 0x116
 8003ea4:	49a4      	ldr	r1, [pc, #656]	; (8004138 <pbuf_alloc+0x2ec>)
 8003ea6:	48a5      	ldr	r0, [pc, #660]	; (800413c <pbuf_alloc+0x2f0>)
 8003ea8:	f00a ff6e 	bl	800ed88 <iprintf>
    return NULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e15d      	b.n	800416c <pbuf_alloc+0x320>
  }

  switch (type) {
 8003eb0:	79bb      	ldrb	r3, [r7, #6]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	f200 8134 	bhi.w	8004120 <pbuf_alloc+0x2d4>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <pbuf_alloc+0x74>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08004061 	.word	0x08004061
 8003ec4:	080040ed 	.word	0x080040ed
 8003ec8:	080040ed 	.word	0x080040ed
 8003ecc:	08003ed1 	.word	0x08003ed1
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003ed0:	2008      	movs	r0, #8
 8003ed2:	f7ff fdd3 	bl	8003a7c <memp_malloc>
 8003ed6:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8003ede:	f7ff ffa9 	bl	8003e34 <pbuf_pool_is_empty>
      return NULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e142      	b.n	800416c <pbuf_alloc+0x320>
    }
    p->type = type;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	79ba      	ldrb	r2, [r7, #6]
 8003eea:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8003ef2:	8afb      	ldrh	r3, [r7, #22]
 8003ef4:	3310      	adds	r3, #16
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	3303      	adds	r3, #3
 8003efc:	f023 0303 	bic.w	r3, r3, #3
 8003f00:	461a      	mov	r2, r3
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d006      	beq.n	8003f20 <pbuf_alloc+0xd4>
 8003f12:	4b88      	ldr	r3, [pc, #544]	; (8004134 <pbuf_alloc+0x2e8>)
 8003f14:	f240 1229 	movw	r2, #297	; 0x129
 8003f18:	4989      	ldr	r1, [pc, #548]	; (8004140 <pbuf_alloc+0x2f4>)
 8003f1a:	4888      	ldr	r0, [pc, #544]	; (800413c <pbuf_alloc+0x2f0>)
 8003f1c:	f00a ff34 	bl	800ed88 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	88ba      	ldrh	r2, [r7, #4]
 8003f24:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8003f26:	8afb      	ldrh	r3, [r7, #22]
 8003f28:	3303      	adds	r3, #3
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8003f32:	88bb      	ldrh	r3, [r7, #4]
 8003f34:	4293      	cmp	r3, r2
 8003f36:	bf28      	it	cs
 8003f38:	4613      	movcs	r3, r2
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	8952      	ldrh	r2, [r2, #10]
 8003f48:	441a      	add	r2, r3
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d906      	bls.n	8003f62 <pbuf_alloc+0x116>
 8003f54:	4b77      	ldr	r3, [pc, #476]	; (8004134 <pbuf_alloc+0x2e8>)
 8003f56:	f44f 7298 	mov.w	r2, #304	; 0x130
 8003f5a:	497a      	ldr	r1, [pc, #488]	; (8004144 <pbuf_alloc+0x2f8>)
 8003f5c:	4877      	ldr	r0, [pc, #476]	; (800413c <pbuf_alloc+0x2f0>)
 8003f5e:	f00a ff13 	bl	800ed88 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8003f62:	8afb      	ldrh	r3, [r7, #22]
 8003f64:	3303      	adds	r3, #3
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8003f6e:	d106      	bne.n	8003f7e <pbuf_alloc+0x132>
 8003f70:	4b70      	ldr	r3, [pc, #448]	; (8004134 <pbuf_alloc+0x2e8>)
 8003f72:	f44f 7299 	mov.w	r2, #306	; 0x132
 8003f76:	4974      	ldr	r1, [pc, #464]	; (8004148 <pbuf_alloc+0x2fc>)
 8003f78:	4870      	ldr	r0, [pc, #448]	; (800413c <pbuf_alloc+0x2f0>)
 8003f7a:	f00a ff05 	bl	800ed88 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	2201      	movs	r2, #1
 8003f82:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8003f88:	88bb      	ldrh	r3, [r7, #4]
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	8952      	ldrh	r2, [r2, #10]
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8003f92:	e061      	b.n	8004058 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003f94:	2008      	movs	r0, #8
 8003f96:	f7ff fd71 	bl	8003a7c <memp_malloc>
 8003f9a:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8003fa2:	f7ff ff47 	bl	8003e34 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8003fa6:	69f8      	ldr	r0, [r7, #28]
 8003fa8:	f000 fac2 	bl	8004530 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e0dd      	b.n	800416c <pbuf_alloc+0x320>
      }
      q->type = type;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	79ba      	ldrb	r2, [r7, #6]
 8003fb4:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	dd06      	ble.n	8003fe0 <pbuf_alloc+0x194>
 8003fd2:	4b58      	ldr	r3, [pc, #352]	; (8004134 <pbuf_alloc+0x2e8>)
 8003fd4:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8003fd8:	495c      	ldr	r1, [pc, #368]	; (800414c <pbuf_alloc+0x300>)
 8003fda:	4858      	ldr	r0, [pc, #352]	; (800413c <pbuf_alloc+0x2f0>)
 8003fdc:	f00a fed4 	bl	800ed88 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8003ff0:	bf28      	it	cs
 8003ff2:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f103 0210 	add.w	r2, r3, #16
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d006      	beq.n	8004020 <pbuf_alloc+0x1d4>
 8004012:	4b48      	ldr	r3, [pc, #288]	; (8004134 <pbuf_alloc+0x2e8>)
 8004014:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8004018:	494d      	ldr	r1, [pc, #308]	; (8004150 <pbuf_alloc+0x304>)
 800401a:	4848      	ldr	r0, [pc, #288]	; (800413c <pbuf_alloc+0x2f0>)
 800401c:	f00a feb4 	bl	800ed88 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	8952      	ldrh	r2, [r2, #10]
 8004028:	441a      	add	r2, r3
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004030:	429a      	cmp	r2, r3
 8004032:	d906      	bls.n	8004042 <pbuf_alloc+0x1f6>
 8004034:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <pbuf_alloc+0x2e8>)
 8004036:	f240 1255 	movw	r2, #341	; 0x155
 800403a:	4942      	ldr	r1, [pc, #264]	; (8004144 <pbuf_alloc+0x2f8>)
 800403c:	483f      	ldr	r0, [pc, #252]	; (800413c <pbuf_alloc+0x2f0>)
 800403e:	f00a fea3 	bl	800ed88 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	895b      	ldrh	r3, [r3, #10]
 800404c:	461a      	mov	r2, r3
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	dc9a      	bgt.n	8003f94 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800405e:	e07e      	b.n	800415e <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8004060:	8afb      	ldrh	r3, [r7, #22]
 8004062:	3313      	adds	r3, #19
 8004064:	b29b      	uxth	r3, r3
 8004066:	f023 0303 	bic.w	r3, r3, #3
 800406a:	b29a      	uxth	r2, r3
 800406c:	88bb      	ldrh	r3, [r7, #4]
 800406e:	3303      	adds	r3, #3
 8004070:	b29b      	uxth	r3, r3
 8004072:	f023 0303 	bic.w	r3, r3, #3
 8004076:	b29b      	uxth	r3, r3
 8004078:	4413      	add	r3, r2
 800407a:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800407c:	897a      	ldrh	r2, [r7, #10]
 800407e:	88bb      	ldrh	r3, [r7, #4]
 8004080:	3303      	adds	r3, #3
 8004082:	f023 0303 	bic.w	r3, r3, #3
 8004086:	429a      	cmp	r2, r3
 8004088:	d201      	bcs.n	800408e <pbuf_alloc+0x242>
        return NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	e06e      	b.n	800416c <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800408e:	897b      	ldrh	r3, [r7, #10]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fb95 	bl	80037c0 <mem_malloc>
 8004096:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <pbuf_alloc+0x256>
      return NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	e064      	b.n	800416c <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80040a2:	8afb      	ldrh	r3, [r7, #22]
 80040a4:	3310      	adds	r3, #16
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	4413      	add	r3, r2
 80040aa:	3303      	adds	r3, #3
 80040ac:	f023 0303 	bic.w	r3, r3, #3
 80040b0:	461a      	mov	r2, r3
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	88ba      	ldrh	r2, [r7, #4]
 80040ba:	811a      	strh	r2, [r3, #8]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	891a      	ldrh	r2, [r3, #8]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
    p->type = type;
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	79ba      	ldrb	r2, [r7, #6]
 80040ce:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d03f      	beq.n	800415c <pbuf_alloc+0x310>
 80040dc:	4b15      	ldr	r3, [pc, #84]	; (8004134 <pbuf_alloc+0x2e8>)
 80040de:	f240 1277 	movw	r2, #375	; 0x177
 80040e2:	491c      	ldr	r1, [pc, #112]	; (8004154 <pbuf_alloc+0x308>)
 80040e4:	4815      	ldr	r0, [pc, #84]	; (800413c <pbuf_alloc+0x2f0>)
 80040e6:	f00a fe4f 	bl	800ed88 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80040ea:	e037      	b.n	800415c <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80040ec:	2007      	movs	r0, #7
 80040ee:	f7ff fcc5 	bl	8003a7c <memp_malloc>
 80040f2:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e036      	b.n	800416c <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	2200      	movs	r2, #0
 8004102:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	88ba      	ldrh	r2, [r7, #4]
 8004108:	811a      	strh	r2, [r3, #8]
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	891a      	ldrh	r2, [r3, #8]
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
    p->type = type;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	79ba      	ldrb	r2, [r7, #6]
 800411c:	731a      	strb	r2, [r3, #12]
    break;
 800411e:	e01e      	b.n	800415e <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004120:	4b04      	ldr	r3, [pc, #16]	; (8004134 <pbuf_alloc+0x2e8>)
 8004122:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8004126:	490c      	ldr	r1, [pc, #48]	; (8004158 <pbuf_alloc+0x30c>)
 8004128:	4804      	ldr	r0, [pc, #16]	; (800413c <pbuf_alloc+0x2f0>)
 800412a:	f00a fe2d 	bl	800ed88 <iprintf>
    return NULL;
 800412e:	2300      	movs	r3, #0
 8004130:	e01c      	b.n	800416c <pbuf_alloc+0x320>
 8004132:	bf00      	nop
 8004134:	080102b0 	.word	0x080102b0
 8004138:	080102e0 	.word	0x080102e0
 800413c:	080102fc 	.word	0x080102fc
 8004140:	08010324 	.word	0x08010324
 8004144:	08010354 	.word	0x08010354
 8004148:	08010388 	.word	0x08010388
 800414c:	080103bc 	.word	0x080103bc
 8004150:	080103d0 	.word	0x080103d0
 8004154:	08010400 	.word	0x08010400
 8004158:	0801042c 	.word	0x0801042c
    break;
 800415c:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	2201      	movs	r2, #1
 8004162:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	2200      	movs	r2, #0
 8004168:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800416a:	69fb      	ldr	r3, [r7, #28]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3720      	adds	r7, #32
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	4603      	mov	r3, r0
 800417e:	71fb      	strb	r3, [r7, #7]
 8004180:	460b      	mov	r3, r1
 8004182:	80bb      	strh	r3, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	2b04      	cmp	r3, #4
 800418c:	d81b      	bhi.n	80041c6 <pbuf_alloced_custom+0x52>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <pbuf_alloced_custom+0x20>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041a9 	.word	0x080041a9
 8004198:	080041af 	.word	0x080041af
 800419c:	080041b5 	.word	0x080041b5
 80041a0:	080041bb 	.word	0x080041bb
 80041a4:	080041c1 	.word	0x080041c1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80041a8:	2336      	movs	r3, #54	; 0x36
 80041aa:	81fb      	strh	r3, [r7, #14]
    break;
 80041ac:	e014      	b.n	80041d8 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80041ae:	2322      	movs	r3, #34	; 0x22
 80041b0:	81fb      	strh	r3, [r7, #14]
    break;
 80041b2:	e011      	b.n	80041d8 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80041b4:	230e      	movs	r3, #14
 80041b6:	81fb      	strh	r3, [r7, #14]
    break;
 80041b8:	e00e      	b.n	80041d8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80041ba:	2300      	movs	r3, #0
 80041bc:	81fb      	strh	r3, [r7, #14]
    break;
 80041be:	e00b      	b.n	80041d8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	81fb      	strh	r3, [r7, #14]
    break;
 80041c4:	e008      	b.n	80041d8 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80041c6:	4b1d      	ldr	r3, [pc, #116]	; (800423c <pbuf_alloced_custom+0xc8>)
 80041c8:	f240 12c5 	movw	r2, #453	; 0x1c5
 80041cc:	491c      	ldr	r1, [pc, #112]	; (8004240 <pbuf_alloced_custom+0xcc>)
 80041ce:	481d      	ldr	r0, [pc, #116]	; (8004244 <pbuf_alloced_custom+0xd0>)
 80041d0:	f00a fdda 	bl	800ed88 <iprintf>
    return NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e02d      	b.n	8004234 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80041d8:	89fb      	ldrh	r3, [r7, #14]
 80041da:	3303      	adds	r3, #3
 80041dc:	f023 0203 	bic.w	r2, r3, #3
 80041e0:	88bb      	ldrh	r3, [r7, #4]
 80041e2:	441a      	add	r2, r3
 80041e4:	8bbb      	ldrh	r3, [r7, #28]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d901      	bls.n	80041ee <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	e022      	b.n	8004234 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d008      	beq.n	800420c <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80041fa:	89fb      	ldrh	r3, [r7, #14]
 80041fc:	3303      	adds	r3, #3
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	441a      	add	r2, r3
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	e002      	b.n	8004212 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2202      	movs	r2, #2
 8004216:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	88ba      	ldrh	r2, [r7, #4]
 800421c:	811a      	strh	r2, [r3, #8]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	891a      	ldrh	r2, [r3, #8]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	79ba      	ldrb	r2, [r7, #6]
 800422a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2201      	movs	r2, #1
 8004230:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8004232:	683b      	ldr	r3, [r7, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	080102b0 	.word	0x080102b0
 8004240:	08010448 	.word	0x08010448
 8004244:	080102fc 	.word	0x080102fc

08004248 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <pbuf_realloc+0x20>
 800425a:	4b4b      	ldr	r3, [pc, #300]	; (8004388 <pbuf_realloc+0x140>)
 800425c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004260:	494a      	ldr	r1, [pc, #296]	; (800438c <pbuf_realloc+0x144>)
 8004262:	484b      	ldr	r0, [pc, #300]	; (8004390 <pbuf_realloc+0x148>)
 8004264:	f00a fd90 	bl	800ed88 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7b1b      	ldrb	r3, [r3, #12]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d012      	beq.n	8004296 <pbuf_realloc+0x4e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	7b1b      	ldrb	r3, [r3, #12]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d00e      	beq.n	8004296 <pbuf_realloc+0x4e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	7b1b      	ldrb	r3, [r3, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <pbuf_realloc+0x4e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	7b1b      	ldrb	r3, [r3, #12]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d006      	beq.n	8004296 <pbuf_realloc+0x4e>
 8004288:	4b3f      	ldr	r3, [pc, #252]	; (8004388 <pbuf_realloc+0x140>)
 800428a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800428e:	4941      	ldr	r1, [pc, #260]	; (8004394 <pbuf_realloc+0x14c>)
 8004290:	483f      	ldr	r0, [pc, #252]	; (8004390 <pbuf_realloc+0x148>)
 8004292:	f00a fd79 	bl	800ed88 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	891b      	ldrh	r3, [r3, #8]
 800429a:	887a      	ldrh	r2, [r7, #2]
 800429c:	429a      	cmp	r2, r3
 800429e:	d26f      	bcs.n	8004380 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 80042a0:	887b      	ldrh	r3, [r7, #2]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	8912      	ldrh	r2, [r2, #8]
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	827b      	strh	r3, [r7, #18]
  q = p;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80042b2:	e025      	b.n	8004300 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	895b      	ldrh	r3, [r3, #10]
 80042b8:	8a7a      	ldrh	r2, [r7, #18]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80042c4:	4293      	cmp	r3, r2
 80042c6:	dd06      	ble.n	80042d6 <pbuf_realloc+0x8e>
 80042c8:	4b2f      	ldr	r3, [pc, #188]	; (8004388 <pbuf_realloc+0x140>)
 80042ca:	f240 220b 	movw	r2, #523	; 0x20b
 80042ce:	4932      	ldr	r1, [pc, #200]	; (8004398 <pbuf_realloc+0x150>)
 80042d0:	482f      	ldr	r0, [pc, #188]	; (8004390 <pbuf_realloc+0x148>)
 80042d2:	f00a fd59 	bl	800ed88 <iprintf>
    q->tot_len += (u16_t)grow;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	891a      	ldrh	r2, [r3, #8]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	4413      	add	r3, r2
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <pbuf_realloc+0xb8>
 80042f2:	4b25      	ldr	r3, [pc, #148]	; (8004388 <pbuf_realloc+0x140>)
 80042f4:	f240 220f 	movw	r2, #527	; 0x20f
 80042f8:	4928      	ldr	r1, [pc, #160]	; (800439c <pbuf_realloc+0x154>)
 80042fa:	4825      	ldr	r0, [pc, #148]	; (8004390 <pbuf_realloc+0x148>)
 80042fc:	f00a fd44 	bl	800ed88 <iprintf>
  while (rem_len > q->len) {
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	895b      	ldrh	r3, [r3, #10]
 8004304:	8a7a      	ldrh	r2, [r7, #18]
 8004306:	429a      	cmp	r2, r3
 8004308:	d8d4      	bhi.n	80042b4 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	7b1b      	ldrb	r3, [r3, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d122      	bne.n	8004358 <pbuf_realloc+0x110>
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	895b      	ldrh	r3, [r3, #10]
 8004316:	8a7a      	ldrh	r2, [r7, #18]
 8004318:	429a      	cmp	r2, r3
 800431a:	d01d      	beq.n	8004358 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	7b5b      	ldrb	r3, [r3, #13]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d117      	bne.n	8004358 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	461a      	mov	r2, r3
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	b29a      	uxth	r2, r3
 8004334:	8a7b      	ldrh	r3, [r7, #18]
 8004336:	4413      	add	r3, r2
 8004338:	b29b      	uxth	r3, r3
 800433a:	4619      	mov	r1, r3
 800433c:	6978      	ldr	r0, [r7, #20]
 800433e:	f7ff f963 	bl	8003608 <mem_trim>
 8004342:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <pbuf_realloc+0x110>
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <pbuf_realloc+0x140>)
 800434c:	f240 221d 	movw	r2, #541	; 0x21d
 8004350:	4913      	ldr	r1, [pc, #76]	; (80043a0 <pbuf_realloc+0x158>)
 8004352:	480f      	ldr	r0, [pc, #60]	; (8004390 <pbuf_realloc+0x148>)
 8004354:	f00a fd18 	bl	800ed88 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	8a7a      	ldrh	r2, [r7, #18]
 800435c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	895a      	ldrh	r2, [r3, #10]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d004      	beq.n	8004378 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f8dc 	bl	8004530 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e000      	b.n	8004382 <pbuf_realloc+0x13a>
    return;
 8004380:	bf00      	nop

}
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	080102b0 	.word	0x080102b0
 800438c:	0801046c 	.word	0x0801046c
 8004390:	080102fc 	.word	0x080102fc
 8004394:	08010484 	.word	0x08010484
 8004398:	080104a0 	.word	0x080104a0
 800439c:	080104b4 	.word	0x080104b4
 80043a0:	080104cc 	.word	0x080104cc

080043a4 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	807b      	strh	r3, [r7, #2]
 80043b0:	4613      	mov	r3, r2
 80043b2:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <pbuf_header_impl+0x24>
 80043ba:	4b46      	ldr	r3, [pc, #280]	; (80044d4 <pbuf_header_impl+0x130>)
 80043bc:	f240 223f 	movw	r2, #575	; 0x23f
 80043c0:	4945      	ldr	r1, [pc, #276]	; (80044d8 <pbuf_header_impl+0x134>)
 80043c2:	4846      	ldr	r0, [pc, #280]	; (80044dc <pbuf_header_impl+0x138>)
 80043c4:	f00a fce0 	bl	800ed88 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80043c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <pbuf_header_impl+0x32>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <pbuf_header_impl+0x36>
    return 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e078      	b.n	80044cc <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80043da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	da10      	bge.n	8004404 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80043e2:	887b      	ldrh	r3, [r7, #2]
 80043e4:	425b      	negs	r3, r3
 80043e6:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	895b      	ldrh	r3, [r3, #10]
 80043ec:	89fa      	ldrh	r2, [r7, #14]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d90a      	bls.n	8004408 <pbuf_header_impl+0x64>
 80043f2:	4b38      	ldr	r3, [pc, #224]	; (80044d4 <pbuf_header_impl+0x130>)
 80043f4:	f240 2247 	movw	r2, #583	; 0x247
 80043f8:	4939      	ldr	r1, [pc, #228]	; (80044e0 <pbuf_header_impl+0x13c>)
 80043fa:	4838      	ldr	r0, [pc, #224]	; (80044dc <pbuf_header_impl+0x138>)
 80043fc:	f00a fcc4 	bl	800ed88 <iprintf>
 8004400:	2301      	movs	r3, #1
 8004402:	e063      	b.n	80044cc <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8004404:	887b      	ldrh	r3, [r7, #2]
 8004406:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	7b1b      	ldrb	r3, [r3, #12]
 800440c:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8004414:	89bb      	ldrh	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <pbuf_header_impl+0x7c>
 800441a:	89bb      	ldrh	r3, [r7, #12]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d112      	bne.n	8004446 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004428:	425b      	negs	r3, r3
 800442a:	441a      	add	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3310      	adds	r3, #16
 8004438:	429a      	cmp	r2, r3
 800443a:	d238      	bcs.n	80044ae <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8004442:	2301      	movs	r3, #1
 8004444:	e042      	b.n	80044cc <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8004446:	89bb      	ldrh	r3, [r7, #12]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d002      	beq.n	8004452 <pbuf_header_impl+0xae>
 800444c:	89bb      	ldrh	r3, [r7, #12]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d124      	bne.n	800449c <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004452:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004456:	2b00      	cmp	r3, #0
 8004458:	da0d      	bge.n	8004476 <pbuf_header_impl+0xd2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	895b      	ldrh	r3, [r3, #10]
 800445e:	89fa      	ldrh	r2, [r7, #14]
 8004460:	429a      	cmp	r2, r3
 8004462:	d808      	bhi.n	8004476 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800446c:	425b      	negs	r3, r3
 800446e:	441a      	add	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	605a      	str	r2, [r3, #4]
 8004474:	e011      	b.n	800449a <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8004476:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800447a:	2b00      	cmp	r3, #0
 800447c:	dd0b      	ble.n	8004496 <pbuf_header_impl+0xf2>
 800447e:	787b      	ldrb	r3, [r7, #1]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800448c:	425b      	negs	r3, r3
 800448e:	441a      	add	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	605a      	str	r2, [r3, #4]
 8004494:	e001      	b.n	800449a <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004496:	2301      	movs	r3, #1
 8004498:	e018      	b.n	80044cc <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800449a:	e008      	b.n	80044ae <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800449c:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <pbuf_header_impl+0x130>)
 800449e:	f240 2277 	movw	r2, #631	; 0x277
 80044a2:	4910      	ldr	r1, [pc, #64]	; (80044e4 <pbuf_header_impl+0x140>)
 80044a4:	480d      	ldr	r0, [pc, #52]	; (80044dc <pbuf_header_impl+0x138>)
 80044a6:	f00a fc6f 	bl	800ed88 <iprintf>
    return 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e00e      	b.n	80044cc <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	895a      	ldrh	r2, [r3, #10]
 80044b2:	887b      	ldrh	r3, [r7, #2]
 80044b4:	4413      	add	r3, r2
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	891a      	ldrh	r2, [r3, #8]
 80044c0:	887b      	ldrh	r3, [r7, #2]
 80044c2:	4413      	add	r3, r2
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	080102b0 	.word	0x080102b0
 80044d8:	080104e8 	.word	0x080104e8
 80044dc:	080102fc 	.word	0x080102fc
 80044e0:	080104f4 	.word	0x080104f4
 80044e4:	08010514 	.word	0x08010514

080044e8 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80044f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044f8:	2200      	movs	r2, #0
 80044fa:	4619      	mov	r1, r3
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ff51 	bl	80043a4 <pbuf_header_impl>
 8004502:	4603      	mov	r3, r0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8004518:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800451c:	2201      	movs	r2, #1
 800451e:	4619      	mov	r1, r3
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ff3f 	bl	80043a4 <pbuf_header_impl>
 8004526:	4603      	mov	r3, r0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10b      	bne.n	8004556 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <pbuf_free+0x22>
 8004544:	4b3e      	ldr	r3, [pc, #248]	; (8004640 <pbuf_free+0x110>)
 8004546:	f240 22d2 	movw	r2, #722	; 0x2d2
 800454a:	493e      	ldr	r1, [pc, #248]	; (8004644 <pbuf_free+0x114>)
 800454c:	483e      	ldr	r0, [pc, #248]	; (8004648 <pbuf_free+0x118>)
 800454e:	f00a fc1b 	bl	800ed88 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004552:	2300      	movs	r3, #0
 8004554:	e070      	b.n	8004638 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	7b1b      	ldrb	r3, [r3, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d012      	beq.n	8004584 <pbuf_free+0x54>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	7b1b      	ldrb	r3, [r3, #12]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d00e      	beq.n	8004584 <pbuf_free+0x54>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	7b1b      	ldrb	r3, [r3, #12]
 800456a:	2b02      	cmp	r3, #2
 800456c:	d00a      	beq.n	8004584 <pbuf_free+0x54>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	7b1b      	ldrb	r3, [r3, #12]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d006      	beq.n	8004584 <pbuf_free+0x54>
 8004576:	4b32      	ldr	r3, [pc, #200]	; (8004640 <pbuf_free+0x110>)
 8004578:	f240 22de 	movw	r2, #734	; 0x2de
 800457c:	4933      	ldr	r1, [pc, #204]	; (800464c <pbuf_free+0x11c>)
 800457e:	4832      	ldr	r0, [pc, #200]	; (8004648 <pbuf_free+0x118>)
 8004580:	f00a fc02 	bl	800ed88 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004588:	e052      	b.n	8004630 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	89db      	ldrh	r3, [r3, #14]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <pbuf_free+0x70>
 8004592:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <pbuf_free+0x110>)
 8004594:	f240 22eb 	movw	r2, #747	; 0x2eb
 8004598:	492d      	ldr	r1, [pc, #180]	; (8004650 <pbuf_free+0x120>)
 800459a:	482b      	ldr	r0, [pc, #172]	; (8004648 <pbuf_free+0x118>)
 800459c:	f00a fbf4 	bl	800ed88 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	89db      	ldrh	r3, [r3, #14]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	81da      	strh	r2, [r3, #14]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	89db      	ldrh	r3, [r3, #14]
 80045b0:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80045b2:	8abb      	ldrh	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d139      	bne.n	800462c <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	7b1b      	ldrb	r3, [r3, #12]
 80045c2:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	7b5b      	ldrb	r3, [r3, #13]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d011      	beq.n	80045f4 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <pbuf_free+0xba>
 80045dc:	4b18      	ldr	r3, [pc, #96]	; (8004640 <pbuf_free+0x110>)
 80045de:	f240 22f9 	movw	r2, #761	; 0x2f9
 80045e2:	491c      	ldr	r1, [pc, #112]	; (8004654 <pbuf_free+0x124>)
 80045e4:	4818      	ldr	r0, [pc, #96]	; (8004648 <pbuf_free+0x118>)
 80045e6:	f00a fbcf 	bl	800ed88 <iprintf>
        pc->custom_free_function(p);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4798      	blx	r3
 80045f2:	e015      	b.n	8004620 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80045f4:	89fb      	ldrh	r3, [r7, #14]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d104      	bne.n	8004604 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	2008      	movs	r0, #8
 80045fe:	f7ff fa89 	bl	8003b14 <memp_free>
 8004602:	e00d      	b.n	8004620 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d002      	beq.n	8004610 <pbuf_free+0xe0>
 800460a:	89fb      	ldrh	r3, [r7, #14]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d104      	bne.n	800461a <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	2007      	movs	r0, #7
 8004614:	f7ff fa7e 	bl	8003b14 <memp_free>
 8004618:	e002      	b.n	8004620 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fe ff92 	bl	8003544 <mem_free>
        }
      }
      count++;
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	3301      	adds	r3, #1
 8004624:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	e001      	b.n	8004630 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800462c:	2300      	movs	r3, #0
 800462e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1a9      	bne.n	800458a <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004636:	7dfb      	ldrb	r3, [r7, #23]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	080102b0 	.word	0x080102b0
 8004644:	080104e8 	.word	0x080104e8
 8004648:	080102fc 	.word	0x080102fc
 800464c:	08010524 	.word	0x08010524
 8004650:	0801053c 	.word	0x0801053c
 8004654:	08010554 	.word	0x08010554

08004658 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004664:	e005      	b.n	8004672 <pbuf_clen+0x1a>
    ++len;
 8004666:	89fb      	ldrh	r3, [r7, #14]
 8004668:	3301      	adds	r3, #1
 800466a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f6      	bne.n	8004666 <pbuf_clen+0xe>
  }
  return len;
 8004678:	89fb      	ldrh	r3, [r7, #14]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d010      	beq.n	80046b8 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	89db      	ldrh	r3, [r3, #14]
 800469a:	3301      	adds	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	89db      	ldrh	r3, [r3, #14]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <pbuf_ref+0x30>
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <pbuf_ref+0x38>)
 80046ac:	f240 3239 	movw	r2, #825	; 0x339
 80046b0:	4904      	ldr	r1, [pc, #16]	; (80046c4 <pbuf_ref+0x3c>)
 80046b2:	4805      	ldr	r0, [pc, #20]	; (80046c8 <pbuf_ref+0x40>)
 80046b4:	f00a fb68 	bl	800ed88 <iprintf>
  }
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	080102b0 	.word	0x080102b0
 80046c4:	08010578 	.word	0x08010578
 80046c8:	080102fc 	.word	0x080102fc

080046cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <pbuf_cat+0x16>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d107      	bne.n	80046f2 <pbuf_cat+0x26>
 80046e2:	4b20      	ldr	r3, [pc, #128]	; (8004764 <pbuf_cat+0x98>)
 80046e4:	f240 324d 	movw	r2, #845	; 0x34d
 80046e8:	491f      	ldr	r1, [pc, #124]	; (8004768 <pbuf_cat+0x9c>)
 80046ea:	4820      	ldr	r0, [pc, #128]	; (800476c <pbuf_cat+0xa0>)
 80046ec:	f00a fb4c 	bl	800ed88 <iprintf>
 80046f0:	e034      	b.n	800475c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	e00a      	b.n	800470e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	891a      	ldrh	r2, [r3, #8]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	891b      	ldrh	r3, [r3, #8]
 8004700:	4413      	add	r3, r2
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	891a      	ldrh	r2, [r3, #8]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	895b      	ldrh	r3, [r3, #10]
 800471e:	429a      	cmp	r2, r3
 8004720:	d006      	beq.n	8004730 <pbuf_cat+0x64>
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <pbuf_cat+0x98>)
 8004724:	f240 3255 	movw	r2, #853	; 0x355
 8004728:	4911      	ldr	r1, [pc, #68]	; (8004770 <pbuf_cat+0xa4>)
 800472a:	4810      	ldr	r0, [pc, #64]	; (800476c <pbuf_cat+0xa0>)
 800472c:	f00a fb2c 	bl	800ed88 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d006      	beq.n	8004746 <pbuf_cat+0x7a>
 8004738:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <pbuf_cat+0x98>)
 800473a:	f240 3256 	movw	r2, #854	; 0x356
 800473e:	490d      	ldr	r1, [pc, #52]	; (8004774 <pbuf_cat+0xa8>)
 8004740:	480a      	ldr	r0, [pc, #40]	; (800476c <pbuf_cat+0xa0>)
 8004742:	f00a fb21 	bl	800ed88 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	891a      	ldrh	r2, [r3, #8]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	891b      	ldrh	r3, [r3, #8]
 800474e:	4413      	add	r3, r2
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	080102b0 	.word	0x080102b0
 8004768:	0801058c 	.word	0x0801058c
 800476c:	080102fc 	.word	0x080102fc
 8004770:	080105c4 	.word	0x080105c4
 8004774:	080105f4 	.word	0x080105f4

08004778 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8004782:	6839      	ldr	r1, [r7, #0]
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ffa1 	bl	80046cc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800478a:	6838      	ldr	r0, [r7, #0]
 800478c:	f7ff ff7c 	bl	8004688 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 80047a2:	2300      	movs	r3, #0
 80047a4:	81fb      	strh	r3, [r7, #14]
 80047a6:	2300      	movs	r3, #0
 80047a8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <pbuf_copy+0x2a>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <pbuf_copy+0x2a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	891a      	ldrh	r2, [r3, #8]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	891b      	ldrh	r3, [r3, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d209      	bcs.n	80047d6 <pbuf_copy+0x3e>
 80047c2:	4b54      	ldr	r3, [pc, #336]	; (8004914 <pbuf_copy+0x17c>)
 80047c4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80047c8:	4953      	ldr	r1, [pc, #332]	; (8004918 <pbuf_copy+0x180>)
 80047ca:	4854      	ldr	r0, [pc, #336]	; (800491c <pbuf_copy+0x184>)
 80047cc:	f00a fadc 	bl	800ed88 <iprintf>
 80047d0:	f06f 030f 	mvn.w	r3, #15
 80047d4:	e099      	b.n	800490a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	895b      	ldrh	r3, [r3, #10]
 80047da:	461a      	mov	r2, r3
 80047dc:	89fb      	ldrh	r3, [r7, #14]
 80047de:	1ad2      	subs	r2, r2, r3
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	895b      	ldrh	r3, [r3, #10]
 80047e4:	4619      	mov	r1, r3
 80047e6:	89bb      	ldrh	r3, [r7, #12]
 80047e8:	1acb      	subs	r3, r1, r3
 80047ea:	429a      	cmp	r2, r3
 80047ec:	db05      	blt.n	80047fa <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	895a      	ldrh	r2, [r3, #10]
 80047f2:	89bb      	ldrh	r3, [r7, #12]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	817b      	strh	r3, [r7, #10]
 80047f8:	e004      	b.n	8004804 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	895a      	ldrh	r2, [r3, #10]
 80047fe:	89fb      	ldrh	r3, [r7, #14]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	89fb      	ldrh	r3, [r7, #14]
 800480a:	18d0      	adds	r0, r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	89bb      	ldrh	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	897a      	ldrh	r2, [r7, #10]
 8004816:	4619      	mov	r1, r3
 8004818:	f00a faa3 	bl	800ed62 <memcpy>
    offset_to += len;
 800481c:	89fa      	ldrh	r2, [r7, #14]
 800481e:	897b      	ldrh	r3, [r7, #10]
 8004820:	4413      	add	r3, r2
 8004822:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8004824:	89ba      	ldrh	r2, [r7, #12]
 8004826:	897b      	ldrh	r3, [r7, #10]
 8004828:	4413      	add	r3, r2
 800482a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	895b      	ldrh	r3, [r3, #10]
 8004830:	89fa      	ldrh	r2, [r7, #14]
 8004832:	429a      	cmp	r2, r3
 8004834:	d906      	bls.n	8004844 <pbuf_copy+0xac>
 8004836:	4b37      	ldr	r3, [pc, #220]	; (8004914 <pbuf_copy+0x17c>)
 8004838:	f240 32cd 	movw	r2, #973	; 0x3cd
 800483c:	4938      	ldr	r1, [pc, #224]	; (8004920 <pbuf_copy+0x188>)
 800483e:	4837      	ldr	r0, [pc, #220]	; (800491c <pbuf_copy+0x184>)
 8004840:	f00a faa2 	bl	800ed88 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	895b      	ldrh	r3, [r3, #10]
 8004848:	89ba      	ldrh	r2, [r7, #12]
 800484a:	429a      	cmp	r2, r3
 800484c:	d906      	bls.n	800485c <pbuf_copy+0xc4>
 800484e:	4b31      	ldr	r3, [pc, #196]	; (8004914 <pbuf_copy+0x17c>)
 8004850:	f240 32ce 	movw	r2, #974	; 0x3ce
 8004854:	4933      	ldr	r1, [pc, #204]	; (8004924 <pbuf_copy+0x18c>)
 8004856:	4831      	ldr	r0, [pc, #196]	; (800491c <pbuf_copy+0x184>)
 8004858:	f00a fa96 	bl	800ed88 <iprintf>
    if (offset_from >= p_from->len) {
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	895b      	ldrh	r3, [r3, #10]
 8004860:	89ba      	ldrh	r2, [r7, #12]
 8004862:	429a      	cmp	r2, r3
 8004864:	d304      	bcc.n	8004870 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	895b      	ldrh	r3, [r3, #10]
 8004874:	89fa      	ldrh	r2, [r7, #14]
 8004876:	429a      	cmp	r2, r3
 8004878:	d114      	bne.n	80048a4 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10c      	bne.n	80048a4 <pbuf_copy+0x10c>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <pbuf_copy+0x10c>
 8004890:	4b20      	ldr	r3, [pc, #128]	; (8004914 <pbuf_copy+0x17c>)
 8004892:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8004896:	4924      	ldr	r1, [pc, #144]	; (8004928 <pbuf_copy+0x190>)
 8004898:	4820      	ldr	r0, [pc, #128]	; (800491c <pbuf_copy+0x184>)
 800489a:	f00a fa75 	bl	800ed88 <iprintf>
 800489e:	f06f 030f 	mvn.w	r3, #15
 80048a2:	e032      	b.n	800490a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d013      	beq.n	80048d2 <pbuf_copy+0x13a>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	895a      	ldrh	r2, [r3, #10]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	891b      	ldrh	r3, [r3, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d10d      	bne.n	80048d2 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <pbuf_copy+0x13a>
 80048be:	4b15      	ldr	r3, [pc, #84]	; (8004914 <pbuf_copy+0x17c>)
 80048c0:	f240 32de 	movw	r2, #990	; 0x3de
 80048c4:	4919      	ldr	r1, [pc, #100]	; (800492c <pbuf_copy+0x194>)
 80048c6:	4815      	ldr	r0, [pc, #84]	; (800491c <pbuf_copy+0x184>)
 80048c8:	f00a fa5e 	bl	800ed88 <iprintf>
 80048cc:	f06f 0305 	mvn.w	r3, #5
 80048d0:	e01b      	b.n	800490a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d013      	beq.n	8004900 <pbuf_copy+0x168>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	895a      	ldrh	r2, [r3, #10]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	891b      	ldrh	r3, [r3, #8]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d10d      	bne.n	8004900 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d009      	beq.n	8004900 <pbuf_copy+0x168>
 80048ec:	4b09      	ldr	r3, [pc, #36]	; (8004914 <pbuf_copy+0x17c>)
 80048ee:	f240 32e3 	movw	r2, #995	; 0x3e3
 80048f2:	490e      	ldr	r1, [pc, #56]	; (800492c <pbuf_copy+0x194>)
 80048f4:	4809      	ldr	r0, [pc, #36]	; (800491c <pbuf_copy+0x184>)
 80048f6:	f00a fa47 	bl	800ed88 <iprintf>
 80048fa:	f06f 0305 	mvn.w	r3, #5
 80048fe:	e004      	b.n	800490a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f47f af67 	bne.w	80047d6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	080102b0 	.word	0x080102b0
 8004918:	08010640 	.word	0x08010640
 800491c:	080102fc 	.word	0x080102fc
 8004920:	08010670 	.word	0x08010670
 8004924:	08010688 	.word	0x08010688
 8004928:	080106a4 	.word	0x080106a4
 800492c:	080106b4 	.word	0x080106b4

08004930 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	4611      	mov	r1, r2
 800493c:	461a      	mov	r2, r3
 800493e:	460b      	mov	r3, r1
 8004940:	80fb      	strh	r3, [r7, #6]
 8004942:	4613      	mov	r3, r2
 8004944:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8004946:	2300      	movs	r3, #0
 8004948:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d108      	bne.n	8004962 <pbuf_copy_partial+0x32>
 8004950:	4b30      	ldr	r3, [pc, #192]	; (8004a14 <pbuf_copy_partial+0xe4>)
 8004952:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8004956:	4930      	ldr	r1, [pc, #192]	; (8004a18 <pbuf_copy_partial+0xe8>)
 8004958:	4830      	ldr	r0, [pc, #192]	; (8004a1c <pbuf_copy_partial+0xec>)
 800495a:	f00a fa15 	bl	800ed88 <iprintf>
 800495e:	2300      	movs	r3, #0
 8004960:	e054      	b.n	8004a0c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d108      	bne.n	800497a <pbuf_copy_partial+0x4a>
 8004968:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <pbuf_copy_partial+0xe4>)
 800496a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800496e:	492c      	ldr	r1, [pc, #176]	; (8004a20 <pbuf_copy_partial+0xf0>)
 8004970:	482a      	ldr	r0, [pc, #168]	; (8004a1c <pbuf_copy_partial+0xec>)
 8004972:	f00a fa09 	bl	800ed88 <iprintf>
 8004976:	2300      	movs	r3, #0
 8004978:	e048      	b.n	8004a0c <pbuf_copy_partial+0xdc>

  left = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <pbuf_copy_partial+0x5a>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <pbuf_copy_partial+0x5e>
    return 0;
 800498a:	2300      	movs	r3, #0
 800498c:	e03e      	b.n	8004a0c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	e034      	b.n	80049fe <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8004994:	88bb      	ldrh	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <pbuf_copy_partial+0x80>
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	895b      	ldrh	r3, [r3, #10]
 800499e:	88ba      	ldrh	r2, [r7, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d305      	bcc.n	80049b0 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	895b      	ldrh	r3, [r3, #10]
 80049a8:	88ba      	ldrh	r2, [r7, #4]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	80bb      	strh	r3, [r7, #4]
 80049ae:	e023      	b.n	80049f8 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	895a      	ldrh	r2, [r3, #10]
 80049b4:	88bb      	ldrh	r3, [r7, #4]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80049ba:	8b3a      	ldrh	r2, [r7, #24]
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d901      	bls.n	80049c6 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80049c6:	8b7b      	ldrh	r3, [r7, #26]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	18d0      	adds	r0, r2, r3
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	88bb      	ldrh	r3, [r7, #4]
 80049d2:	4413      	add	r3, r2
 80049d4:	8b3a      	ldrh	r2, [r7, #24]
 80049d6:	4619      	mov	r1, r3
 80049d8:	f00a f9c3 	bl	800ed62 <memcpy>
      copied_total += buf_copy_len;
 80049dc:	8afa      	ldrh	r2, [r7, #22]
 80049de:	8b3b      	ldrh	r3, [r7, #24]
 80049e0:	4413      	add	r3, r2
 80049e2:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80049e4:	8b7a      	ldrh	r2, [r7, #26]
 80049e6:	8b3b      	ldrh	r3, [r7, #24]
 80049e8:	4413      	add	r3, r2
 80049ea:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80049ec:	88fa      	ldrh	r2, [r7, #6]
 80049ee:	8b3b      	ldrh	r3, [r7, #24]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <pbuf_copy_partial+0xda>
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1c4      	bne.n	8004994 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8004a0a:	8afb      	ldrh	r3, [r7, #22]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	080102b0 	.word	0x080102b0
 8004a18:	080106e0 	.word	0x080106e0
 8004a1c:	080102fc 	.word	0x080102fc
 8004a20:	08010700 	.word	0x08010700

08004a24 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8004a38:	f000 fdf0 	bl	800561c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <tcp_tmr+0x28>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	3301      	adds	r3, #1
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <tcp_tmr+0x28>)
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <tcp_tmr+0x28>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8004a54:	f000 fb22 	bl	800509c <tcp_slowtmr>
  }
}
 8004a58:	bf00      	nop
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	200000c9 	.word	0x200000c9

08004a60 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	e00a      	b.n	8004a86 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d102      	bne.n	8004a80 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f1      	bne.n	8004a70 <tcp_remove_listener+0x10>
      }
   }
}
 8004a8c:	bf00      	nop
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d105      	bne.n	8004ab2 <tcp_listen_closed+0x1a>
 8004aa6:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <tcp_listen_closed+0x5c>)
 8004aa8:	22c0      	movs	r2, #192	; 0xc0
 8004aaa:	4913      	ldr	r1, [pc, #76]	; (8004af8 <tcp_listen_closed+0x60>)
 8004aac:	4813      	ldr	r0, [pc, #76]	; (8004afc <tcp_listen_closed+0x64>)
 8004aae:	f00a f96b 	bl	800ed88 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	7d1b      	ldrb	r3, [r3, #20]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d005      	beq.n	8004ac6 <tcp_listen_closed+0x2e>
 8004aba:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <tcp_listen_closed+0x5c>)
 8004abc:	22c1      	movs	r2, #193	; 0xc1
 8004abe:	4910      	ldr	r1, [pc, #64]	; (8004b00 <tcp_listen_closed+0x68>)
 8004ac0:	480e      	ldr	r0, [pc, #56]	; (8004afc <tcp_listen_closed+0x64>)
 8004ac2:	f00a f961 	bl	800ed88 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	e00b      	b.n	8004ae4 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8004acc:	4a0d      	ldr	r2, [pc, #52]	; (8004b04 <tcp_listen_closed+0x6c>)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff ffc1 	bl	8004a60 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d9f0      	bls.n	8004acc <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	08010834 	.word	0x08010834
 8004af8:	08010864 	.word	0x08010864
 8004afc:	08010870 	.word	0x08010870
 8004b00:	08010898 	.word	0x08010898
 8004b04:	08012278 	.word	0x08012278

08004b08 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8004b08:	b5b0      	push	{r4, r5, r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d075      	beq.n	8004c06 <tcp_close_shutdown+0xfe>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	7d1b      	ldrb	r3, [r3, #20]
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d003      	beq.n	8004b2a <tcp_close_shutdown+0x22>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	7d1b      	ldrb	r3, [r3, #20]
 8004b26:	2b07      	cmp	r3, #7
 8004b28:	d16d      	bne.n	8004c06 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <tcp_close_shutdown+0x34>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b36:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8004b3a:	d064      	beq.n	8004c06 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	7e9b      	ldrb	r3, [r3, #26]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <tcp_close_shutdown+0x4e>
 8004b48:	4b59      	ldr	r3, [pc, #356]	; (8004cb0 <tcp_close_shutdown+0x1a8>)
 8004b4a:	f240 120f 	movw	r2, #271	; 0x10f
 8004b4e:	4959      	ldr	r1, [pc, #356]	; (8004cb4 <tcp_close_shutdown+0x1ac>)
 8004b50:	4859      	ldr	r0, [pc, #356]	; (8004cb8 <tcp_close_shutdown+0x1b0>)
 8004b52:	f00a f919 	bl	800ed88 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b5e:	687c      	ldr	r4, [r7, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	1d1d      	adds	r5, r3, #4
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8adb      	ldrh	r3, [r3, #22]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	8b12      	ldrh	r2, [r2, #24]
 8004b6c:	9201      	str	r2, [sp, #4]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	462b      	mov	r3, r5
 8004b72:	4622      	mov	r2, r4
 8004b74:	f004 f862 	bl	8008c3c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 ffc5 	bl	8005b08 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8004b7e:	4b4f      	ldr	r3, [pc, #316]	; (8004cbc <tcp_close_shutdown+0x1b4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d105      	bne.n	8004b94 <tcp_close_shutdown+0x8c>
 8004b88:	4b4c      	ldr	r3, [pc, #304]	; (8004cbc <tcp_close_shutdown+0x1b4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	4a4b      	ldr	r2, [pc, #300]	; (8004cbc <tcp_close_shutdown+0x1b4>)
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	e013      	b.n	8004bbc <tcp_close_shutdown+0xb4>
 8004b94:	4b49      	ldr	r3, [pc, #292]	; (8004cbc <tcp_close_shutdown+0x1b4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e00c      	b.n	8004bb6 <tcp_close_shutdown+0xae>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d104      	bne.n	8004bb0 <tcp_close_shutdown+0xa8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	60da      	str	r2, [r3, #12]
 8004bae:	e005      	b.n	8004bbc <tcp_close_shutdown+0xb4>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1ef      	bne.n	8004b9c <tcp_close_shutdown+0x94>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	60da      	str	r2, [r3, #12]
 8004bc2:	4b3f      	ldr	r3, [pc, #252]	; (8004cc0 <tcp_close_shutdown+0x1b8>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	7d1b      	ldrb	r3, [r3, #20]
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d10c      	bne.n	8004bea <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	220a      	movs	r2, #10
 8004bd4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8004bd6:	4b3b      	ldr	r3, [pc, #236]	; (8004cc4 <tcp_close_shutdown+0x1bc>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	4a39      	ldr	r2, [pc, #228]	; (8004cc4 <tcp_close_shutdown+0x1bc>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	f004 fa7a 	bl	80090dc <tcp_timer_needed>
 8004be8:	e00b      	b.n	8004c02 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8004bea:	4b37      	ldr	r3, [pc, #220]	; (8004cc8 <tcp_close_shutdown+0x1c0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d102      	bne.n	8004bfa <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8004bf4:	f003 faec 	bl	80081d0 <tcp_trigger_input_pcb_close>
 8004bf8:	e003      	b.n	8004c02 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	f7fe ff89 	bl	8003b14 <memp_free>
        }
      }
      return ERR_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e050      	b.n	8004ca8 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	7d1b      	ldrb	r3, [r3, #20]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d02e      	beq.n	8004c6c <tcp_close_shutdown+0x164>
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d038      	beq.n	8004c84 <tcp_close_shutdown+0x17c>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d142      	bne.n	8004c9c <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8adb      	ldrh	r3, [r3, #22]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d021      	beq.n	8004c62 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8004c1e:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <tcp_close_shutdown+0x1c4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d105      	bne.n	8004c34 <tcp_close_shutdown+0x12c>
 8004c28:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <tcp_close_shutdown+0x1c4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	4a27      	ldr	r2, [pc, #156]	; (8004ccc <tcp_close_shutdown+0x1c4>)
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e013      	b.n	8004c5c <tcp_close_shutdown+0x154>
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <tcp_close_shutdown+0x1c4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	e00c      	b.n	8004c56 <tcp_close_shutdown+0x14e>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d104      	bne.n	8004c50 <tcp_close_shutdown+0x148>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	60da      	str	r2, [r3, #12]
 8004c4e:	e005      	b.n	8004c5c <tcp_close_shutdown+0x154>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1ef      	bne.n	8004c3c <tcp_close_shutdown+0x134>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	2001      	movs	r0, #1
 8004c66:	f7fe ff55 	bl	8003b14 <memp_free>
    break;
 8004c6a:	e01c      	b.n	8004ca6 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ff13 	bl	8004a98 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	4816      	ldr	r0, [pc, #88]	; (8004cd0 <tcp_close_shutdown+0x1c8>)
 8004c76:	f000 ff89 	bl	8005b8c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	2002      	movs	r0, #2
 8004c7e:	f7fe ff49 	bl	8003b14 <memp_free>
    break;
 8004c82:	e010      	b.n	8004ca6 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	480d      	ldr	r0, [pc, #52]	; (8004cbc <tcp_close_shutdown+0x1b4>)
 8004c88:	f000 ff80 	bl	8005b8c <tcp_pcb_remove>
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <tcp_close_shutdown+0x1b8>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	2001      	movs	r0, #1
 8004c96:	f7fe ff3d 	bl	8003b14 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8004c9a:	e004      	b.n	8004ca6 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f819 	bl	8004cd4 <tcp_close_shutdown_fin>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	e000      	b.n	8004ca8 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bdb0      	pop	{r4, r5, r7, pc}
 8004cb0:	08010834 	.word	0x08010834
 8004cb4:	080108b0 	.word	0x080108b0
 8004cb8:	08010870 	.word	0x08010870
 8004cbc:	20003778 	.word	0x20003778
 8004cc0:	20003774 	.word	0x20003774
 8004cc4:	20003788 	.word	0x20003788
 8004cc8:	2000378c 	.word	0x2000378c
 8004ccc:	20003784 	.word	0x20003784
 8004cd0:	20003780 	.word	0x20003780

08004cd4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <tcp_close_shutdown_fin+0x1c>
 8004ce2:	4b2c      	ldr	r3, [pc, #176]	; (8004d94 <tcp_close_shutdown_fin+0xc0>)
 8004ce4:	f240 124d 	movw	r2, #333	; 0x14d
 8004ce8:	492b      	ldr	r1, [pc, #172]	; (8004d98 <tcp_close_shutdown_fin+0xc4>)
 8004cea:	482c      	ldr	r0, [pc, #176]	; (8004d9c <tcp_close_shutdown_fin+0xc8>)
 8004cec:	f00a f84c 	bl	800ed88 <iprintf>

  switch (pcb->state) {
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	7d1b      	ldrb	r3, [r3, #20]
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d010      	beq.n	8004d1a <tcp_close_shutdown_fin+0x46>
 8004cf8:	2b07      	cmp	r3, #7
 8004cfa:	d01b      	beq.n	8004d34 <tcp_close_shutdown_fin+0x60>
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d126      	bne.n	8004d4e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f003 faf1 	bl	80082e8 <tcp_send_fin>
 8004d06:	4603      	mov	r3, r0
 8004d08:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d11f      	bne.n	8004d52 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2205      	movs	r2, #5
 8004d16:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004d18:	e01b      	b.n	8004d52 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f003 fae4 	bl	80082e8 <tcp_send_fin>
 8004d20:	4603      	mov	r3, r0
 8004d22:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d114      	bne.n	8004d56 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2205      	movs	r2, #5
 8004d30:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004d32:	e010      	b.n	8004d56 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f003 fad7 	bl	80082e8 <tcp_send_fin>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8004d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2209      	movs	r2, #9
 8004d4a:	751a      	strb	r2, [r3, #20]
    }
    break;
 8004d4c:	e005      	b.n	8004d5a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e01c      	b.n	8004d8c <tcp_close_shutdown_fin+0xb8>
    break;
 8004d52:	bf00      	nop
 8004d54:	e002      	b.n	8004d5c <tcp_close_shutdown_fin+0x88>
    break;
 8004d56:	bf00      	nop
 8004d58:	e000      	b.n	8004d5c <tcp_close_shutdown_fin+0x88>
    break;
 8004d5a:	bf00      	nop
  }

  if (err == ERR_OK) {
 8004d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f003 fcdf 	bl	8008728 <tcp_output>
 8004d6a:	e00d      	b.n	8004d88 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8004d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d108      	bne.n	8004d88 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	7e9b      	ldrb	r3, [r3, #26]
 8004d7a:	f043 0308 	orr.w	r3, r3, #8
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	e001      	b.n	8004d8c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8004d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	08010834 	.word	0x08010834
 8004d98:	08010864 	.word	0x08010864
 8004d9c:	08010870 	.word	0x08010870

08004da0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	7d1b      	ldrb	r3, [r3, #20]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d006      	beq.n	8004dbe <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	7e9b      	ldrb	r3, [r3, #26]
 8004db4:	f043 0310 	orr.w	r3, r3, #16
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff fea1 	bl	8004b08 <tcp_close_shutdown>
 8004dc6:	4603      	mov	r3, r0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08c      	sub	sp, #48	; 0x30
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	7d1b      	ldrb	r3, [r3, #20]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d106      	bne.n	8004df0 <tcp_abandon+0x20>
 8004de2:	4b4d      	ldr	r3, [pc, #308]	; (8004f18 <tcp_abandon+0x148>)
 8004de4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004de8:	494c      	ldr	r1, [pc, #304]	; (8004f1c <tcp_abandon+0x14c>)
 8004dea:	484d      	ldr	r0, [pc, #308]	; (8004f20 <tcp_abandon+0x150>)
 8004dec:	f009 ffcc 	bl	800ed88 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	7d1b      	ldrb	r3, [r3, #20]
 8004df4:	2b0a      	cmp	r3, #10
 8004df6:	d108      	bne.n	8004e0a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	484a      	ldr	r0, [pc, #296]	; (8004f24 <tcp_abandon+0x154>)
 8004dfc:	f000 fec6 	bl	8005b8c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	2001      	movs	r0, #1
 8004e04:	f7fe fe86 	bl	8003b14 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8004e08:	e081      	b.n	8004f0e <tcp_abandon+0x13e>
    int send_rst = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e24:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	7d1b      	ldrb	r3, [r3, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d126      	bne.n	8004e82 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8adb      	ldrh	r3, [r3, #22]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02e      	beq.n	8004e9a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004e3c:	4b3a      	ldr	r3, [pc, #232]	; (8004f28 <tcp_abandon+0x158>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d105      	bne.n	8004e52 <tcp_abandon+0x82>
 8004e46:	4b38      	ldr	r3, [pc, #224]	; (8004f28 <tcp_abandon+0x158>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4a36      	ldr	r2, [pc, #216]	; (8004f28 <tcp_abandon+0x158>)
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	e013      	b.n	8004e7a <tcp_abandon+0xaa>
 8004e52:	4b35      	ldr	r3, [pc, #212]	; (8004f28 <tcp_abandon+0x158>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	e00c      	b.n	8004e74 <tcp_abandon+0xa4>
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d104      	bne.n	8004e6e <tcp_abandon+0x9e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	60da      	str	r2, [r3, #12]
 8004e6c:	e005      	b.n	8004e7a <tcp_abandon+0xaa>
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	61fb      	str	r3, [r7, #28]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1ef      	bne.n	8004e5a <tcp_abandon+0x8a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	60da      	str	r2, [r3, #12]
 8004e80:	e00b      	b.n	8004e9a <tcp_abandon+0xca>
      send_rst = reset;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8adb      	ldrh	r3, [r3, #22]
 8004e8a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4827      	ldr	r0, [pc, #156]	; (8004f2c <tcp_abandon+0x15c>)
 8004e90:	f000 fe7c 	bl	8005b8c <tcp_pcb_remove>
 8004e94:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <tcp_abandon+0x160>)
 8004e96:	2201      	movs	r2, #1
 8004e98:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d004      	beq.n	8004eac <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fc85 	bl	80057b6 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fc7c 	bl	80057b6 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d004      	beq.n	8004ed0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fc73 	bl	80057b6 <tcp_segs_free>
    if (send_rst) {
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00c      	beq.n	8004ef0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	1d19      	adds	r1, r3, #4
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8b1b      	ldrh	r3, [r3, #24]
 8004ee0:	9301      	str	r3, [sp, #4]
 8004ee2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	6979      	ldr	r1, [r7, #20]
 8004eea:	69b8      	ldr	r0, [r7, #24]
 8004eec:	f003 fea6 	bl	8008c3c <tcp_rst>
    last_state = pcb->state;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	7d1b      	ldrb	r3, [r3, #20]
 8004ef4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	2001      	movs	r0, #1
 8004efa:	f7fe fe0b 	bl	8003b14 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d004      	beq.n	8004f0e <tcp_abandon+0x13e>
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f06f 010c 	mvn.w	r1, #12
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	4798      	blx	r3
}
 8004f0e:	bf00      	nop
 8004f10:	3728      	adds	r7, #40	; 0x28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	08010834 	.word	0x08010834
 8004f1c:	080108cc 	.word	0x080108cc
 8004f20:	08010870 	.word	0x08010870
 8004f24:	20003788 	.word	0x20003788
 8004f28:	20003784 	.word	0x20003784
 8004f2c:	20003778 	.word	0x20003778
 8004f30:	20003774 	.word	0x20003774

08004f34 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff ff46 	bl	8004dd0 <tcp_abandon>
}
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004f5c:	4413      	add	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8004f68:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8004f6c:	bf28      	it	cs
 8004f6e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8004f72:	b292      	uxth	r2, r2
 8004f74:	4413      	add	r3, r2
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	db08      	blt.n	8004f90 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	e020      	b.n	8004fd2 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	dd03      	ble.n	8004fa6 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fa4:	e014      	b.n	8004fd0 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb8:	d306      	bcc.n	8004fc8 <tcp_update_rcv_ann_wnd+0x7c>
 8004fba:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <tcp_update_rcv_ann_wnd+0x90>)
 8004fbc:	f44f 7242 	mov.w	r2, #776	; 0x308
 8004fc0:	4907      	ldr	r1, [pc, #28]	; (8004fe0 <tcp_update_rcv_ann_wnd+0x94>)
 8004fc2:	4808      	ldr	r0, [pc, #32]	; (8004fe4 <tcp_update_rcv_ann_wnd+0x98>)
 8004fc4:	f009 fee0 	bl	800ed88 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8004fd0:	2300      	movs	r3, #0
  }
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	08010834 	.word	0x08010834
 8004fe0:	0801094c 	.word	0x0801094c
 8004fe4:	08010870 	.word	0x08010870

08004fe8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	7d1b      	ldrb	r3, [r3, #20]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d106      	bne.n	800500a <tcp_recved+0x22>
 8004ffc:	4b23      	ldr	r3, [pc, #140]	; (800508c <tcp_recved+0xa4>)
 8004ffe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005002:	4923      	ldr	r1, [pc, #140]	; (8005090 <tcp_recved+0xa8>)
 8005004:	4823      	ldr	r0, [pc, #140]	; (8005094 <tcp_recved+0xac>)
 8005006:	f009 febf 	bl	800ed88 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800500e:	887b      	ldrh	r3, [r7, #2]
 8005010:	4413      	add	r3, r2
 8005012:	b29a      	uxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005020:	d904      	bls.n	800502c <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005028:	851a      	strh	r2, [r3, #40]	; 0x28
 800502a:	e017      	b.n	800505c <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005030:	2b00      	cmp	r3, #0
 8005032:	d113      	bne.n	800505c <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	7d1b      	ldrb	r3, [r3, #20]
 8005038:	2b07      	cmp	r3, #7
 800503a:	d003      	beq.n	8005044 <tcp_recved+0x5c>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	7d1b      	ldrb	r3, [r3, #20]
 8005040:	2b09      	cmp	r3, #9
 8005042:	d104      	bne.n	800504e <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800504a:	851a      	strh	r2, [r3, #40]	; 0x28
 800504c:	e006      	b.n	800505c <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800504e:	4b0f      	ldr	r3, [pc, #60]	; (800508c <tcp_recved+0xa4>)
 8005050:	f240 322d 	movw	r2, #813	; 0x32d
 8005054:	4910      	ldr	r1, [pc, #64]	; (8005098 <tcp_recved+0xb0>)
 8005056:	480f      	ldr	r0, [pc, #60]	; (8005094 <tcp_recved+0xac>)
 8005058:	f009 fe96 	bl	800ed88 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff ff75 	bl	8004f4c <tcp_update_rcv_ann_wnd>
 8005062:	4603      	mov	r3, r0
 8005064:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800506c:	db09      	blt.n	8005082 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	7e9b      	ldrb	r3, [r3, #26]
 8005072:	f043 0302 	orr.w	r3, r3, #2
 8005076:	b2da      	uxtb	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f003 fb53 	bl	8008728 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	08010834 	.word	0x08010834
 8005090:	08010968 	.word	0x08010968
 8005094:	08010870 	.word	0x08010870
 8005098:	08010990 	.word	0x08010990

0800509c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800509c:	b5b0      	push	{r4, r5, r7, lr}
 800509e:	b08c      	sub	sp, #48	; 0x30
 80050a0:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80050a6:	4b97      	ldr	r3, [pc, #604]	; (8005304 <tcp_slowtmr+0x268>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3301      	adds	r3, #1
 80050ac:	4a95      	ldr	r2, [pc, #596]	; (8005304 <tcp_slowtmr+0x268>)
 80050ae:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80050b0:	4b95      	ldr	r3, [pc, #596]	; (8005308 <tcp_slowtmr+0x26c>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	3301      	adds	r3, #1
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	4b93      	ldr	r3, [pc, #588]	; (8005308 <tcp_slowtmr+0x26c>)
 80050ba:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 80050c0:	4b92      	ldr	r3, [pc, #584]	; (800530c <tcp_slowtmr+0x270>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80050c6:	e227      	b.n	8005518 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	7d1b      	ldrb	r3, [r3, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <tcp_slowtmr+0x42>
 80050d0:	4b8f      	ldr	r3, [pc, #572]	; (8005310 <tcp_slowtmr+0x274>)
 80050d2:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80050d6:	498f      	ldr	r1, [pc, #572]	; (8005314 <tcp_slowtmr+0x278>)
 80050d8:	488f      	ldr	r0, [pc, #572]	; (8005318 <tcp_slowtmr+0x27c>)
 80050da:	f009 fe55 	bl	800ed88 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	7d1b      	ldrb	r3, [r3, #20]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d106      	bne.n	80050f4 <tcp_slowtmr+0x58>
 80050e6:	4b8a      	ldr	r3, [pc, #552]	; (8005310 <tcp_slowtmr+0x274>)
 80050e8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80050ec:	498b      	ldr	r1, [pc, #556]	; (800531c <tcp_slowtmr+0x280>)
 80050ee:	488a      	ldr	r0, [pc, #552]	; (8005318 <tcp_slowtmr+0x27c>)
 80050f0:	f009 fe4a 	bl	800ed88 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	7d1b      	ldrb	r3, [r3, #20]
 80050f8:	2b0a      	cmp	r3, #10
 80050fa:	d106      	bne.n	800510a <tcp_slowtmr+0x6e>
 80050fc:	4b84      	ldr	r3, [pc, #528]	; (8005310 <tcp_slowtmr+0x274>)
 80050fe:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8005102:	4987      	ldr	r1, [pc, #540]	; (8005320 <tcp_slowtmr+0x284>)
 8005104:	4884      	ldr	r0, [pc, #528]	; (8005318 <tcp_slowtmr+0x27c>)
 8005106:	f009 fe3f 	bl	800ed88 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	7f5a      	ldrb	r2, [r3, #29]
 800510e:	4b7e      	ldr	r3, [pc, #504]	; (8005308 <tcp_slowtmr+0x26c>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d103      	bne.n	800511e <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800511c:	e1fc      	b.n	8005518 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800511e:	4b7a      	ldr	r3, [pc, #488]	; (8005308 <tcp_slowtmr+0x26c>)
 8005120:	781a      	ldrb	r2, [r3, #0]
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	7d1b      	ldrb	r3, [r3, #20]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d108      	bne.n	8005148 <tcp_slowtmr+0xac>
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800513c:	2b05      	cmp	r3, #5
 800513e:	d903      	bls.n	8005148 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8005140:	7ffb      	ldrb	r3, [r7, #31]
 8005142:	3301      	adds	r3, #1
 8005144:	77fb      	strb	r3, [r7, #31]
 8005146:	e0a2      	b.n	800528e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800514e:	2b0b      	cmp	r3, #11
 8005150:	d903      	bls.n	800515a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8005152:	7ffb      	ldrb	r3, [r7, #31]
 8005154:	3301      	adds	r3, #1
 8005156:	77fb      	strb	r3, [r7, #31]
 8005158:	e099      	b.n	800528e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005160:	2b00      	cmp	r3, #0
 8005162:	d032      	beq.n	80051ca <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800516a:	3b01      	subs	r3, #1
 800516c:	4a6d      	ldr	r2, [pc, #436]	; (8005324 <tcp_slowtmr+0x288>)
 800516e:	5cd3      	ldrb	r3, [r2, r3]
 8005170:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005178:	7cfa      	ldrb	r2, [r7, #19]
 800517a:	429a      	cmp	r2, r3
 800517c:	d907      	bls.n	800518e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005184:	3301      	adds	r3, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005194:	7cfa      	ldrb	r2, [r7, #19]
 8005196:	429a      	cmp	r2, r3
 8005198:	d879      	bhi.n	800528e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800519a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800519c:	f003 fede 	bl	8008f5c <tcp_zero_window_probe>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d173      	bne.n	800528e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80051b4:	2b06      	cmp	r3, #6
 80051b6:	d86a      	bhi.n	800528e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80051be:	3301      	adds	r3, #1
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80051c8:	e061      	b.n	800528e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	db08      	blt.n	80051e6 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3301      	adds	r3, #1
 80051de:	b29b      	uxth	r3, r3
 80051e0:	b21a      	sxth	r2, r3
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d04f      	beq.n	800528e <tcp_slowtmr+0x1f2>
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80051fa:	429a      	cmp	r2, r3
 80051fc:	db47      	blt.n	800528e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	7d1b      	ldrb	r3, [r3, #20]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d018      	beq.n	8005238 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800520c:	2b0c      	cmp	r3, #12
 800520e:	bf28      	it	cs
 8005210:	230c      	movcs	r3, #12
 8005212:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800521a:	10db      	asrs	r3, r3, #3
 800521c:	b21b      	sxth	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005226:	4413      	add	r3, r2
 8005228:	7dfa      	ldrb	r2, [r7, #23]
 800522a:	493f      	ldr	r1, [pc, #252]	; (8005328 <tcp_slowtmr+0x28c>)
 800522c:	5c8a      	ldrb	r2, [r1, r2]
 800522e:	4093      	lsls	r3, r2
 8005230:	b21a      	sxth	r2, r3
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	2200      	movs	r2, #0
 800523c:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800524a:	4293      	cmp	r3, r2
 800524c:	bf28      	it	cs
 800524e:	4613      	movcs	r3, r2
 8005250:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8005252:	8abb      	ldrh	r3, [r7, #20]
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	b29b      	uxth	r3, r3
 800526c:	429a      	cmp	r2, r3
 800526e:	d206      	bcs.n	800527e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8005288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800528a:	f003 fd4d 	bl	8008d28 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	7d1b      	ldrb	r3, [r3, #20]
 8005292:	2b06      	cmp	r3, #6
 8005294:	d10f      	bne.n	80052b6 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	7e9b      	ldrb	r3, [r3, #26]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d009      	beq.n	80052b6 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80052a2:	4b18      	ldr	r3, [pc, #96]	; (8005304 <tcp_slowtmr+0x268>)
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b28      	cmp	r3, #40	; 0x28
 80052ae:	d902      	bls.n	80052b6 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80052b0:	7ffb      	ldrb	r3, [r7, #31]
 80052b2:	3301      	adds	r3, #1
 80052b4:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	7a1b      	ldrb	r3, [r3, #8]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d05d      	beq.n	800537e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d003      	beq.n	80052d2 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80052ce:	2b07      	cmp	r3, #7
 80052d0:	d155      	bne.n	800537e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80052d2:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <tcp_slowtmr+0x268>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e2:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80052e6:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80052ea:	4910      	ldr	r1, [pc, #64]	; (800532c <tcp_slowtmr+0x290>)
 80052ec:	fba1 1303 	umull	r1, r3, r1, r3
 80052f0:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d91c      	bls.n	8005330 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80052f6:	7ffb      	ldrb	r3, [r7, #31]
 80052f8:	3301      	adds	r3, #1
 80052fa:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 80052fc:	7fbb      	ldrb	r3, [r7, #30]
 80052fe:	3301      	adds	r3, #1
 8005300:	77bb      	strb	r3, [r7, #30]
 8005302:	e03c      	b.n	800537e <tcp_slowtmr+0x2e2>
 8005304:	2000377c 	.word	0x2000377c
 8005308:	200000ca 	.word	0x200000ca
 800530c:	20003778 	.word	0x20003778
 8005310:	08010834 	.word	0x08010834
 8005314:	080109e4 	.word	0x080109e4
 8005318:	08010870 	.word	0x08010870
 800531c:	08010a10 	.word	0x08010a10
 8005320:	08010a3c 	.word	0x08010a3c
 8005324:	08012270 	.word	0x08012270
 8005328:	08012260 	.word	0x08012260
 800532c:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005330:	4b97      	ldr	r3, [pc, #604]	; (8005590 <tcp_slowtmr+0x4f4>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005346:	4618      	mov	r0, r3
 8005348:	4b92      	ldr	r3, [pc, #584]	; (8005594 <tcp_slowtmr+0x4f8>)
 800534a:	fb03 f300 	mul.w	r3, r3, r0
 800534e:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8005350:	4991      	ldr	r1, [pc, #580]	; (8005598 <tcp_slowtmr+0x4fc>)
 8005352:	fba1 1303 	umull	r1, r3, r1, r3
 8005356:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005358:	429a      	cmp	r2, r3
 800535a:	d910      	bls.n	800537e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800535c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800535e:	f003 fdc0 	bl	8008ee2 <tcp_keepalive>
 8005362:	4603      	mov	r3, r0
 8005364:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8005366:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d107      	bne.n	800537e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005374:	3301      	adds	r3, #1
 8005376:	b2da      	uxtb	r2, r3
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005382:	2b00      	cmp	r3, #0
 8005384:	d016      	beq.n	80053b4 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8005386:	4b82      	ldr	r3, [pc, #520]	; (8005590 <tcp_slowtmr+0x4f4>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005396:	4619      	mov	r1, r3
 8005398:	460b      	mov	r3, r1
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	440b      	add	r3, r1
 800539e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d307      	bcc.n	80053b4 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fa04 	bl	80057b6 <tcp_segs_free>
      pcb->ooseq = NULL;
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	2200      	movs	r2, #0
 80053b2:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	7d1b      	ldrb	r3, [r3, #20]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d109      	bne.n	80053d0 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80053bc:	4b74      	ldr	r3, [pc, #464]	; (8005590 <tcp_slowtmr+0x4f4>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b28      	cmp	r3, #40	; 0x28
 80053c8:	d902      	bls.n	80053d0 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80053ca:	7ffb      	ldrb	r3, [r7, #31]
 80053cc:	3301      	adds	r3, #1
 80053ce:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	7d1b      	ldrb	r3, [r3, #20]
 80053d4:	2b09      	cmp	r3, #9
 80053d6:	d109      	bne.n	80053ec <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80053d8:	4b6d      	ldr	r3, [pc, #436]	; (8005590 <tcp_slowtmr+0x4f4>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2bf0      	cmp	r3, #240	; 0xf0
 80053e4:	d902      	bls.n	80053ec <tcp_slowtmr+0x350>
        ++pcb_remove;
 80053e6:	7ffb      	ldrb	r3, [r7, #31]
 80053e8:	3301      	adds	r3, #1
 80053ea:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80053ec:	7ffb      	ldrb	r3, [r7, #31]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d05d      	beq.n	80054ae <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80053fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053fc:	f000 fb84 	bl	8005b08 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d010      	beq.n	8005428 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005406:	4b65      	ldr	r3, [pc, #404]	; (800559c <tcp_slowtmr+0x500>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540c:	429a      	cmp	r2, r3
 800540e:	d106      	bne.n	800541e <tcp_slowtmr+0x382>
 8005410:	4b63      	ldr	r3, [pc, #396]	; (80055a0 <tcp_slowtmr+0x504>)
 8005412:	f240 4289 	movw	r2, #1161	; 0x489
 8005416:	4963      	ldr	r1, [pc, #396]	; (80055a4 <tcp_slowtmr+0x508>)
 8005418:	4863      	ldr	r0, [pc, #396]	; (80055a8 <tcp_slowtmr+0x50c>)
 800541a:	f009 fcb5 	bl	800ed88 <iprintf>
        prev->next = pcb->next;
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	e00f      	b.n	8005448 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005428:	4b5c      	ldr	r3, [pc, #368]	; (800559c <tcp_slowtmr+0x500>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542e:	429a      	cmp	r2, r3
 8005430:	d006      	beq.n	8005440 <tcp_slowtmr+0x3a4>
 8005432:	4b5b      	ldr	r3, [pc, #364]	; (80055a0 <tcp_slowtmr+0x504>)
 8005434:	f240 428d 	movw	r2, #1165	; 0x48d
 8005438:	495c      	ldr	r1, [pc, #368]	; (80055ac <tcp_slowtmr+0x510>)
 800543a:	485b      	ldr	r0, [pc, #364]	; (80055a8 <tcp_slowtmr+0x50c>)
 800543c:	f009 fca4 	bl	800ed88 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	4a55      	ldr	r2, [pc, #340]	; (800559c <tcp_slowtmr+0x500>)
 8005446:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005448:	7fbb      	ldrb	r3, [r7, #30]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d010      	beq.n	8005470 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005456:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	1d1d      	adds	r5, r3, #4
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	8adb      	ldrh	r3, [r3, #22]
 8005460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005462:	8b12      	ldrh	r2, [r2, #24]
 8005464:	9201      	str	r2, [sp, #4]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	462b      	mov	r3, r5
 800546a:	4622      	mov	r2, r4
 800546c:	f003 fbe6 	bl	8008c3c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	7d1b      	ldrb	r3, [r3, #20]
 800547a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	2001      	movs	r0, #1
 800548a:	f7fe fb43 	bl	8003b14 <memp_free>

      tcp_active_pcbs_changed = 0;
 800548e:	4b48      	ldr	r3, [pc, #288]	; (80055b0 <tcp_slowtmr+0x514>)
 8005490:	2200      	movs	r2, #0
 8005492:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <tcp_slowtmr+0x408>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f06f 010c 	mvn.w	r1, #12
 80054a0:	68b8      	ldr	r0, [r7, #8]
 80054a2:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80054a4:	4b42      	ldr	r3, [pc, #264]	; (80055b0 <tcp_slowtmr+0x514>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d035      	beq.n	8005518 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 80054ac:	e606      	b.n	80050bc <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	7edb      	ldrb	r3, [r3, #27]
 80054bc:	3301      	adds	r3, #1
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	7eda      	ldrb	r2, [r3, #27]
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	7f1b      	ldrb	r3, [r3, #28]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d323      	bcc.n	8005518 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	2200      	movs	r2, #0
 80054d4:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80054d6:	4b36      	ldr	r3, [pc, #216]	; (80055b0 <tcp_slowtmr+0x514>)
 80054d8:	2200      	movs	r2, #0
 80054da:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <tcp_slowtmr+0x460>
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	6a3a      	ldr	r2, [r7, #32]
 80054ee:	6912      	ldr	r2, [r2, #16]
 80054f0:	6a39      	ldr	r1, [r7, #32]
 80054f2:	4610      	mov	r0, r2
 80054f4:	4798      	blx	r3
 80054f6:	4603      	mov	r3, r0
 80054f8:	777b      	strb	r3, [r7, #29]
 80054fa:	e001      	b.n	8005500 <tcp_slowtmr+0x464>
 80054fc:	2300      	movs	r3, #0
 80054fe:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8005500:	4b2b      	ldr	r3, [pc, #172]	; (80055b0 <tcp_slowtmr+0x514>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d000      	beq.n	800550a <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8005508:	e5d8      	b.n	80050bc <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800550a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8005512:	6a38      	ldr	r0, [r7, #32]
 8005514:	f003 f908 	bl	8008728 <tcp_output>
  while (pcb != NULL) {
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	f47f add4 	bne.w	80050c8 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8005520:	2300      	movs	r3, #0
 8005522:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8005524:	4b23      	ldr	r3, [pc, #140]	; (80055b4 <tcp_slowtmr+0x518>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800552a:	e068      	b.n	80055fe <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	7d1b      	ldrb	r3, [r3, #20]
 8005530:	2b0a      	cmp	r3, #10
 8005532:	d006      	beq.n	8005542 <tcp_slowtmr+0x4a6>
 8005534:	4b1a      	ldr	r3, [pc, #104]	; (80055a0 <tcp_slowtmr+0x504>)
 8005536:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800553a:	491f      	ldr	r1, [pc, #124]	; (80055b8 <tcp_slowtmr+0x51c>)
 800553c:	481a      	ldr	r0, [pc, #104]	; (80055a8 <tcp_slowtmr+0x50c>)
 800553e:	f009 fc23 	bl	800ed88 <iprintf>
    pcb_remove = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005546:	4b12      	ldr	r3, [pc, #72]	; (8005590 <tcp_slowtmr+0x4f4>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2bf0      	cmp	r3, #240	; 0xf0
 8005552:	d902      	bls.n	800555a <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8005554:	7ffb      	ldrb	r3, [r7, #31]
 8005556:	3301      	adds	r3, #1
 8005558:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800555a:	7ffb      	ldrb	r3, [r7, #31]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d049      	beq.n	80055f4 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005562:	f000 fad1 	bl	8005b08 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d029      	beq.n	80055c0 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800556c:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <tcp_slowtmr+0x518>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005572:	429a      	cmp	r2, r3
 8005574:	d106      	bne.n	8005584 <tcp_slowtmr+0x4e8>
 8005576:	4b0a      	ldr	r3, [pc, #40]	; (80055a0 <tcp_slowtmr+0x504>)
 8005578:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800557c:	490f      	ldr	r1, [pc, #60]	; (80055bc <tcp_slowtmr+0x520>)
 800557e:	480a      	ldr	r0, [pc, #40]	; (80055a8 <tcp_slowtmr+0x50c>)
 8005580:	f009 fc02 	bl	800ed88 <iprintf>
        prev->next = pcb->next;
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	60da      	str	r2, [r3, #12]
 800558c:	e028      	b.n	80055e0 <tcp_slowtmr+0x544>
 800558e:	bf00      	nop
 8005590:	2000377c 	.word	0x2000377c
 8005594:	000124f8 	.word	0x000124f8
 8005598:	10624dd3 	.word	0x10624dd3
 800559c:	20003778 	.word	0x20003778
 80055a0:	08010834 	.word	0x08010834
 80055a4:	08010a6c 	.word	0x08010a6c
 80055a8:	08010870 	.word	0x08010870
 80055ac:	08010a98 	.word	0x08010a98
 80055b0:	20003774 	.word	0x20003774
 80055b4:	20003788 	.word	0x20003788
 80055b8:	08010ac4 	.word	0x08010ac4
 80055bc:	08010af4 	.word	0x08010af4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80055c0:	4b12      	ldr	r3, [pc, #72]	; (800560c <tcp_slowtmr+0x570>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d006      	beq.n	80055d8 <tcp_slowtmr+0x53c>
 80055ca:	4b11      	ldr	r3, [pc, #68]	; (8005610 <tcp_slowtmr+0x574>)
 80055cc:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80055d0:	4910      	ldr	r1, [pc, #64]	; (8005614 <tcp_slowtmr+0x578>)
 80055d2:	4811      	ldr	r0, [pc, #68]	; (8005618 <tcp_slowtmr+0x57c>)
 80055d4:	f009 fbd8 	bl	800ed88 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4a0b      	ldr	r2, [pc, #44]	; (800560c <tcp_slowtmr+0x570>)
 80055de:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80055ea:	69b9      	ldr	r1, [r7, #24]
 80055ec:	2001      	movs	r0, #1
 80055ee:	f7fe fa91 	bl	8003b14 <memp_free>
 80055f2:	e004      	b.n	80055fe <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	2b00      	cmp	r3, #0
 8005602:	d193      	bne.n	800552c <tcp_slowtmr+0x490>
    }
  }
}
 8005604:	bf00      	nop
 8005606:	3728      	adds	r7, #40	; 0x28
 8005608:	46bd      	mov	sp, r7
 800560a:	bdb0      	pop	{r4, r5, r7, pc}
 800560c:	20003788 	.word	0x20003788
 8005610:	08010834 	.word	0x08010834
 8005614:	08010b1c 	.word	0x08010b1c
 8005618:	08010870 	.word	0x08010870

0800561c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8005622:	4b2d      	ldr	r3, [pc, #180]	; (80056d8 <tcp_fasttmr+0xbc>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	b2da      	uxtb	r2, r3
 800562a:	4b2b      	ldr	r3, [pc, #172]	; (80056d8 <tcp_fasttmr+0xbc>)
 800562c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800562e:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <tcp_fasttmr+0xc0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8005634:	e048      	b.n	80056c8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	7f5a      	ldrb	r2, [r3, #29]
 800563a:	4b27      	ldr	r3, [pc, #156]	; (80056d8 <tcp_fasttmr+0xbc>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d03f      	beq.n	80056c2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8005642:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <tcp_fasttmr+0xbc>)
 8005644:	781a      	ldrb	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	7e9b      	ldrb	r3, [r3, #26]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d010      	beq.n	8005678 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	7e9b      	ldrb	r3, [r3, #26]
 800565a:	f043 0302 	orr.w	r3, r3, #2
 800565e:	b2da      	uxtb	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f003 f85f 	bl	8008728 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	7e9b      	ldrb	r3, [r3, #26]
 800566e:	f023 0303 	bic.w	r3, r3, #3
 8005672:	b2da      	uxtb	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	7e9b      	ldrb	r3, [r3, #26]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	7e9b      	ldrb	r3, [r3, #26]
 8005688:	f023 0308 	bic.w	r3, r3, #8
 800568c:	b2da      	uxtb	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff fb1e 	bl	8004cd4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80056a6:	4b0e      	ldr	r3, [pc, #56]	; (80056e0 <tcp_fasttmr+0xc4>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f819 	bl	80056e4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80056b2:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <tcp_fasttmr+0xc4>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d000      	beq.n	80056bc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80056ba:	e7b8      	b.n	800562e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	607b      	str	r3, [r7, #4]
 80056c0:	e002      	b.n	80056c8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1b3      	bne.n	8005636 <tcp_fasttmr+0x1a>
    }
  }
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	200000ca 	.word	0x200000ca
 80056dc:	20003778 	.word	0x20003778
 80056e0:	20003774 	.word	0x20003774

080056e4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80056e4:	b590      	push	{r4, r7, lr}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f0:	7b5b      	ldrb	r3, [r3, #13]
 80056f2:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f8:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <tcp_process_refused_data+0x3e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6918      	ldr	r0, [r3, #16]
 8005714:	2300      	movs	r3, #0
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	47a0      	blx	r4
 800571c:	4603      	mov	r3, r0
 800571e:	73fb      	strb	r3, [r7, #15]
 8005720:	e007      	b.n	8005732 <tcp_process_refused_data+0x4e>
 8005722:	2300      	movs	r3, #0
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	2000      	movs	r0, #0
 800572a:	f000 f88c 	bl	8005846 <tcp_recv_null>
 800572e:	4603      	mov	r3, r0
 8005730:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d12a      	bne.n	8005790 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800573a:	7bbb      	ldrb	r3, [r7, #14]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b00      	cmp	r3, #0
 8005742:	d033      	beq.n	80057ac <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005748:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800574c:	d005      	beq.n	800575a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005752:	3301      	adds	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00b      	beq.n	800577c <tcp_process_refused_data+0x98>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6918      	ldr	r0, [r3, #16]
 800576e:	2300      	movs	r3, #0
 8005770:	2200      	movs	r2, #0
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	47a0      	blx	r4
 8005776:	4603      	mov	r3, r0
 8005778:	73fb      	strb	r3, [r7, #15]
 800577a:	e001      	b.n	8005780 <tcp_process_refused_data+0x9c>
 800577c:	2300      	movs	r3, #0
 800577e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8005780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005784:	f113 0f0d 	cmn.w	r3, #13
 8005788:	d110      	bne.n	80057ac <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800578a:	f06f 030c 	mvn.w	r3, #12
 800578e:	e00e      	b.n	80057ae <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8005790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005794:	f113 0f0d 	cmn.w	r3, #13
 8005798:	d102      	bne.n	80057a0 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800579a:	f06f 030c 	mvn.w	r3, #12
 800579e:	e006      	b.n	80057ae <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 80057a6:	f06f 0304 	mvn.w	r3, #4
 80057aa:	e000      	b.n	80057ae <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd90      	pop	{r4, r7, pc}

080057b6 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80057be:	e007      	b.n	80057d0 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f809 	bl	80057de <tcp_seg_free>
    seg = next;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f4      	bne.n	80057c0 <tcp_segs_free+0xa>
  }
}
 80057d6:	bf00      	nop
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00c      	beq.n	8005806 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe fe99 	bl	8004530 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	2003      	movs	r0, #3
 8005802:	f7fe f987 	bl	8003b14 <memp_free>
  }
}
 8005806:	bf00      	nop
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8005816:	2003      	movs	r0, #3
 8005818:	f7fe f930 	bl	8003a7c <memp_malloc>
 800581c:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <tcp_seg_copy+0x1a>
    return NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	e00a      	b.n	800583e <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8005828:	2210      	movs	r2, #16
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f009 fa98 	bl	800ed62 <memcpy>
  pbuf_ref(cseg->p);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4618      	mov	r0, r3
 8005838:	f7fe ff26 	bl	8004688 <pbuf_ref>
  return cseg;
 800583c:	68fb      	ldr	r3, [r7, #12]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
 8005852:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d009      	beq.n	800586e <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	891b      	ldrh	r3, [r3, #8]
 800585e:	4619      	mov	r1, r3
 8005860:	68b8      	ldr	r0, [r7, #8]
 8005862:	f7ff fbc1 	bl	8004fe8 <tcp_recved>
    pbuf_free(p);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fe fe62 	bl	8004530 <pbuf_free>
 800586c:	e008      	b.n	8005880 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800586e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8005876:	68b8      	ldr	r0, [r7, #8]
 8005878:	f7ff fa92 	bl	8004da0 <tcp_close>
 800587c:	4603      	mov	r3, r0
 800587e:	e000      	b.n	8005882 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	4603      	mov	r3, r0
 8005894:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8005896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589a:	2b00      	cmp	r3, #0
 800589c:	db01      	blt.n	80058a2 <tcp_kill_prio+0x16>
 800589e:	79fb      	ldrb	r3, [r7, #7]
 80058a0:	e000      	b.n	80058a4 <tcp_kill_prio+0x18>
 80058a2:	237f      	movs	r3, #127	; 0x7f
 80058a4:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80058ae:	4b16      	ldr	r3, [pc, #88]	; (8005908 <tcp_kill_prio+0x7c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	e01a      	b.n	80058ec <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	7d5b      	ldrb	r3, [r3, #21]
 80058ba:	7afa      	ldrb	r2, [r7, #11]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d312      	bcc.n	80058e6 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80058c0:	4b12      	ldr	r3, [pc, #72]	; (800590c <tcp_kill_prio+0x80>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d80a      	bhi.n	80058e6 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 80058d0:	4b0e      	ldr	r3, [pc, #56]	; (800590c <tcp_kill_prio+0x80>)
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	7d5b      	ldrb	r3, [r3, #21]
 80058e4:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e1      	bne.n	80058b6 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80058f8:	6938      	ldr	r0, [r7, #16]
 80058fa:	f7ff fb1b 	bl	8004f34 <tcp_abort>
  }
}
 80058fe:	bf00      	nop
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20003778 	.word	0x20003778
 800590c:	2000377c 	.word	0x2000377c

08005910 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	2b08      	cmp	r3, #8
 800591e:	d009      	beq.n	8005934 <tcp_kill_state+0x24>
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	2b09      	cmp	r3, #9
 8005924:	d006      	beq.n	8005934 <tcp_kill_state+0x24>
 8005926:	4b1a      	ldr	r3, [pc, #104]	; (8005990 <tcp_kill_state+0x80>)
 8005928:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800592c:	4919      	ldr	r1, [pc, #100]	; (8005994 <tcp_kill_state+0x84>)
 800592e:	481a      	ldr	r0, [pc, #104]	; (8005998 <tcp_kill_state+0x88>)
 8005930:	f009 fa2a 	bl	800ed88 <iprintf>

  inactivity = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8005938:	2300      	movs	r3, #0
 800593a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800593c:	4b17      	ldr	r3, [pc, #92]	; (800599c <tcp_kill_state+0x8c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e017      	b.n	8005974 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	7d1b      	ldrb	r3, [r3, #20]
 8005948:	79fa      	ldrb	r2, [r7, #7]
 800594a:	429a      	cmp	r2, r3
 800594c:	d10f      	bne.n	800596e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800594e:	4b14      	ldr	r3, [pc, #80]	; (80059a0 <tcp_kill_state+0x90>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	429a      	cmp	r2, r3
 800595c:	d807      	bhi.n	800596e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800595e:	4b10      	ldr	r3, [pc, #64]	; (80059a0 <tcp_kill_state+0x90>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e4      	bne.n	8005944 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8005980:	2100      	movs	r1, #0
 8005982:	6938      	ldr	r0, [r7, #16]
 8005984:	f7ff fa24 	bl	8004dd0 <tcp_abandon>
  }
}
 8005988:	bf00      	nop
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	08010834 	.word	0x08010834
 8005994:	08010b44 	.word	0x08010b44
 8005998:	08010870 	.word	0x08010870
 800599c:	20003778 	.word	0x20003778
 80059a0:	2000377c 	.word	0x2000377c

080059a4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80059b2:	4b12      	ldr	r3, [pc, #72]	; (80059fc <tcp_kill_timewait+0x58>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e012      	b.n	80059e0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <tcp_kill_timewait+0x5c>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d807      	bhi.n	80059da <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <tcp_kill_timewait+0x5c>)
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e9      	bne.n	80059ba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80059ec:	68b8      	ldr	r0, [r7, #8]
 80059ee:	f7ff faa1 	bl	8004f34 <tcp_abort>
  }
}
 80059f2:	bf00      	nop
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20003788 	.word	0x20003788
 8005a00:	2000377c 	.word	0x2000377c

08005a04 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005a0e:	2001      	movs	r0, #1
 8005a10:	f7fe f834 	bl	8003a7c <memp_malloc>
 8005a14:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d124      	bne.n	8005a66 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8005a1c:	f7ff ffc2 	bl	80059a4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005a20:	2001      	movs	r0, #1
 8005a22:	f7fe f82b 	bl	8003a7c <memp_malloc>
 8005a26:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d11b      	bne.n	8005a66 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8005a2e:	2009      	movs	r0, #9
 8005a30:	f7ff ff6e 	bl	8005910 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005a34:	2001      	movs	r0, #1
 8005a36:	f7fe f821 	bl	8003a7c <memp_malloc>
 8005a3a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d111      	bne.n	8005a66 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8005a42:	2008      	movs	r0, #8
 8005a44:	f7ff ff64 	bl	8005910 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005a48:	2001      	movs	r0, #1
 8005a4a:	f7fe f817 	bl	8003a7c <memp_malloc>
 8005a4e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d107      	bne.n	8005a66 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff ff17 	bl	800588c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005a5e:	2001      	movs	r0, #1
 8005a60:	f7fe f80c 	bl	8003a7c <memp_malloc>
 8005a64:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d03f      	beq.n	8005aec <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8005a6c:	2298      	movs	r2, #152	; 0x98
 8005a6e:	2100      	movs	r1, #0
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f009 f981 	bl	800ed78 <memset>
    pcb->prio = prio;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	79fa      	ldrb	r2, [r7, #7]
 8005a7a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005a82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	22ff      	movs	r2, #255	; 0xff
 8005a9a:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8005aa2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2206      	movs	r2, #6
 8005aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2206      	movs	r2, #6
 8005ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ab8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <tcp_alloc+0xf4>)
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8005aca:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <tcp_alloc+0xf8>)
 8005acc:	781a      	ldrb	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8005ad8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <tcp_alloc+0xfc>)
 8005ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a07      	ldr	r2, [pc, #28]	; (8005b04 <tcp_alloc+0x100>)
 8005ae8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8005aec:	68fb      	ldr	r3, [r7, #12]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	2000377c 	.word	0x2000377c
 8005afc:	200000ca 	.word	0x200000ca
 8005b00:	08005847 	.word	0x08005847
 8005b04:	006ddd00 	.word	0x006ddd00

08005b08 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	7d1b      	ldrb	r3, [r3, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d034      	beq.n	8005b82 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8005b1c:	2b0a      	cmp	r3, #10
 8005b1e:	d030      	beq.n	8005b82 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d02c      	beq.n	8005b82 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fe fcfb 	bl	8004530 <pbuf_free>
      pcb->refused_data = NULL;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff fe36 	bl	80057b6 <tcp_segs_free>
    pcb->ooseq = NULL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b56:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff fe2a 	bl	80057b6 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff fe25 	bl	80057b6 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	669a      	str	r2, [r3, #104]	; 0x68
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d105      	bne.n	8005bac <tcp_pcb_remove+0x20>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	e013      	b.n	8005bd4 <tcp_pcb_remove+0x48>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	e00c      	b.n	8005bce <tcp_pcb_remove+0x42>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d104      	bne.n	8005bc8 <tcp_pcb_remove+0x3c>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	60da      	str	r2, [r3, #12]
 8005bc6:	e005      	b.n	8005bd4 <tcp_pcb_remove+0x48>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1ef      	bne.n	8005bb4 <tcp_pcb_remove+0x28>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8005bda:	6838      	ldr	r0, [r7, #0]
 8005bdc:	f7ff ff94 	bl	8005b08 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	7d1b      	ldrb	r3, [r3, #20]
 8005be4:	2b0a      	cmp	r3, #10
 8005be6:	d013      	beq.n	8005c10 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d00f      	beq.n	8005c10 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	7e9b      	ldrb	r3, [r3, #26]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d009      	beq.n	8005c10 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	7e9b      	ldrb	r3, [r3, #26]
 8005c00:	f043 0302 	orr.w	r3, r3, #2
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8005c0a:	6838      	ldr	r0, [r7, #0]
 8005c0c:	f002 fd8c 	bl	8008728 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	7d1b      	ldrb	r3, [r3, #20]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d020      	beq.n	8005c5a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d006      	beq.n	8005c2e <tcp_pcb_remove+0xa2>
 8005c20:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <tcp_pcb_remove+0xe4>)
 8005c22:	f240 7253 	movw	r2, #1875	; 0x753
 8005c26:	4913      	ldr	r1, [pc, #76]	; (8005c74 <tcp_pcb_remove+0xe8>)
 8005c28:	4813      	ldr	r0, [pc, #76]	; (8005c78 <tcp_pcb_remove+0xec>)
 8005c2a:	f009 f8ad 	bl	800ed88 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d006      	beq.n	8005c44 <tcp_pcb_remove+0xb8>
 8005c36:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <tcp_pcb_remove+0xe4>)
 8005c38:	f240 7254 	movw	r2, #1876	; 0x754
 8005c3c:	490f      	ldr	r1, [pc, #60]	; (8005c7c <tcp_pcb_remove+0xf0>)
 8005c3e:	480e      	ldr	r0, [pc, #56]	; (8005c78 <tcp_pcb_remove+0xec>)
 8005c40:	f009 f8a2 	bl	800ed88 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d006      	beq.n	8005c5a <tcp_pcb_remove+0xce>
 8005c4c:	4b08      	ldr	r3, [pc, #32]	; (8005c70 <tcp_pcb_remove+0xe4>)
 8005c4e:	f240 7256 	movw	r2, #1878	; 0x756
 8005c52:	490b      	ldr	r1, [pc, #44]	; (8005c80 <tcp_pcb_remove+0xf4>)
 8005c54:	4808      	ldr	r0, [pc, #32]	; (8005c78 <tcp_pcb_remove+0xec>)
 8005c56:	f009 f897 	bl	800ed88 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2200      	movs	r2, #0
 8005c64:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8005c66:	bf00      	nop
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	08010834 	.word	0x08010834
 8005c74:	08010bec 	.word	0x08010bec
 8005c78:	08010870 	.word	0x08010870
 8005c7c:	08010c04 	.word	0x08010c04
 8005c80:	08010c20 	.word	0x08010c20

08005c84 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8005c8c:	4b07      	ldr	r3, [pc, #28]	; (8005cac <tcp_next_iss+0x28>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <tcp_next_iss+0x2c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4413      	add	r3, r2
 8005c96:	4a05      	ldr	r2, [pc, #20]	; (8005cac <tcp_next_iss+0x28>)
 8005c98:	6013      	str	r3, [r2, #0]
  return iss;
 8005c9a:	4b04      	ldr	r3, [pc, #16]	; (8005cac <tcp_next_iss+0x28>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	20000008 	.word	0x20000008
 8005cb0:	2000377c 	.word	0x2000377c

08005cb4 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	6039      	str	r1, [r7, #0]
 8005cbe:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8005cc0:	6838      	ldr	r0, [r7, #0]
 8005cc2:	f006 fdf7 	bl	800c8b4 <ip4_route>
 8005cc6:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	e010      	b.n	8005cf4 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cd6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8005cd8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8005ce0:	897b      	ldrh	r3, [r7, #10]
 8005ce2:	3b28      	subs	r3, #40	; 0x28
 8005ce4:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8005ce6:	893a      	ldrh	r2, [r7, #8]
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	4293      	cmp	r3, r2
 8005cec:	bf28      	it	cs
 8005cee:	4613      	movcs	r3, r2
 8005cf0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8005d0a:	e011      	b.n	8005d30 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d108      	bne.n	8005d2a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff f908 	bl	8004f34 <tcp_abort>
      pcb = next;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	e002      	b.n	8005d30 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1ea      	bne.n	8005d0c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d02c      	beq.n	8005daa <tcp_netif_ip_addr_changed+0x6a>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d028      	beq.n	8005daa <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8005d58:	4b16      	ldr	r3, [pc, #88]	; (8005db4 <tcp_netif_ip_addr_changed+0x74>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7ff ffcc 	bl	8005cfc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8005d64:	4b14      	ldr	r3, [pc, #80]	; (8005db8 <tcp_netif_ip_addr_changed+0x78>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff ffc6 	bl	8005cfc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d019      	beq.n	8005daa <tcp_netif_ip_addr_changed+0x6a>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d015      	beq.n	8005daa <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8005d7e:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <tcp_netif_ip_addr_changed+0x7c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e00e      	b.n	8005da4 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d103      	bne.n	8005da0 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1ed      	bne.n	8005d86 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8005daa:	bf00      	nop
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20003778 	.word	0x20003778
 8005db8:	20003784 	.word	0x20003784
 8005dbc:	20003780 	.word	0x20003780

08005dc0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b08b      	sub	sp, #44	; 0x2c
 8005dc4:	af02      	add	r7, sp, #8
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	4a82      	ldr	r2, [pc, #520]	; (8005fd8 <tcp_input+0x218>)
 8005dd0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	895b      	ldrh	r3, [r3, #10]
 8005dd6:	2b13      	cmp	r3, #19
 8005dd8:	f240 838a 	bls.w	80064f0 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005ddc:	4b7f      	ldr	r3, [pc, #508]	; (8005fdc <tcp_input+0x21c>)
 8005dde:	695a      	ldr	r2, [r3, #20]
 8005de0:	4b7e      	ldr	r3, [pc, #504]	; (8005fdc <tcp_input+0x21c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f006 fffc 	bl	800cde4 <ip4_addr_isbroadcast_u32>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f040 8380 	bne.w	80064f4 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8005df4:	4b79      	ldr	r3, [pc, #484]	; (8005fdc <tcp_input+0x21c>)
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8005dfc:	2be0      	cmp	r3, #224	; 0xe0
 8005dfe:	f000 8379 	beq.w	80064f4 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8005e02:	4b75      	ldr	r3, [pc, #468]	; (8005fd8 <tcp_input+0x218>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	899b      	ldrh	r3, [r3, #12]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fd fa88 	bl	8003320 <lwip_htons>
 8005e10:	4603      	mov	r3, r0
 8005e12:	0b1b      	lsrs	r3, r3, #12
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8005e1c:	7cbb      	ldrb	r3, [r7, #18]
 8005e1e:	2b13      	cmp	r3, #19
 8005e20:	f240 8368 	bls.w	80064f4 <tcp_input+0x734>
 8005e24:	7cbb      	ldrb	r3, [r7, #18]
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	891b      	ldrh	r3, [r3, #8]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	f200 8361 	bhi.w	80064f4 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8005e32:	7cbb      	ldrb	r3, [r7, #18]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b14      	subs	r3, #20
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	4b69      	ldr	r3, [pc, #420]	; (8005fe0 <tcp_input+0x220>)
 8005e3c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8005e3e:	4b69      	ldr	r3, [pc, #420]	; (8005fe4 <tcp_input+0x224>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	895a      	ldrh	r2, [r3, #10]
 8005e48:	7cbb      	ldrb	r3, [r7, #18]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d30d      	bcc.n	8005e6c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8005e50:	4b63      	ldr	r3, [pc, #396]	; (8005fe0 <tcp_input+0x220>)
 8005e52:	881a      	ldrh	r2, [r3, #0]
 8005e54:	4b64      	ldr	r3, [pc, #400]	; (8005fe8 <tcp_input+0x228>)
 8005e56:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8005e58:	7cbb      	ldrb	r3, [r7, #18]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	425b      	negs	r3, r3
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	b21b      	sxth	r3, r3
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7fe fb3f 	bl	80044e8 <pbuf_header>
 8005e6a:	e055      	b.n	8005f18 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <tcp_input+0xc0>
 8005e74:	4b5d      	ldr	r3, [pc, #372]	; (8005fec <tcp_input+0x22c>)
 8005e76:	22b2      	movs	r2, #178	; 0xb2
 8005e78:	495d      	ldr	r1, [pc, #372]	; (8005ff0 <tcp_input+0x230>)
 8005e7a:	485e      	ldr	r0, [pc, #376]	; (8005ff4 <tcp_input+0x234>)
 8005e7c:	f008 ff84 	bl	800ed88 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8005e80:	f06f 0113 	mvn.w	r1, #19
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7fe fb2f 	bl	80044e8 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	895a      	ldrh	r2, [r3, #10]
 8005e8e:	4b56      	ldr	r3, [pc, #344]	; (8005fe8 <tcp_input+0x228>)
 8005e90:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8005e92:	4b53      	ldr	r3, [pc, #332]	; (8005fe0 <tcp_input+0x220>)
 8005e94:	881a      	ldrh	r2, [r3, #0]
 8005e96:	4b54      	ldr	r3, [pc, #336]	; (8005fe8 <tcp_input+0x228>)
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8005e9e:	4b52      	ldr	r3, [pc, #328]	; (8005fe8 <tcp_input+0x228>)
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	425b      	negs	r3, r3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	b21b      	sxth	r3, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fe fb1c 	bl	80044e8 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	895b      	ldrh	r3, [r3, #10]
 8005eb6:	8a3a      	ldrh	r2, [r7, #16]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	f200 831d 	bhi.w	80064f8 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	4a47      	ldr	r2, [pc, #284]	; (8005fe4 <tcp_input+0x224>)
 8005ec6:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	8a3b      	ldrh	r3, [r7, #16]
 8005ece:	425b      	negs	r3, r3
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	b21b      	sxth	r3, r3
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	f7fe fb06 	bl	80044e8 <pbuf_header>
    p->tot_len -= opt2len;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	891a      	ldrh	r2, [r3, #8]
 8005ee0:	8a3b      	ldrh	r3, [r7, #16]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	895b      	ldrh	r3, [r3, #10]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <tcp_input+0x13e>
 8005ef2:	4b3e      	ldr	r3, [pc, #248]	; (8005fec <tcp_input+0x22c>)
 8005ef4:	22cf      	movs	r2, #207	; 0xcf
 8005ef6:	4940      	ldr	r1, [pc, #256]	; (8005ff8 <tcp_input+0x238>)
 8005ef8:	483e      	ldr	r0, [pc, #248]	; (8005ff4 <tcp_input+0x234>)
 8005efa:	f008 ff45 	bl	800ed88 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	891a      	ldrh	r2, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	891b      	ldrh	r3, [r3, #8]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d005      	beq.n	8005f18 <tcp_input+0x158>
 8005f0c:	4b37      	ldr	r3, [pc, #220]	; (8005fec <tcp_input+0x22c>)
 8005f0e:	22d0      	movs	r2, #208	; 0xd0
 8005f10:	493a      	ldr	r1, [pc, #232]	; (8005ffc <tcp_input+0x23c>)
 8005f12:	4838      	ldr	r0, [pc, #224]	; (8005ff4 <tcp_input+0x234>)
 8005f14:	f008 ff38 	bl	800ed88 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8005f18:	4b2f      	ldr	r3, [pc, #188]	; (8005fd8 <tcp_input+0x218>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	4b2d      	ldr	r3, [pc, #180]	; (8005fd8 <tcp_input+0x218>)
 8005f22:	681c      	ldr	r4, [r3, #0]
 8005f24:	4610      	mov	r0, r2
 8005f26:	f7fd f9fb 	bl	8003320 <lwip_htons>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8005f2e:	4b2a      	ldr	r3, [pc, #168]	; (8005fd8 <tcp_input+0x218>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	885b      	ldrh	r3, [r3, #2]
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	4b28      	ldr	r3, [pc, #160]	; (8005fd8 <tcp_input+0x218>)
 8005f38:	681c      	ldr	r4, [r3, #0]
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f7fd f9f0 	bl	8003320 <lwip_htons>
 8005f40:	4603      	mov	r3, r0
 8005f42:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8005f44:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <tcp_input+0x218>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	4b23      	ldr	r3, [pc, #140]	; (8005fd8 <tcp_input+0x218>)
 8005f4c:	681c      	ldr	r4, [r3, #0]
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f7fd f9f4 	bl	800333c <lwip_htonl>
 8005f54:	4603      	mov	r3, r0
 8005f56:	6063      	str	r3, [r4, #4]
 8005f58:	6863      	ldr	r3, [r4, #4]
 8005f5a:	4a29      	ldr	r2, [pc, #164]	; (8006000 <tcp_input+0x240>)
 8005f5c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8005f5e:	4b1e      	ldr	r3, [pc, #120]	; (8005fd8 <tcp_input+0x218>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	4b1c      	ldr	r3, [pc, #112]	; (8005fd8 <tcp_input+0x218>)
 8005f66:	681c      	ldr	r4, [r3, #0]
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f7fd f9e7 	bl	800333c <lwip_htonl>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	60a3      	str	r3, [r4, #8]
 8005f72:	68a3      	ldr	r3, [r4, #8]
 8005f74:	4a23      	ldr	r2, [pc, #140]	; (8006004 <tcp_input+0x244>)
 8005f76:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8005f78:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <tcp_input+0x218>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	89db      	ldrh	r3, [r3, #14]
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <tcp_input+0x218>)
 8005f82:	681c      	ldr	r4, [r3, #0]
 8005f84:	4610      	mov	r0, r2
 8005f86:	f7fd f9cb 	bl	8003320 <lwip_htons>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8005f8e:	4b12      	ldr	r3, [pc, #72]	; (8005fd8 <tcp_input+0x218>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	899b      	ldrh	r3, [r3, #12]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fd f9c2 	bl	8003320 <lwip_htons>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	4b18      	ldr	r3, [pc, #96]	; (8006008 <tcp_input+0x248>)
 8005fa8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	891a      	ldrh	r2, [r3, #8]
 8005fae:	4b16      	ldr	r3, [pc, #88]	; (8006008 <tcp_input+0x248>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bf14      	ite	ne
 8005fba:	2301      	movne	r3, #1
 8005fbc:	2300      	moveq	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	4b11      	ldr	r3, [pc, #68]	; (800600c <tcp_input+0x24c>)
 8005fc8:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005fce:	4b10      	ldr	r3, [pc, #64]	; (8006010 <tcp_input+0x250>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	e082      	b.n	80060dc <tcp_input+0x31c>
 8005fd6:	bf00      	nop
 8005fd8:	200000dc 	.word	0x200000dc
 8005fdc:	20000228 	.word	0x20000228
 8005fe0:	200000e0 	.word	0x200000e0
 8005fe4:	200000e4 	.word	0x200000e4
 8005fe8:	200000e2 	.word	0x200000e2
 8005fec:	08010c38 	.word	0x08010c38
 8005ff0:	08010c6c 	.word	0x08010c6c
 8005ff4:	08010c7c 	.word	0x08010c7c
 8005ff8:	08010ca4 	.word	0x08010ca4
 8005ffc:	08010cb0 	.word	0x08010cb0
 8006000:	200000ec 	.word	0x200000ec
 8006004:	200000f0 	.word	0x200000f0
 8006008:	200000f8 	.word	0x200000f8
 800600c:	200000f6 	.word	0x200000f6
 8006010:	20003778 	.word	0x20003778
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	7d1b      	ldrb	r3, [r3, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d105      	bne.n	8006028 <tcp_input+0x268>
 800601c:	4b8f      	ldr	r3, [pc, #572]	; (800625c <tcp_input+0x49c>)
 800601e:	22e2      	movs	r2, #226	; 0xe2
 8006020:	498f      	ldr	r1, [pc, #572]	; (8006260 <tcp_input+0x4a0>)
 8006022:	4890      	ldr	r0, [pc, #576]	; (8006264 <tcp_input+0x4a4>)
 8006024:	f008 feb0 	bl	800ed88 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	7d1b      	ldrb	r3, [r3, #20]
 800602c:	2b0a      	cmp	r3, #10
 800602e:	d105      	bne.n	800603c <tcp_input+0x27c>
 8006030:	4b8a      	ldr	r3, [pc, #552]	; (800625c <tcp_input+0x49c>)
 8006032:	22e3      	movs	r2, #227	; 0xe3
 8006034:	498c      	ldr	r1, [pc, #560]	; (8006268 <tcp_input+0x4a8>)
 8006036:	488b      	ldr	r0, [pc, #556]	; (8006264 <tcp_input+0x4a4>)
 8006038:	f008 fea6 	bl	800ed88 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	7d1b      	ldrb	r3, [r3, #20]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d105      	bne.n	8006050 <tcp_input+0x290>
 8006044:	4b85      	ldr	r3, [pc, #532]	; (800625c <tcp_input+0x49c>)
 8006046:	22e4      	movs	r2, #228	; 0xe4
 8006048:	4988      	ldr	r1, [pc, #544]	; (800626c <tcp_input+0x4ac>)
 800604a:	4886      	ldr	r0, [pc, #536]	; (8006264 <tcp_input+0x4a4>)
 800604c:	f008 fe9c 	bl	800ed88 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	8b1a      	ldrh	r2, [r3, #24]
 8006054:	4b86      	ldr	r3, [pc, #536]	; (8006270 <tcp_input+0x4b0>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	429a      	cmp	r2, r3
 800605e:	d138      	bne.n	80060d2 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	8ada      	ldrh	r2, [r3, #22]
 8006064:	4b82      	ldr	r3, [pc, #520]	; (8006270 <tcp_input+0x4b0>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	885b      	ldrh	r3, [r3, #2]
 800606a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800606c:	429a      	cmp	r2, r3
 800606e:	d130      	bne.n	80060d2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	4b7f      	ldr	r3, [pc, #508]	; (8006274 <tcp_input+0x4b4>)
 8006076:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006078:	429a      	cmp	r2, r3
 800607a:	d12a      	bne.n	80060d2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	4b7c      	ldr	r3, [pc, #496]	; (8006274 <tcp_input+0x4b4>)
 8006082:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006084:	429a      	cmp	r2, r3
 8006086:	d124      	bne.n	80060d2 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	429a      	cmp	r2, r3
 8006090:	d105      	bne.n	800609e <tcp_input+0x2de>
 8006092:	4b72      	ldr	r3, [pc, #456]	; (800625c <tcp_input+0x49c>)
 8006094:	22ec      	movs	r2, #236	; 0xec
 8006096:	4978      	ldr	r1, [pc, #480]	; (8006278 <tcp_input+0x4b8>)
 8006098:	4872      	ldr	r0, [pc, #456]	; (8006264 <tcp_input+0x4a4>)
 800609a:	f008 fe75 	bl	800ed88 <iprintf>
      if (prev != NULL) {
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00a      	beq.n	80060ba <tcp_input+0x2fa>
        prev->next = pcb->next;
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80060ac:	4b73      	ldr	r3, [pc, #460]	; (800627c <tcp_input+0x4bc>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80060b4:	4a71      	ldr	r2, [pc, #452]	; (800627c <tcp_input+0x4bc>)
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d10f      	bne.n	80060e4 <tcp_input+0x324>
 80060c4:	4b65      	ldr	r3, [pc, #404]	; (800625c <tcp_input+0x49c>)
 80060c6:	22f4      	movs	r2, #244	; 0xf4
 80060c8:	496d      	ldr	r1, [pc, #436]	; (8006280 <tcp_input+0x4c0>)
 80060ca:	4866      	ldr	r0, [pc, #408]	; (8006264 <tcp_input+0x4a4>)
 80060cc:	f008 fe5c 	bl	800ed88 <iprintf>
      break;
 80060d0:	e008      	b.n	80060e4 <tcp_input+0x324>
    }
    prev = pcb;
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d198      	bne.n	8006014 <tcp_input+0x254>
 80060e2:	e000      	b.n	80060e6 <tcp_input+0x326>
      break;
 80060e4:	bf00      	nop
  }

  if (pcb == NULL) {
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d173      	bne.n	80061d4 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80060ec:	4b65      	ldr	r3, [pc, #404]	; (8006284 <tcp_input+0x4c4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	61fb      	str	r3, [r7, #28]
 80060f2:	e02f      	b.n	8006154 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	7d1b      	ldrb	r3, [r3, #20]
 80060f8:	2b0a      	cmp	r3, #10
 80060fa:	d005      	beq.n	8006108 <tcp_input+0x348>
 80060fc:	4b57      	ldr	r3, [pc, #348]	; (800625c <tcp_input+0x49c>)
 80060fe:	22fe      	movs	r2, #254	; 0xfe
 8006100:	4961      	ldr	r1, [pc, #388]	; (8006288 <tcp_input+0x4c8>)
 8006102:	4858      	ldr	r0, [pc, #352]	; (8006264 <tcp_input+0x4a4>)
 8006104:	f008 fe40 	bl	800ed88 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	8b1a      	ldrh	r2, [r3, #24]
 800610c:	4b58      	ldr	r3, [pc, #352]	; (8006270 <tcp_input+0x4b0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	429a      	cmp	r2, r3
 8006116:	d11a      	bne.n	800614e <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	8ada      	ldrh	r2, [r3, #22]
 800611c:	4b54      	ldr	r3, [pc, #336]	; (8006270 <tcp_input+0x4b0>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	885b      	ldrh	r3, [r3, #2]
 8006122:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006124:	429a      	cmp	r2, r3
 8006126:	d112      	bne.n	800614e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	4b51      	ldr	r3, [pc, #324]	; (8006274 <tcp_input+0x4b4>)
 800612e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006130:	429a      	cmp	r2, r3
 8006132:	d10c      	bne.n	800614e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	4b4e      	ldr	r3, [pc, #312]	; (8006274 <tcp_input+0x4b4>)
 800613a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800613c:	429a      	cmp	r2, r3
 800613e:	d106      	bne.n	800614e <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8006140:	69f8      	ldr	r0, [r7, #28]
 8006142:	f000 fb15 	bl	8006770 <tcp_timewait_input>
        pbuf_free(p);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7fe f9f2 	bl	8004530 <pbuf_free>
        return;
 800614c:	e1da      	b.n	8006504 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	61fb      	str	r3, [r7, #28]
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1cc      	bne.n	80060f4 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800615a:	2300      	movs	r3, #0
 800615c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800615e:	4b4b      	ldr	r3, [pc, #300]	; (800628c <tcp_input+0x4cc>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e019      	b.n	800619a <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	8ada      	ldrh	r2, [r3, #22]
 800616a:	4b41      	ldr	r3, [pc, #260]	; (8006270 <tcp_input+0x4b0>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	885b      	ldrh	r3, [r3, #2]
 8006170:	b29b      	uxth	r3, r3
 8006172:	429a      	cmp	r2, r3
 8006174:	d10c      	bne.n	8006190 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b3e      	ldr	r3, [pc, #248]	; (8006274 <tcp_input+0x4b4>)
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	429a      	cmp	r2, r3
 8006180:	d00f      	beq.n	80061a2 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00d      	beq.n	80061a4 <tcp_input+0x3e4>
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d009      	beq.n	80061a4 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e2      	bne.n	8006166 <tcp_input+0x3a6>
 80061a0:	e000      	b.n	80061a4 <tcp_input+0x3e4>
            break;
 80061a2:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d014      	beq.n	80061d4 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80061b8:	4b34      	ldr	r3, [pc, #208]	; (800628c <tcp_input+0x4cc>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80061c0:	4a32      	ldr	r2, [pc, #200]	; (800628c <tcp_input+0x4cc>)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80061c6:	6978      	ldr	r0, [r7, #20]
 80061c8:	f000 f9f0 	bl	80065ac <tcp_listen_input>
      pbuf_free(p);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7fe f9af 	bl	8004530 <pbuf_free>
      return;
 80061d2:	e197      	b.n	8006504 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 8164 	beq.w	80064a4 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80061dc:	4b2c      	ldr	r3, [pc, #176]	; (8006290 <tcp_input+0x4d0>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	891a      	ldrh	r2, [r3, #8]
 80061e6:	4b2a      	ldr	r3, [pc, #168]	; (8006290 <tcp_input+0x4d0>)
 80061e8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80061ea:	4a29      	ldr	r2, [pc, #164]	; (8006290 <tcp_input+0x4d0>)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80061f0:	4b1f      	ldr	r3, [pc, #124]	; (8006270 <tcp_input+0x4b0>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a26      	ldr	r2, [pc, #152]	; (8006290 <tcp_input+0x4d0>)
 80061f6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80061f8:	4b26      	ldr	r3, [pc, #152]	; (8006294 <tcp_input+0x4d4>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80061fe:	4b26      	ldr	r3, [pc, #152]	; (8006298 <tcp_input+0x4d8>)
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006204:	4b25      	ldr	r3, [pc, #148]	; (800629c <tcp_input+0x4dc>)
 8006206:	2200      	movs	r2, #0
 8006208:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800620a:	4b25      	ldr	r3, [pc, #148]	; (80062a0 <tcp_input+0x4e0>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b00      	cmp	r3, #0
 8006214:	d006      	beq.n	8006224 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	7b5b      	ldrb	r3, [r3, #13]
 800621a:	f043 0301 	orr.w	r3, r3, #1
 800621e:	b2da      	uxtb	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006228:	2b00      	cmp	r3, #0
 800622a:	d03d      	beq.n	80062a8 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800622c:	69f8      	ldr	r0, [r7, #28]
 800622e:	f7ff fa59 	bl	80056e4 <tcp_process_refused_data>
 8006232:	4603      	mov	r3, r0
 8006234:	f113 0f0d 	cmn.w	r3, #13
 8006238:	d007      	beq.n	800624a <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800623e:	2b00      	cmp	r3, #0
 8006240:	d032      	beq.n	80062a8 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006242:	4b18      	ldr	r3, [pc, #96]	; (80062a4 <tcp_input+0x4e4>)
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d02e      	beq.n	80062a8 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624e:	2b00      	cmp	r3, #0
 8006250:	f040 8108 	bne.w	8006464 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006254:	69f8      	ldr	r0, [r7, #28]
 8006256:	f002 fa0b 	bl	8008670 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800625a:	e103      	b.n	8006464 <tcp_input+0x6a4>
 800625c:	08010c38 	.word	0x08010c38
 8006260:	08010cd0 	.word	0x08010cd0
 8006264:	08010c7c 	.word	0x08010c7c
 8006268:	08010cf8 	.word	0x08010cf8
 800626c:	08010d24 	.word	0x08010d24
 8006270:	200000dc 	.word	0x200000dc
 8006274:	20000228 	.word	0x20000228
 8006278:	08010d4c 	.word	0x08010d4c
 800627c:	20003778 	.word	0x20003778
 8006280:	08010d78 	.word	0x08010d78
 8006284:	20003788 	.word	0x20003788
 8006288:	08010da4 	.word	0x08010da4
 800628c:	20003780 	.word	0x20003780
 8006290:	200000cc 	.word	0x200000cc
 8006294:	200000fc 	.word	0x200000fc
 8006298:	200000f9 	.word	0x200000f9
 800629c:	200000f4 	.word	0x200000f4
 80062a0:	200000f8 	.word	0x200000f8
 80062a4:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 80062a8:	4a98      	ldr	r2, [pc, #608]	; (800650c <tcp_input+0x74c>)
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80062ae:	69f8      	ldr	r0, [r7, #28]
 80062b0:	f000 fac6 	bl	8006840 <tcp_process>
 80062b4:	4603      	mov	r3, r0
 80062b6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80062b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80062bc:	f113 0f0d 	cmn.w	r3, #13
 80062c0:	f000 80d2 	beq.w	8006468 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 80062c4:	4b92      	ldr	r3, [pc, #584]	; (8006510 <tcp_input+0x750>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	f003 0308 	and.w	r3, r3, #8
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d016      	beq.n	80062fe <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d008      	beq.n	80062ec <tcp_input+0x52c>
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	6912      	ldr	r2, [r2, #16]
 80062e4:	f06f 010d 	mvn.w	r1, #13
 80062e8:	4610      	mov	r0, r2
 80062ea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80062ec:	69f9      	ldr	r1, [r7, #28]
 80062ee:	4889      	ldr	r0, [pc, #548]	; (8006514 <tcp_input+0x754>)
 80062f0:	f7ff fc4c 	bl	8005b8c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80062f4:	69f9      	ldr	r1, [r7, #28]
 80062f6:	2001      	movs	r0, #1
 80062f8:	f7fd fc0c 	bl	8003b14 <memp_free>
 80062fc:	e0bf      	b.n	800647e <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8006302:	4b85      	ldr	r3, [pc, #532]	; (8006518 <tcp_input+0x758>)
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01b      	beq.n	8006342 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800630a:	4b83      	ldr	r3, [pc, #524]	; (8006518 <tcp_input+0x758>)
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006314:	2b00      	cmp	r3, #0
 8006316:	d009      	beq.n	800632c <tcp_input+0x56c>
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	6910      	ldr	r0, [r2, #16]
 8006320:	89fa      	ldrh	r2, [r7, #14]
 8006322:	69f9      	ldr	r1, [r7, #28]
 8006324:	4798      	blx	r3
 8006326:	4603      	mov	r3, r0
 8006328:	74fb      	strb	r3, [r7, #19]
 800632a:	e001      	b.n	8006330 <tcp_input+0x570>
 800632c:	2300      	movs	r3, #0
 800632e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006330:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006334:	f113 0f0d 	cmn.w	r3, #13
 8006338:	f000 8098 	beq.w	800646c <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800633c:	4b76      	ldr	r3, [pc, #472]	; (8006518 <tcp_input+0x758>)
 800633e:	2200      	movs	r2, #0
 8006340:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8006342:	69f8      	ldr	r0, [r7, #28]
 8006344:	f000 f900 	bl	8006548 <tcp_input_delayed_close>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	f040 8090 	bne.w	8006470 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8006350:	4b72      	ldr	r3, [pc, #456]	; (800651c <tcp_input+0x75c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d041      	beq.n	80063dc <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800635c:	2b00      	cmp	r3, #0
 800635e:	d006      	beq.n	800636e <tcp_input+0x5ae>
 8006360:	4b6f      	ldr	r3, [pc, #444]	; (8006520 <tcp_input+0x760>)
 8006362:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006366:	496f      	ldr	r1, [pc, #444]	; (8006524 <tcp_input+0x764>)
 8006368:	486f      	ldr	r0, [pc, #444]	; (8006528 <tcp_input+0x768>)
 800636a:	f008 fd0d 	bl	800ed88 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	7e9b      	ldrb	r3, [r3, #26]
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800637a:	4b68      	ldr	r3, [pc, #416]	; (800651c <tcp_input+0x75c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe f8d6 	bl	8004530 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8006384:	69f8      	ldr	r0, [r7, #28]
 8006386:	f7fe fdd5 	bl	8004f34 <tcp_abort>
            goto aborted;
 800638a:	e078      	b.n	800647e <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00c      	beq.n	80063b0 <tcp_input+0x5f0>
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	6918      	ldr	r0, [r3, #16]
 80063a0:	4b5e      	ldr	r3, [pc, #376]	; (800651c <tcp_input+0x75c>)
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	2300      	movs	r3, #0
 80063a6:	69f9      	ldr	r1, [r7, #28]
 80063a8:	47a0      	blx	r4
 80063aa:	4603      	mov	r3, r0
 80063ac:	74fb      	strb	r3, [r7, #19]
 80063ae:	e008      	b.n	80063c2 <tcp_input+0x602>
 80063b0:	4b5a      	ldr	r3, [pc, #360]	; (800651c <tcp_input+0x75c>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	2300      	movs	r3, #0
 80063b6:	69f9      	ldr	r1, [r7, #28]
 80063b8:	2000      	movs	r0, #0
 80063ba:	f7ff fa44 	bl	8005846 <tcp_recv_null>
 80063be:	4603      	mov	r3, r0
 80063c0:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80063c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063c6:	f113 0f0d 	cmn.w	r3, #13
 80063ca:	d053      	beq.n	8006474 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80063cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80063d4:	4b51      	ldr	r3, [pc, #324]	; (800651c <tcp_input+0x75c>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80063dc:	4b4c      	ldr	r3, [pc, #304]	; (8006510 <tcp_input+0x750>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d030      	beq.n	800644a <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d009      	beq.n	8006404 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f4:	7b5a      	ldrb	r2, [r3, #13]
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063fa:	f042 0220 	orr.w	r2, r2, #32
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	735a      	strb	r2, [r3, #13]
 8006402:	e022      	b.n	800644a <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006408:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800640c:	d005      	beq.n	800641a <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006412:	3301      	adds	r3, #1
 8006414:	b29a      	uxth	r2, r3
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <tcp_input+0x67c>
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	6918      	ldr	r0, [r3, #16]
 800642e:	2300      	movs	r3, #0
 8006430:	2200      	movs	r2, #0
 8006432:	69f9      	ldr	r1, [r7, #28]
 8006434:	47a0      	blx	r4
 8006436:	4603      	mov	r3, r0
 8006438:	74fb      	strb	r3, [r7, #19]
 800643a:	e001      	b.n	8006440 <tcp_input+0x680>
 800643c:	2300      	movs	r3, #0
 800643e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006440:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006444:	f113 0f0d 	cmn.w	r3, #13
 8006448:	d016      	beq.n	8006478 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800644a:	4b30      	ldr	r3, [pc, #192]	; (800650c <tcp_input+0x74c>)
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006450:	69f8      	ldr	r0, [r7, #28]
 8006452:	f000 f879 	bl	8006548 <tcp_input_delayed_close>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10f      	bne.n	800647c <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800645c:	69f8      	ldr	r0, [r7, #28]
 800645e:	f002 f963 	bl	8008728 <tcp_output>
 8006462:	e00c      	b.n	800647e <tcp_input+0x6be>
        goto aborted;
 8006464:	bf00      	nop
 8006466:	e00a      	b.n	800647e <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8006468:	bf00      	nop
 800646a:	e008      	b.n	800647e <tcp_input+0x6be>
              goto aborted;
 800646c:	bf00      	nop
 800646e:	e006      	b.n	800647e <tcp_input+0x6be>
          goto aborted;
 8006470:	bf00      	nop
 8006472:	e004      	b.n	800647e <tcp_input+0x6be>
            goto aborted;
 8006474:	bf00      	nop
 8006476:	e002      	b.n	800647e <tcp_input+0x6be>
              goto aborted;
 8006478:	bf00      	nop
 800647a:	e000      	b.n	800647e <tcp_input+0x6be>
          goto aborted;
 800647c:	bf00      	nop
    tcp_input_pcb = NULL;
 800647e:	4b23      	ldr	r3, [pc, #140]	; (800650c <tcp_input+0x74c>)
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006484:	4b25      	ldr	r3, [pc, #148]	; (800651c <tcp_input+0x75c>)
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800648a:	4b28      	ldr	r3, [pc, #160]	; (800652c <tcp_input+0x76c>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d037      	beq.n	8006502 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8006492:	4b26      	ldr	r3, [pc, #152]	; (800652c <tcp_input+0x76c>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe f84a 	bl	8004530 <pbuf_free>
      inseg.p = NULL;
 800649c:	4b23      	ldr	r3, [pc, #140]	; (800652c <tcp_input+0x76c>)
 800649e:	2200      	movs	r2, #0
 80064a0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80064a2:	e02e      	b.n	8006502 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80064a4:	4b22      	ldr	r3, [pc, #136]	; (8006530 <tcp_input+0x770>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	899b      	ldrh	r3, [r3, #12]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fc ff37 	bl	8003320 <lwip_htons>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d115      	bne.n	80064e8 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80064bc:	4b1d      	ldr	r3, [pc, #116]	; (8006534 <tcp_input+0x774>)
 80064be:	6818      	ldr	r0, [r3, #0]
 80064c0:	4b1d      	ldr	r3, [pc, #116]	; (8006538 <tcp_input+0x778>)
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	4b1d      	ldr	r3, [pc, #116]	; (800653c <tcp_input+0x77c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80064cc:	4b18      	ldr	r3, [pc, #96]	; (8006530 <tcp_input+0x770>)
 80064ce:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80064d0:	885b      	ldrh	r3, [r3, #2]
 80064d2:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80064d4:	4a16      	ldr	r2, [pc, #88]	; (8006530 <tcp_input+0x770>)
 80064d6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80064d8:	8812      	ldrh	r2, [r2, #0]
 80064da:	b292      	uxth	r2, r2
 80064dc:	9201      	str	r2, [sp, #4]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	4b17      	ldr	r3, [pc, #92]	; (8006540 <tcp_input+0x780>)
 80064e2:	4a18      	ldr	r2, [pc, #96]	; (8006544 <tcp_input+0x784>)
 80064e4:	f002 fbaa 	bl	8008c3c <tcp_rst>
    pbuf_free(p);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7fe f821 	bl	8004530 <pbuf_free>
  return;
 80064ee:	e008      	b.n	8006502 <tcp_input+0x742>
    goto dropped;
 80064f0:	bf00      	nop
 80064f2:	e002      	b.n	80064fa <tcp_input+0x73a>
dropped:
 80064f4:	bf00      	nop
 80064f6:	e000      	b.n	80064fa <tcp_input+0x73a>
      goto dropped;
 80064f8:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fe f818 	bl	8004530 <pbuf_free>
 8006500:	e000      	b.n	8006504 <tcp_input+0x744>
  return;
 8006502:	bf00      	nop
}
 8006504:	3724      	adds	r7, #36	; 0x24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd90      	pop	{r4, r7, pc}
 800650a:	bf00      	nop
 800650c:	2000378c 	.word	0x2000378c
 8006510:	200000f9 	.word	0x200000f9
 8006514:	20003778 	.word	0x20003778
 8006518:	200000f4 	.word	0x200000f4
 800651c:	200000fc 	.word	0x200000fc
 8006520:	08010c38 	.word	0x08010c38
 8006524:	08010dd4 	.word	0x08010dd4
 8006528:	08010c7c 	.word	0x08010c7c
 800652c:	200000cc 	.word	0x200000cc
 8006530:	200000dc 	.word	0x200000dc
 8006534:	200000f0 	.word	0x200000f0
 8006538:	200000f6 	.word	0x200000f6
 800653c:	200000ec 	.word	0x200000ec
 8006540:	20000238 	.word	0x20000238
 8006544:	2000023c 	.word	0x2000023c

08006548 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8006550:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <tcp_input_delayed_close+0x5c>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	d01d      	beq.n	8006598 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	7e9b      	ldrb	r3, [r3, #26]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10d      	bne.n	8006584 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d008      	beq.n	8006584 <tcp_input_delayed_close+0x3c>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6912      	ldr	r2, [r2, #16]
 800657c:	f06f 010e 	mvn.w	r1, #14
 8006580:	4610      	mov	r0, r2
 8006582:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	4808      	ldr	r0, [pc, #32]	; (80065a8 <tcp_input_delayed_close+0x60>)
 8006588:	f7ff fb00 	bl	8005b8c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	2001      	movs	r0, #1
 8006590:	f7fd fac0 	bl	8003b14 <memp_free>
    return 1;
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <tcp_input_delayed_close+0x52>
  }
  return 0;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200000f9 	.word	0x200000f9
 80065a8:	20003778 	.word	0x20003778

080065ac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80065b4:	4b64      	ldr	r3, [pc, #400]	; (8006748 <tcp_listen_input+0x19c>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f040 80bc 	bne.w	800673a <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80065c2:	4b61      	ldr	r3, [pc, #388]	; (8006748 <tcp_listen_input+0x19c>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	f003 0310 	and.w	r3, r3, #16
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d016      	beq.n	80065fc <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80065ce:	4b5f      	ldr	r3, [pc, #380]	; (800674c <tcp_listen_input+0x1a0>)
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	4b5f      	ldr	r3, [pc, #380]	; (8006750 <tcp_listen_input+0x1a4>)
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	4b5e      	ldr	r3, [pc, #376]	; (8006754 <tcp_listen_input+0x1a8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80065de:	4b5e      	ldr	r3, [pc, #376]	; (8006758 <tcp_listen_input+0x1ac>)
 80065e0:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80065e2:	885b      	ldrh	r3, [r3, #2]
 80065e4:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80065e6:	4a5c      	ldr	r2, [pc, #368]	; (8006758 <tcp_listen_input+0x1ac>)
 80065e8:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80065ea:	8812      	ldrh	r2, [r2, #0]
 80065ec:	b292      	uxth	r2, r2
 80065ee:	9201      	str	r2, [sp, #4]
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	4b5a      	ldr	r3, [pc, #360]	; (800675c <tcp_listen_input+0x1b0>)
 80065f4:	4a5a      	ldr	r2, [pc, #360]	; (8006760 <tcp_listen_input+0x1b4>)
 80065f6:	f002 fb21 	bl	8008c3c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80065fa:	e0a0      	b.n	800673e <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 80065fc:	4b52      	ldr	r3, [pc, #328]	; (8006748 <tcp_listen_input+0x19c>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 809a 	beq.w	800673e <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	7d5b      	ldrb	r3, [r3, #21]
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff f9f8 	bl	8005a04 <tcp_alloc>
 8006614:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d111      	bne.n	8006640 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <tcp_listen_input+0x8e>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6910      	ldr	r0, [r2, #16]
 800662c:	f04f 32ff 	mov.w	r2, #4294967295
 8006630:	2100      	movs	r1, #0
 8006632:	4798      	blx	r3
 8006634:	4603      	mov	r3, r0
 8006636:	73bb      	strb	r3, [r7, #14]
      return;
 8006638:	e082      	b.n	8006740 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800663a:	23f0      	movs	r3, #240	; 0xf0
 800663c:	73bb      	strb	r3, [r7, #14]
      return;
 800663e:	e07f      	b.n	8006740 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006640:	4b48      	ldr	r3, [pc, #288]	; (8006764 <tcp_listen_input+0x1b8>)
 8006642:	695a      	ldr	r2, [r3, #20]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006648:	4b46      	ldr	r3, [pc, #280]	; (8006764 <tcp_listen_input+0x1b8>)
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	8ada      	ldrh	r2, [r3, #22]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8006658:	4b3f      	ldr	r3, [pc, #252]	; (8006758 <tcp_listen_input+0x1ac>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29a      	uxth	r2, r3
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2203      	movs	r2, #3
 8006668:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800666a:	4b3a      	ldr	r3, [pc, #232]	; (8006754 <tcp_listen_input+0x1a8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800667c:	6978      	ldr	r0, [r7, #20]
 800667e:	f7ff fb01 	bl	8005c84 <tcp_next_iss>
 8006682:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800669c:	4b2d      	ldr	r3, [pc, #180]	; (8006754 <tcp_listen_input+0x1a8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	1e5a      	subs	r2, r3, #1
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	7a1b      	ldrb	r3, [r3, #8]
 80066b8:	f003 030c 	and.w	r3, r3, #12
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80066c2:	4b29      	ldr	r3, [pc, #164]	; (8006768 <tcp_listen_input+0x1bc>)
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	60da      	str	r2, [r3, #12]
 80066ca:	4a27      	ldr	r2, [pc, #156]	; (8006768 <tcp_listen_input+0x1bc>)
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	f002 fd04 	bl	80090dc <tcp_timer_needed>
 80066d4:	4b25      	ldr	r3, [pc, #148]	; (800676c <tcp_listen_input+0x1c0>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80066da:	6978      	ldr	r0, [r7, #20]
 80066dc:	f001 fd14 	bl	8008108 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80066e0:	4b1d      	ldr	r3, [pc, #116]	; (8006758 <tcp_listen_input+0x1ac>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	89db      	ldrh	r3, [r3, #14]
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	3304      	adds	r3, #4
 8006702:	4619      	mov	r1, r3
 8006704:	4610      	mov	r0, r2
 8006706:	f7ff fad5 	bl	8005cb4 <tcp_eff_send_mss_impl>
 800670a:	4603      	mov	r3, r0
 800670c:	461a      	mov	r2, r3
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006712:	2112      	movs	r1, #18
 8006714:	6978      	ldr	r0, [r7, #20]
 8006716:	f001 feaf 	bl	8008478 <tcp_enqueue_flags>
 800671a:	4603      	mov	r3, r0
 800671c:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800671e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d004      	beq.n	8006730 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8006726:	2100      	movs	r1, #0
 8006728:	6978      	ldr	r0, [r7, #20]
 800672a:	f7fe fb51 	bl	8004dd0 <tcp_abandon>
      return;
 800672e:	e007      	b.n	8006740 <tcp_listen_input+0x194>
    tcp_output(npcb);
 8006730:	6978      	ldr	r0, [r7, #20]
 8006732:	f001 fff9 	bl	8008728 <tcp_output>
  return;
 8006736:	bf00      	nop
 8006738:	e001      	b.n	800673e <tcp_listen_input+0x192>
    return;
 800673a:	bf00      	nop
 800673c:	e000      	b.n	8006740 <tcp_listen_input+0x194>
  return;
 800673e:	bf00      	nop
}
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	200000f8 	.word	0x200000f8
 800674c:	200000f0 	.word	0x200000f0
 8006750:	200000f6 	.word	0x200000f6
 8006754:	200000ec 	.word	0x200000ec
 8006758:	200000dc 	.word	0x200000dc
 800675c:	20000238 	.word	0x20000238
 8006760:	2000023c 	.word	0x2000023c
 8006764:	20000228 	.word	0x20000228
 8006768:	20003778 	.word	0x20003778
 800676c:	20003774 	.word	0x20003774

08006770 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af02      	add	r7, sp, #8
 8006776:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8006778:	4b29      	ldr	r3, [pc, #164]	; (8006820 <tcp_timewait_input+0xb0>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	d147      	bne.n	8006814 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8006784:	4b26      	ldr	r3, [pc, #152]	; (8006820 <tcp_timewait_input+0xb0>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d027      	beq.n	80067e0 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8006790:	4b24      	ldr	r3, [pc, #144]	; (8006824 <tcp_timewait_input+0xb4>)
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	db2a      	blt.n	80067f4 <tcp_timewait_input+0x84>
 800679e:	4b21      	ldr	r3, [pc, #132]	; (8006824 <tcp_timewait_input+0xb4>)
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80067aa:	440b      	add	r3, r1
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	dc20      	bgt.n	80067f4 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80067b2:	4b1d      	ldr	r3, [pc, #116]	; (8006828 <tcp_timewait_input+0xb8>)
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	4b1d      	ldr	r3, [pc, #116]	; (800682c <tcp_timewait_input+0xbc>)
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	4b19      	ldr	r3, [pc, #100]	; (8006824 <tcp_timewait_input+0xb4>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80067c2:	4b1b      	ldr	r3, [pc, #108]	; (8006830 <tcp_timewait_input+0xc0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80067c6:	885b      	ldrh	r3, [r3, #2]
 80067c8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80067ca:	4a19      	ldr	r2, [pc, #100]	; (8006830 <tcp_timewait_input+0xc0>)
 80067cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80067ce:	8812      	ldrh	r2, [r2, #0]
 80067d0:	b292      	uxth	r2, r2
 80067d2:	9201      	str	r2, [sp, #4]
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4b17      	ldr	r3, [pc, #92]	; (8006834 <tcp_timewait_input+0xc4>)
 80067d8:	4a17      	ldr	r2, [pc, #92]	; (8006838 <tcp_timewait_input+0xc8>)
 80067da:	f002 fa2f 	bl	8008c3c <tcp_rst>
      return;
 80067de:	e01c      	b.n	800681a <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 80067e0:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <tcp_timewait_input+0xb0>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80067ec:	4b13      	ldr	r3, [pc, #76]	; (800683c <tcp_timewait_input+0xcc>)
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80067f4:	4b0d      	ldr	r3, [pc, #52]	; (800682c <tcp_timewait_input+0xbc>)
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00d      	beq.n	8006818 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	7e9b      	ldrb	r3, [r3, #26]
 8006800:	f043 0302 	orr.w	r3, r3, #2
 8006804:	b2da      	uxtb	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 ff8c 	bl	8008728 <tcp_output>
  }
  return;
 8006810:	bf00      	nop
 8006812:	e001      	b.n	8006818 <tcp_timewait_input+0xa8>
    return;
 8006814:	bf00      	nop
 8006816:	e000      	b.n	800681a <tcp_timewait_input+0xaa>
  return;
 8006818:	bf00      	nop
}
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	200000f8 	.word	0x200000f8
 8006824:	200000ec 	.word	0x200000ec
 8006828:	200000f0 	.word	0x200000f0
 800682c:	200000f6 	.word	0x200000f6
 8006830:	200000dc 	.word	0x200000dc
 8006834:	20000238 	.word	0x20000238
 8006838:	2000023c 	.word	0x2000023c
 800683c:	2000377c 	.word	0x2000377c

08006840 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	; 0x28
 8006844:	af02      	add	r7, sp, #8
 8006846:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800684c:	2300      	movs	r3, #0
 800684e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8006850:	4ba4      	ldr	r3, [pc, #656]	; (8006ae4 <tcp_process+0x2a4>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d04e      	beq.n	80068fa <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	7d1b      	ldrb	r3, [r3, #20]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d108      	bne.n	8006876 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006868:	4b9f      	ldr	r3, [pc, #636]	; (8006ae8 <tcp_process+0x2a8>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d123      	bne.n	80068b8 <tcp_process+0x78>
        acceptable = 1;
 8006870:	2301      	movs	r3, #1
 8006872:	76fb      	strb	r3, [r7, #27]
 8006874:	e020      	b.n	80068b8 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800687a:	4b9c      	ldr	r3, [pc, #624]	; (8006aec <tcp_process+0x2ac>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d102      	bne.n	8006888 <tcp_process+0x48>
        acceptable = 1;
 8006882:	2301      	movs	r3, #1
 8006884:	76fb      	strb	r3, [r7, #27]
 8006886:	e017      	b.n	80068b8 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006888:	4b98      	ldr	r3, [pc, #608]	; (8006aec <tcp_process+0x2ac>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	db10      	blt.n	80068b8 <tcp_process+0x78>
 8006896:	4b95      	ldr	r3, [pc, #596]	; (8006aec <tcp_process+0x2ac>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80068a2:	440b      	add	r3, r1
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	dc06      	bgt.n	80068b8 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	7e9b      	ldrb	r3, [r3, #26]
 80068ae:	f043 0302 	orr.w	r3, r3, #2
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80068b8:	7efb      	ldrb	r3, [r7, #27]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d01b      	beq.n	80068f6 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	7d1b      	ldrb	r3, [r3, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <tcp_process+0x94>
 80068c6:	4b8a      	ldr	r3, [pc, #552]	; (8006af0 <tcp_process+0x2b0>)
 80068c8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80068cc:	4989      	ldr	r1, [pc, #548]	; (8006af4 <tcp_process+0x2b4>)
 80068ce:	488a      	ldr	r0, [pc, #552]	; (8006af8 <tcp_process+0x2b8>)
 80068d0:	f008 fa5a 	bl	800ed88 <iprintf>
      recv_flags |= TF_RESET;
 80068d4:	4b89      	ldr	r3, [pc, #548]	; (8006afc <tcp_process+0x2bc>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	f043 0308 	orr.w	r3, r3, #8
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	4b87      	ldr	r3, [pc, #540]	; (8006afc <tcp_process+0x2bc>)
 80068e0:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	7e9b      	ldrb	r3, [r3, #26]
 80068e6:	f023 0301 	bic.w	r3, r3, #1
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 80068f0:	f06f 030d 	mvn.w	r3, #13
 80068f4:	e34d      	b.n	8006f92 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e34b      	b.n	8006f92 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80068fa:	4b7a      	ldr	r3, [pc, #488]	; (8006ae4 <tcp_process+0x2a4>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d010      	beq.n	8006928 <tcp_process+0xe8>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	7d1b      	ldrb	r3, [r3, #20]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d00c      	beq.n	8006928 <tcp_process+0xe8>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	7d1b      	ldrb	r3, [r3, #20]
 8006912:	2b03      	cmp	r3, #3
 8006914:	d008      	beq.n	8006928 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	7e9b      	ldrb	r3, [r3, #26]
 800691a:	f043 0302 	orr.w	r3, r3, #2
 800691e:	b2da      	uxtb	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	e334      	b.n	8006f92 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	7e9b      	ldrb	r3, [r3, #26]
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b00      	cmp	r3, #0
 8006932:	d103      	bne.n	800693c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8006934:	4b72      	ldr	r3, [pc, #456]	; (8006b00 <tcp_process+0x2c0>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 fbdf 	bl	8008108 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	7d1b      	ldrb	r3, [r3, #20]
 800694e:	3b02      	subs	r3, #2
 8006950:	2b07      	cmp	r3, #7
 8006952:	f200 830e 	bhi.w	8006f72 <tcp_process+0x732>
 8006956:	a201      	add	r2, pc, #4	; (adr r2, 800695c <tcp_process+0x11c>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	0800697d 	.word	0x0800697d
 8006960:	08006b75 	.word	0x08006b75
 8006964:	08006ccd 	.word	0x08006ccd
 8006968:	08006cf7 	.word	0x08006cf7
 800696c:	08006e21 	.word	0x08006e21
 8006970:	08006ccd 	.word	0x08006ccd
 8006974:	08006ead 	.word	0x08006ead
 8006978:	08006f3d 	.word	0x08006f3d
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800697c:	4b59      	ldr	r3, [pc, #356]	; (8006ae4 <tcp_process+0x2a4>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 80cb 	beq.w	8006b20 <tcp_process+0x2e0>
 800698a:	4b56      	ldr	r3, [pc, #344]	; (8006ae4 <tcp_process+0x2a4>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 80c4 	beq.w	8006b20 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	4b52      	ldr	r3, [pc, #328]	; (8006ae8 <tcp_process+0x2a8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	f040 80bc 	bne.w	8006b20 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 80069a8:	4b50      	ldr	r3, [pc, #320]	; (8006aec <tcp_process+0x2ac>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 80069ba:	4b4b      	ldr	r3, [pc, #300]	; (8006ae8 <tcp_process+0x2a8>)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80069c2:	4b50      	ldr	r3, [pc, #320]	; (8006b04 <tcp_process+0x2c4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	89db      	ldrh	r3, [r3, #14]
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80069dc:	4b43      	ldr	r3, [pc, #268]	; (8006aec <tcp_process+0x2ac>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	1e5a      	subs	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2204      	movs	r2, #4
 80069ea:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3304      	adds	r3, #4
 80069f4:	4619      	mov	r1, r3
 80069f6:	4610      	mov	r0, r2
 80069f8:	f7ff f95c 	bl	8005cb4 <tcp_eff_send_mss_impl>
 80069fc:	4603      	mov	r3, r0
 80069fe:	461a      	mov	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	f241 121c 	movw	r2, #4380	; 0x111c
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	bf38      	it	cc
 8006a12:	461a      	movcc	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	bf28      	it	cs
 8006a1e:	4613      	movcs	r3, r2
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <tcp_process+0x200>
 8006a32:	4b2f      	ldr	r3, [pc, #188]	; (8006af0 <tcp_process+0x2b0>)
 8006a34:	f240 321a 	movw	r2, #794	; 0x31a
 8006a38:	4933      	ldr	r1, [pc, #204]	; (8006b08 <tcp_process+0x2c8>)
 8006a3a:	482f      	ldr	r0, [pc, #188]	; (8006af8 <tcp_process+0x2b8>)
 8006a3c:	f008 f9a4 	bl	800ed88 <iprintf>
      --pcb->snd_queuelen;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a54:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d111      	bne.n	8006a80 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a60:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d106      	bne.n	8006a76 <tcp_process+0x236>
 8006a68:	4b21      	ldr	r3, [pc, #132]	; (8006af0 <tcp_process+0x2b0>)
 8006a6a:	f240 3222 	movw	r2, #802	; 0x322
 8006a6e:	4927      	ldr	r1, [pc, #156]	; (8006b0c <tcp_process+0x2cc>)
 8006a70:	4821      	ldr	r0, [pc, #132]	; (8006af8 <tcp_process+0x2b8>)
 8006a72:	f008 f989 	bl	800ed88 <iprintf>
        pcb->unsent = rseg->next;
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	669a      	str	r2, [r3, #104]	; 0x68
 8006a7e:	e003      	b.n	8006a88 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8006a88:	69f8      	ldr	r0, [r7, #28]
 8006a8a:	f7fe fea8 	bl	80057de <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d104      	bne.n	8006aa0 <tcp_process+0x260>
        pcb->rtime = -1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a9c:	861a      	strh	r2, [r3, #48]	; 0x30
 8006a9e:	e006      	b.n	8006aae <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <tcp_process+0x28e>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6910      	ldr	r0, [r2, #16]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	4798      	blx	r3
 8006ac8:	4603      	mov	r3, r0
 8006aca:	76bb      	strb	r3, [r7, #26]
 8006acc:	e001      	b.n	8006ad2 <tcp_process+0x292>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8006ad2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006ad6:	f113 0f0d 	cmn.w	r3, #13
 8006ada:	d119      	bne.n	8006b10 <tcp_process+0x2d0>
        return ERR_ABRT;
 8006adc:	f06f 030c 	mvn.w	r3, #12
 8006ae0:	e257      	b.n	8006f92 <tcp_process+0x752>
 8006ae2:	bf00      	nop
 8006ae4:	200000f8 	.word	0x200000f8
 8006ae8:	200000f0 	.word	0x200000f0
 8006aec:	200000ec 	.word	0x200000ec
 8006af0:	08010c38 	.word	0x08010c38
 8006af4:	08010df0 	.word	0x08010df0
 8006af8:	08010c7c 	.word	0x08010c7c
 8006afc:	200000f9 	.word	0x200000f9
 8006b00:	2000377c 	.word	0x2000377c
 8006b04:	200000dc 	.word	0x200000dc
 8006b08:	08010e10 	.word	0x08010e10
 8006b0c:	08010e28 	.word	0x08010e28
      }
      tcp_ack_now(pcb);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	7e9b      	ldrb	r3, [r3, #26]
 8006b14:	f043 0302 	orr.w	r3, r3, #2
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8006b1e:	e22a      	b.n	8006f76 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8006b20:	4b9f      	ldr	r3, [pc, #636]	; (8006da0 <tcp_process+0x560>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	f003 0310 	and.w	r3, r3, #16
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 8224 	beq.w	8006f76 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006b2e:	4b9d      	ldr	r3, [pc, #628]	; (8006da4 <tcp_process+0x564>)
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	4b9d      	ldr	r3, [pc, #628]	; (8006da8 <tcp_process+0x568>)
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	4b9c      	ldr	r3, [pc, #624]	; (8006dac <tcp_process+0x56c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006b3e:	4b9c      	ldr	r3, [pc, #624]	; (8006db0 <tcp_process+0x570>)
 8006b40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006b42:	885b      	ldrh	r3, [r3, #2]
 8006b44:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006b46:	4a9a      	ldr	r2, [pc, #616]	; (8006db0 <tcp_process+0x570>)
 8006b48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006b4a:	8812      	ldrh	r2, [r2, #0]
 8006b4c:	b292      	uxth	r2, r2
 8006b4e:	9201      	str	r2, [sp, #4]
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	4b98      	ldr	r3, [pc, #608]	; (8006db4 <tcp_process+0x574>)
 8006b54:	4a98      	ldr	r2, [pc, #608]	; (8006db8 <tcp_process+0x578>)
 8006b56:	f002 f871 	bl	8008c3c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b60:	2b05      	cmp	r3, #5
 8006b62:	f200 8208 	bhi.w	8006f76 <tcp_process+0x736>
        pcb->rtime = 0;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f002 f8db 	bl	8008d28 <tcp_rexmit_rto>
    break;
 8006b72:	e200      	b.n	8006f76 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8006b74:	4b8a      	ldr	r3, [pc, #552]	; (8006da0 <tcp_process+0x560>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	f003 0310 	and.w	r3, r3, #16
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8091 	beq.w	8006ca4 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8006b82:	4b88      	ldr	r3, [pc, #544]	; (8006da4 <tcp_process+0x564>)
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	db71      	blt.n	8006c76 <tcp_process+0x436>
 8006b92:	4b84      	ldr	r3, [pc, #528]	; (8006da4 <tcp_process+0x564>)
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	dc6a      	bgt.n	8006c76 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <tcp_process+0x386>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d106      	bne.n	8006bc6 <tcp_process+0x386>
 8006bb8:	4b80      	ldr	r3, [pc, #512]	; (8006dbc <tcp_process+0x57c>)
 8006bba:	f240 3251 	movw	r2, #849	; 0x351
 8006bbe:	4980      	ldr	r1, [pc, #512]	; (8006dc0 <tcp_process+0x580>)
 8006bc0:	4880      	ldr	r0, [pc, #512]	; (8006dc4 <tcp_process+0x584>)
 8006bc2:	f008 f8e1 	bl	800ed88 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d102      	bne.n	8006bd4 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8006bce:	23fa      	movs	r3, #250	; 0xfa
 8006bd0:	76bb      	strb	r3, [r7, #26]
 8006bd2:	e011      	b.n	8006bf8 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <tcp_process+0x3b4>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	6910      	ldr	r0, [r2, #16]
 8006be8:	2200      	movs	r2, #0
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	4798      	blx	r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	76bb      	strb	r3, [r7, #26]
 8006bf2:	e001      	b.n	8006bf8 <tcp_process+0x3b8>
 8006bf4:	23f0      	movs	r3, #240	; 0xf0
 8006bf6:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8006bf8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8006c00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8006c04:	f113 0f0d 	cmn.w	r3, #13
 8006c08:	d002      	beq.n	8006c10 <tcp_process+0x3d0>
            tcp_abort(pcb);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fe f992 	bl	8004f34 <tcp_abort>
          }
          return ERR_ABRT;
 8006c10:	f06f 030c 	mvn.w	r3, #12
 8006c14:	e1bd      	b.n	8006f92 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa42 	bl	80070a0 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8006c1c:	4b6a      	ldr	r3, [pc, #424]	; (8006dc8 <tcp_process+0x588>)
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <tcp_process+0x3f0>
          recv_acked--;
 8006c24:	4b68      	ldr	r3, [pc, #416]	; (8006dc8 <tcp_process+0x588>)
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	4b66      	ldr	r3, [pc, #408]	; (8006dc8 <tcp_process+0x588>)
 8006c2e:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	f241 121c 	movw	r2, #4380	; 0x111c
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	bf38      	it	cc
 8006c3e:	461a      	movcc	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4293      	cmp	r3, r2
 8006c48:	bf28      	it	cs
 8006c4a:	4613      	movcs	r3, r2
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8006c54:	4b5d      	ldr	r3, [pc, #372]	; (8006dcc <tcp_process+0x58c>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f003 0320 	and.w	r3, r3, #32
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d034      	beq.n	8006cca <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	7e9b      	ldrb	r3, [r3, #26]
 8006c64:	f043 0302 	orr.w	r3, r3, #2
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2207      	movs	r2, #7
 8006c72:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8006c74:	e029      	b.n	8006cca <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006c76:	4b4b      	ldr	r3, [pc, #300]	; (8006da4 <tcp_process+0x564>)
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	4b4b      	ldr	r3, [pc, #300]	; (8006da8 <tcp_process+0x568>)
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	4b4a      	ldr	r3, [pc, #296]	; (8006dac <tcp_process+0x56c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006c86:	4b4a      	ldr	r3, [pc, #296]	; (8006db0 <tcp_process+0x570>)
 8006c88:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006c8a:	885b      	ldrh	r3, [r3, #2]
 8006c8c:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006c8e:	4a48      	ldr	r2, [pc, #288]	; (8006db0 <tcp_process+0x570>)
 8006c90:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006c92:	8812      	ldrh	r2, [r2, #0]
 8006c94:	b292      	uxth	r2, r2
 8006c96:	9201      	str	r2, [sp, #4]
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	4b46      	ldr	r3, [pc, #280]	; (8006db4 <tcp_process+0x574>)
 8006c9c:	4a46      	ldr	r2, [pc, #280]	; (8006db8 <tcp_process+0x578>)
 8006c9e:	f001 ffcd 	bl	8008c3c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8006ca2:	e16a      	b.n	8006f7a <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8006ca4:	4b3e      	ldr	r3, [pc, #248]	; (8006da0 <tcp_process+0x560>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8164 	beq.w	8006f7a <tcp_process+0x73a>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	1e5a      	subs	r2, r3, #1
 8006cb8:	4b3c      	ldr	r3, [pc, #240]	; (8006dac <tcp_process+0x56c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	f040 815c 	bne.w	8006f7a <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f002 f866 	bl	8008d94 <tcp_rexmit>
    break;
 8006cc8:	e157      	b.n	8006f7a <tcp_process+0x73a>
 8006cca:	e156      	b.n	8006f7a <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f9e7 	bl	80070a0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8006cd2:	4b3e      	ldr	r3, [pc, #248]	; (8006dcc <tcp_process+0x58c>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 814f 	beq.w	8006f7e <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	7e9b      	ldrb	r3, [r3, #26]
 8006ce4:	f043 0302 	orr.w	r3, r3, #2
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2207      	movs	r2, #7
 8006cf2:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006cf4:	e143      	b.n	8006f7e <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f9d2 	bl	80070a0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8006cfc:	4b33      	ldr	r3, [pc, #204]	; (8006dcc <tcp_process+0x58c>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	f003 0320 	and.w	r3, r3, #32
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d074      	beq.n	8006df2 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006d08:	4b25      	ldr	r3, [pc, #148]	; (8006da0 <tcp_process+0x560>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d063      	beq.n	8006ddc <tcp_process+0x59c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d18:	4b22      	ldr	r3, [pc, #136]	; (8006da4 <tcp_process+0x564>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d15d      	bne.n	8006ddc <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d159      	bne.n	8006ddc <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	7e9b      	ldrb	r3, [r3, #26]
 8006d2c:	f043 0302 	orr.w	r3, r3, #2
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fe fee6 	bl	8005b08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8006d3c:	4b24      	ldr	r3, [pc, #144]	; (8006dd0 <tcp_process+0x590>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d105      	bne.n	8006d52 <tcp_process+0x512>
 8006d46:	4b22      	ldr	r3, [pc, #136]	; (8006dd0 <tcp_process+0x590>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	4a20      	ldr	r2, [pc, #128]	; (8006dd0 <tcp_process+0x590>)
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	e013      	b.n	8006d7a <tcp_process+0x53a>
 8006d52:	4b1f      	ldr	r3, [pc, #124]	; (8006dd0 <tcp_process+0x590>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	e00c      	b.n	8006d74 <tcp_process+0x534>
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d104      	bne.n	8006d6e <tcp_process+0x52e>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	60da      	str	r2, [r3, #12]
 8006d6c:	e005      	b.n	8006d7a <tcp_process+0x53a>
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	617b      	str	r3, [r7, #20]
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1ef      	bne.n	8006d5a <tcp_process+0x51a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	60da      	str	r2, [r3, #12]
 8006d80:	4b14      	ldr	r3, [pc, #80]	; (8006dd4 <tcp_process+0x594>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	220a      	movs	r2, #10
 8006d8a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006d8c:	4b12      	ldr	r3, [pc, #72]	; (8006dd8 <tcp_process+0x598>)
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	60da      	str	r2, [r3, #12]
 8006d94:	4a10      	ldr	r2, [pc, #64]	; (8006dd8 <tcp_process+0x598>)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	f002 f99f 	bl	80090dc <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8006d9e:	e0f0      	b.n	8006f82 <tcp_process+0x742>
 8006da0:	200000f8 	.word	0x200000f8
 8006da4:	200000f0 	.word	0x200000f0
 8006da8:	200000f6 	.word	0x200000f6
 8006dac:	200000ec 	.word	0x200000ec
 8006db0:	200000dc 	.word	0x200000dc
 8006db4:	20000238 	.word	0x20000238
 8006db8:	2000023c 	.word	0x2000023c
 8006dbc:	08010c38 	.word	0x08010c38
 8006dc0:	08010e3c 	.word	0x08010e3c
 8006dc4:	08010c7c 	.word	0x08010c7c
 8006dc8:	200000f4 	.word	0x200000f4
 8006dcc:	200000f9 	.word	0x200000f9
 8006dd0:	20003778 	.word	0x20003778
 8006dd4:	20003774 	.word	0x20003774
 8006dd8:	20003788 	.word	0x20003788
        tcp_ack_now(pcb);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	7e9b      	ldrb	r3, [r3, #26]
 8006de0:	f043 0302 	orr.w	r3, r3, #2
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2208      	movs	r2, #8
 8006dee:	751a      	strb	r2, [r3, #20]
    break;
 8006df0:	e0c7      	b.n	8006f82 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006df2:	4b6a      	ldr	r3, [pc, #424]	; (8006f9c <tcp_process+0x75c>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 80c1 	beq.w	8006f82 <tcp_process+0x742>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e04:	4b66      	ldr	r3, [pc, #408]	; (8006fa0 <tcp_process+0x760>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	f040 80ba 	bne.w	8006f82 <tcp_process+0x742>
               pcb->unsent == NULL) {
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f040 80b5 	bne.w	8006f82 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2206      	movs	r2, #6
 8006e1c:	751a      	strb	r2, [r3, #20]
    break;
 8006e1e:	e0b0      	b.n	8006f82 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f93d 	bl	80070a0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8006e26:	4b5f      	ldr	r3, [pc, #380]	; (8006fa4 <tcp_process+0x764>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 80a9 	beq.w	8006f86 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	7e9b      	ldrb	r3, [r3, #26]
 8006e38:	f043 0302 	orr.w	r3, r3, #2
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fe fe60 	bl	8005b08 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006e48:	4b57      	ldr	r3, [pc, #348]	; (8006fa8 <tcp_process+0x768>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d105      	bne.n	8006e5e <tcp_process+0x61e>
 8006e52:	4b55      	ldr	r3, [pc, #340]	; (8006fa8 <tcp_process+0x768>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	4a53      	ldr	r2, [pc, #332]	; (8006fa8 <tcp_process+0x768>)
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	e013      	b.n	8006e86 <tcp_process+0x646>
 8006e5e:	4b52      	ldr	r3, [pc, #328]	; (8006fa8 <tcp_process+0x768>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	613b      	str	r3, [r7, #16]
 8006e64:	e00c      	b.n	8006e80 <tcp_process+0x640>
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d104      	bne.n	8006e7a <tcp_process+0x63a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68da      	ldr	r2, [r3, #12]
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	60da      	str	r2, [r3, #12]
 8006e78:	e005      	b.n	8006e86 <tcp_process+0x646>
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1ef      	bne.n	8006e66 <tcp_process+0x626>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	60da      	str	r2, [r3, #12]
 8006e8c:	4b47      	ldr	r3, [pc, #284]	; (8006fac <tcp_process+0x76c>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	220a      	movs	r2, #10
 8006e96:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8006e98:	4b45      	ldr	r3, [pc, #276]	; (8006fb0 <tcp_process+0x770>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	60da      	str	r2, [r3, #12]
 8006ea0:	4a43      	ldr	r2, [pc, #268]	; (8006fb0 <tcp_process+0x770>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	f002 f919 	bl	80090dc <tcp_timer_needed>
    }
    break;
 8006eaa:	e06c      	b.n	8006f86 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f8f7 	bl	80070a0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006eb2:	4b3a      	ldr	r3, [pc, #232]	; (8006f9c <tcp_process+0x75c>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	f003 0310 	and.w	r3, r3, #16
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d065      	beq.n	8006f8a <tcp_process+0x74a>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ec2:	4b37      	ldr	r3, [pc, #220]	; (8006fa0 <tcp_process+0x760>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d15f      	bne.n	8006f8a <tcp_process+0x74a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d15b      	bne.n	8006f8a <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fe fe18 	bl	8005b08 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006ed8:	4b33      	ldr	r3, [pc, #204]	; (8006fa8 <tcp_process+0x768>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d105      	bne.n	8006eee <tcp_process+0x6ae>
 8006ee2:	4b31      	ldr	r3, [pc, #196]	; (8006fa8 <tcp_process+0x768>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	4a2f      	ldr	r2, [pc, #188]	; (8006fa8 <tcp_process+0x768>)
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	e013      	b.n	8006f16 <tcp_process+0x6d6>
 8006eee:	4b2e      	ldr	r3, [pc, #184]	; (8006fa8 <tcp_process+0x768>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	e00c      	b.n	8006f10 <tcp_process+0x6d0>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d104      	bne.n	8006f0a <tcp_process+0x6ca>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	60da      	str	r2, [r3, #12]
 8006f08:	e005      	b.n	8006f16 <tcp_process+0x6d6>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1ef      	bne.n	8006ef6 <tcp_process+0x6b6>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	60da      	str	r2, [r3, #12]
 8006f1c:	4b23      	ldr	r3, [pc, #140]	; (8006fac <tcp_process+0x76c>)
 8006f1e:	2201      	movs	r2, #1
 8006f20:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	220a      	movs	r2, #10
 8006f26:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8006f28:	4b21      	ldr	r3, [pc, #132]	; (8006fb0 <tcp_process+0x770>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	60da      	str	r2, [r3, #12]
 8006f30:	4a1f      	ldr	r2, [pc, #124]	; (8006fb0 <tcp_process+0x770>)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	f002 f8d1 	bl	80090dc <tcp_timer_needed>
    }
    break;
 8006f3a:	e026      	b.n	8006f8a <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f8af 	bl	80070a0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8006f42:	4b16      	ldr	r3, [pc, #88]	; (8006f9c <tcp_process+0x75c>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	f003 0310 	and.w	r3, r3, #16
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d01f      	beq.n	8006f8e <tcp_process+0x74e>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f52:	4b13      	ldr	r3, [pc, #76]	; (8006fa0 <tcp_process+0x760>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d119      	bne.n	8006f8e <tcp_process+0x74e>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d115      	bne.n	8006f8e <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8006f62:	4b10      	ldr	r3, [pc, #64]	; (8006fa4 <tcp_process+0x764>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	f043 0310 	orr.w	r3, r3, #16
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <tcp_process+0x764>)
 8006f6e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006f70:	e00d      	b.n	8006f8e <tcp_process+0x74e>
  default:
    break;
 8006f72:	bf00      	nop
 8006f74:	e00c      	b.n	8006f90 <tcp_process+0x750>
    break;
 8006f76:	bf00      	nop
 8006f78:	e00a      	b.n	8006f90 <tcp_process+0x750>
    break;
 8006f7a:	bf00      	nop
 8006f7c:	e008      	b.n	8006f90 <tcp_process+0x750>
    break;
 8006f7e:	bf00      	nop
 8006f80:	e006      	b.n	8006f90 <tcp_process+0x750>
    break;
 8006f82:	bf00      	nop
 8006f84:	e004      	b.n	8006f90 <tcp_process+0x750>
    break;
 8006f86:	bf00      	nop
 8006f88:	e002      	b.n	8006f90 <tcp_process+0x750>
    break;
 8006f8a:	bf00      	nop
 8006f8c:	e000      	b.n	8006f90 <tcp_process+0x750>
    break;
 8006f8e:	bf00      	nop
  }
  return ERR_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3720      	adds	r7, #32
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	200000f8 	.word	0x200000f8
 8006fa0:	200000f0 	.word	0x200000f0
 8006fa4:	200000f9 	.word	0x200000f9
 8006fa8:	20003778 	.word	0x20003778
 8006fac:	20003774 	.word	0x20003774
 8006fb0:	20003788 	.word	0x20003788

08006fb4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8006fb4:	b590      	push	{r4, r7, lr}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	899b      	ldrh	r3, [r3, #12]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fc f9aa 	bl	8003320 <lwip_htons>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d027      	beq.n	8007026 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8006fd6:	6838      	ldr	r0, [r7, #0]
 8006fd8:	f7fe fbed 	bl	80057b6 <tcp_segs_free>
    next = NULL;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	e055      	b.n	800708e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	899b      	ldrh	r3, [r3, #12]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fc f998 	bl	8003320 <lwip_htons>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00d      	beq.n	8007016 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	899b      	ldrh	r3, [r3, #12]
 8007000:	b29c      	uxth	r4, r3
 8007002:	2001      	movs	r0, #1
 8007004:	f7fc f98c 	bl	8003320 <lwip_htons>
 8007008:	4603      	mov	r3, r0
 800700a:	461a      	mov	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	4322      	orrs	r2, r4
 8007012:	b292      	uxth	r2, r2
 8007014:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f7fe fbdc 	bl	80057de <tcp_seg_free>
    while (next &&
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00e      	beq.n	800704a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	891b      	ldrh	r3, [r3, #8]
 8007030:	461a      	mov	r2, r3
 8007032:	4b1a      	ldr	r3, [pc, #104]	; (800709c <tcp_oos_insert_segment+0xe8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	441a      	add	r2, r3
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	8909      	ldrh	r1, [r1, #8]
 8007042:	440b      	add	r3, r1
 8007044:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007046:	2b00      	cmp	r3, #0
 8007048:	dacb      	bge.n	8006fe2 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01e      	beq.n	800708e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	891b      	ldrh	r3, [r3, #8]
 8007054:	461a      	mov	r2, r3
 8007056:	4b11      	ldr	r3, [pc, #68]	; (800709c <tcp_oos_insert_segment+0xe8>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	441a      	add	r2, r3
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007064:	2b00      	cmp	r3, #0
 8007066:	dd12      	ble.n	800708e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	b29a      	uxth	r2, r3
 8007070:	4b0a      	ldr	r3, [pc, #40]	; (800709c <tcp_oos_insert_segment+0xe8>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	b29a      	uxth	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	891b      	ldrh	r3, [r3, #8]
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f7fd f8dd 	bl	8004248 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	bf00      	nop
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	bd90      	pop	{r4, r7, pc}
 800709c:	200000ec 	.word	0x200000ec

080070a0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80070a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070a2:	b08d      	sub	sp, #52	; 0x34
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7d1b      	ldrb	r3, [r3, #20]
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d806      	bhi.n	80070c2 <tcp_receive+0x22>
 80070b4:	4ba6      	ldr	r3, [pc, #664]	; (8007350 <tcp_receive+0x2b0>)
 80070b6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80070ba:	49a6      	ldr	r1, [pc, #664]	; (8007354 <tcp_receive+0x2b4>)
 80070bc:	48a6      	ldr	r0, [pc, #664]	; (8007358 <tcp_receive+0x2b8>)
 80070be:	f007 fe63 	bl	800ed88 <iprintf>

  if (flags & TCP_ACK) {
 80070c2:	4ba6      	ldr	r3, [pc, #664]	; (800735c <tcp_receive+0x2bc>)
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	f003 0310 	and.w	r3, r3, #16
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 82bf 	beq.w	800764e <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070d6:	461a      	mov	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070dc:	4413      	add	r3, r2
 80070de:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070e4:	4b9e      	ldr	r3, [pc, #632]	; (8007360 <tcp_receive+0x2c0>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	db1b      	blt.n	8007126 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070f2:	4b9b      	ldr	r3, [pc, #620]	; (8007360 <tcp_receive+0x2c0>)
 80070f4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d106      	bne.n	8007108 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070fe:	4b99      	ldr	r3, [pc, #612]	; (8007364 <tcp_receive+0x2c4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	db0e      	blt.n	8007126 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800710c:	4b95      	ldr	r3, [pc, #596]	; (8007364 <tcp_receive+0x2c4>)
 800710e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007110:	429a      	cmp	r2, r3
 8007112:	d141      	bne.n	8007198 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007114:	4b94      	ldr	r3, [pc, #592]	; (8007368 <tcp_receive+0x2c8>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	89db      	ldrh	r3, [r3, #14]
 800711a:	b29a      	uxth	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007122:	429a      	cmp	r2, r3
 8007124:	d938      	bls.n	8007198 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007126:	4b90      	ldr	r3, [pc, #576]	; (8007368 <tcp_receive+0x2c8>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	89db      	ldrh	r3, [r3, #14]
 800712c:	b29a      	uxth	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007140:	429a      	cmp	r2, r3
 8007142:	d205      	bcs.n	8007150 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8007150:	4b83      	ldr	r3, [pc, #524]	; (8007360 <tcp_receive+0x2c0>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8007158:	4b82      	ldr	r3, [pc, #520]	; (8007364 <tcp_receive+0x2c4>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10d      	bne.n	8007186 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007170:	2b00      	cmp	r3, #0
 8007172:	d111      	bne.n	8007198 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8007184:	e008      	b.n	8007198 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007198:	4b72      	ldr	r3, [pc, #456]	; (8007364 <tcp_receive+0x2c4>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	dc53      	bgt.n	800724e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 80071a6:	4b71      	ldr	r3, [pc, #452]	; (800736c <tcp_receive+0x2cc>)
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d146      	bne.n	800723c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80071b8:	4413      	add	r3, r2
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d13d      	bne.n	800723c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	db38      	blt.n	800723c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ce:	4b65      	ldr	r3, [pc, #404]	; (8007364 <tcp_receive+0x2c4>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d132      	bne.n	800723c <tcp_receive+0x19c>
              found_dupack = 1;
 80071d6:	2301      	movs	r3, #1
 80071d8:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071e0:	2bff      	cmp	r3, #255	; 0xff
 80071e2:	d007      	beq.n	80071f4 <tcp_receive+0x154>
                ++pcb->dupacks;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071ea:	3301      	adds	r3, #1
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d916      	bls.n	800722c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007208:	4413      	add	r3, r2
 800720a:	b29a      	uxth	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007212:	429a      	cmp	r2, r3
 8007214:	d912      	bls.n	800723c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007220:	4413      	add	r3, r2
 8007222:	b29a      	uxth	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800722a:	e007      	b.n	800723c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007232:	2b03      	cmp	r3, #3
 8007234:	d102      	bne.n	800723c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 fdfc 	bl	8008e34 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f040 8169 	bne.w	8007516 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800724c:	e163      	b.n	8007516 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800724e:	4b45      	ldr	r3, [pc, #276]	; (8007364 <tcp_receive+0x2c4>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	3b01      	subs	r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	f2c0 8107 	blt.w	800746e <tcp_receive+0x3ce>
 8007260:	4b40      	ldr	r3, [pc, #256]	; (8007364 <tcp_receive+0x2c4>)
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	f300 80ff 	bgt.w	800746e <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7e9b      	ldrb	r3, [r3, #26]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00c      	beq.n	8007296 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	7e9b      	ldrb	r3, [r3, #26]
 8007280:	f023 0304 	bic.w	r3, r3, #4
 8007284:	b2da      	uxtb	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80072a4:	10db      	asrs	r3, r3, #3
 80072a6:	b21b      	sxth	r3, r3
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	4413      	add	r3, r2
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	b21a      	sxth	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80072c6:	4b27      	ldr	r3, [pc, #156]	; (8007364 <tcp_receive+0x2c4>)
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	7d1b      	ldrb	r3, [r3, #20]
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	f240 8094 	bls.w	8007400 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d216      	bcs.n	8007316 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072f2:	4413      	add	r3, r2
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d97f      	bls.n	8007400 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800730a:	4413      	add	r3, r2
 800730c:	b29a      	uxth	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007314:	e074      	b.n	8007400 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007320:	4619      	mov	r1, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007326:	fb03 f301 	mul.w	r3, r3, r1
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8007330:	fb93 f3f1 	sdiv	r3, r3, r1
 8007334:	b29b      	uxth	r3, r3
 8007336:	4413      	add	r3, r2
 8007338:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007340:	8a7a      	ldrh	r2, [r7, #18]
 8007342:	429a      	cmp	r2, r3
 8007344:	d95c      	bls.n	8007400 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	8a7a      	ldrh	r2, [r7, #18]
 800734a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800734e:	e057      	b.n	8007400 <tcp_receive+0x360>
 8007350:	08010c38 	.word	0x08010c38
 8007354:	08010e5c 	.word	0x08010e5c
 8007358:	08010c7c 	.word	0x08010c7c
 800735c:	200000f8 	.word	0x200000f8
 8007360:	200000ec 	.word	0x200000ec
 8007364:	200000f0 	.word	0x200000f0
 8007368:	200000dc 	.word	0x200000dc
 800736c:	200000f6 	.word	0x200000f6
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007374:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	4618      	mov	r0, r3
 800738c:	f7fd f964 	bl	8004658 <pbuf_clen>
 8007390:	4603      	mov	r3, r0
 8007392:	429c      	cmp	r4, r3
 8007394:	d206      	bcs.n	80073a4 <tcp_receive+0x304>
 8007396:	4b70      	ldr	r3, [pc, #448]	; (8007558 <tcp_receive+0x4b8>)
 8007398:	f240 429e 	movw	r2, #1182	; 0x49e
 800739c:	496f      	ldr	r1, [pc, #444]	; (800755c <tcp_receive+0x4bc>)
 800739e:	4870      	ldr	r0, [pc, #448]	; (8007560 <tcp_receive+0x4c0>)
 80073a0:	f007 fcf2 	bl	800ed88 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fd f955 	bl	8004658 <pbuf_clen>
 80073ae:	4603      	mov	r3, r0
 80073b0:	461a      	mov	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80073b8:	1a9b      	subs	r3, r3, r2
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	891a      	ldrh	r2, [r3, #8]
 80073c6:	4b67      	ldr	r3, [pc, #412]	; (8007564 <tcp_receive+0x4c4>)
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	4413      	add	r3, r2
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	4b65      	ldr	r3, [pc, #404]	; (8007564 <tcp_receive+0x4c4>)
 80073d0:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 80073d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073d4:	f7fe fa03 	bl	80057de <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00e      	beq.n	8007400 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <tcp_receive+0x360>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <tcp_receive+0x360>
 80073f2:	4b59      	ldr	r3, [pc, #356]	; (8007558 <tcp_receive+0x4b8>)
 80073f4:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80073f8:	495b      	ldr	r1, [pc, #364]	; (8007568 <tcp_receive+0x4c8>)
 80073fa:	4859      	ldr	r0, [pc, #356]	; (8007560 <tcp_receive+0x4c0>)
 80073fc:	f007 fcc4 	bl	800ed88 <iprintf>
      while (pcb->unacked != NULL &&
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007404:	2b00      	cmp	r3, #0
 8007406:	d022      	beq.n	800744e <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	4618      	mov	r0, r3
 8007412:	f7fb ff93 	bl	800333c <lwip_htonl>
 8007416:	4604      	mov	r4, r0
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800741c:	891b      	ldrh	r3, [r3, #8]
 800741e:	461d      	mov	r5, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	899b      	ldrh	r3, [r3, #12]
 8007428:	b29b      	uxth	r3, r3
 800742a:	4618      	mov	r0, r3
 800742c:	f7fb ff78 	bl	8003320 <lwip_htons>
 8007430:	4603      	mov	r3, r0
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <tcp_receive+0x39e>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <tcp_receive+0x3a0>
 800743e:	2300      	movs	r3, #0
 8007440:	442b      	add	r3, r5
 8007442:	18e2      	adds	r2, r4, r3
 8007444:	4b49      	ldr	r3, [pc, #292]	; (800756c <tcp_receive+0x4cc>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800744a:	2b00      	cmp	r3, #0
 800744c:	dd90      	ble.n	8007370 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d104      	bne.n	8007460 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800745c:	861a      	strh	r2, [r3, #48]	; 0x30
 800745e:	e002      	b.n	8007466 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	76da      	strb	r2, [r3, #27]
 800746c:	e002      	b.n	8007474 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 f8fe 	bl	8008670 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8007474:	e04f      	b.n	8007516 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800747a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800748a:	2b00      	cmp	r3, #0
 800748c:	d103      	bne.n	8007496 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fd f8d9 	bl	8004658 <pbuf_clen>
 80074a6:	4603      	mov	r3, r0
 80074a8:	429c      	cmp	r4, r3
 80074aa:	d206      	bcs.n	80074ba <tcp_receive+0x41a>
 80074ac:	4b2a      	ldr	r3, [pc, #168]	; (8007558 <tcp_receive+0x4b8>)
 80074ae:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80074b2:	492a      	ldr	r1, [pc, #168]	; (800755c <tcp_receive+0x4bc>)
 80074b4:	482a      	ldr	r0, [pc, #168]	; (8007560 <tcp_receive+0x4c0>)
 80074b6:	f007 fc67 	bl	800ed88 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80074ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fd f8ca 	bl	8004658 <pbuf_clen>
 80074c4:	4603      	mov	r3, r0
 80074c6:	461a      	mov	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80074ce:	1a9b      	subs	r3, r3, r2
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	891a      	ldrh	r2, [r3, #8]
 80074dc:	4b21      	ldr	r3, [pc, #132]	; (8007564 <tcp_receive+0x4c4>)
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	4413      	add	r3, r2
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	4b1f      	ldr	r3, [pc, #124]	; (8007564 <tcp_receive+0x4c4>)
 80074e6:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 80074e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074ea:	f7fe f978 	bl	80057de <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00e      	beq.n	8007516 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10a      	bne.n	8007516 <tcp_receive+0x476>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007504:	2b00      	cmp	r3, #0
 8007506:	d106      	bne.n	8007516 <tcp_receive+0x476>
 8007508:	4b13      	ldr	r3, [pc, #76]	; (8007558 <tcp_receive+0x4b8>)
 800750a:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800750e:	4916      	ldr	r1, [pc, #88]	; (8007568 <tcp_receive+0x4c8>)
 8007510:	4813      	ldr	r0, [pc, #76]	; (8007560 <tcp_receive+0x4c0>)
 8007512:	f007 fc39 	bl	800ed88 <iprintf>
    while (pcb->unsent != NULL &&
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800751a:	2b00      	cmp	r3, #0
 800751c:	d036      	beq.n	800758c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800751e:	4b13      	ldr	r3, [pc, #76]	; (800756c <tcp_receive+0x4cc>)
 8007520:	681c      	ldr	r4, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	4618      	mov	r0, r3
 800752c:	f7fb ff06 	bl	800333c <lwip_htonl>
 8007530:	4605      	mov	r5, r0
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007536:	891b      	ldrh	r3, [r3, #8]
 8007538:	461e      	mov	r6, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	899b      	ldrh	r3, [r3, #12]
 8007542:	b29b      	uxth	r3, r3
 8007544:	4618      	mov	r0, r3
 8007546:	f7fb feeb 	bl	8003320 <lwip_htons>
 800754a:	4603      	mov	r3, r0
 800754c:	f003 0303 	and.w	r3, r3, #3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00d      	beq.n	8007570 <tcp_receive+0x4d0>
 8007554:	2301      	movs	r3, #1
 8007556:	e00c      	b.n	8007572 <tcp_receive+0x4d2>
 8007558:	08010c38 	.word	0x08010c38
 800755c:	08010e78 	.word	0x08010e78
 8007560:	08010c7c 	.word	0x08010c7c
 8007564:	200000f4 	.word	0x200000f4
 8007568:	08010ea0 	.word	0x08010ea0
 800756c:	200000f0 	.word	0x200000f0
 8007570:	2300      	movs	r3, #0
 8007572:	4433      	add	r3, r6
 8007574:	442b      	add	r3, r5
 8007576:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8007578:	2b00      	cmp	r3, #0
 800757a:	db07      	blt.n	800758c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800757c:	4b8d      	ldr	r3, [pc, #564]	; (80077b4 <tcp_receive+0x714>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	f77f af75 	ble.w	8007476 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007592:	4b89      	ldr	r3, [pc, #548]	; (80077b8 <tcp_receive+0x718>)
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	4413      	add	r3, r2
 8007598:	b29a      	uxth	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d052      	beq.n	800764e <tcp_receive+0x5ae>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ac:	4b81      	ldr	r3, [pc, #516]	; (80077b4 <tcp_receive+0x714>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	da4b      	bge.n	800764e <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80075b6:	4b81      	ldr	r3, [pc, #516]	; (80077bc <tcp_receive+0x71c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80075c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80075d0:	10db      	asrs	r3, r3, #3
 80075d2:	b21b      	sxth	r3, r3
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	b29b      	uxth	r3, r3
 80075da:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075e6:	4413      	add	r3, r2
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	b21a      	sxth	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80075f0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	da03      	bge.n	8007600 <tcp_receive+0x560>
        m = -m;
 80075f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075fa:	425b      	negs	r3, r3
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8007600:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007608:	109b      	asrs	r3, r3, #2
 800760a:	b21b      	sxth	r3, r3
 800760c:	b29b      	uxth	r3, r3
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	b29b      	uxth	r3, r3
 8007612:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800761a:	b29a      	uxth	r2, r3
 800761c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800761e:	4413      	add	r3, r2
 8007620:	b29b      	uxth	r3, r3
 8007622:	b21a      	sxth	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800762e:	10db      	asrs	r3, r3, #3
 8007630:	b21b      	sxth	r3, r3
 8007632:	b29a      	uxth	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800763a:	b29b      	uxth	r3, r3
 800763c:	4413      	add	r3, r2
 800763e:	b29b      	uxth	r3, r3
 8007640:	b21a      	sxth	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800764e:	4b5c      	ldr	r3, [pc, #368]	; (80077c0 <tcp_receive+0x720>)
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 84f1 	beq.w	800803a <tcp_receive+0xf9a>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	7d1b      	ldrb	r3, [r3, #20]
 800765c:	2b06      	cmp	r3, #6
 800765e:	f200 84ec 	bhi.w	800803a <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007666:	4b57      	ldr	r3, [pc, #348]	; (80077c4 <tcp_receive+0x724>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	f2c0 80b8 	blt.w	80077e4 <tcp_receive+0x744>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007678:	4b51      	ldr	r3, [pc, #324]	; (80077c0 <tcp_receive+0x720>)
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	4619      	mov	r1, r3
 800767e:	4b51      	ldr	r3, [pc, #324]	; (80077c4 <tcp_receive+0x724>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	440b      	add	r3, r1
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	3301      	adds	r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	f300 80ab 	bgt.w	80077e4 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800768e:	4b4e      	ldr	r3, [pc, #312]	; (80077c8 <tcp_receive+0x728>)
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007698:	4b4a      	ldr	r3, [pc, #296]	; (80077c4 <tcp_receive+0x724>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80076a0:	4b49      	ldr	r3, [pc, #292]	; (80077c8 <tcp_receive+0x728>)
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d106      	bne.n	80076b6 <tcp_receive+0x616>
 80076a8:	4b48      	ldr	r3, [pc, #288]	; (80077cc <tcp_receive+0x72c>)
 80076aa:	f240 523c 	movw	r2, #1340	; 0x53c
 80076ae:	4948      	ldr	r1, [pc, #288]	; (80077d0 <tcp_receive+0x730>)
 80076b0:	4848      	ldr	r0, [pc, #288]	; (80077d4 <tcp_receive+0x734>)
 80076b2:	f007 fb69 	bl	800ed88 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80076bc:	4293      	cmp	r3, r2
 80076be:	dd06      	ble.n	80076ce <tcp_receive+0x62e>
 80076c0:	4b42      	ldr	r3, [pc, #264]	; (80077cc <tcp_receive+0x72c>)
 80076c2:	f240 523d 	movw	r2, #1341	; 0x53d
 80076c6:	4944      	ldr	r1, [pc, #272]	; (80077d8 <tcp_receive+0x738>)
 80076c8:	4842      	ldr	r0, [pc, #264]	; (80077d4 <tcp_receive+0x734>)
 80076ca:	f007 fb5d 	bl	800ed88 <iprintf>
      if (inseg.p->len < off) {
 80076ce:	4b3e      	ldr	r3, [pc, #248]	; (80077c8 <tcp_receive+0x728>)
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	895b      	ldrh	r3, [r3, #10]
 80076d4:	461a      	mov	r2, r3
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	4293      	cmp	r3, r2
 80076da:	dd3e      	ble.n	800775a <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80076dc:	4b3a      	ldr	r3, [pc, #232]	; (80077c8 <tcp_receive+0x728>)
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	891b      	ldrh	r3, [r3, #8]
 80076e2:	461a      	mov	r2, r3
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	4293      	cmp	r3, r2
 80076e8:	dd06      	ble.n	80076f8 <tcp_receive+0x658>
 80076ea:	4b38      	ldr	r3, [pc, #224]	; (80077cc <tcp_receive+0x72c>)
 80076ec:	f240 523f 	movw	r2, #1343	; 0x53f
 80076f0:	493a      	ldr	r1, [pc, #232]	; (80077dc <tcp_receive+0x73c>)
 80076f2:	4838      	ldr	r0, [pc, #224]	; (80077d4 <tcp_receive+0x734>)
 80076f4:	f007 fb48 	bl	800ed88 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80076f8:	4b33      	ldr	r3, [pc, #204]	; (80077c8 <tcp_receive+0x728>)
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	891a      	ldrh	r2, [r3, #8]
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	b29b      	uxth	r3, r3
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8007706:	e00e      	b.n	8007726 <tcp_receive+0x686>
          off -= p->len;
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	895b      	ldrh	r3, [r3, #10]
 800770c:	461a      	mov	r2, r3
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	1a9b      	subs	r3, r3, r2
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	8a3a      	ldrh	r2, [r7, #16]
 8007718:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	2200      	movs	r2, #0
 800771e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	895b      	ldrh	r3, [r3, #10]
 800772a:	461a      	mov	r2, r3
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	4293      	cmp	r3, r2
 8007730:	dcea      	bgt.n	8007708 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	b29b      	uxth	r3, r3
 8007736:	425b      	negs	r3, r3
 8007738:	b29b      	uxth	r3, r3
 800773a:	b21b      	sxth	r3, r3
 800773c:	4619      	mov	r1, r3
 800773e:	69b8      	ldr	r0, [r7, #24]
 8007740:	f7fc fed2 	bl	80044e8 <pbuf_header>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d01c      	beq.n	8007784 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800774a:	4b20      	ldr	r3, [pc, #128]	; (80077cc <tcp_receive+0x72c>)
 800774c:	f240 524c 	movw	r2, #1356	; 0x54c
 8007750:	4923      	ldr	r1, [pc, #140]	; (80077e0 <tcp_receive+0x740>)
 8007752:	4820      	ldr	r0, [pc, #128]	; (80077d4 <tcp_receive+0x734>)
 8007754:	f007 fb18 	bl	800ed88 <iprintf>
 8007758:	e014      	b.n	8007784 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800775a:	4b1b      	ldr	r3, [pc, #108]	; (80077c8 <tcp_receive+0x728>)
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007760:	b292      	uxth	r2, r2
 8007762:	4252      	negs	r2, r2
 8007764:	b292      	uxth	r2, r2
 8007766:	b212      	sxth	r2, r2
 8007768:	4611      	mov	r1, r2
 800776a:	4618      	mov	r0, r3
 800776c:	f7fc febc 	bl	80044e8 <pbuf_header>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d006      	beq.n	8007784 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8007776:	4b15      	ldr	r3, [pc, #84]	; (80077cc <tcp_receive+0x72c>)
 8007778:	f240 5251 	movw	r2, #1361	; 0x551
 800777c:	4918      	ldr	r1, [pc, #96]	; (80077e0 <tcp_receive+0x740>)
 800777e:	4815      	ldr	r0, [pc, #84]	; (80077d4 <tcp_receive+0x734>)
 8007780:	f007 fb02 	bl	800ed88 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8007784:	4b10      	ldr	r3, [pc, #64]	; (80077c8 <tcp_receive+0x728>)
 8007786:	891a      	ldrh	r2, [r3, #8]
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <tcp_receive+0x724>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	b299      	uxth	r1, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	b29b      	uxth	r3, r3
 8007794:	1acb      	subs	r3, r1, r3
 8007796:	b29b      	uxth	r3, r3
 8007798:	4413      	add	r3, r2
 800779a:	b29a      	uxth	r2, r3
 800779c:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <tcp_receive+0x728>)
 800779e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	4a07      	ldr	r2, [pc, #28]	; (80077c4 <tcp_receive+0x724>)
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <tcp_receive+0x728>)
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	4a05      	ldr	r2, [pc, #20]	; (80077c4 <tcp_receive+0x724>)
 80077ae:	6812      	ldr	r2, [r2, #0]
 80077b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80077b2:	e025      	b.n	8007800 <tcp_receive+0x760>
 80077b4:	200000f0 	.word	0x200000f0
 80077b8:	200000f4 	.word	0x200000f4
 80077bc:	2000377c 	.word	0x2000377c
 80077c0:	200000f6 	.word	0x200000f6
 80077c4:	200000ec 	.word	0x200000ec
 80077c8:	200000cc 	.word	0x200000cc
 80077cc:	08010c38 	.word	0x08010c38
 80077d0:	08010ec0 	.word	0x08010ec0
 80077d4:	08010c7c 	.word	0x08010c7c
 80077d8:	08010ed0 	.word	0x08010ed0
 80077dc:	08010ee0 	.word	0x08010ee0
 80077e0:	08010ef0 	.word	0x08010ef0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80077e4:	4b87      	ldr	r3, [pc, #540]	; (8007a04 <tcp_receive+0x964>)
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da06      	bge.n	8007800 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	7e9b      	ldrb	r3, [r3, #26]
 80077f6:	f043 0302 	orr.w	r3, r3, #2
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007800:	4b80      	ldr	r3, [pc, #512]	; (8007a04 <tcp_receive+0x964>)
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	f2c0 8410 	blt.w	8008030 <tcp_receive+0xf90>
 8007810:	4b7c      	ldr	r3, [pc, #496]	; (8007a04 <tcp_receive+0x964>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800781c:	440b      	add	r3, r1
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	3301      	adds	r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	f300 8404 	bgt.w	8008030 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800782c:	4b75      	ldr	r3, [pc, #468]	; (8007a04 <tcp_receive+0x964>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	429a      	cmp	r2, r3
 8007832:	f040 8287 	bne.w	8007d44 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8007836:	4b74      	ldr	r3, [pc, #464]	; (8007a08 <tcp_receive+0x968>)
 8007838:	891c      	ldrh	r4, [r3, #8]
 800783a:	4b73      	ldr	r3, [pc, #460]	; (8007a08 <tcp_receive+0x968>)
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	899b      	ldrh	r3, [r3, #12]
 8007840:	b29b      	uxth	r3, r3
 8007842:	4618      	mov	r0, r3
 8007844:	f7fb fd6c 	bl	8003320 <lwip_htons>
 8007848:	4603      	mov	r3, r0
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <tcp_receive+0x7b6>
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <tcp_receive+0x7b8>
 8007856:	2300      	movs	r3, #0
 8007858:	4423      	add	r3, r4
 800785a:	b29a      	uxth	r2, r3
 800785c:	4b6b      	ldr	r3, [pc, #428]	; (8007a0c <tcp_receive+0x96c>)
 800785e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007864:	4b69      	ldr	r3, [pc, #420]	; (8007a0c <tcp_receive+0x96c>)
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d26e      	bcs.n	800794a <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800786c:	4b66      	ldr	r3, [pc, #408]	; (8007a08 <tcp_receive+0x968>)
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	899b      	ldrh	r3, [r3, #12]
 8007872:	b29b      	uxth	r3, r3
 8007874:	4618      	mov	r0, r3
 8007876:	f7fb fd53 	bl	8003320 <lwip_htons>
 800787a:	4603      	mov	r3, r0
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01b      	beq.n	80078bc <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007884:	4b60      	ldr	r3, [pc, #384]	; (8007a08 <tcp_receive+0x968>)
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	899b      	ldrh	r3, [r3, #12]
 800788a:	b29b      	uxth	r3, r3
 800788c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007890:	b29c      	uxth	r4, r3
 8007892:	4b5d      	ldr	r3, [pc, #372]	; (8007a08 <tcp_receive+0x968>)
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	899b      	ldrh	r3, [r3, #12]
 8007898:	b29b      	uxth	r3, r3
 800789a:	4618      	mov	r0, r3
 800789c:	f7fb fd40 	bl	8003320 <lwip_htons>
 80078a0:	4603      	mov	r3, r0
 80078a2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fb fd39 	bl	8003320 <lwip_htons>
 80078ae:	4603      	mov	r3, r0
 80078b0:	461a      	mov	r2, r3
 80078b2:	4b55      	ldr	r3, [pc, #340]	; (8007a08 <tcp_receive+0x968>)
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	4322      	orrs	r2, r4
 80078b8:	b292      	uxth	r2, r2
 80078ba:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80078c0:	4b51      	ldr	r3, [pc, #324]	; (8007a08 <tcp_receive+0x968>)
 80078c2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80078c4:	4b50      	ldr	r3, [pc, #320]	; (8007a08 <tcp_receive+0x968>)
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	899b      	ldrh	r3, [r3, #12]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fb fd27 	bl	8003320 <lwip_htons>
 80078d2:	4603      	mov	r3, r0
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <tcp_receive+0x848>
            inseg.len -= 1;
 80078dc:	4b4a      	ldr	r3, [pc, #296]	; (8007a08 <tcp_receive+0x968>)
 80078de:	891b      	ldrh	r3, [r3, #8]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	4b48      	ldr	r3, [pc, #288]	; (8007a08 <tcp_receive+0x968>)
 80078e6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80078e8:	4b47      	ldr	r3, [pc, #284]	; (8007a08 <tcp_receive+0x968>)
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	4b46      	ldr	r3, [pc, #280]	; (8007a08 <tcp_receive+0x968>)
 80078ee:	891b      	ldrh	r3, [r3, #8]
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f7fc fca8 	bl	8004248 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80078f8:	4b43      	ldr	r3, [pc, #268]	; (8007a08 <tcp_receive+0x968>)
 80078fa:	891c      	ldrh	r4, [r3, #8]
 80078fc:	4b42      	ldr	r3, [pc, #264]	; (8007a08 <tcp_receive+0x968>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	899b      	ldrh	r3, [r3, #12]
 8007902:	b29b      	uxth	r3, r3
 8007904:	4618      	mov	r0, r3
 8007906:	f7fb fd0b 	bl	8003320 <lwip_htons>
 800790a:	4603      	mov	r3, r0
 800790c:	f003 0303 	and.w	r3, r3, #3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <tcp_receive+0x878>
 8007914:	2301      	movs	r3, #1
 8007916:	e000      	b.n	800791a <tcp_receive+0x87a>
 8007918:	2300      	movs	r3, #0
 800791a:	4423      	add	r3, r4
 800791c:	b29a      	uxth	r2, r3
 800791e:	4b3b      	ldr	r3, [pc, #236]	; (8007a0c <tcp_receive+0x96c>)
 8007920:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007922:	4b3a      	ldr	r3, [pc, #232]	; (8007a0c <tcp_receive+0x96c>)
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	4b36      	ldr	r3, [pc, #216]	; (8007a04 <tcp_receive+0x964>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	441a      	add	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007936:	440b      	add	r3, r1
 8007938:	429a      	cmp	r2, r3
 800793a:	d006      	beq.n	800794a <tcp_receive+0x8aa>
 800793c:	4b34      	ldr	r3, [pc, #208]	; (8007a10 <tcp_receive+0x970>)
 800793e:	f240 527f 	movw	r2, #1407	; 0x57f
 8007942:	4934      	ldr	r1, [pc, #208]	; (8007a14 <tcp_receive+0x974>)
 8007944:	4834      	ldr	r0, [pc, #208]	; (8007a18 <tcp_receive+0x978>)
 8007946:	f007 fa1f 	bl	800ed88 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 80e1 	beq.w	8007b16 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007954:	4b2c      	ldr	r3, [pc, #176]	; (8007a08 <tcp_receive+0x968>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	899b      	ldrh	r3, [r3, #12]
 800795a:	b29b      	uxth	r3, r3
 800795c:	4618      	mov	r0, r3
 800795e:	f7fb fcdf 	bl	8003320 <lwip_htons>
 8007962:	4603      	mov	r3, r0
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d010      	beq.n	800798e <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800796c:	e00a      	b.n	8007984 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007972:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800797e:	68b8      	ldr	r0, [r7, #8]
 8007980:	f7fd ff2d 	bl	80057de <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1f0      	bne.n	800796e <tcp_receive+0x8ce>
 800798c:	e0c3      	b.n	8007b16 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007992:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8007994:	e04f      	b.n	8007a36 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	899b      	ldrh	r3, [r3, #12]
 800799c:	b29b      	uxth	r3, r3
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fb fcbe 	bl	8003320 <lwip_htons>
 80079a4:	4603      	mov	r3, r0
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d03b      	beq.n	8007a26 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80079ae:	4b16      	ldr	r3, [pc, #88]	; (8007a08 <tcp_receive+0x968>)
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	899b      	ldrh	r3, [r3, #12]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fb fcb2 	bl	8003320 <lwip_htons>
 80079bc:	4603      	mov	r3, r0
 80079be:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d12f      	bne.n	8007a26 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80079c6:	4b10      	ldr	r3, [pc, #64]	; (8007a08 <tcp_receive+0x968>)
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	899b      	ldrh	r3, [r3, #12]
 80079cc:	b29c      	uxth	r4, r3
 80079ce:	2001      	movs	r0, #1
 80079d0:	f7fb fca6 	bl	8003320 <lwip_htons>
 80079d4:	4603      	mov	r3, r0
 80079d6:	461a      	mov	r2, r3
 80079d8:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <tcp_receive+0x968>)
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	4322      	orrs	r2, r4
 80079de:	b292      	uxth	r2, r2
 80079e0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80079e2:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <tcp_receive+0x968>)
 80079e4:	891c      	ldrh	r4, [r3, #8]
 80079e6:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <tcp_receive+0x968>)
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	899b      	ldrh	r3, [r3, #12]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fb fc96 	bl	8003320 <lwip_htons>
 80079f4:	4603      	mov	r3, r0
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00e      	beq.n	8007a1c <tcp_receive+0x97c>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e00d      	b.n	8007a1e <tcp_receive+0x97e>
 8007a02:	bf00      	nop
 8007a04:	200000ec 	.word	0x200000ec
 8007a08:	200000cc 	.word	0x200000cc
 8007a0c:	200000f6 	.word	0x200000f6
 8007a10:	08010c38 	.word	0x08010c38
 8007a14:	08010f04 	.word	0x08010f04
 8007a18:	08010c7c 	.word	0x08010c7c
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4423      	add	r3, r4
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	4b95      	ldr	r3, [pc, #596]	; (8007c78 <tcp_receive+0xbd8>)
 8007a24:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8007a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a28:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8007a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a32:	f7fd fed4 	bl	80057de <tcp_seg_free>
            while (next &&
 8007a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00e      	beq.n	8007a5a <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8007a3c:	4b8e      	ldr	r3, [pc, #568]	; (8007c78 <tcp_receive+0xbd8>)
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	4b8e      	ldr	r3, [pc, #568]	; (8007c7c <tcp_receive+0xbdc>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	441a      	add	r2, r3
 8007a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a50:	8909      	ldrh	r1, [r1, #8]
 8007a52:	440b      	add	r3, r1
 8007a54:	1ad3      	subs	r3, r2, r3
            while (next &&
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	da9d      	bge.n	8007996 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d057      	beq.n	8007b10 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8007a60:	4b85      	ldr	r3, [pc, #532]	; (8007c78 <tcp_receive+0xbd8>)
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
 8007a66:	4b85      	ldr	r3, [pc, #532]	; (8007c7c <tcp_receive+0xbdc>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	441a      	add	r2, r3
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	1ad3      	subs	r3, r2, r3
            if (next &&
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	dd4b      	ble.n	8007b10 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8007a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	4b7e      	ldr	r3, [pc, #504]	; (8007c7c <tcp_receive+0xbdc>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	4b7d      	ldr	r3, [pc, #500]	; (8007c80 <tcp_receive+0xbe0>)
 8007a8c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007a8e:	4b7c      	ldr	r3, [pc, #496]	; (8007c80 <tcp_receive+0xbe0>)
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	899b      	ldrh	r3, [r3, #12]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fb fc42 	bl	8003320 <lwip_htons>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d005      	beq.n	8007ab2 <tcp_receive+0xa12>
                inseg.len -= 1;
 8007aa6:	4b76      	ldr	r3, [pc, #472]	; (8007c80 <tcp_receive+0xbe0>)
 8007aa8:	891b      	ldrh	r3, [r3, #8]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	4b74      	ldr	r3, [pc, #464]	; (8007c80 <tcp_receive+0xbe0>)
 8007ab0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8007ab2:	4b73      	ldr	r3, [pc, #460]	; (8007c80 <tcp_receive+0xbe0>)
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	4b72      	ldr	r3, [pc, #456]	; (8007c80 <tcp_receive+0xbe0>)
 8007ab8:	891b      	ldrh	r3, [r3, #8]
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f7fc fbc3 	bl	8004248 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8007ac2:	4b6f      	ldr	r3, [pc, #444]	; (8007c80 <tcp_receive+0xbe0>)
 8007ac4:	891c      	ldrh	r4, [r3, #8]
 8007ac6:	4b6e      	ldr	r3, [pc, #440]	; (8007c80 <tcp_receive+0xbe0>)
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	899b      	ldrh	r3, [r3, #12]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fb fc26 	bl	8003320 <lwip_htons>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <tcp_receive+0xa42>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <tcp_receive+0xa44>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4423      	add	r3, r4
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	4b63      	ldr	r3, [pc, #396]	; (8007c78 <tcp_receive+0xbd8>)
 8007aea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8007aec:	4b62      	ldr	r3, [pc, #392]	; (8007c78 <tcp_receive+0xbd8>)
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	4b62      	ldr	r3, [pc, #392]	; (8007c7c <tcp_receive+0xbdc>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	441a      	add	r2, r3
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d006      	beq.n	8007b10 <tcp_receive+0xa70>
 8007b02:	4b60      	ldr	r3, [pc, #384]	; (8007c84 <tcp_receive+0xbe4>)
 8007b04:	f240 52af 	movw	r2, #1455	; 0x5af
 8007b08:	495f      	ldr	r1, [pc, #380]	; (8007c88 <tcp_receive+0xbe8>)
 8007b0a:	4860      	ldr	r0, [pc, #384]	; (8007c8c <tcp_receive+0xbec>)
 8007b0c:	f007 f93c 	bl	800ed88 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b14:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8007b16:	4b58      	ldr	r3, [pc, #352]	; (8007c78 <tcp_receive+0xbd8>)
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	4b57      	ldr	r3, [pc, #348]	; (8007c7c <tcp_receive+0xbdc>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	441a      	add	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007b2a:	4b53      	ldr	r3, [pc, #332]	; (8007c78 <tcp_receive+0xbd8>)
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d206      	bcs.n	8007b40 <tcp_receive+0xaa0>
 8007b32:	4b54      	ldr	r3, [pc, #336]	; (8007c84 <tcp_receive+0xbe4>)
 8007b34:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8007b38:	4955      	ldr	r1, [pc, #340]	; (8007c90 <tcp_receive+0xbf0>)
 8007b3a:	4854      	ldr	r0, [pc, #336]	; (8007c8c <tcp_receive+0xbec>)
 8007b3c:	f007 f924 	bl	800ed88 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007b44:	4b4c      	ldr	r3, [pc, #304]	; (8007c78 <tcp_receive+0xbd8>)
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7fd f9fb 	bl	8004f4c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8007b56:	4b4a      	ldr	r3, [pc, #296]	; (8007c80 <tcp_receive+0xbe0>)
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	891b      	ldrh	r3, [r3, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d006      	beq.n	8007b6e <tcp_receive+0xace>
          recv_data = inseg.p;
 8007b60:	4b47      	ldr	r3, [pc, #284]	; (8007c80 <tcp_receive+0xbe0>)
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	4a4b      	ldr	r2, [pc, #300]	; (8007c94 <tcp_receive+0xbf4>)
 8007b66:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8007b68:	4b45      	ldr	r3, [pc, #276]	; (8007c80 <tcp_receive+0xbe0>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007b6e:	4b44      	ldr	r3, [pc, #272]	; (8007c80 <tcp_receive+0xbe0>)
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	899b      	ldrh	r3, [r3, #12]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fb fbd2 	bl	8003320 <lwip_htons>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 80b4 	beq.w	8007cf0 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8007b88:	4b43      	ldr	r3, [pc, #268]	; (8007c98 <tcp_receive+0xbf8>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	f043 0320 	orr.w	r3, r3, #32
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	4b41      	ldr	r3, [pc, #260]	; (8007c98 <tcp_receive+0xbf8>)
 8007b94:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8007b96:	e0ab      	b.n	8007cf0 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	4a35      	ldr	r2, [pc, #212]	; (8007c7c <tcp_receive+0xbdc>)
 8007ba8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	891b      	ldrh	r3, [r3, #8]
 8007bae:	461c      	mov	r4, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	899b      	ldrh	r3, [r3, #12]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fb fbb1 	bl	8003320 <lwip_htons>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f003 0303 	and.w	r3, r3, #3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <tcp_receive+0xb2c>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e000      	b.n	8007bce <tcp_receive+0xb2e>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	191a      	adds	r2, r3, r4
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	441a      	add	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bde:	461c      	mov	r4, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	891b      	ldrh	r3, [r3, #8]
 8007be4:	461d      	mov	r5, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	899b      	ldrh	r3, [r3, #12]
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fb fb96 	bl	8003320 <lwip_htons>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <tcp_receive+0xb62>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <tcp_receive+0xb64>
 8007c02:	2300      	movs	r3, #0
 8007c04:	442b      	add	r3, r5
 8007c06:	429c      	cmp	r4, r3
 8007c08:	d206      	bcs.n	8007c18 <tcp_receive+0xb78>
 8007c0a:	4b1e      	ldr	r3, [pc, #120]	; (8007c84 <tcp_receive+0xbe4>)
 8007c0c:	f240 52de 	movw	r2, #1502	; 0x5de
 8007c10:	4922      	ldr	r1, [pc, #136]	; (8007c9c <tcp_receive+0xbfc>)
 8007c12:	481e      	ldr	r0, [pc, #120]	; (8007c8c <tcp_receive+0xbec>)
 8007c14:	f007 f8b8 	bl	800ed88 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	891b      	ldrh	r3, [r3, #8]
 8007c1c:	461c      	mov	r4, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	899b      	ldrh	r3, [r3, #12]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fb fb7a 	bl	8003320 <lwip_htons>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f003 0303 	and.w	r3, r3, #3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <tcp_receive+0xb9a>
 8007c36:	2301      	movs	r3, #1
 8007c38:	e000      	b.n	8007c3c <tcp_receive+0xb9c>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	1919      	adds	r1, r3, r4
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007c42:	b28b      	uxth	r3, r1
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7fd f97d 	bl	8004f4c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	891b      	ldrh	r3, [r3, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d028      	beq.n	8007cae <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8007c5c:	4b0d      	ldr	r3, [pc, #52]	; (8007c94 <tcp_receive+0xbf4>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d01d      	beq.n	8007ca0 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8007c64:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <tcp_receive+0xbf4>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	f7fc fd2c 	bl	80046cc <pbuf_cat>
 8007c74:	e018      	b.n	8007ca8 <tcp_receive+0xc08>
 8007c76:	bf00      	nop
 8007c78:	200000f6 	.word	0x200000f6
 8007c7c:	200000ec 	.word	0x200000ec
 8007c80:	200000cc 	.word	0x200000cc
 8007c84:	08010c38 	.word	0x08010c38
 8007c88:	08010f3c 	.word	0x08010f3c
 8007c8c:	08010c7c 	.word	0x08010c7c
 8007c90:	08010f78 	.word	0x08010f78
 8007c94:	200000fc 	.word	0x200000fc
 8007c98:	200000f9 	.word	0x200000f9
 8007c9c:	08010f98 	.word	0x08010f98
            } else {
              recv_data = cseg->p;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	4a71      	ldr	r2, [pc, #452]	; (8007e6c <tcp_receive+0xdcc>)
 8007ca6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	899b      	ldrh	r3, [r3, #12]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fb fb32 	bl	8003320 <lwip_htons>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00d      	beq.n	8007ce2 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8007cc6:	4b6a      	ldr	r3, [pc, #424]	; (8007e70 <tcp_receive+0xdd0>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	f043 0320 	orr.w	r3, r3, #32
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	4b67      	ldr	r3, [pc, #412]	; (8007e70 <tcp_receive+0xdd0>)
 8007cd2:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	7d1b      	ldrb	r3, [r3, #20]
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d102      	bne.n	8007ce2 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2207      	movs	r2, #7
 8007ce0:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7fd fd77 	bl	80057de <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d008      	beq.n	8007d0a <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8007d04:	429a      	cmp	r2, r3
 8007d06:	f43f af47 	beq.w	8007b98 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7e9b      	ldrb	r3, [r3, #26]
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00e      	beq.n	8007d34 <tcp_receive+0xc94>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	7e9b      	ldrb	r3, [r3, #26]
 8007d1a:	f023 0301 	bic.w	r3, r3, #1
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	769a      	strb	r2, [r3, #26]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	7e9b      	ldrb	r3, [r3, #26]
 8007d28:	f043 0302 	orr.w	r3, r3, #2
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8007d32:	e181      	b.n	8008038 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	7e9b      	ldrb	r3, [r3, #26]
 8007d38:	f043 0301 	orr.w	r3, r3, #1
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8007d42:	e179      	b.n	8008038 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fc93 	bl	8008670 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d106      	bne.n	8007d60 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8007d52:	4848      	ldr	r0, [pc, #288]	; (8007e74 <tcp_receive+0xdd4>)
 8007d54:	f7fd fd5b 	bl	800580e <tcp_seg_copy>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8007d5e:	e16b      	b.n	8008038 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d6a:	e150      	b.n	800800e <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8007d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	4b41      	ldr	r3, [pc, #260]	; (8007e78 <tcp_receive+0xdd8>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d11d      	bne.n	8007db6 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8007d7a:	4b3e      	ldr	r3, [pc, #248]	; (8007e74 <tcp_receive+0xdd4>)
 8007d7c:	891a      	ldrh	r2, [r3, #8]
 8007d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d80:	891b      	ldrh	r3, [r3, #8]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	f240 8148 	bls.w	8008018 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8007d88:	483a      	ldr	r0, [pc, #232]	; (8007e74 <tcp_receive+0xdd4>)
 8007d8a:	f7fd fd40 	bl	800580e <tcp_seg_copy>
 8007d8e:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 8142 	beq.w	800801c <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <tcp_receive+0xd06>
                    prev->next = cseg;
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	e002      	b.n	8007dac <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8007dac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff f900 	bl	8006fb4 <tcp_oos_insert_segment>
                }
                break;
 8007db4:	e132      	b.n	800801c <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8007db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d117      	bne.n	8007dec <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8007dbc:	4b2e      	ldr	r3, [pc, #184]	; (8007e78 <tcp_receive+0xdd8>)
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	da57      	bge.n	8007e7c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8007dcc:	4829      	ldr	r0, [pc, #164]	; (8007e74 <tcp_receive+0xdd4>)
 8007dce:	f7fd fd1e 	bl	800580e <tcp_seg_copy>
 8007dd2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 8122 	beq.w	8008020 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8007de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7ff f8e5 	bl	8006fb4 <tcp_oos_insert_segment>
                  }
                  break;
 8007dea:	e119      	b.n	8008020 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8007dec:	4b22      	ldr	r3, [pc, #136]	; (8007e78 <tcp_receive+0xdd8>)
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	db3e      	blt.n	8007e7c <tcp_receive+0xddc>
 8007dfe:	4b1e      	ldr	r3, [pc, #120]	; (8007e78 <tcp_receive+0xdd8>)
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	dc35      	bgt.n	8007e7c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8007e10:	4818      	ldr	r0, [pc, #96]	; (8007e74 <tcp_receive+0xdd4>)
 8007e12:	f7fd fcfc 	bl	800580e <tcp_seg_copy>
 8007e16:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 8102 	beq.w	8008024 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e28:	8912      	ldrh	r2, [r2, #8]
 8007e2a:	441a      	add	r2, r3
 8007e2c:	4b12      	ldr	r3, [pc, #72]	; (8007e78 <tcp_receive+0xdd8>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	dd12      	ble.n	8007e5c <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8007e36:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <tcp_receive+0xdd8>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	891b      	ldrh	r3, [r3, #8]
 8007e54:	4619      	mov	r1, r3
 8007e56:	4610      	mov	r0, r2
 8007e58:	f7fc f9f6 	bl	8004248 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8007e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f7ff f8a5 	bl	8006fb4 <tcp_oos_insert_segment>
                  }
                  break;
 8007e6a:	e0db      	b.n	8008024 <tcp_receive+0xf84>
 8007e6c:	200000fc 	.word	0x200000fc
 8007e70:	200000f9 	.word	0x200000f9
 8007e74:	200000cc 	.word	0x200000cc
 8007e78:	200000ec 	.word	0x200000ec
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f040 80bf 	bne.w	8008004 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8007e86:	4b7c      	ldr	r3, [pc, #496]	; (8008078 <tcp_receive+0xfd8>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f340 80b6 	ble.w	8008004 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	899b      	ldrh	r3, [r3, #12]
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fb fa3d 	bl	8003320 <lwip_htons>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f040 80bb 	bne.w	8008028 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8007eb2:	4872      	ldr	r0, [pc, #456]	; (800807c <tcp_receive+0xfdc>)
 8007eb4:	f7fd fcab 	bl	800580e <tcp_seg_copy>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 80b2 	beq.w	800802c <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ed0:	8912      	ldrh	r2, [r2, #8]
 8007ed2:	441a      	add	r2, r3
 8007ed4:	4b68      	ldr	r3, [pc, #416]	; (8008078 <tcp_receive+0xfd8>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	dd12      	ble.n	8007f04 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8007ede:	4b66      	ldr	r3, [pc, #408]	; (8008078 <tcp_receive+0xfd8>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8007ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	891b      	ldrh	r3, [r3, #8]
 8007efc:	4619      	mov	r1, r3
 8007efe:	4610      	mov	r0, r2
 8007f00:	f7fc f9a2 	bl	8004248 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8007f04:	4b5e      	ldr	r3, [pc, #376]	; (8008080 <tcp_receive+0xfe0>)
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4b5b      	ldr	r3, [pc, #364]	; (8008078 <tcp_receive+0xfd8>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	441a      	add	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007f18:	440b      	add	r3, r1
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f340 8085 	ble.w	800802c <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8007f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	899b      	ldrh	r3, [r3, #12]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fb f9f7 	bl	8003320 <lwip_htons>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d01e      	beq.n	8007f7a <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8007f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	899b      	ldrh	r3, [r3, #12]
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f4a:	b29c      	uxth	r4, r3
 8007f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	899b      	ldrh	r3, [r3, #12]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fb f9e2 	bl	8003320 <lwip_htons>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fb f9db 	bl	8003320 <lwip_htons>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	4322      	orrs	r2, r4
 8007f76:	b292      	uxth	r2, r2
 8007f78:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f84:	4413      	add	r3, r2
 8007f86:	b299      	uxth	r1, r3
 8007f88:	4b3b      	ldr	r3, [pc, #236]	; (8008078 <tcp_receive+0xfd8>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	1a8a      	subs	r2, r1, r2
 8007f94:	b292      	uxth	r2, r2
 8007f96:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	891b      	ldrh	r3, [r3, #8]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f7fc f94e 	bl	8004248 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8007fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	891c      	ldrh	r4, [r3, #8]
 8007fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	899b      	ldrh	r3, [r3, #12]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fb f9af 	bl	8003320 <lwip_htons>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f003 0303 	and.w	r3, r3, #3
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <tcp_receive+0xf30>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <tcp_receive+0xf32>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4423      	add	r3, r4
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	4b2a      	ldr	r3, [pc, #168]	; (8008080 <tcp_receive+0xfe0>)
 8007fd8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007fda:	4b29      	ldr	r3, [pc, #164]	; (8008080 <tcp_receive+0xfe0>)
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	4b25      	ldr	r3, [pc, #148]	; (8008078 <tcp_receive+0xfd8>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	441a      	add	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007fee:	440b      	add	r3, r1
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d01b      	beq.n	800802c <tcp_receive+0xf8c>
 8007ff4:	4b23      	ldr	r3, [pc, #140]	; (8008084 <tcp_receive+0xfe4>)
 8007ff6:	f240 627b 	movw	r2, #1659	; 0x67b
 8007ffa:	4923      	ldr	r1, [pc, #140]	; (8008088 <tcp_receive+0xfe8>)
 8007ffc:	4823      	ldr	r0, [pc, #140]	; (800808c <tcp_receive+0xfec>)
 8007ffe:	f006 fec3 	bl	800ed88 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008002:	e013      	b.n	800802c <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008010:	2b00      	cmp	r3, #0
 8008012:	f47f aeab 	bne.w	8007d6c <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8008016:	e00f      	b.n	8008038 <tcp_receive+0xf98>
                break;
 8008018:	bf00      	nop
 800801a:	e00d      	b.n	8008038 <tcp_receive+0xf98>
                break;
 800801c:	bf00      	nop
 800801e:	e00b      	b.n	8008038 <tcp_receive+0xf98>
                  break;
 8008020:	bf00      	nop
 8008022:	e009      	b.n	8008038 <tcp_receive+0xf98>
                  break;
 8008024:	bf00      	nop
 8008026:	e007      	b.n	8008038 <tcp_receive+0xf98>
                  break;
 8008028:	bf00      	nop
 800802a:	e005      	b.n	8008038 <tcp_receive+0xf98>
                break;
 800802c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800802e:	e003      	b.n	8008038 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fb1d 	bl	8008670 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008036:	e01a      	b.n	800806e <tcp_receive+0xfce>
 8008038:	e019      	b.n	800806e <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800803a:	4b0f      	ldr	r3, [pc, #60]	; (8008078 <tcp_receive+0xfd8>)
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b00      	cmp	r3, #0
 8008046:	db0a      	blt.n	800805e <tcp_receive+0xfbe>
 8008048:	4b0b      	ldr	r3, [pc, #44]	; (8008078 <tcp_receive+0xfd8>)
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	6879      	ldr	r1, [r7, #4]
 8008052:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008054:	440b      	add	r3, r1
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	3301      	adds	r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	dd07      	ble.n	800806e <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	7e9b      	ldrb	r3, [r3, #26]
 8008062:	f043 0302 	orr.w	r3, r3, #2
 8008066:	b2da      	uxtb	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800806c:	e7ff      	b.n	800806e <tcp_receive+0xfce>
 800806e:	bf00      	nop
 8008070:	3734      	adds	r7, #52	; 0x34
 8008072:	46bd      	mov	sp, r7
 8008074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008076:	bf00      	nop
 8008078:	200000ec 	.word	0x200000ec
 800807c:	200000cc 	.word	0x200000cc
 8008080:	200000f6 	.word	0x200000f6
 8008084:	08010c38 	.word	0x08010c38
 8008088:	08010f04 	.word	0x08010f04
 800808c:	08010c7c 	.word	0x08010c7c

08008090 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008096:	4b18      	ldr	r3, [pc, #96]	; (80080f8 <tcp_getoptbyte+0x68>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <tcp_getoptbyte+0x1a>
 800809e:	4b17      	ldr	r3, [pc, #92]	; (80080fc <tcp_getoptbyte+0x6c>)
 80080a0:	881a      	ldrh	r2, [r3, #0]
 80080a2:	4b17      	ldr	r3, [pc, #92]	; (8008100 <tcp_getoptbyte+0x70>)
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d20e      	bcs.n	80080c8 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80080aa:	4b16      	ldr	r3, [pc, #88]	; (8008104 <tcp_getoptbyte+0x74>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3314      	adds	r3, #20
 80080b0:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80080b2:	4b12      	ldr	r3, [pc, #72]	; (80080fc <tcp_getoptbyte+0x6c>)
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	b291      	uxth	r1, r2
 80080ba:	4a10      	ldr	r2, [pc, #64]	; (80080fc <tcp_getoptbyte+0x6c>)
 80080bc:	8011      	strh	r1, [r2, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	4413      	add	r3, r2
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	e010      	b.n	80080ea <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80080c8:	4b0c      	ldr	r3, [pc, #48]	; (80080fc <tcp_getoptbyte+0x6c>)
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	b291      	uxth	r1, r2
 80080d0:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <tcp_getoptbyte+0x6c>)
 80080d2:	8011      	strh	r1, [r2, #0]
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <tcp_getoptbyte+0x70>)
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80080e0:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <tcp_getoptbyte+0x68>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	4413      	add	r3, r2
 80080e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	200000e4 	.word	0x200000e4
 80080fc:	200000e8 	.word	0x200000e8
 8008100:	200000e2 	.word	0x200000e2
 8008104:	200000dc 	.word	0x200000dc

08008108 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008110:	4b2d      	ldr	r3, [pc, #180]	; (80081c8 <tcp_parseopt+0xc0>)
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d053      	beq.n	80081c0 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008118:	4b2c      	ldr	r3, [pc, #176]	; (80081cc <tcp_parseopt+0xc4>)
 800811a:	2200      	movs	r2, #0
 800811c:	801a      	strh	r2, [r3, #0]
 800811e:	e043      	b.n	80081a8 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8008120:	f7ff ffb6 	bl	8008090 <tcp_getoptbyte>
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d03c      	beq.n	80081a8 <tcp_parseopt+0xa0>
 800812e:	2b02      	cmp	r3, #2
 8008130:	d002      	beq.n	8008138 <tcp_parseopt+0x30>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d03f      	beq.n	80081b6 <tcp_parseopt+0xae>
 8008136:	e026      	b.n	8008186 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008138:	f7ff ffaa 	bl	8008090 <tcp_getoptbyte>
 800813c:	4603      	mov	r3, r0
 800813e:	2b04      	cmp	r3, #4
 8008140:	d13b      	bne.n	80081ba <tcp_parseopt+0xb2>
 8008142:	4b22      	ldr	r3, [pc, #136]	; (80081cc <tcp_parseopt+0xc4>)
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	3302      	adds	r3, #2
 8008148:	4a1f      	ldr	r2, [pc, #124]	; (80081c8 <tcp_parseopt+0xc0>)
 800814a:	8812      	ldrh	r2, [r2, #0]
 800814c:	4293      	cmp	r3, r2
 800814e:	dc34      	bgt.n	80081ba <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8008150:	f7ff ff9e 	bl	8008090 <tcp_getoptbyte>
 8008154:	4603      	mov	r3, r0
 8008156:	b29b      	uxth	r3, r3
 8008158:	021b      	lsls	r3, r3, #8
 800815a:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800815c:	f7ff ff98 	bl	8008090 <tcp_getoptbyte>
 8008160:	4603      	mov	r3, r0
 8008162:	b29a      	uxth	r2, r3
 8008164:	89bb      	ldrh	r3, [r7, #12]
 8008166:	4313      	orrs	r3, r2
 8008168:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800816a:	89bb      	ldrh	r3, [r7, #12]
 800816c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008170:	d804      	bhi.n	800817c <tcp_parseopt+0x74>
 8008172:	89bb      	ldrh	r3, [r7, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <tcp_parseopt+0x74>
 8008178:	89ba      	ldrh	r2, [r7, #12]
 800817a:	e001      	b.n	8008180 <tcp_parseopt+0x78>
 800817c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8008184:	e010      	b.n	80081a8 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008186:	f7ff ff83 	bl	8008090 <tcp_getoptbyte>
 800818a:	4603      	mov	r3, r0
 800818c:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800818e:	7afb      	ldrb	r3, [r7, #11]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d914      	bls.n	80081be <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008194:	7afb      	ldrb	r3, [r7, #11]
 8008196:	b29a      	uxth	r2, r3
 8008198:	4b0c      	ldr	r3, [pc, #48]	; (80081cc <tcp_parseopt+0xc4>)
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	4413      	add	r3, r2
 800819e:	b29b      	uxth	r3, r3
 80081a0:	3b02      	subs	r3, #2
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	4b09      	ldr	r3, [pc, #36]	; (80081cc <tcp_parseopt+0xc4>)
 80081a6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80081a8:	4b08      	ldr	r3, [pc, #32]	; (80081cc <tcp_parseopt+0xc4>)
 80081aa:	881a      	ldrh	r2, [r3, #0]
 80081ac:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <tcp_parseopt+0xc0>)
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d3b5      	bcc.n	8008120 <tcp_parseopt+0x18>
 80081b4:	e004      	b.n	80081c0 <tcp_parseopt+0xb8>
        return;
 80081b6:	bf00      	nop
 80081b8:	e002      	b.n	80081c0 <tcp_parseopt+0xb8>
          return;
 80081ba:	bf00      	nop
 80081bc:	e000      	b.n	80081c0 <tcp_parseopt+0xb8>
          return;
 80081be:	bf00      	nop
      }
    }
  }
}
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	200000e0 	.word	0x200000e0
 80081cc:	200000e8 	.word	0x200000e8

080081d0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <tcp_trigger_input_pcb_close+0x1c>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	f043 0310 	orr.w	r3, r3, #16
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	4b03      	ldr	r3, [pc, #12]	; (80081ec <tcp_trigger_input_pcb_close+0x1c>)
 80081e0:	701a      	strb	r2, [r3, #0]
}
 80081e2:	bf00      	nop
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	200000f9 	.word	0x200000f9

080081f0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	607b      	str	r3, [r7, #4]
 80081fa:	460b      	mov	r3, r1
 80081fc:	817b      	strh	r3, [r7, #10]
 80081fe:	4613      	mov	r3, r2
 8008200:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008202:	897a      	ldrh	r2, [r7, #10]
 8008204:	893b      	ldrh	r3, [r7, #8]
 8008206:	4413      	add	r3, r2
 8008208:	b29b      	uxth	r3, r3
 800820a:	3314      	adds	r3, #20
 800820c:	b29b      	uxth	r3, r3
 800820e:	2200      	movs	r2, #0
 8008210:	4619      	mov	r1, r3
 8008212:	2001      	movs	r0, #1
 8008214:	f7fb fe1a 	bl	8003e4c <pbuf_alloc>
 8008218:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d057      	beq.n	80082d0 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	895b      	ldrh	r3, [r3, #10]
 8008224:	461a      	mov	r2, r3
 8008226:	897b      	ldrh	r3, [r7, #10]
 8008228:	3314      	adds	r3, #20
 800822a:	429a      	cmp	r2, r3
 800822c:	da05      	bge.n	800823a <tcp_output_alloc_header+0x4a>
 800822e:	4b2b      	ldr	r3, [pc, #172]	; (80082dc <tcp_output_alloc_header+0xec>)
 8008230:	2273      	movs	r2, #115	; 0x73
 8008232:	492b      	ldr	r1, [pc, #172]	; (80082e0 <tcp_output_alloc_header+0xf0>)
 8008234:	482b      	ldr	r0, [pc, #172]	; (80082e4 <tcp_output_alloc_header+0xf4>)
 8008236:	f006 fda7 	bl	800ed88 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8adb      	ldrh	r3, [r3, #22]
 8008244:	4618      	mov	r0, r3
 8008246:	f7fb f86b 	bl	8003320 <lwip_htons>
 800824a:	4603      	mov	r3, r0
 800824c:	461a      	mov	r2, r3
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8b1b      	ldrh	r3, [r3, #24]
 8008256:	4618      	mov	r0, r3
 8008258:	f7fb f862 	bl	8003320 <lwip_htons>
 800825c:	4603      	mov	r3, r0
 800825e:	461a      	mov	r2, r3
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	4618      	mov	r0, r3
 8008270:	f7fb f864 	bl	800333c <lwip_htonl>
 8008274:	4602      	mov	r2, r0
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800827a:	897b      	ldrh	r3, [r7, #10]
 800827c:	089b      	lsrs	r3, r3, #2
 800827e:	b29b      	uxth	r3, r3
 8008280:	3305      	adds	r3, #5
 8008282:	b29b      	uxth	r3, r3
 8008284:	031b      	lsls	r3, r3, #12
 8008286:	b29b      	uxth	r3, r3
 8008288:	f043 0310 	orr.w	r3, r3, #16
 800828c:	b29b      	uxth	r3, r3
 800828e:	4618      	mov	r0, r3
 8008290:	f7fb f846 	bl	8003320 <lwip_htons>
 8008294:	4603      	mov	r3, r0
 8008296:	461a      	mov	r2, r3
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fb f83d 	bl	8003320 <lwip_htons>
 80082a6:	4603      	mov	r3, r0
 80082a8:	461a      	mov	r2, r3
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2200      	movs	r2, #0
 80082b2:	741a      	strb	r2, [r3, #16]
 80082b4:	2200      	movs	r2, #0
 80082b6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	2200      	movs	r2, #0
 80082bc:	749a      	strb	r2, [r3, #18]
 80082be:	2200      	movs	r2, #0
 80082c0:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80082ca:	441a      	add	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80082d0:	697b      	ldr	r3, [r7, #20]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	08010fc0 	.word	0x08010fc0
 80082e0:	08010ff4 	.word	0x08010ff4
 80082e4:	08011024 	.word	0x08011024

080082e8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80082e8:	b590      	push	{r4, r7, lr}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d02d      	beq.n	8008354 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082fc:	60fb      	str	r3, [r7, #12]
 80082fe:	e002      	b.n	8008306 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1f8      	bne.n	8008300 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	899b      	ldrh	r3, [r3, #12]
 8008314:	b29b      	uxth	r3, r3
 8008316:	4618      	mov	r0, r3
 8008318:	f7fb f802 	bl	8003320 <lwip_htons>
 800831c:	4603      	mov	r3, r0
 800831e:	f003 0307 	and.w	r3, r3, #7
 8008322:	2b00      	cmp	r3, #0
 8008324:	d116      	bne.n	8008354 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	899b      	ldrh	r3, [r3, #12]
 800832c:	b29c      	uxth	r4, r3
 800832e:	2001      	movs	r0, #1
 8008330:	f7fa fff6 	bl	8003320 <lwip_htons>
 8008334:	4603      	mov	r3, r0
 8008336:	461a      	mov	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	4322      	orrs	r2, r4
 800833e:	b292      	uxth	r2, r2
 8008340:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	7e9b      	ldrb	r3, [r3, #26]
 8008346:	f043 0320 	orr.w	r3, r3, #32
 800834a:	b2da      	uxtb	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	e004      	b.n	800835e <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008354:	2101      	movs	r1, #1
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f88e 	bl	8008478 <tcp_enqueue_flags>
 800835c:	4603      	mov	r3, r0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	bd90      	pop	{r4, r7, pc}
	...

08008368 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8008368:	b590      	push	{r4, r7, lr}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	4613      	mov	r3, r2
 8008376:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008378:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008386:	2003      	movs	r0, #3
 8008388:	f7fb fb78 	bl	8003a7c <memp_malloc>
 800838c:	6138      	str	r0, [r7, #16]
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d104      	bne.n	800839e <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8008394:	68b8      	ldr	r0, [r7, #8]
 8008396:	f7fc f8cb 	bl	8004530 <pbuf_free>
    return NULL;
 800839a:	2300      	movs	r3, #0
 800839c:	e061      	b.n	8008462 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80083a4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	891a      	ldrh	r2, [r3, #8]
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d205      	bcs.n	80083ca <tcp_create_segment+0x62>
 80083be:	4b2b      	ldr	r3, [pc, #172]	; (800846c <tcp_create_segment+0x104>)
 80083c0:	22ba      	movs	r2, #186	; 0xba
 80083c2:	492b      	ldr	r1, [pc, #172]	; (8008470 <tcp_create_segment+0x108>)
 80083c4:	482b      	ldr	r0, [pc, #172]	; (8008474 <tcp_create_segment+0x10c>)
 80083c6:	f006 fcdf 	bl	800ed88 <iprintf>
  seg->len = p->tot_len - optlen;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	891a      	ldrh	r2, [r3, #8]
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 80083da:	2114      	movs	r1, #20
 80083dc:	68b8      	ldr	r0, [r7, #8]
 80083de:	f7fc f883 	bl	80044e8 <pbuf_header>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d004      	beq.n	80083f2 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80083e8:	6938      	ldr	r0, [r7, #16]
 80083ea:	f7fd f9f8 	bl	80057de <tcp_seg_free>
    return NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	e037      	b.n	8008462 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8ada      	ldrh	r2, [r3, #22]
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	68dc      	ldr	r4, [r3, #12]
 8008404:	4610      	mov	r0, r2
 8008406:	f7fa ff8b 	bl	8003320 <lwip_htons>
 800840a:	4603      	mov	r3, r0
 800840c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8b1a      	ldrh	r2, [r3, #24]
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	68dc      	ldr	r4, [r3, #12]
 8008416:	4610      	mov	r0, r2
 8008418:	f7fa ff82 	bl	8003320 <lwip_htons>
 800841c:	4603      	mov	r3, r0
 800841e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	68dc      	ldr	r4, [r3, #12]
 8008424:	6838      	ldr	r0, [r7, #0]
 8008426:	f7fa ff89 	bl	800333c <lwip_htonl>
 800842a:	4603      	mov	r3, r0
 800842c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	089b      	lsrs	r3, r3, #2
 8008432:	b2db      	uxtb	r3, r3
 8008434:	b29b      	uxth	r3, r3
 8008436:	3305      	adds	r3, #5
 8008438:	b29b      	uxth	r3, r3
 800843a:	031b      	lsls	r3, r3, #12
 800843c:	b29a      	uxth	r2, r3
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	b29b      	uxth	r3, r3
 8008442:	4313      	orrs	r3, r2
 8008444:	b29a      	uxth	r2, r3
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	68dc      	ldr	r4, [r3, #12]
 800844a:	4610      	mov	r0, r2
 800844c:	f7fa ff68 	bl	8003320 <lwip_htons>
 8008450:	4603      	mov	r3, r0
 8008452:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	749a      	strb	r2, [r3, #18]
 800845c:	2200      	movs	r2, #0
 800845e:	74da      	strb	r2, [r3, #19]
  return seg;
 8008460:	693b      	ldr	r3, [r7, #16]
}
 8008462:	4618      	mov	r0, r3
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	bd90      	pop	{r4, r7, pc}
 800846a:	bf00      	nop
 800846c:	08010fc0 	.word	0x08010fc0
 8008470:	0801104c 	.word	0x0801104c
 8008474:	08011024 	.word	0x08011024

08008478 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	; 0x28
 800847c:	af02      	add	r7, sp, #8
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8008488:	2300      	movs	r3, #0
 800848a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800848c:	78fb      	ldrb	r3, [r7, #3]
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d106      	bne.n	80084a4 <tcp_enqueue_flags+0x2c>
 8008496:	4b6f      	ldr	r3, [pc, #444]	; (8008654 <tcp_enqueue_flags+0x1dc>)
 8008498:	f240 321b 	movw	r2, #795	; 0x31b
 800849c:	496e      	ldr	r1, [pc, #440]	; (8008658 <tcp_enqueue_flags+0x1e0>)
 800849e:	486f      	ldr	r0, [pc, #444]	; (800865c <tcp_enqueue_flags+0x1e4>)
 80084a0:	f006 fc72 	bl	800ed88 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d806      	bhi.n	80084bc <tcp_enqueue_flags+0x44>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80084b4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d90e      	bls.n	80084da <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 80084bc:	78fb      	ldrb	r3, [r7, #3]
 80084be:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d109      	bne.n	80084da <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	7e9b      	ldrb	r3, [r3, #26]
 80084ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80084d4:	f04f 33ff 	mov.w	r3, #4294967295
 80084d8:	e0b7      	b.n	800864a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 80084e4:	2301      	movs	r3, #1
 80084e6:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80084e8:	7ffb      	ldrb	r3, [r7, #31]
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2200      	movs	r2, #0
 80084fa:	4619      	mov	r1, r3
 80084fc:	2000      	movs	r0, #0
 80084fe:	f7fb fca5 	bl	8003e4c <pbuf_alloc>
 8008502:	6138      	str	r0, [r7, #16]
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	7e9b      	ldrb	r3, [r3, #26]
 800850e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008512:	b2da      	uxtb	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008518:	f04f 33ff 	mov.w	r3, #4294967295
 800851c:	e095      	b.n	800864a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	895a      	ldrh	r2, [r3, #10]
 8008522:	7dfb      	ldrb	r3, [r7, #23]
 8008524:	b29b      	uxth	r3, r3
 8008526:	429a      	cmp	r2, r3
 8008528:	d206      	bcs.n	8008538 <tcp_enqueue_flags+0xc0>
 800852a:	4b4a      	ldr	r3, [pc, #296]	; (8008654 <tcp_enqueue_flags+0x1dc>)
 800852c:	f240 3241 	movw	r2, #833	; 0x341
 8008530:	494b      	ldr	r1, [pc, #300]	; (8008660 <tcp_enqueue_flags+0x1e8>)
 8008532:	484a      	ldr	r0, [pc, #296]	; (800865c <tcp_enqueue_flags+0x1e4>)
 8008534:	f006 fc28 	bl	800ed88 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800853c:	78fa      	ldrb	r2, [r7, #3]
 800853e:	7ffb      	ldrb	r3, [r7, #31]
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	460b      	mov	r3, r1
 8008544:	6939      	ldr	r1, [r7, #16]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7ff ff0e 	bl	8008368 <tcp_create_segment>
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d109      	bne.n	8008568 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7e9b      	ldrb	r3, [r3, #26]
 8008558:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800855c:	b2da      	uxtb	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008562:	f04f 33ff 	mov.w	r3, #4294967295
 8008566:	e070      	b.n	800864a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f003 0303 	and.w	r3, r3, #3
 8008570:	2b00      	cmp	r3, #0
 8008572:	d006      	beq.n	8008582 <tcp_enqueue_flags+0x10a>
 8008574:	4b37      	ldr	r3, [pc, #220]	; (8008654 <tcp_enqueue_flags+0x1dc>)
 8008576:	f240 3249 	movw	r2, #841	; 0x349
 800857a:	493a      	ldr	r1, [pc, #232]	; (8008664 <tcp_enqueue_flags+0x1ec>)
 800857c:	4837      	ldr	r0, [pc, #220]	; (800865c <tcp_enqueue_flags+0x1e4>)
 800857e:	f006 fc03 	bl	800ed88 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	891b      	ldrh	r3, [r3, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d006      	beq.n	8008598 <tcp_enqueue_flags+0x120>
 800858a:	4b32      	ldr	r3, [pc, #200]	; (8008654 <tcp_enqueue_flags+0x1dc>)
 800858c:	f240 324a 	movw	r2, #842	; 0x34a
 8008590:	4935      	ldr	r1, [pc, #212]	; (8008668 <tcp_enqueue_flags+0x1f0>)
 8008592:	4832      	ldr	r0, [pc, #200]	; (800865c <tcp_enqueue_flags+0x1e4>)
 8008594:	f006 fbf8 	bl	800ed88 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800859c:	2b00      	cmp	r3, #0
 800859e:	d103      	bne.n	80085a8 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	669a      	str	r2, [r3, #104]	; 0x68
 80085a6:	e00d      	b.n	80085c4 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085ac:	61bb      	str	r3, [r7, #24]
 80085ae:	e002      	b.n	80085b6 <tcp_enqueue_flags+0x13e>
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	61bb      	str	r3, [r7, #24]
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1f8      	bne.n	80085b0 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d104      	bne.n	80085e0 <tcp_enqueue_flags+0x168>
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e4:	1c5a      	adds	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80085ea:	78fb      	ldrb	r3, [r7, #3]
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d006      	beq.n	8008602 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	7e9b      	ldrb	r3, [r3, #26]
 80085f8:	f043 0320 	orr.w	r3, r3, #32
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	4618      	mov	r0, r3
 8008608:	f7fc f826 	bl	8004658 <pbuf_clen>
 800860c:	4603      	mov	r3, r0
 800860e:	461a      	mov	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008616:	4413      	add	r3, r2
 8008618:	b29a      	uxth	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00e      	beq.n	8008648 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10a      	bne.n	8008648 <tcp_enqueue_flags+0x1d0>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008636:	2b00      	cmp	r3, #0
 8008638:	d106      	bne.n	8008648 <tcp_enqueue_flags+0x1d0>
 800863a:	4b06      	ldr	r3, [pc, #24]	; (8008654 <tcp_enqueue_flags+0x1dc>)
 800863c:	f240 326d 	movw	r2, #877	; 0x36d
 8008640:	490a      	ldr	r1, [pc, #40]	; (800866c <tcp_enqueue_flags+0x1f4>)
 8008642:	4806      	ldr	r0, [pc, #24]	; (800865c <tcp_enqueue_flags+0x1e4>)
 8008644:	f006 fba0 	bl	800ed88 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3720      	adds	r7, #32
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	08010fc0 	.word	0x08010fc0
 8008658:	080112c4 	.word	0x080112c4
 800865c:	08011024 	.word	0x08011024
 8008660:	0801131c 	.word	0x0801131c
 8008664:	08011358 	.word	0x08011358
 8008668:	08011370 	.word	0x08011370
 800866c:	0801139c 	.word	0x0801139c

08008670 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8008670:	b590      	push	{r4, r7, lr}
 8008672:	b08b      	sub	sp, #44	; 0x2c
 8008674:	af04      	add	r7, sp, #16
 8008676:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800867c:	7dbb      	ldrb	r3, [r7, #22]
 800867e:	b29c      	uxth	r4, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008684:	4618      	mov	r0, r3
 8008686:	f7fa fe59 	bl	800333c <lwip_htonl>
 800868a:	4603      	mov	r3, r0
 800868c:	2200      	movs	r2, #0
 800868e:	4621      	mov	r1, r4
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff fdad 	bl	80081f0 <tcp_output_alloc_header>
 8008696:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d109      	bne.n	80086b2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	7e9b      	ldrb	r3, [r3, #26]
 80086a2:	f043 0303 	orr.w	r3, r3, #3
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80086ac:	f06f 0301 	mvn.w	r3, #1
 80086b0:	e036      	b.n	8008720 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	3304      	adds	r3, #4
 80086b6:	4618      	mov	r0, r3
 80086b8:	f004 f8fc 	bl	800c8b4 <ip4_route>
 80086bc:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d102      	bne.n	80086ca <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80086c4:	23fc      	movs	r3, #252	; 0xfc
 80086c6:	75fb      	strb	r3, [r7, #23]
 80086c8:	e012      	b.n	80086f0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	1d18      	adds	r0, r3, #4
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	7a9c      	ldrb	r4, [r3, #10]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	7a5b      	ldrb	r3, [r3, #9]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	9202      	str	r2, [sp, #8]
 80086dc:	2206      	movs	r2, #6
 80086de:	9201      	str	r2, [sp, #4]
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	4623      	mov	r3, r4
 80086e4:	4602      	mov	r2, r0
 80086e6:	6938      	ldr	r0, [r7, #16]
 80086e8:	f004 faaa 	bl	800cc40 <ip4_output_if>
 80086ec:	4603      	mov	r3, r0
 80086ee:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80086f0:	6938      	ldr	r0, [r7, #16]
 80086f2:	f7fb ff1d 	bl	8004530 <pbuf_free>

  if (err != ERR_OK) {
 80086f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d007      	beq.n	800870e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	7e9b      	ldrb	r3, [r3, #26]
 8008702:	f043 0303 	orr.w	r3, r3, #3
 8008706:	b2da      	uxtb	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	769a      	strb	r2, [r3, #26]
 800870c:	e006      	b.n	800871c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	7e9b      	ldrb	r3, [r3, #26]
 8008712:	f023 0303 	bic.w	r3, r3, #3
 8008716:	b2da      	uxtb	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800871c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008720:	4618      	mov	r0, r3
 8008722:	371c      	adds	r7, #28
 8008724:	46bd      	mov	sp, r7
 8008726:	bd90      	pop	{r4, r7, pc}

08008728 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8008728:	b5b0      	push	{r4, r5, r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	7d1b      	ldrb	r3, [r3, #20]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d106      	bne.n	8008746 <tcp_output+0x1e>
 8008738:	4b9b      	ldr	r3, [pc, #620]	; (80089a8 <tcp_output+0x280>)
 800873a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800873e:	499b      	ldr	r1, [pc, #620]	; (80089ac <tcp_output+0x284>)
 8008740:	489b      	ldr	r0, [pc, #620]	; (80089b0 <tcp_output+0x288>)
 8008742:	f006 fb21 	bl	800ed88 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008746:	4b9b      	ldr	r3, [pc, #620]	; (80089b4 <tcp_output+0x28c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	429a      	cmp	r2, r3
 800874e:	d101      	bne.n	8008754 <tcp_output+0x2c>
    return ERR_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	e1cf      	b.n	8008af4 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008760:	429a      	cmp	r2, r3
 8008762:	d203      	bcs.n	800876c <tcp_output+0x44>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800876a:	e002      	b.n	8008772 <tcp_output+0x4a>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008772:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	7e9b      	ldrb	r3, [r3, #26]
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d017      	beq.n	80087b6 <tcp_output+0x8e>
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00f      	beq.n	80087ac <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	4618      	mov	r0, r3
 8008794:	f7fa fdd2 	bl	800333c <lwip_htonl>
 8008798:	4602      	mov	r2, r0
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a2:	8912      	ldrh	r2, [r2, #8]
 80087a4:	4413      	add	r3, r2
     (seg == NULL ||
 80087a6:	69ba      	ldr	r2, [r7, #24]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d204      	bcs.n	80087b6 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7ff ff5f 	bl	8008670 <tcp_send_empty_ack>
 80087b2:	4603      	mov	r3, r0
 80087b4:	e19e      	b.n	8008af4 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ba:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d007      	beq.n	80087d2 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80087c2:	e002      	b.n	80087ca <tcp_output+0xa2>
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	623b      	str	r3, [r7, #32]
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1f8      	bne.n	80087c4 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3304      	adds	r3, #4
 80087d6:	4618      	mov	r0, r3
 80087d8:	f004 f86c 	bl	800c8b4 <ip4_route>
 80087dc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d102      	bne.n	80087ea <tcp_output+0xc2>
    return ERR_RTE;
 80087e4:	f06f 0303 	mvn.w	r3, #3
 80087e8:	e184      	b.n	8008af4 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <tcp_output+0xd0>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d111      	bne.n	800881c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d002      	beq.n	8008804 <tcp_output+0xdc>
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	3304      	adds	r3, #4
 8008802:	e000      	b.n	8008806 <tcp_output+0xde>
 8008804:	2300      	movs	r3, #0
 8008806:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d102      	bne.n	8008814 <tcp_output+0xec>
      return ERR_RTE;
 800880e:	f06f 0303 	mvn.w	r3, #3
 8008812:	e16f      	b.n	8008af4 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 813e 	beq.w	8008aa0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	4618      	mov	r0, r3
 800882c:	f7fa fd86 	bl	800333c <lwip_htonl>
 8008830:	4602      	mov	r2, r0
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800883a:	8912      	ldrh	r2, [r2, #8]
 800883c:	4413      	add	r3, r2
  if (seg != NULL &&
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	429a      	cmp	r2, r3
 8008842:	f080 812d 	bcs.w	8008aa0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	f000 8129 	beq.w	8008aa0 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008854:	461a      	mov	r2, r3
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	4293      	cmp	r3, r2
 800885a:	f040 8121 	bne.w	8008aa0 <tcp_output+0x378>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008862:	2b00      	cmp	r3, #0
 8008864:	f040 811c 	bne.w	8008aa0 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800886e:	2b00      	cmp	r3, #0
 8008870:	f040 812b 	bne.w	8008aca <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8008884:	e121      	b.n	8008aca <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	899b      	ldrh	r3, [r3, #12]
 800888c:	b29b      	uxth	r3, r3
 800888e:	4618      	mov	r0, r3
 8008890:	f7fa fd46 	bl	8003320 <lwip_htons>
 8008894:	4603      	mov	r3, r0
 8008896:	f003 0304 	and.w	r3, r3, #4
 800889a:	2b00      	cmp	r3, #0
 800889c:	d006      	beq.n	80088ac <tcp_output+0x184>
 800889e:	4b42      	ldr	r3, [pc, #264]	; (80089a8 <tcp_output+0x280>)
 80088a0:	f240 4246 	movw	r2, #1094	; 0x446
 80088a4:	4944      	ldr	r1, [pc, #272]	; (80089b8 <tcp_output+0x290>)
 80088a6:	4842      	ldr	r0, [pc, #264]	; (80089b0 <tcp_output+0x288>)
 80088a8:	f006 fa6e 	bl	800ed88 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d01f      	beq.n	80088f4 <tcp_output+0x1cc>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7e9b      	ldrb	r3, [r3, #26]
 80088b8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d119      	bne.n	80088f4 <tcp_output+0x1cc>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00b      	beq.n	80088e0 <tcp_output+0x1b8>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d110      	bne.n	80088f4 <tcp_output+0x1cc>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088d6:	891a      	ldrh	r2, [r3, #8]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088dc:	429a      	cmp	r2, r3
 80088de:	d209      	bcs.n	80088f4 <tcp_output+0x1cc>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d004      	beq.n	80088f4 <tcp_output+0x1cc>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d901      	bls.n	80088f8 <tcp_output+0x1d0>
 80088f4:	2301      	movs	r3, #1
 80088f6:	e000      	b.n	80088fa <tcp_output+0x1d2>
 80088f8:	2300      	movs	r3, #0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d106      	bne.n	800890c <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	7e9b      	ldrb	r3, [r3, #26]
 8008902:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 80e1 	beq.w	8008ace <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	7d1b      	ldrb	r3, [r3, #20]
 8008910:	2b02      	cmp	r3, #2
 8008912:	d00d      	beq.n	8008930 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	899b      	ldrh	r3, [r3, #12]
 800891a:	b29c      	uxth	r4, r3
 800891c:	2010      	movs	r0, #16
 800891e:	f7fa fcff 	bl	8003320 <lwip_htons>
 8008922:	4603      	mov	r3, r0
 8008924:	461a      	mov	r2, r3
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	4322      	orrs	r2, r4
 800892c:	b292      	uxth	r2, r2
 800892e:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008936:	f000 f8e1 	bl	8008afc <tcp_output_segment>
 800893a:	4603      	mov	r3, r0
 800893c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800893e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d009      	beq.n	800895a <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	7e9b      	ldrb	r3, [r3, #26]
 800894a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800894e:	b2da      	uxtb	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	769a      	strb	r2, [r3, #26]
      return err;
 8008954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008958:	e0cc      	b.n	8008af4 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	7d1b      	ldrb	r3, [r3, #20]
 8008966:	2b02      	cmp	r3, #2
 8008968:	d006      	beq.n	8008978 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	7e9b      	ldrb	r3, [r3, #26]
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	b2da      	uxtb	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	4618      	mov	r0, r3
 8008980:	f7fa fcdc 	bl	800333c <lwip_htonl>
 8008984:	4604      	mov	r4, r0
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	891b      	ldrh	r3, [r3, #8]
 800898a:	461d      	mov	r5, r3
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	899b      	ldrh	r3, [r3, #12]
 8008992:	b29b      	uxth	r3, r3
 8008994:	4618      	mov	r0, r3
 8008996:	f7fa fcc3 	bl	8003320 <lwip_htons>
 800899a:	4603      	mov	r3, r0
 800899c:	f003 0303 	and.w	r3, r3, #3
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <tcp_output+0x294>
 80089a4:	2301      	movs	r3, #1
 80089a6:	e00a      	b.n	80089be <tcp_output+0x296>
 80089a8:	08010fc0 	.word	0x08010fc0
 80089ac:	080113c4 	.word	0x080113c4
 80089b0:	08011024 	.word	0x08011024
 80089b4:	2000378c 	.word	0x2000378c
 80089b8:	080113ec 	.word	0x080113ec
 80089bc:	2300      	movs	r3, #0
 80089be:	442b      	add	r3, r5
 80089c0:	4423      	add	r3, r4
 80089c2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	da02      	bge.n	80089d6 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	891b      	ldrh	r3, [r3, #8]
 80089da:	461c      	mov	r4, r3
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	899b      	ldrh	r3, [r3, #12]
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7fa fc9b 	bl	8003320 <lwip_htons>
 80089ea:	4603      	mov	r3, r0
 80089ec:	f003 0303 	and.w	r3, r3, #3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <tcp_output+0x2d0>
 80089f4:	2301      	movs	r3, #1
 80089f6:	e000      	b.n	80089fa <tcp_output+0x2d2>
 80089f8:	2300      	movs	r3, #0
 80089fa:	4423      	add	r3, r4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d049      	beq.n	8008a94 <tcp_output+0x36c>
      seg->next = NULL;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d105      	bne.n	8008a1a <tcp_output+0x2f2>
        pcb->unacked = seg;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a12:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	623b      	str	r3, [r7, #32]
 8008a18:	e03f      	b.n	8008a9a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fa fc8b 	bl	800333c <lwip_htonl>
 8008a26:	4604      	mov	r4, r0
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fa fc84 	bl	800333c <lwip_htonl>
 8008a34:	4603      	mov	r3, r0
 8008a36:	1ae3      	subs	r3, r4, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	da24      	bge.n	8008a86 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	336c      	adds	r3, #108	; 0x6c
 8008a40:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8008a42:	e002      	b.n	8008a4a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d011      	beq.n	8008a76 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fa fc6e 	bl	800333c <lwip_htonl>
 8008a60:	4604      	mov	r4, r0
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fa fc67 	bl	800333c <lwip_htonl>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	dbe6      	blt.n	8008a44 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	e009      	b.n	8008a9a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a8a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	623b      	str	r3, [r7, #32]
 8008a92:	e002      	b.n	8008a9a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8008a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a96:	f7fc fea2 	bl	80057de <tcp_seg_free>
    }
    seg = pcb->unsent;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d015      	beq.n	8008ad2 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fa fc45 	bl	800333c <lwip_htonl>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008abc:	8912      	ldrh	r2, [r2, #8]
 8008abe:	4413      	add	r3, r2
  while (seg != NULL &&
 8008ac0:	69ba      	ldr	r2, [r7, #24]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	f4bf aedf 	bcs.w	8008886 <tcp_output+0x15e>
  }
output_done:
 8008ac8:	e003      	b.n	8008ad2 <tcp_output+0x3aa>
    goto output_done;
 8008aca:	bf00      	nop
 8008acc:	e002      	b.n	8008ad4 <tcp_output+0x3ac>
      break;
 8008ace:	bf00      	nop
 8008ad0:	e000      	b.n	8008ad4 <tcp_output+0x3ac>
output_done:
 8008ad2:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d103      	bne.n	8008ae4 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	7e9b      	ldrb	r3, [r3, #26]
 8008ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3728      	adds	r7, #40	; 0x28
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bdb0      	pop	{r4, r5, r7, pc}

08008afc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8008afc:	b5b0      	push	{r4, r5, r7, lr}
 8008afe:	b08c      	sub	sp, #48	; 0x30
 8008b00:	af04      	add	r7, sp, #16
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	89db      	ldrh	r3, [r3, #14]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d001      	beq.n	8008b16 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	e08b      	b.n	8008c2e <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	68dc      	ldr	r4, [r3, #12]
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f7fa fc0c 	bl	800333c <lwip_htonl>
 8008b24:	4603      	mov	r3, r0
 8008b26:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	68dc      	ldr	r4, [r3, #12]
 8008b30:	4610      	mov	r0, r2
 8008b32:	f7fa fbf5 	bl	8003320 <lwip_htons>
 8008b36:	4603      	mov	r3, r0
 8008b38:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8008b42:	441a      	add	r2, r3
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	3314      	adds	r3, #20
 8008b4e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	7a9b      	ldrb	r3, [r3, #10]
 8008b54:	f003 0301 	and.w	r3, r3, #1
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d014      	beq.n	8008b86 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	3304      	adds	r3, #4
 8008b60:	4619      	mov	r1, r3
 8008b62:	f44f 7006 	mov.w	r0, #536	; 0x218
 8008b66:	f7fd f8a5 	bl	8005cb4 <tcp_eff_send_mss_impl>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8008b6e:	8b7b      	ldrh	r3, [r7, #26]
 8008b70:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fa fbe1 	bl	800333c <lwip_htonl>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	3304      	adds	r3, #4
 8008b84:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	da02      	bge.n	8008b96 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2200      	movs	r2, #0
 8008b94:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10c      	bne.n	8008bb8 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8008b9e:	4b26      	ldr	r3, [pc, #152]	; (8008c38 <tcp_output_segment+0x13c>)
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fa fbc5 	bl	800333c <lwip_htonl>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	8959      	ldrh	r1, [r3, #10]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	8b3a      	ldrh	r2, [r7, #24]
 8008bd4:	1a8a      	subs	r2, r1, r2
 8008bd6:	b292      	uxth	r2, r2
 8008bd8:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	8919      	ldrh	r1, [r3, #8]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	8b3a      	ldrh	r2, [r7, #24]
 8008be6:	1a8a      	subs	r2, r1, r2
 8008be8:	b292      	uxth	r2, r2
 8008bea:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	68d2      	ldr	r2, [r2, #12]
 8008bf4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	741a      	strb	r2, [r3, #16]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6858      	ldr	r0, [r3, #4]
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	1d1c      	adds	r4, r3, #4
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	7a9d      	ldrb	r5, [r3, #10]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	7a5b      	ldrb	r3, [r3, #9]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	9202      	str	r2, [sp, #8]
 8008c18:	2206      	movs	r2, #6
 8008c1a:	9201      	str	r2, [sp, #4]
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	462b      	mov	r3, r5
 8008c20:	4622      	mov	r2, r4
 8008c22:	f004 f80d 	bl	800cc40 <ip4_output_if>
 8008c26:	4603      	mov	r3, r0
 8008c28:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8008c2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3720      	adds	r7, #32
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bdb0      	pop	{r4, r5, r7, pc}
 8008c36:	bf00      	nop
 8008c38:	2000377c 	.word	0x2000377c

08008c3c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08c      	sub	sp, #48	; 0x30
 8008c40:	af04      	add	r7, sp, #16
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
 8008c48:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2114      	movs	r1, #20
 8008c4e:	2001      	movs	r0, #1
 8008c50:	f7fb f8fc 	bl	8003e4c <pbuf_alloc>
 8008c54:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d05b      	beq.n	8008d14 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	895b      	ldrh	r3, [r3, #10]
 8008c60:	2b13      	cmp	r3, #19
 8008c62:	d806      	bhi.n	8008c72 <tcp_rst+0x36>
 8008c64:	4b2d      	ldr	r3, [pc, #180]	; (8008d1c <tcp_rst+0xe0>)
 8008c66:	f240 524d 	movw	r2, #1357	; 0x54d
 8008c6a:	492d      	ldr	r1, [pc, #180]	; (8008d20 <tcp_rst+0xe4>)
 8008c6c:	482d      	ldr	r0, [pc, #180]	; (8008d24 <tcp_rst+0xe8>)
 8008c6e:	f006 f88b 	bl	800ed88 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8008c78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fa fb50 	bl	8003320 <lwip_htons>
 8008c80:	4603      	mov	r3, r0
 8008c82:	461a      	mov	r2, r3
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8008c88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fa fb48 	bl	8003320 <lwip_htons>
 8008c90:	4603      	mov	r3, r0
 8008c92:	461a      	mov	r2, r3
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7fa fb4f 	bl	800333c <lwip_htonl>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8008ca4:	68b8      	ldr	r0, [r7, #8]
 8008ca6:	f7fa fb49 	bl	800333c <lwip_htonl>
 8008caa:	4602      	mov	r2, r0
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8008cb0:	f245 0014 	movw	r0, #20500	; 0x5014
 8008cb4:	f7fa fb34 	bl	8003320 <lwip_htons>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	461a      	mov	r2, r3
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f042 0208 	orr.w	r2, r2, #8
 8008cc8:	739a      	strb	r2, [r3, #14]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008cd0:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	741a      	strb	r2, [r3, #16]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	749a      	strb	r2, [r3, #18]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8008ce6:	6838      	ldr	r0, [r7, #0]
 8008ce8:	f003 fde4 	bl	800c8b4 <ip4_route>
 8008cec:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00b      	beq.n	8008d0c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	9302      	str	r3, [sp, #8]
 8008cf8:	2306      	movs	r3, #6
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	23ff      	movs	r3, #255	; 0xff
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	69f8      	ldr	r0, [r7, #28]
 8008d08:	f003 ff9a 	bl	800cc40 <ip4_output_if>
  }
  pbuf_free(p);
 8008d0c:	69f8      	ldr	r0, [r7, #28]
 8008d0e:	f7fb fc0f 	bl	8004530 <pbuf_free>
 8008d12:	e000      	b.n	8008d16 <tcp_rst+0xda>
    return;
 8008d14:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8008d16:	3720      	adds	r7, #32
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	08010fc0 	.word	0x08010fc0
 8008d20:	08010ff4 	.word	0x08010ff4
 8008d24:	08011024 	.word	0x08011024

08008d28 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d029      	beq.n	8008d8c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d3c:	60fb      	str	r3, [r7, #12]
 8008d3e:	e002      	b.n	8008d46 <tcp_rexmit_rto+0x1e>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1f8      	bne.n	8008d40 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d6a:	2bff      	cmp	r3, #255	; 0xff
 8008d6c:	d007      	beq.n	8008d7e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d74:	3301      	adds	r3, #1
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff fccf 	bl	8008728 <tcp_output>
 8008d8a:	e000      	b.n	8008d8e <tcp_rexmit_rto+0x66>
    return;
 8008d8c:	bf00      	nop
}
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8008d94:	b590      	push	{r4, r7, lr}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d043      	beq.n	8008e2c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da8:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3368      	adds	r3, #104	; 0x68
 8008db6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008db8:	e002      	b.n	8008dc0 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d011      	beq.n	8008dec <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fa fab3 	bl	800333c <lwip_htonl>
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fa faac 	bl	800333c <lwip_htonl>
 8008de4:	4603      	mov	r3, r0
 8008de6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	dbe6      	blt.n	8008dba <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d103      	bne.n	8008e0a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e10:	2bff      	cmp	r3, #255	; 0xff
 8008e12:	d007      	beq.n	8008e24 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	635a      	str	r2, [r3, #52]	; 0x34
 8008e2a:	e000      	b.n	8008e2e <tcp_rexmit+0x9a>
    return;
 8008e2c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd90      	pop	{r4, r7, pc}

08008e34 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d04a      	beq.n	8008eda <tcp_rexmit_fast+0xa6>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	7e9b      	ldrb	r3, [r3, #26]
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d144      	bne.n	8008eda <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7ff ff9f 	bl	8008d94 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d207      	bcs.n	8008e76 <tcp_rexmit_fast+0x42>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008e6c:	0fda      	lsrs	r2, r3, #31
 8008e6e:	4413      	add	r3, r2
 8008e70:	105b      	asrs	r3, r3, #1
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	e006      	b.n	8008e84 <tcp_rexmit_fast+0x50>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e7c:	0fda      	lsrs	r2, r3, #31
 8008e7e:	4413      	add	r3, r2
 8008e80:	105b      	asrs	r3, r3, #1
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008e90:	461a      	mov	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d206      	bcs.n	8008eaa <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ea0:	005b      	lsls	r3, r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	0049      	lsls	r1, r1, #1
 8008eb8:	440b      	add	r3, r1
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	4413      	add	r3, r2
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	7e9b      	ldrb	r3, [r3, #26]
 8008eca:	f043 0304 	orr.w	r3, r3, #4
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8008eda:	bf00      	nop
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b08a      	sub	sp, #40	; 0x28
 8008ee6:	af04      	add	r7, sp, #16
 8008ee8:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fa fa23 	bl	800333c <lwip_htonl>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2100      	movs	r1, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff f977 	bl	80081f0 <tcp_output_alloc_header>
 8008f02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d102      	bne.n	8008f10 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8008f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0e:	e021      	b.n	8008f54 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4618      	mov	r0, r3
 8008f16:	f003 fccd 	bl	800c8b4 <ip4_route>
 8008f1a:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d102      	bne.n	8008f28 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8008f22:	23fc      	movs	r3, #252	; 0xfc
 8008f24:	75fb      	strb	r3, [r7, #23]
 8008f26:	e010      	b.n	8008f4a <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8008f28:	6879      	ldr	r1, [r7, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	1d1a      	adds	r2, r3, #4
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	7a98      	ldrb	r0, [r3, #10]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	9302      	str	r3, [sp, #8]
 8008f36:	2306      	movs	r3, #6
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	4603      	mov	r3, r0
 8008f40:	6938      	ldr	r0, [r7, #16]
 8008f42:	f003 fe7d 	bl	800cc40 <ip4_output_if>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8008f4a:	6938      	ldr	r0, [r7, #16]
 8008f4c:	f7fb faf0 	bl	8004530 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8008f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8008f5c:	b590      	push	{r4, r7, lr}
 8008f5e:	b08f      	sub	sp, #60	; 0x3c
 8008f60:	af04      	add	r7, sp, #16
 8008f62:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f68:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f74:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	e085      	b.n	800908c <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8008f80:	6a3b      	ldr	r3, [r7, #32]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	899b      	ldrh	r3, [r3, #12]
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fa f9c9 	bl	8003320 <lwip_htons>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d005      	beq.n	8008fa4 <tcp_zero_window_probe+0x48>
 8008f98:	6a3b      	ldr	r3, [r7, #32]
 8008f9a:	891b      	ldrh	r3, [r3, #8]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <tcp_zero_window_probe+0x48>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e000      	b.n	8008fa6 <tcp_zero_window_probe+0x4a>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8008fa8:	7ffb      	ldrb	r3, [r7, #31]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	bf0c      	ite	eq
 8008fae:	2301      	moveq	r3, #1
 8008fb0:	2300      	movne	r3, #0
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	8bba      	ldrh	r2, [r7, #28]
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7ff f915 	bl	80081f0 <tcp_output_alloc_header>
 8008fc6:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d102      	bne.n	8008fd4 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8008fce:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd2:	e05b      	b.n	800908c <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8008fda:	7ffb      	ldrb	r3, [r7, #31]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00e      	beq.n	8008ffe <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	899b      	ldrh	r3, [r3, #12]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008fea:	b29c      	uxth	r4, r3
 8008fec:	2011      	movs	r0, #17
 8008fee:	f7fa f997 	bl	8003320 <lwip_htons>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	4323      	orrs	r3, r4
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	819a      	strh	r2, [r3, #12]
 8008ffc:	e010      	b.n	8009020 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	3314      	adds	r3, #20
 8009004:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	6858      	ldr	r0, [r3, #4]
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	891a      	ldrh	r2, [r3, #8]
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	891b      	ldrh	r3, [r3, #8]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	b29b      	uxth	r3, r3
 8009018:	2201      	movs	r2, #1
 800901a:	6939      	ldr	r1, [r7, #16]
 800901c:	f7fb fc88 	bl	8004930 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	4618      	mov	r0, r3
 8009028:	f7fa f988 	bl	800333c <lwip_htonl>
 800902c:	4603      	mov	r3, r0
 800902e:	3301      	adds	r3, #1
 8009030:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	da02      	bge.n	8009044 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3304      	adds	r3, #4
 8009048:	4618      	mov	r0, r3
 800904a:	f003 fc33 	bl	800c8b4 <ip4_route>
 800904e:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d103      	bne.n	800905e <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8009056:	23fc      	movs	r3, #252	; 0xfc
 8009058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800905c:	e011      	b.n	8009082 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	1d1a      	adds	r2, r3, #4
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	7a98      	ldrb	r0, [r3, #10]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	9302      	str	r3, [sp, #8]
 800906c:	2306      	movs	r3, #6
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	2300      	movs	r3, #0
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	4603      	mov	r3, r0
 8009076:	69b8      	ldr	r0, [r7, #24]
 8009078:	f003 fde2 	bl	800cc40 <ip4_output_if>
 800907c:	4603      	mov	r3, r0
 800907e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8009082:	69b8      	ldr	r0, [r7, #24]
 8009084:	f7fb fa54 	bl	8004530 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009088:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800908c:	4618      	mov	r0, r3
 800908e:	372c      	adds	r7, #44	; 0x2c
 8009090:	46bd      	mov	sp, r7
 8009092:	bd90      	pop	{r4, r7, pc}

08009094 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800909c:	f7fb fcca 	bl	8004a34 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80090a0:	4b0a      	ldr	r3, [pc, #40]	; (80090cc <tcpip_tcp_timer+0x38>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d103      	bne.n	80090b0 <tcpip_tcp_timer+0x1c>
 80090a8:	4b09      	ldr	r3, [pc, #36]	; (80090d0 <tcpip_tcp_timer+0x3c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d005      	beq.n	80090bc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80090b0:	2200      	movs	r2, #0
 80090b2:	4908      	ldr	r1, [pc, #32]	; (80090d4 <tcpip_tcp_timer+0x40>)
 80090b4:	20fa      	movs	r0, #250	; 0xfa
 80090b6:	f000 f86f 	bl	8009198 <sys_timeout>
 80090ba:	e002      	b.n	80090c2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80090bc:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <tcpip_tcp_timer+0x44>)
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]
  }
}
 80090c2:	bf00      	nop
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20003778 	.word	0x20003778
 80090d0:	20003788 	.word	0x20003788
 80090d4:	08009095 	.word	0x08009095
 80090d8:	20000108 	.word	0x20000108

080090dc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80090e0:	4b0a      	ldr	r3, [pc, #40]	; (800910c <tcp_timer_needed+0x30>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10f      	bne.n	8009108 <tcp_timer_needed+0x2c>
 80090e8:	4b09      	ldr	r3, [pc, #36]	; (8009110 <tcp_timer_needed+0x34>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d103      	bne.n	80090f8 <tcp_timer_needed+0x1c>
 80090f0:	4b08      	ldr	r3, [pc, #32]	; (8009114 <tcp_timer_needed+0x38>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d007      	beq.n	8009108 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <tcp_timer_needed+0x30>)
 80090fa:	2201      	movs	r2, #1
 80090fc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80090fe:	2200      	movs	r2, #0
 8009100:	4905      	ldr	r1, [pc, #20]	; (8009118 <tcp_timer_needed+0x3c>)
 8009102:	20fa      	movs	r0, #250	; 0xfa
 8009104:	f000 f848 	bl	8009198 <sys_timeout>
  }
}
 8009108:	bf00      	nop
 800910a:	bd80      	pop	{r7, pc}
 800910c:	20000108 	.word	0x20000108
 8009110:	20003778 	.word	0x20003778
 8009114:	20003788 	.word	0x20003788
 8009118:	08009095 	.word	0x08009095

0800911c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	4903      	ldr	r1, [pc, #12]	; (8009144 <cyclic_timer+0x28>)
 8009136:	4618      	mov	r0, r3
 8009138:	f000 f82e 	bl	8009198 <sys_timeout>
}
 800913c:	bf00      	nop
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	0800911d 	.word	0x0800911d

08009148 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800914e:	2301      	movs	r3, #1
 8009150:	607b      	str	r3, [r7, #4]
 8009152:	e00e      	b.n	8009172 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8009154:	4a0d      	ldr	r2, [pc, #52]	; (800918c <sys_timeouts_init+0x44>)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	4a0a      	ldr	r2, [pc, #40]	; (800918c <sys_timeouts_init+0x44>)
 8009162:	4413      	add	r3, r2
 8009164:	461a      	mov	r2, r3
 8009166:	490a      	ldr	r1, [pc, #40]	; (8009190 <sys_timeouts_init+0x48>)
 8009168:	f000 f816 	bl	8009198 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	3301      	adds	r3, #1
 8009170:	607b      	str	r3, [r7, #4]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b04      	cmp	r3, #4
 8009176:	d9ed      	bls.n	8009154 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8009178:	f004 ff56 	bl	800e028 <sys_now>
 800917c:	4602      	mov	r2, r0
 800917e:	4b05      	ldr	r3, [pc, #20]	; (8009194 <sys_timeouts_init+0x4c>)
 8009180:	601a      	str	r2, [r3, #0]
}
 8009182:	bf00      	nop
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	08012288 	.word	0x08012288
 8009190:	0800911d 	.word	0x0800911d
 8009194:	20000104 	.word	0x20000104

08009198 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b088      	sub	sp, #32
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80091a4:	2006      	movs	r0, #6
 80091a6:	f7fa fc69 	bl	8003a7c <memp_malloc>
 80091aa:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10a      	bne.n	80091c8 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f040 8084 	bne.w	80092c2 <sys_timeout+0x12a>
 80091ba:	4b44      	ldr	r3, [pc, #272]	; (80092cc <sys_timeout+0x134>)
 80091bc:	22d4      	movs	r2, #212	; 0xd4
 80091be:	4944      	ldr	r1, [pc, #272]	; (80092d0 <sys_timeout+0x138>)
 80091c0:	4844      	ldr	r0, [pc, #272]	; (80092d4 <sys_timeout+0x13c>)
 80091c2:	f005 fde1 	bl	800ed88 <iprintf>
    return;
 80091c6:	e07c      	b.n	80092c2 <sys_timeout+0x12a>
  }

  now = sys_now();
 80091c8:	f004 ff2e 	bl	800e028 <sys_now>
 80091cc:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 80091ce:	4b42      	ldr	r3, [pc, #264]	; (80092d8 <sys_timeout+0x140>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d105      	bne.n	80091e2 <sys_timeout+0x4a>
    diff = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 80091da:	4a40      	ldr	r2, [pc, #256]	; (80092dc <sys_timeout+0x144>)
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	e004      	b.n	80091ec <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 80091e2:	4b3e      	ldr	r3, [pc, #248]	; (80092dc <sys_timeout+0x144>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	441a      	add	r2, r3
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8009208:	4b33      	ldr	r3, [pc, #204]	; (80092d8 <sys_timeout+0x140>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d103      	bne.n	8009218 <sys_timeout+0x80>
    next_timeout = timeout;
 8009210:	4a31      	ldr	r2, [pc, #196]	; (80092d8 <sys_timeout+0x140>)
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	6013      	str	r3, [r2, #0]
    return;
 8009216:	e055      	b.n	80092c4 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8009218:	4b2f      	ldr	r3, [pc, #188]	; (80092d8 <sys_timeout+0x140>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	429a      	cmp	r2, r3
 8009222:	d20f      	bcs.n	8009244 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8009224:	4b2c      	ldr	r3, [pc, #176]	; (80092d8 <sys_timeout+0x140>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6859      	ldr	r1, [r3, #4]
 800922a:	4b2b      	ldr	r3, [pc, #172]	; (80092d8 <sys_timeout+0x140>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	1a8a      	subs	r2, r1, r2
 8009232:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8009234:	4b28      	ldr	r3, [pc, #160]	; (80092d8 <sys_timeout+0x140>)
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800923c:	4a26      	ldr	r2, [pc, #152]	; (80092d8 <sys_timeout+0x140>)
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	e03f      	b.n	80092c4 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8009244:	4b24      	ldr	r3, [pc, #144]	; (80092d8 <sys_timeout+0x140>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	e036      	b.n	80092ba <sys_timeout+0x122>
      timeout->time -= t->time;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	1ad2      	subs	r2, r2, r3
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d006      	beq.n	8009270 <sys_timeout+0xd8>
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	429a      	cmp	r2, r3
 800926e:	d921      	bls.n	80092b4 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d009      	beq.n	800928c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6859      	ldr	r1, [r3, #4]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	1a8a      	subs	r2, r1, r2
 8009288:	605a      	str	r2, [r3, #4]
 800928a:	e00b      	b.n	80092a4 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	429a      	cmp	r2, r3
 8009294:	d206      	bcs.n	80092a4 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8009296:	4b10      	ldr	r3, [pc, #64]	; (80092d8 <sys_timeout+0x140>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	441a      	add	r2, r3
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	601a      	str	r2, [r3, #0]
        break;
 80092b2:	e007      	b.n	80092c4 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	61fb      	str	r3, [r7, #28]
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1c5      	bne.n	800924c <sys_timeout+0xb4>
 80092c0:	e000      	b.n	80092c4 <sys_timeout+0x12c>
    return;
 80092c2:	bf00      	nop
      }
    }
  }
}
 80092c4:	3720      	adds	r7, #32
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	08011404 	.word	0x08011404
 80092d0:	08011438 	.word	0x08011438
 80092d4:	08011478 	.word	0x08011478
 80092d8:	20000100 	.word	0x20000100
 80092dc:	20000104 	.word	0x20000104

080092e0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80092e0:	b480      	push	{r7}
 80092e2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80092e4:	bf00      	nop
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
	...

080092f0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80092fa:	4b17      	ldr	r3, [pc, #92]	; (8009358 <udp_new_port+0x68>)
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	b291      	uxth	r1, r2
 8009302:	4a15      	ldr	r2, [pc, #84]	; (8009358 <udp_new_port+0x68>)
 8009304:	8011      	strh	r1, [r2, #0]
 8009306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800930a:	4293      	cmp	r3, r2
 800930c:	d103      	bne.n	8009316 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800930e:	4b12      	ldr	r3, [pc, #72]	; (8009358 <udp_new_port+0x68>)
 8009310:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009314:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009316:	4b11      	ldr	r3, [pc, #68]	; (800935c <udp_new_port+0x6c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	603b      	str	r3, [r7, #0]
 800931c:	e011      	b.n	8009342 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	8a5a      	ldrh	r2, [r3, #18]
 8009322:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <udp_new_port+0x68>)
 8009324:	881b      	ldrh	r3, [r3, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d108      	bne.n	800933c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800932a:	88fb      	ldrh	r3, [r7, #6]
 800932c:	3301      	adds	r3, #1
 800932e:	80fb      	strh	r3, [r7, #6]
 8009330:	88fb      	ldrh	r3, [r7, #6]
 8009332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009336:	d3e0      	bcc.n	80092fa <udp_new_port+0xa>
        return 0;
 8009338:	2300      	movs	r3, #0
 800933a:	e007      	b.n	800934c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	603b      	str	r3, [r7, #0]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1ea      	bne.n	800931e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8009348:	4b03      	ldr	r3, [pc, #12]	; (8009358 <udp_new_port+0x68>)
 800934a:	881b      	ldrh	r3, [r3, #0]
}
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	2000000c 	.word	0x2000000c
 800935c:	20003790 	.word	0x20003790

08009360 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	4613      	mov	r3, r2
 800936c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d018      	beq.n	80093a6 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d013      	beq.n	80093a2 <udp_input_local_match+0x42>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00f      	beq.n	80093a2 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009382:	4b14      	ldr	r3, [pc, #80]	; (80093d4 <udp_input_local_match+0x74>)
 8009384:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938a:	d00a      	beq.n	80093a2 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	4b10      	ldr	r3, [pc, #64]	; (80093d4 <udp_input_local_match+0x74>)
 8009392:	695b      	ldr	r3, [r3, #20]
 8009394:	405a      	eors	r2, r3
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	3308      	adds	r3, #8
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d110      	bne.n	80093c4 <udp_input_local_match+0x64>
          return 1;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e00f      	b.n	80093c6 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d009      	beq.n	80093c0 <udp_input_local_match+0x60>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d005      	beq.n	80093c0 <udp_input_local_match+0x60>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	4b06      	ldr	r3, [pc, #24]	; (80093d4 <udp_input_local_match+0x74>)
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d101      	bne.n	80093c4 <udp_input_local_match+0x64>
      return 1;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e000      	b.n	80093c6 <udp_input_local_match+0x66>
    }
  }

  return 0;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	20000228 	.word	0x20000228

080093d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80093d8:	b590      	push	{r4, r7, lr}
 80093da:	b08d      	sub	sp, #52	; 0x34
 80093dc:	af02      	add	r7, sp, #8
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	895b      	ldrh	r3, [r3, #10]
 80093ea:	2b07      	cmp	r3, #7
 80093ec:	d803      	bhi.n	80093f6 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7fb f89e 	bl	8004530 <pbuf_free>
    goto end;
 80093f4:	e0c6      	b.n	8009584 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80093fc:	4b63      	ldr	r3, [pc, #396]	; (800958c <udp_input+0x1b4>)
 80093fe:	695a      	ldr	r2, [r3, #20]
 8009400:	4b62      	ldr	r3, [pc, #392]	; (800958c <udp_input+0x1b4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4619      	mov	r1, r3
 8009406:	4610      	mov	r0, r2
 8009408:	f003 fcec 	bl	800cde4 <ip4_addr_isbroadcast_u32>
 800940c:	4603      	mov	r3, r0
 800940e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	b29b      	uxth	r3, r3
 8009416:	4618      	mov	r0, r3
 8009418:	f7f9 ff82 	bl	8003320 <lwip_htons>
 800941c:	4603      	mov	r3, r0
 800941e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	885b      	ldrh	r3, [r3, #2]
 8009424:	b29b      	uxth	r3, r3
 8009426:	4618      	mov	r0, r3
 8009428:	f7f9 ff7a 	bl	8003320 <lwip_htons>
 800942c:	4603      	mov	r3, r0
 800942e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8009430:	2300      	movs	r3, #0
 8009432:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8009434:	2300      	movs	r3, #0
 8009436:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8009438:	2300      	movs	r3, #0
 800943a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800943c:	4b54      	ldr	r3, [pc, #336]	; (8009590 <udp_input+0x1b8>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	627b      	str	r3, [r7, #36]	; 0x24
 8009442:	e03b      	b.n	80094bc <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8009444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009446:	8a5b      	ldrh	r3, [r3, #18]
 8009448:	89fa      	ldrh	r2, [r7, #14]
 800944a:	429a      	cmp	r2, r3
 800944c:	d131      	bne.n	80094b2 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800944e:	7cfb      	ldrb	r3, [r7, #19]
 8009450:	461a      	mov	r2, r3
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009456:	f7ff ff83 	bl	8009360 <udp_input_local_match>
 800945a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800945c:	2b00      	cmp	r3, #0
 800945e:	d028      	beq.n	80094b2 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	7c1b      	ldrb	r3, [r3, #16]
 8009464:	f003 0304 	and.w	r3, r3, #4
 8009468:	2b00      	cmp	r3, #0
 800946a:	d104      	bne.n	8009476 <udp_input+0x9e>
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8009472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009474:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	8a9b      	ldrh	r3, [r3, #20]
 800947a:	8a3a      	ldrh	r2, [r7, #16]
 800947c:	429a      	cmp	r2, r3
 800947e:	d118      	bne.n	80094b2 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8009484:	2b00      	cmp	r3, #0
 8009486:	d005      	beq.n	8009494 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	685a      	ldr	r2, [r3, #4]
 800948c:	4b3f      	ldr	r3, [pc, #252]	; (800958c <udp_input+0x1b4>)
 800948e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009490:	429a      	cmp	r2, r3
 8009492:	d10e      	bne.n	80094b2 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d014      	beq.n	80094c4 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80094a2:	4b3b      	ldr	r3, [pc, #236]	; (8009590 <udp_input+0x1b8>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80094aa:	4a39      	ldr	r2, [pc, #228]	; (8009590 <udp_input+0x1b8>)
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80094b0:	e008      	b.n	80094c4 <udp_input+0xec>
      }
    }

    prev = pcb;
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	627b      	str	r3, [r7, #36]	; 0x24
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1c0      	bne.n	8009444 <udp_input+0x6c>
 80094c2:	e000      	b.n	80094c6 <udp_input+0xee>
        break;
 80094c4:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <udp_input+0xf8>
    pcb = uncon_pcb;
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <udp_input+0x104>
    for_us = 1;
 80094d6:	2301      	movs	r3, #1
 80094d8:	76fb      	strb	r3, [r7, #27]
 80094da:	e00a      	b.n	80094f2 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	3304      	adds	r3, #4
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	4b2a      	ldr	r3, [pc, #168]	; (800958c <udp_input+0x1b4>)
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	bf0c      	ite	eq
 80094ea:	2301      	moveq	r3, #1
 80094ec:	2300      	movne	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80094f2:	7efb      	ldrb	r3, [r7, #27]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d042      	beq.n	800957e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 80094f8:	f06f 0107 	mvn.w	r1, #7
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7fa fff3 	bl	80044e8 <pbuf_header>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00a      	beq.n	800951e <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8009508:	4b22      	ldr	r3, [pc, #136]	; (8009594 <udp_input+0x1bc>)
 800950a:	f240 1255 	movw	r2, #341	; 0x155
 800950e:	4922      	ldr	r1, [pc, #136]	; (8009598 <udp_input+0x1c0>)
 8009510:	4822      	ldr	r0, [pc, #136]	; (800959c <udp_input+0x1c4>)
 8009512:	f005 fc39 	bl	800ed88 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7fb f80a 	bl	8004530 <pbuf_free>
      goto end;
 800951c:	e032      	b.n	8009584 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	2b00      	cmp	r3, #0
 8009522:	d012      	beq.n	800954a <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	699c      	ldr	r4, [r3, #24]
 8009530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009532:	69d8      	ldr	r0, [r3, #28]
 8009534:	8a3b      	ldrh	r3, [r7, #16]
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	4b19      	ldr	r3, [pc, #100]	; (80095a0 <udp_input+0x1c8>)
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800953e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8009540:	e021      	b.n	8009586 <udp_input+0x1ae>
        pbuf_free(p);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7fa fff4 	bl	8004530 <pbuf_free>
        goto end;
 8009548:	e01c      	b.n	8009584 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800954a:	7cfb      	ldrb	r3, [r7, #19]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d112      	bne.n	8009576 <udp_input+0x19e>
 8009550:	4b0e      	ldr	r3, [pc, #56]	; (800958c <udp_input+0x1b4>)
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009558:	2be0      	cmp	r3, #224	; 0xe0
 800955a:	d00c      	beq.n	8009576 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800955c:	4b0b      	ldr	r3, [pc, #44]	; (800958c <udp_input+0x1b4>)
 800955e:	899b      	ldrh	r3, [r3, #12]
 8009560:	3308      	adds	r3, #8
 8009562:	b29b      	uxth	r3, r3
 8009564:	b21b      	sxth	r3, r3
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f7fa ffcf 	bl	800450c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800956e:	2103      	movs	r1, #3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f003 f917 	bl	800c7a4 <icmp_dest_unreach>
      pbuf_free(p);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7fa ffda 	bl	8004530 <pbuf_free>
  return;
 800957c:	e003      	b.n	8009586 <udp_input+0x1ae>
    pbuf_free(p);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7fa ffd6 	bl	8004530 <pbuf_free>
  return;
 8009584:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009586:	372c      	adds	r7, #44	; 0x2c
 8009588:	46bd      	mov	sp, r7
 800958a:	bd90      	pop	{r4, r7, pc}
 800958c:	20000228 	.word	0x20000228
 8009590:	20003790 	.word	0x20003790
 8009594:	080114a0 	.word	0x080114a0
 8009598:	080114d0 	.word	0x080114d0
 800959c:	080114e4 	.word	0x080114e4
 80095a0:	20000238 	.word	0x20000238

080095a4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af02      	add	r7, sp, #8
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <udp_sendto_if+0x1a>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d102      	bne.n	80095c4 <udp_sendto_if+0x20>
    return ERR_VAL;
 80095be:	f06f 0305 	mvn.w	r3, #5
 80095c2:	e028      	b.n	8009616 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d009      	beq.n	80095de <udp_sendto_if+0x3a>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d005      	beq.n	80095de <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80095da:	2be0      	cmp	r3, #224	; 0xe0
 80095dc:	d103      	bne.n	80095e6 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	3304      	adds	r3, #4
 80095e2:	617b      	str	r3, [r7, #20]
 80095e4:	e00b      	b.n	80095fe <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	3304      	adds	r3, #4
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d002      	beq.n	80095fa <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 80095f4:	f06f 0303 	mvn.w	r3, #3
 80095f8:	e00d      	b.n	8009616 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80095fe:	887a      	ldrh	r2, [r7, #2]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	4613      	mov	r3, r2
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	68b9      	ldr	r1, [r7, #8]
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 f806 	bl	8009620 <udp_sendto_if_src>
 8009614:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8009616:	4618      	mov	r0, r3
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
	...

08009620 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b08c      	sub	sp, #48	; 0x30
 8009624:	af04      	add	r7, sp, #16
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <udp_sendto_if_src+0x1a>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d102      	bne.n	8009640 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800963a:	f06f 0305 	mvn.w	r3, #5
 800963e:	e07e      	b.n	800973e <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	8a5b      	ldrh	r3, [r3, #18]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10f      	bne.n	8009668 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8009648:	68f9      	ldr	r1, [r7, #12]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8a5b      	ldrh	r3, [r3, #18]
 800964e:	461a      	mov	r2, r3
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 f87f 	bl	8009754 <udp_bind>
 8009656:	4603      	mov	r3, r0
 8009658:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800965a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8009662:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009666:	e06a      	b.n	800973e <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8009668:	2108      	movs	r1, #8
 800966a:	68b8      	ldr	r0, [r7, #8]
 800966c:	f7fa ff3c 	bl	80044e8 <pbuf_header>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d014      	beq.n	80096a0 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8009676:	2200      	movs	r2, #0
 8009678:	2108      	movs	r1, #8
 800967a:	2001      	movs	r0, #1
 800967c:	f7fa fbe6 	bl	8003e4c <pbuf_alloc>
 8009680:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d102      	bne.n	800968e <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8009688:	f04f 33ff 	mov.w	r3, #4294967295
 800968c:	e057      	b.n	800973e <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	891b      	ldrh	r3, [r3, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d006      	beq.n	80096a4 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8009696:	68b9      	ldr	r1, [r7, #8]
 8009698:	69f8      	ldr	r0, [r7, #28]
 800969a:	f7fb f86d 	bl	8004778 <pbuf_chain>
 800969e:	e001      	b.n	80096a4 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	895b      	ldrh	r3, [r3, #10]
 80096a8:	2b07      	cmp	r3, #7
 80096aa:	d806      	bhi.n	80096ba <udp_sendto_if_src+0x9a>
 80096ac:	4b26      	ldr	r3, [pc, #152]	; (8009748 <udp_sendto_if_src+0x128>)
 80096ae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80096b2:	4926      	ldr	r1, [pc, #152]	; (800974c <udp_sendto_if_src+0x12c>)
 80096b4:	4826      	ldr	r0, [pc, #152]	; (8009750 <udp_sendto_if_src+0x130>)
 80096b6:	f005 fb67 	bl	800ed88 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	8a5b      	ldrh	r3, [r3, #18]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7f9 fe2b 	bl	8003320 <lwip_htons>
 80096ca:	4603      	mov	r3, r0
 80096cc:	461a      	mov	r2, r3
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80096d2:	887b      	ldrh	r3, [r7, #2]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7f9 fe23 	bl	8003320 <lwip_htons>
 80096da:	4603      	mov	r3, r0
 80096dc:	461a      	mov	r2, r3
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2200      	movs	r2, #0
 80096e6:	719a      	strb	r2, [r3, #6]
 80096e8:	2200      	movs	r2, #0
 80096ea:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	891b      	ldrh	r3, [r3, #8]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7f9 fe15 	bl	8003320 <lwip_htons>
 80096f6:	4603      	mov	r3, r0
 80096f8:	461a      	mov	r2, r3
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80096fe:	2311      	movs	r3, #17
 8009700:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	7a9b      	ldrb	r3, [r3, #10]
 8009706:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	7a5b      	ldrb	r3, [r3, #9]
 800970c:	7cb9      	ldrb	r1, [r7, #18]
 800970e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009710:	9202      	str	r2, [sp, #8]
 8009712:	7cfa      	ldrb	r2, [r7, #19]
 8009714:	9201      	str	r2, [sp, #4]
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	460b      	mov	r3, r1
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800971e:	69f8      	ldr	r0, [r7, #28]
 8009720:	f003 fab8 	bl	800cc94 <ip4_output_if_src>
 8009724:	4603      	mov	r3, r0
 8009726:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8009728:	69fa      	ldr	r2, [r7, #28]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	429a      	cmp	r2, r3
 800972e:	d004      	beq.n	800973a <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8009730:	69f8      	ldr	r0, [r7, #28]
 8009732:	f7fa fefd 	bl	8004530 <pbuf_free>
    q = NULL;
 8009736:	2300      	movs	r3, #0
 8009738:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800973a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3720      	adds	r7, #32
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	080114a0 	.word	0x080114a0
 800974c:	0801150c 	.word	0x0801150c
 8009750:	080114e4 	.word	0x080114e4

08009754 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8009768:	4b30      	ldr	r3, [pc, #192]	; (800982c <udp_bind+0xd8>)
 800976a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <udp_bind+0x24>
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d102      	bne.n	800977e <udp_bind+0x2a>
    return ERR_VAL;
 8009778:	f06f 0305 	mvn.w	r3, #5
 800977c:	e052      	b.n	8009824 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800977e:	2300      	movs	r3, #0
 8009780:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009782:	4b2b      	ldr	r3, [pc, #172]	; (8009830 <udp_bind+0xdc>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	e009      	b.n	800979e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	429a      	cmp	r2, r3
 8009790:	d102      	bne.n	8009798 <udp_bind+0x44>
      rebind = 1;
 8009792:	2301      	movs	r3, #1
 8009794:	74fb      	strb	r3, [r7, #19]
      break;
 8009796:	e005      	b.n	80097a4 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1f2      	bne.n	800978a <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 80097a4:	88fb      	ldrh	r3, [r7, #6]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d109      	bne.n	80097be <udp_bind+0x6a>
    port = udp_new_port();
 80097aa:	f7ff fda1 	bl	80092f0 <udp_new_port>
 80097ae:	4603      	mov	r3, r0
 80097b0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80097b2:	88fb      	ldrh	r3, [r7, #6]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d11e      	bne.n	80097f6 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80097b8:	f06f 0307 	mvn.w	r3, #7
 80097bc:	e032      	b.n	8009824 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80097be:	4b1c      	ldr	r3, [pc, #112]	; (8009830 <udp_bind+0xdc>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	617b      	str	r3, [r7, #20]
 80097c4:	e014      	b.n	80097f0 <udp_bind+0x9c>
      if (pcb != ipcb) {
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d00d      	beq.n	80097ea <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	8a5b      	ldrh	r3, [r3, #18]
 80097d2:	88fa      	ldrh	r2, [r7, #6]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d108      	bne.n	80097ea <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d102      	bne.n	80097ea <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80097e4:	f06f 0307 	mvn.w	r3, #7
 80097e8:	e01c      	b.n	8009824 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1e7      	bne.n	80097c6 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d002      	beq.n	8009802 <udp_bind+0xae>
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	e000      	b.n	8009804 <udp_bind+0xb0>
 8009802:	2300      	movs	r3, #0
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	88fa      	ldrh	r2, [r7, #6]
 800980c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800980e:	7cfb      	ldrb	r3, [r7, #19]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d106      	bne.n	8009822 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8009814:	4b06      	ldr	r3, [pc, #24]	; (8009830 <udp_bind+0xdc>)
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800981c:	4a04      	ldr	r2, [pc, #16]	; (8009830 <udp_bind+0xdc>)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	080122b0 	.word	0x080122b0
 8009830:	20003790 	.word	0x20003790

08009834 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	4613      	mov	r3, r2
 8009840:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <udp_connect+0x1a>
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d102      	bne.n	8009854 <udp_connect+0x20>
    return ERR_VAL;
 800984e:	f06f 0305 	mvn.w	r3, #5
 8009852:	e03e      	b.n	80098d2 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8a5b      	ldrh	r3, [r3, #18]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10f      	bne.n	800987c <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800985c:	68f9      	ldr	r1, [r7, #12]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	8a5b      	ldrh	r3, [r3, #18]
 8009862:	461a      	mov	r2, r3
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f7ff ff75 	bl	8009754 <udp_bind>
 800986a:	4603      	mov	r3, r0
 800986c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800986e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d002      	beq.n	800987c <udp_connect+0x48>
      return err;
 8009876:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800987a:	e02a      	b.n	80098d2 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d002      	beq.n	8009888 <udp_connect+0x54>
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	e000      	b.n	800988a <udp_connect+0x56>
 8009888:	2300      	movs	r3, #0
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	88fa      	ldrh	r2, [r7, #6]
 8009892:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	7c1b      	ldrb	r3, [r3, #16]
 8009898:	f043 0304 	orr.w	r3, r3, #4
 800989c:	b2da      	uxtb	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80098a2:	4b0e      	ldr	r3, [pc, #56]	; (80098dc <udp_connect+0xa8>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	617b      	str	r3, [r7, #20]
 80098a8:	e008      	b.n	80098bc <udp_connect+0x88>
    if (pcb == ipcb) {
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d101      	bne.n	80098b6 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	e00d      	b.n	80098d2 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	617b      	str	r3, [r7, #20]
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1f3      	bne.n	80098aa <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80098c2:	4b06      	ldr	r3, [pc, #24]	; (80098dc <udp_connect+0xa8>)
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80098ca:	4a04      	ldr	r2, [pc, #16]	; (80098dc <udp_connect+0xa8>)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20003790 	.word	0x20003790

080098e0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	61da      	str	r2, [r3, #28]
}
 80098f8:	bf00      	nop
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800990c:	4b15      	ldr	r3, [pc, #84]	; (8009964 <udp_remove+0x60>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	429a      	cmp	r2, r3
 8009914:	d105      	bne.n	8009922 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8009916:	4b13      	ldr	r3, [pc, #76]	; (8009964 <udp_remove+0x60>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	4a11      	ldr	r2, [pc, #68]	; (8009964 <udp_remove+0x60>)
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	e017      	b.n	8009952 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8009922:	4b10      	ldr	r3, [pc, #64]	; (8009964 <udp_remove+0x60>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	60fb      	str	r3, [r7, #12]
 8009928:	e010      	b.n	800994c <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d009      	beq.n	8009946 <udp_remove+0x42>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	429a      	cmp	r2, r3
 800993a:	d104      	bne.n	8009946 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	68da      	ldr	r2, [r3, #12]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	60da      	str	r2, [r3, #12]
        break;
 8009944:	e005      	b.n	8009952 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1eb      	bne.n	800992a <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	2000      	movs	r0, #0
 8009956:	f7fa f8dd 	bl	8003b14 <memp_free>
}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20003790 	.word	0x20003790

08009968 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800996e:	2000      	movs	r0, #0
 8009970:	f7fa f884 	bl	8003a7c <memp_malloc>
 8009974:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d007      	beq.n	800998c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800997c:	2220      	movs	r2, #32
 800997e:	2100      	movs	r1, #0
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f005 f9f9 	bl	800ed78 <memset>
    pcb->ttl = UDP_TTL;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	22ff      	movs	r2, #255	; 0xff
 800998a:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800998c:	687b      	ldr	r3, [r7, #4]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
	...

08009998 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d01e      	beq.n	80099e6 <udp_netif_ip_addr_changed+0x4e>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d01a      	beq.n	80099e6 <udp_netif_ip_addr_changed+0x4e>
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d017      	beq.n	80099e6 <udp_netif_ip_addr_changed+0x4e>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d013      	beq.n	80099e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80099be:	4b0d      	ldr	r3, [pc, #52]	; (80099f4 <udp_netif_ip_addr_changed+0x5c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	60fb      	str	r3, [r7, #12]
 80099c4:	e00c      	b.n	80099e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d103      	bne.n	80099da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1ef      	bne.n	80099c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80099e6:	bf00      	nop
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	20003790 	.word	0x20003790

080099f8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80099fc:	4b20      	ldr	r3, [pc, #128]	; (8009a80 <dhcp_inc_pcb_refcount+0x88>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d133      	bne.n	8009a6c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8009a04:	4b1f      	ldr	r3, [pc, #124]	; (8009a84 <dhcp_inc_pcb_refcount+0x8c>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d005      	beq.n	8009a18 <dhcp_inc_pcb_refcount+0x20>
 8009a0c:	4b1e      	ldr	r3, [pc, #120]	; (8009a88 <dhcp_inc_pcb_refcount+0x90>)
 8009a0e:	22d9      	movs	r2, #217	; 0xd9
 8009a10:	491e      	ldr	r1, [pc, #120]	; (8009a8c <dhcp_inc_pcb_refcount+0x94>)
 8009a12:	481f      	ldr	r0, [pc, #124]	; (8009a90 <dhcp_inc_pcb_refcount+0x98>)
 8009a14:	f005 f9b8 	bl	800ed88 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8009a18:	f7ff ffa6 	bl	8009968 <udp_new>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	4b19      	ldr	r3, [pc, #100]	; (8009a84 <dhcp_inc_pcb_refcount+0x8c>)
 8009a20:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8009a22:	4b18      	ldr	r3, [pc, #96]	; (8009a84 <dhcp_inc_pcb_refcount+0x8c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d102      	bne.n	8009a30 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8009a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2e:	e024      	b.n	8009a7a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8009a30:	4b14      	ldr	r3, [pc, #80]	; (8009a84 <dhcp_inc_pcb_refcount+0x8c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	7a1a      	ldrb	r2, [r3, #8]
 8009a36:	4b13      	ldr	r3, [pc, #76]	; (8009a84 <dhcp_inc_pcb_refcount+0x8c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f042 0220 	orr.w	r2, r2, #32
 8009a3e:	b2d2      	uxtb	r2, r2
 8009a40:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8009a42:	4b10      	ldr	r3, [pc, #64]	; (8009a84 <dhcp_inc_pcb_refcount+0x8c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2244      	movs	r2, #68	; 0x44
 8009a48:	4912      	ldr	r1, [pc, #72]	; (8009a94 <dhcp_inc_pcb_refcount+0x9c>)
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff fe82 	bl	8009754 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8009a50:	4b0c      	ldr	r3, [pc, #48]	; (8009a84 <dhcp_inc_pcb_refcount+0x8c>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2243      	movs	r2, #67	; 0x43
 8009a56:	490f      	ldr	r1, [pc, #60]	; (8009a94 <dhcp_inc_pcb_refcount+0x9c>)
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff feeb 	bl	8009834 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8009a5e:	4b09      	ldr	r3, [pc, #36]	; (8009a84 <dhcp_inc_pcb_refcount+0x8c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2200      	movs	r2, #0
 8009a64:	490c      	ldr	r1, [pc, #48]	; (8009a98 <dhcp_inc_pcb_refcount+0xa0>)
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7ff ff3a 	bl	80098e0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8009a6c:	4b04      	ldr	r3, [pc, #16]	; (8009a80 <dhcp_inc_pcb_refcount+0x88>)
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	3301      	adds	r3, #1
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	4b02      	ldr	r3, [pc, #8]	; (8009a80 <dhcp_inc_pcb_refcount+0x88>)
 8009a76:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000110 	.word	0x20000110
 8009a84:	2000010c 	.word	0x2000010c
 8009a88:	0801153c 	.word	0x0801153c
 8009a8c:	08011574 	.word	0x08011574
 8009a90:	0801159c 	.word	0x0801159c
 8009a94:	080122b0 	.word	0x080122b0
 8009a98:	0800b155 	.word	0x0800b155

08009a9c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8009aa0:	4b0e      	ldr	r3, [pc, #56]	; (8009adc <dhcp_dec_pcb_refcount+0x40>)
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d105      	bne.n	8009ab4 <dhcp_dec_pcb_refcount+0x18>
 8009aa8:	4b0d      	ldr	r3, [pc, #52]	; (8009ae0 <dhcp_dec_pcb_refcount+0x44>)
 8009aaa:	22f3      	movs	r2, #243	; 0xf3
 8009aac:	490d      	ldr	r1, [pc, #52]	; (8009ae4 <dhcp_dec_pcb_refcount+0x48>)
 8009aae:	480e      	ldr	r0, [pc, #56]	; (8009ae8 <dhcp_dec_pcb_refcount+0x4c>)
 8009ab0:	f005 f96a 	bl	800ed88 <iprintf>
  dhcp_pcb_refcount--;
 8009ab4:	4b09      	ldr	r3, [pc, #36]	; (8009adc <dhcp_dec_pcb_refcount+0x40>)
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	4b07      	ldr	r3, [pc, #28]	; (8009adc <dhcp_dec_pcb_refcount+0x40>)
 8009abe:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8009ac0:	4b06      	ldr	r3, [pc, #24]	; (8009adc <dhcp_dec_pcb_refcount+0x40>)
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d107      	bne.n	8009ad8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8009ac8:	4b08      	ldr	r3, [pc, #32]	; (8009aec <dhcp_dec_pcb_refcount+0x50>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7ff ff19 	bl	8009904 <udp_remove>
    dhcp_pcb = NULL;
 8009ad2:	4b06      	ldr	r3, [pc, #24]	; (8009aec <dhcp_dec_pcb_refcount+0x50>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	601a      	str	r2, [r3, #0]
  }
}
 8009ad8:	bf00      	nop
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20000110 	.word	0x20000110
 8009ae0:	0801153c 	.word	0x0801153c
 8009ae4:	080115c4 	.word	0x080115c4
 8009ae8:	0801159c 	.word	0x0801159c
 8009aec:	2000010c 	.word	0x2000010c

08009af0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a1b      	ldr	r3, [r3, #32]
 8009afc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8009afe:	210c      	movs	r1, #12
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f000 ff85 	bl	800aa10 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8009b06:	4b06      	ldr	r3, [pc, #24]	; (8009b20 <dhcp_handle_nak+0x30>)
 8009b08:	4a05      	ldr	r2, [pc, #20]	; (8009b20 <dhcp_handle_nak+0x30>)
 8009b0a:	4905      	ldr	r1, [pc, #20]	; (8009b20 <dhcp_handle_nak+0x30>)
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7fa f88f 	bl	8003c30 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fbb6 	bl	800a284 <dhcp_discover>
}
 8009b18:	bf00      	nop
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	080122b0 	.word	0x080122b0

08009b24 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a1b      	ldr	r3, [r3, #32]
 8009b30:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8009b32:	2108      	movs	r1, #8
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f000 ff6b 	bl	800aa10 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3328      	adds	r3, #40	; 0x28
 8009b3e:	2200      	movs	r2, #0
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f002 fb1e 	bl	800c184 <etharp_query>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	7a9b      	ldrb	r3, [r3, #10]
 8009b50:	2bff      	cmp	r3, #255	; 0xff
 8009b52:	d005      	beq.n	8009b60 <dhcp_check+0x3c>
    dhcp->tries++;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	7a9b      	ldrb	r3, [r3, #10]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 8009b60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009b64:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009b66:	893b      	ldrh	r3, [r7, #8]
 8009b68:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009b6c:	4a06      	ldr	r2, [pc, #24]	; (8009b88 <dhcp_check+0x64>)
 8009b6e:	fb82 1203 	smull	r1, r2, r2, r3
 8009b72:	1152      	asrs	r2, r2, #5
 8009b74:	17db      	asrs	r3, r3, #31
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	10624dd3 	.word	0x10624dd3

08009b8c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8009b9a:	4b0c      	ldr	r3, [pc, #48]	; (8009bcc <dhcp_handle_offer+0x40>)
 8009b9c:	789b      	ldrb	r3, [r3, #2]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00f      	beq.n	8009bc2 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8009ba2:	4b0b      	ldr	r3, [pc, #44]	; (8009bd0 <dhcp_handle_offer+0x44>)
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7f9 fbc8 	bl	800333c <lwip_htonl>
 8009bac:	4602      	mov	r2, r0
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	691a      	ldr	r2, [r3, #16]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f809 	bl	8009bd4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 8009bc2:	bf00      	nop
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	20003794 	.word	0x20003794
 8009bd0:	2000379c 	.word	0x2000379c

08009bd4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af02      	add	r7, sp, #8
 8009bda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a1b      	ldr	r3, [r3, #32]
 8009be0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8009be2:	2101      	movs	r1, #1
 8009be4:	6938      	ldr	r0, [r7, #16]
 8009be6:	f000 ff13 	bl	800aa10 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009bea:	2203      	movs	r2, #3
 8009bec:	6939      	ldr	r1, [r7, #16]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f001 fb94 	bl	800b31c <dhcp_create_msg>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8009bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d159      	bne.n	8009cb4 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009c00:	2202      	movs	r2, #2
 8009c02:	2139      	movs	r1, #57	; 0x39
 8009c04:	6938      	ldr	r0, [r7, #16]
 8009c06:	f000 ff1d 	bl	800aa44 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6938      	ldr	r0, [r7, #16]
 8009c12:	f000 ff79 	bl	800ab08 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8009c16:	2204      	movs	r2, #4
 8009c18:	2132      	movs	r1, #50	; 0x32
 8009c1a:	6938      	ldr	r0, [r7, #16]
 8009c1c:	f000 ff12 	bl	800aa44 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7f9 fb89 	bl	800333c <lwip_htonl>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6938      	ldr	r0, [r7, #16]
 8009c30:	f000 ffa4 	bl	800ab7c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8009c34:	2204      	movs	r2, #4
 8009c36:	2136      	movs	r1, #54	; 0x36
 8009c38:	6938      	ldr	r0, [r7, #16]
 8009c3a:	f000 ff03 	bl	800aa44 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7f9 fb7a 	bl	800333c <lwip_htonl>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6938      	ldr	r0, [r7, #16]
 8009c4e:	f000 ff95 	bl	800ab7c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009c52:	2203      	movs	r2, #3
 8009c54:	2137      	movs	r1, #55	; 0x37
 8009c56:	6938      	ldr	r0, [r7, #16]
 8009c58:	f000 fef4 	bl	800aa44 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	75fb      	strb	r3, [r7, #23]
 8009c60:	e009      	b.n	8009c76 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
 8009c64:	4a29      	ldr	r2, [pc, #164]	; (8009d0c <dhcp_select+0x138>)
 8009c66:	5cd3      	ldrb	r3, [r2, r3]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6938      	ldr	r0, [r7, #16]
 8009c6c:	f000 ff24 	bl	800aab8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
 8009c72:	3301      	adds	r3, #1
 8009c74:	75fb      	strb	r3, [r7, #23]
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d9f2      	bls.n	8009c62 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8009c7c:	6938      	ldr	r0, [r7, #16]
 8009c7e:	f001 fcf1 	bl	800b664 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	68da      	ldr	r2, [r3, #12]
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	8a9b      	ldrh	r3, [r3, #20]
 8009c8a:	33f0      	adds	r3, #240	; 0xf0
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	4619      	mov	r1, r3
 8009c90:	4610      	mov	r0, r2
 8009c92:	f7fa fad9 	bl	8004248 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8009c96:	4b1e      	ldr	r3, [pc, #120]	; (8009d10 <dhcp_select+0x13c>)
 8009c98:	6818      	ldr	r0, [r3, #0]
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	68d9      	ldr	r1, [r3, #12]
 8009c9e:	4b1d      	ldr	r3, [pc, #116]	; (8009d14 <dhcp_select+0x140>)
 8009ca0:	9301      	str	r3, [sp, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	2343      	movs	r3, #67	; 0x43
 8009ca8:	4a1b      	ldr	r2, [pc, #108]	; (8009d18 <dhcp_select+0x144>)
 8009caa:	f7ff fcb9 	bl	8009620 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8009cae:	6938      	ldr	r0, [r7, #16]
 8009cb0:	f001 fc96 	bl	800b5e0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	7a9b      	ldrb	r3, [r3, #10]
 8009cb8:	2bff      	cmp	r3, #255	; 0xff
 8009cba:	d005      	beq.n	8009cc8 <dhcp_select+0xf4>
    dhcp->tries++;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	7a9b      	ldrb	r3, [r3, #10]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	b2da      	uxtb	r2, r3
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	7a9b      	ldrb	r3, [r3, #10]
 8009ccc:	2b05      	cmp	r3, #5
 8009cce:	d807      	bhi.n	8009ce0 <dhcp_select+0x10c>
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	7a9b      	ldrb	r3, [r3, #10]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cda:	4093      	lsls	r3, r2
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	e001      	b.n	8009ce4 <dhcp_select+0x110>
 8009ce0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009ce4:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009ce6:	89bb      	ldrh	r3, [r7, #12]
 8009ce8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009cec:	4a0b      	ldr	r2, [pc, #44]	; (8009d1c <dhcp_select+0x148>)
 8009cee:	fb82 1203 	smull	r1, r2, r2, r3
 8009cf2:	1152      	asrs	r2, r2, #5
 8009cf4:	17db      	asrs	r3, r3, #31
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8009cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20000010 	.word	0x20000010
 8009d10:	2000010c 	.word	0x2000010c
 8009d14:	080122b0 	.word	0x080122b0
 8009d18:	080122b4 	.word	0x080122b4
 8009d1c:	10624dd3 	.word	0x10624dd3

08009d20 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8009d26:	4b27      	ldr	r3, [pc, #156]	; (8009dc4 <dhcp_coarse_tmr+0xa4>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 8009d2c:	e042      	b.n	8009db4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d039      	beq.n	8009dae <dhcp_coarse_tmr+0x8e>
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	7a5b      	ldrb	r3, [r3, #9]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d035      	beq.n	8009dae <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d012      	beq.n	8009d70 <dhcp_coarse_tmr+0x50>
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	8c1b      	ldrh	r3, [r3, #32]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	841a      	strh	r2, [r3, #32]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	8c1a      	ldrh	r2, [r3, #32]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d106      	bne.n	8009d70 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fd94 	bl	800a890 <dhcp_release>
        dhcp_discover(netif);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fa8b 	bl	800a284 <dhcp_discover>
 8009d6e:	e01e      	b.n	8009dae <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	8bdb      	ldrh	r3, [r3, #30]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00b      	beq.n	8009d90 <dhcp_coarse_tmr+0x70>
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	8bdb      	ldrh	r3, [r3, #30]
 8009d7c:	1e5a      	subs	r2, r3, #1
 8009d7e:	b291      	uxth	r1, r2
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	83d1      	strh	r1, [r2, #30]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d103      	bne.n	8009d90 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f8c6 	bl	8009f1a <dhcp_t2_timeout>
 8009d8e:	e00e      	b.n	8009dae <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	8b9b      	ldrh	r3, [r3, #28]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00a      	beq.n	8009dae <dhcp_coarse_tmr+0x8e>
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	8b9b      	ldrh	r3, [r3, #28]
 8009d9c:	1e5a      	subs	r2, r3, #1
 8009d9e:	b291      	uxth	r1, r2
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	8391      	strh	r1, [r2, #28]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d102      	bne.n	8009dae <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f888 	bl	8009ebe <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1b9      	bne.n	8009d2e <dhcp_coarse_tmr+0xe>
  }
}
 8009dba:	bf00      	nop
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20003768 	.word	0x20003768

08009dc8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8009dce:	4b16      	ldr	r3, [pc, #88]	; (8009e28 <dhcp_fine_tmr+0x60>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 8009dd4:	e020      	b.n	8009e18 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d017      	beq.n	8009e12 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	8adb      	ldrh	r3, [r3, #22]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d906      	bls.n	8009df8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	8adb      	ldrh	r3, [r3, #22]
 8009dee:	3b01      	subs	r3, #1
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	82da      	strh	r2, [r3, #22]
 8009df6:	e00c      	b.n	8009e12 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	8adb      	ldrh	r3, [r3, #22]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d108      	bne.n	8009e12 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	8adb      	ldrh	r3, [r3, #22]
 8009e04:	3b01      	subs	r3, #1
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f80d 	bl	8009e2c <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1db      	bne.n	8009dd6 <dhcp_fine_tmr+0xe>
  }
}
 8009e1e:	bf00      	nop
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20003768 	.word	0x20003768

08009e2c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	7a5b      	ldrb	r3, [r3, #9]
 8009e3e:	2b0c      	cmp	r3, #12
 8009e40:	d003      	beq.n	8009e4a <dhcp_timeout+0x1e>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	7a5b      	ldrb	r3, [r3, #9]
 8009e46:	2b06      	cmp	r3, #6
 8009e48:	d103      	bne.n	8009e52 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fa1a 	bl	800a284 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8009e50:	e031      	b.n	8009eb6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	7a5b      	ldrb	r3, [r3, #9]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d10e      	bne.n	8009e78 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	7a9b      	ldrb	r3, [r3, #10]
 8009e5e:	2b05      	cmp	r3, #5
 8009e60:	d803      	bhi.n	8009e6a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7ff feb6 	bl	8009bd4 <dhcp_select>
}
 8009e68:	e025      	b.n	8009eb6 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fd10 	bl	800a890 <dhcp_release>
      dhcp_discover(netif);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fa07 	bl	800a284 <dhcp_discover>
}
 8009e76:	e01e      	b.n	8009eb6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	7a5b      	ldrb	r3, [r3, #9]
 8009e7c:	2b08      	cmp	r3, #8
 8009e7e:	d10b      	bne.n	8009e98 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	7a9b      	ldrb	r3, [r3, #10]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d803      	bhi.n	8009e90 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff fe4b 	bl	8009b24 <dhcp_check>
}
 8009e8e:	e012      	b.n	8009eb6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fa83 	bl	800a39c <dhcp_bind>
}
 8009e96:	e00e      	b.n	8009eb6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	7a5b      	ldrb	r3, [r3, #9]
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d10a      	bne.n	8009eb6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	7a9b      	ldrb	r3, [r3, #10]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d803      	bhi.n	8009eb0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fc5d 	bl	800a768 <dhcp_reboot>
}
 8009eae:	e002      	b.n	8009eb6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f9e7 	bl	800a284 <dhcp_discover>
}
 8009eb6:	bf00      	nop
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	7a5b      	ldrb	r3, [r3, #9]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d007      	beq.n	8009ee4 <dhcp_t1_timeout+0x26>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	7a5b      	ldrb	r3, [r3, #9]
 8009ed8:	2b0a      	cmp	r3, #10
 8009eda:	d003      	beq.n	8009ee4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009ee0:	2b05      	cmp	r3, #5
 8009ee2:	d116      	bne.n	8009f12 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fb33 	bl	800a550 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	8b5b      	ldrh	r3, [r3, #26]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	8c1b      	ldrh	r3, [r3, #32]
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	dd0b      	ble.n	8009f12 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	8b5b      	ldrh	r3, [r3, #26]
 8009efe:	461a      	mov	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	8c1b      	ldrh	r3, [r3, #32]
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	0fda      	lsrs	r2, r3, #31
 8009f08:	4413      	add	r3, r2
 8009f0a:	105b      	asrs	r3, r3, #1
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	839a      	strh	r2, [r3, #28]
    }
  }
}
 8009f12:	bf00      	nop
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a1b      	ldr	r3, [r3, #32]
 8009f26:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	7a5b      	ldrb	r3, [r3, #9]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d00b      	beq.n	8009f48 <dhcp_t2_timeout+0x2e>
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	7a5b      	ldrb	r3, [r3, #9]
 8009f34:	2b0a      	cmp	r3, #10
 8009f36:	d007      	beq.n	8009f48 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009f3c:	2b05      	cmp	r3, #5
 8009f3e:	d003      	beq.n	8009f48 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	7a5b      	ldrb	r3, [r3, #9]
 8009f44:	2b04      	cmp	r3, #4
 8009f46:	d116      	bne.n	8009f76 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fb87 	bl	800a65c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009f52:	461a      	mov	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	8c1b      	ldrh	r3, [r3, #32]
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	dd0b      	ble.n	8009f76 <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009f62:	461a      	mov	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	8c1b      	ldrh	r3, [r3, #32]
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	0fda      	lsrs	r2, r3, #31
 8009f6c:	4413      	add	r3, r2
 8009f6e:	105b      	asrs	r3, r3, #1
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	83da      	strh	r2, [r3, #30]
    }
  }
}
 8009f76:	bf00      	nop
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a1b      	ldr	r3, [r3, #32]
 8009f8c:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8009f9a:	4b27      	ldr	r3, [pc, #156]	; (800a038 <dhcp_handle_ack+0xb8>)
 8009f9c:	78db      	ldrb	r3, [r3, #3]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d003      	beq.n	8009faa <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8009fa2:	4b26      	ldr	r3, [pc, #152]	; (800a03c <dhcp_handle_ack+0xbc>)
 8009fa4:	68da      	ldr	r2, [r3, #12]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8009faa:	4b23      	ldr	r3, [pc, #140]	; (800a038 <dhcp_handle_ack+0xb8>)
 8009fac:	791b      	ldrb	r3, [r3, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d004      	beq.n	8009fbc <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8009fb2:	4b22      	ldr	r3, [pc, #136]	; (800a03c <dhcp_handle_ack+0xbc>)
 8009fb4:	691a      	ldr	r2, [r3, #16]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8009fba:	e004      	b.n	8009fc6 <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc0:	085a      	lsrs	r2, r3, #1
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8009fc6:	4b1c      	ldr	r3, [pc, #112]	; (800a038 <dhcp_handle_ack+0xb8>)
 8009fc8:	795b      	ldrb	r3, [r3, #5]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d004      	beq.n	8009fd8 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8009fce:	4b1b      	ldr	r3, [pc, #108]	; (800a03c <dhcp_handle_ack+0xbc>)
 8009fd0:	695a      	ldr	r2, [r3, #20]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	63da      	str	r2, [r3, #60]	; 0x3c
 8009fd6:	e007      	b.n	8009fe8 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fdc:	4613      	mov	r3, r2
 8009fde:	00db      	lsls	r3, r3, #3
 8009fe0:	1a9b      	subs	r3, r3, r2
 8009fe2:	08da      	lsrs	r2, r3, #3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	691a      	ldr	r2, [r3, #16]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8009ff2:	4b11      	ldr	r3, [pc, #68]	; (800a038 <dhcp_handle_ack+0xb8>)
 8009ff4:	799b      	ldrb	r3, [r3, #6]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00b      	beq.n	800a012 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8009ffa:	4b10      	ldr	r3, [pc, #64]	; (800a03c <dhcp_handle_ack+0xbc>)
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7f9 f99c 	bl	800333c <lwip_htonl>
 800a004:	4602      	mov	r2, r0
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2201      	movs	r2, #1
 800a00e:	72da      	strb	r2, [r3, #11]
 800a010:	e002      	b.n	800a018 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800a018:	4b07      	ldr	r3, [pc, #28]	; (800a038 <dhcp_handle_ack+0xb8>)
 800a01a:	79db      	ldrb	r3, [r3, #7]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d007      	beq.n	800a030 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800a020:	4b06      	ldr	r3, [pc, #24]	; (800a03c <dhcp_handle_ack+0xbc>)
 800a022:	69db      	ldr	r3, [r3, #28]
 800a024:	4618      	mov	r0, r3
 800a026:	f7f9 f989 	bl	800333c <lwip_htonl>
 800a02a:	4602      	mov	r2, r0
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800a030:	bf00      	nop
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	20003794 	.word	0x20003794
 800a03c:	2000379c 	.word	0x2000379c

0800a040 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d109      	bne.n	800a062 <dhcp_start+0x22>
 800a04e:	4b3c      	ldr	r3, [pc, #240]	; (800a140 <dhcp_start+0x100>)
 800a050:	f240 22d6 	movw	r2, #726	; 0x2d6
 800a054:	493b      	ldr	r1, [pc, #236]	; (800a144 <dhcp_start+0x104>)
 800a056:	483c      	ldr	r0, [pc, #240]	; (800a148 <dhcp_start+0x108>)
 800a058:	f004 fe96 	bl	800ed88 <iprintf>
 800a05c:	f06f 030f 	mvn.w	r3, #15
 800a060:	e069      	b.n	800a136 <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a068:	f003 0301 	and.w	r3, r3, #1
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d109      	bne.n	800a084 <dhcp_start+0x44>
 800a070:	4b33      	ldr	r3, [pc, #204]	; (800a140 <dhcp_start+0x100>)
 800a072:	f240 22d7 	movw	r2, #727	; 0x2d7
 800a076:	4935      	ldr	r1, [pc, #212]	; (800a14c <dhcp_start+0x10c>)
 800a078:	4833      	ldr	r0, [pc, #204]	; (800a148 <dhcp_start+0x108>)
 800a07a:	f004 fe85 	bl	800ed88 <iprintf>
 800a07e:	f06f 030f 	mvn.w	r3, #15
 800a082:	e058      	b.n	800a136 <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a08e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800a092:	d202      	bcs.n	800a09a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800a094:	f04f 33ff 	mov.w	r3, #4294967295
 800a098:	e04d      	b.n	800a136 <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10d      	bne.n	800a0bc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800a0a0:	2040      	movs	r0, #64	; 0x40
 800a0a2:	f7f9 fb8d 	bl	80037c0 <mem_malloc>
 800a0a6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d102      	bne.n	800a0b4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800a0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b2:	e040      	b.n	800a136 <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	621a      	str	r2, [r3, #32]
 800a0ba:	e01b      	b.n	800a0f4 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d006      	beq.n	800a0d2 <dhcp_start+0x92>
 800a0c4:	4b1e      	ldr	r3, [pc, #120]	; (800a140 <dhcp_start+0x100>)
 800a0c6:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800a0ca:	4921      	ldr	r1, [pc, #132]	; (800a150 <dhcp_start+0x110>)
 800a0cc:	481e      	ldr	r0, [pc, #120]	; (800a148 <dhcp_start+0x108>)
 800a0ce:	f004 fe5b 	bl	800ed88 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d006      	beq.n	800a0e8 <dhcp_start+0xa8>
 800a0da:	4b19      	ldr	r3, [pc, #100]	; (800a140 <dhcp_start+0x100>)
 800a0dc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a0e0:	491c      	ldr	r1, [pc, #112]	; (800a154 <dhcp_start+0x114>)
 800a0e2:	4819      	ldr	r0, [pc, #100]	; (800a148 <dhcp_start+0x108>)
 800a0e4:	f004 fe50 	bl	800ed88 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	7a1b      	ldrb	r3, [r3, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800a0f0:	f7ff fcd4 	bl	8009a9c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800a0f4:	2240      	movs	r2, #64	; 0x40
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f004 fe3d 	bl	800ed78 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800a0fe:	f7ff fc7b 	bl	80099f8 <dhcp_inc_pcb_refcount>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <dhcp_start+0xce>
    return ERR_MEM;
 800a108:	f04f 33ff 	mov.w	r3, #4294967295
 800a10c:	e013      	b.n	800a136 <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2201      	movs	r2, #1
 800a112:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f8b5 	bl	800a284 <dhcp_discover>
 800a11a:	4603      	mov	r3, r0
 800a11c:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800a11e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d005      	beq.n	800a132 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fc3a 	bl	800a9a0 <dhcp_stop>
    return ERR_MEM;
 800a12c:	f04f 33ff 	mov.w	r3, #4294967295
 800a130:	e001      	b.n	800a136 <dhcp_start+0xf6>
  }
  return result;
 800a132:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	0801153c 	.word	0x0801153c
 800a144:	080115e8 	.word	0x080115e8
 800a148:	0801159c 	.word	0x0801159c
 800a14c:	0801162c 	.word	0x0801162c
 800a150:	08011650 	.word	0x08011650
 800a154:	08011668 	.word	0x08011668

0800a158 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d107      	bne.n	800a178 <dhcp_arp_reply+0x20>
 800a168:	4b0e      	ldr	r3, [pc, #56]	; (800a1a4 <dhcp_arp_reply+0x4c>)
 800a16a:	f240 327b 	movw	r2, #891	; 0x37b
 800a16e:	490e      	ldr	r1, [pc, #56]	; (800a1a8 <dhcp_arp_reply+0x50>)
 800a170:	480e      	ldr	r0, [pc, #56]	; (800a1ac <dhcp_arp_reply+0x54>)
 800a172:	f004 fe09 	bl	800ed88 <iprintf>
 800a176:	e012      	b.n	800a19e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00c      	beq.n	800a19e <dhcp_arp_reply+0x46>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	7a5b      	ldrb	r3, [r3, #9]
 800a188:	2b08      	cmp	r3, #8
 800a18a:	d108      	bne.n	800a19e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a194:	429a      	cmp	r2, r3
 800a196:	d102      	bne.n	800a19e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f809 	bl	800a1b0 <dhcp_decline>
    }
  }
}
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	0801153c 	.word	0x0801153c
 800a1a8:	080115e8 	.word	0x080115e8
 800a1ac:	0801159c 	.word	0x0801159c

0800a1b0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af02      	add	r7, sp, #8
 800a1b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800a1c2:	210c      	movs	r1, #12
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f000 fc23 	bl	800aa10 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800a1ca:	2204      	movs	r2, #4
 800a1cc:	68f9      	ldr	r1, [r7, #12]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f001 f8a4 	bl	800b31c <dhcp_create_msg>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 800a1d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d12a      	bne.n	800a236 <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800a1e0:	2204      	movs	r2, #4
 800a1e2:	2132      	movs	r1, #50	; 0x32
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f000 fc2d 	bl	800aa44 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7f9 f8a4 	bl	800333c <lwip_htonl>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fcbf 	bl	800ab7c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f001 fa30 	bl	800b664 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	68da      	ldr	r2, [r3, #12]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	8a9b      	ldrh	r3, [r3, #20]
 800a20c:	33f0      	adds	r3, #240	; 0xf0
 800a20e:	b29b      	uxth	r3, r3
 800a210:	4619      	mov	r1, r3
 800a212:	4610      	mov	r0, r2
 800a214:	f7fa f818 	bl	8004248 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800a218:	4b16      	ldr	r3, [pc, #88]	; (800a274 <dhcp_decline+0xc4>)
 800a21a:	6818      	ldr	r0, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	68d9      	ldr	r1, [r3, #12]
 800a220:	4b15      	ldr	r3, [pc, #84]	; (800a278 <dhcp_decline+0xc8>)
 800a222:	9301      	str	r3, [sp, #4]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	2343      	movs	r3, #67	; 0x43
 800a22a:	4a14      	ldr	r2, [pc, #80]	; (800a27c <dhcp_decline+0xcc>)
 800a22c:	f7ff f9f8 	bl	8009620 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f001 f9d5 	bl	800b5e0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	7a9b      	ldrb	r3, [r3, #10]
 800a23a:	2bff      	cmp	r3, #255	; 0xff
 800a23c:	d005      	beq.n	800a24a <dhcp_decline+0x9a>
    dhcp->tries++;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	7a9b      	ldrb	r3, [r3, #10]
 800a242:	3301      	adds	r3, #1
 800a244:	b2da      	uxtb	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800a24a:	f242 7310 	movw	r3, #10000	; 0x2710
 800a24e:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a250:	893b      	ldrh	r3, [r7, #8]
 800a252:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a256:	4a0a      	ldr	r2, [pc, #40]	; (800a280 <dhcp_decline+0xd0>)
 800a258:	fb82 1203 	smull	r1, r2, r2, r3
 800a25c:	1152      	asrs	r2, r2, #5
 800a25e:	17db      	asrs	r3, r3, #31
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	b29a      	uxth	r2, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a268:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	2000010c 	.word	0x2000010c
 800a278:	080122b0 	.word	0x080122b0
 800a27c:	080122b4 	.word	0x080122b4
 800a280:	10624dd3 	.word	0x10624dd3

0800a284 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b088      	sub	sp, #32
 800a288:	af02      	add	r7, sp, #8
 800a28a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a1b      	ldr	r3, [r3, #32]
 800a290:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	2200      	movs	r2, #0
 800a29a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800a29c:	2106      	movs	r1, #6
 800a29e:	6938      	ldr	r0, [r7, #16]
 800a2a0:	f000 fbb6 	bl	800aa10 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	6939      	ldr	r1, [r7, #16]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 f837 	bl	800b31c <dhcp_create_msg>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800a2b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d13b      	bne.n	800a332 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	2139      	movs	r1, #57	; 0x39
 800a2be:	6938      	ldr	r0, [r7, #16]
 800a2c0:	f000 fbc0 	bl	800aa44 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6938      	ldr	r0, [r7, #16]
 800a2cc:	f000 fc1c 	bl	800ab08 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a2d0:	2203      	movs	r2, #3
 800a2d2:	2137      	movs	r1, #55	; 0x37
 800a2d4:	6938      	ldr	r0, [r7, #16]
 800a2d6:	f000 fbb5 	bl	800aa44 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a2da:	2300      	movs	r3, #0
 800a2dc:	75fb      	strb	r3, [r7, #23]
 800a2de:	e009      	b.n	800a2f4 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800a2e0:	7dfb      	ldrb	r3, [r7, #23]
 800a2e2:	4a29      	ldr	r2, [pc, #164]	; (800a388 <dhcp_discover+0x104>)
 800a2e4:	5cd3      	ldrb	r3, [r2, r3]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6938      	ldr	r0, [r7, #16]
 800a2ea:	f000 fbe5 	bl	800aab8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	75fb      	strb	r3, [r7, #23]
 800a2f4:	7dfb      	ldrb	r3, [r7, #23]
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d9f2      	bls.n	800a2e0 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800a2fa:	6938      	ldr	r0, [r7, #16]
 800a2fc:	f001 f9b2 	bl	800b664 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	68da      	ldr	r2, [r3, #12]
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	8a9b      	ldrh	r3, [r3, #20]
 800a308:	33f0      	adds	r3, #240	; 0xf0
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	4619      	mov	r1, r3
 800a30e:	4610      	mov	r0, r2
 800a310:	f7f9 ff9a 	bl	8004248 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800a314:	4b1d      	ldr	r3, [pc, #116]	; (800a38c <dhcp_discover+0x108>)
 800a316:	6818      	ldr	r0, [r3, #0]
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	68d9      	ldr	r1, [r3, #12]
 800a31c:	4b1c      	ldr	r3, [pc, #112]	; (800a390 <dhcp_discover+0x10c>)
 800a31e:	9301      	str	r3, [sp, #4]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	2343      	movs	r3, #67	; 0x43
 800a326:	4a1b      	ldr	r2, [pc, #108]	; (800a394 <dhcp_discover+0x110>)
 800a328:	f7ff f97a 	bl	8009620 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800a32c:	6938      	ldr	r0, [r7, #16]
 800a32e:	f001 f957 	bl	800b5e0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	7a9b      	ldrb	r3, [r3, #10]
 800a336:	2bff      	cmp	r3, #255	; 0xff
 800a338:	d005      	beq.n	800a346 <dhcp_discover+0xc2>
    dhcp->tries++;
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	7a9b      	ldrb	r3, [r3, #10]
 800a33e:	3301      	adds	r3, #1
 800a340:	b2da      	uxtb	r2, r3
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	7a9b      	ldrb	r3, [r3, #10]
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	d807      	bhi.n	800a35e <dhcp_discover+0xda>
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	7a9b      	ldrb	r3, [r3, #10]
 800a352:	461a      	mov	r2, r3
 800a354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a358:	4093      	lsls	r3, r2
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	e001      	b.n	800a362 <dhcp_discover+0xde>
 800a35e:	f64e 2360 	movw	r3, #60000	; 0xea60
 800a362:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a364:	89bb      	ldrh	r3, [r7, #12]
 800a366:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a36a:	4a0b      	ldr	r2, [pc, #44]	; (800a398 <dhcp_discover+0x114>)
 800a36c:	fb82 1203 	smull	r1, r2, r2, r3
 800a370:	1152      	asrs	r2, r2, #5
 800a372:	17db      	asrs	r3, r3, #31
 800a374:	1ad3      	subs	r3, r2, r3
 800a376:	b29a      	uxth	r2, r3
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a37c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	20000010 	.word	0x20000010
 800a38c:	2000010c 	.word	0x2000010c
 800a390:	080122b0 	.word	0x080122b0
 800a394:	080122b4 	.word	0x080122b4
 800a398:	10624dd3 	.word	0x10624dd3

0800a39c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d107      	bne.n	800a3ba <dhcp_bind+0x1e>
 800a3aa:	4b64      	ldr	r3, [pc, #400]	; (800a53c <dhcp_bind+0x1a0>)
 800a3ac:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800a3b0:	4963      	ldr	r1, [pc, #396]	; (800a540 <dhcp_bind+0x1a4>)
 800a3b2:	4864      	ldr	r0, [pc, #400]	; (800a544 <dhcp_bind+0x1a8>)
 800a3b4:	f004 fce8 	bl	800ed88 <iprintf>
 800a3b8:	e0bc      	b.n	800a534 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d107      	bne.n	800a3d6 <dhcp_bind+0x3a>
 800a3c6:	4b5d      	ldr	r3, [pc, #372]	; (800a53c <dhcp_bind+0x1a0>)
 800a3c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a3cc:	495e      	ldr	r1, [pc, #376]	; (800a548 <dhcp_bind+0x1ac>)
 800a3ce:	485d      	ldr	r0, [pc, #372]	; (800a544 <dhcp_bind+0x1a8>)
 800a3d0:	f004 fcda 	bl	800ed88 <iprintf>
 800a3d4:	e0ae      	b.n	800a534 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e4:	d019      	beq.n	800a41a <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ea:	331e      	adds	r3, #30
 800a3ec:	4a57      	ldr	r2, [pc, #348]	; (800a54c <dhcp_bind+0x1b0>)
 800a3ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a3f2:	095b      	lsrs	r3, r3, #5
 800a3f4:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3fc:	d302      	bcc.n	800a404 <dhcp_bind+0x68>
       timeout = 0xffff;
 800a3fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a402:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	b29a      	uxth	r2, r3
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a410:	2b00      	cmp	r3, #0
 800a412:	d102      	bne.n	800a41a <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	2201      	movs	r2, #1
 800a418:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a422:	d01d      	beq.n	800a460 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a428:	331e      	adds	r3, #30
 800a42a:	4a48      	ldr	r2, [pc, #288]	; (800a54c <dhcp_bind+0x1b0>)
 800a42c:	fba2 2303 	umull	r2, r3, r2, r3
 800a430:	095b      	lsrs	r3, r3, #5
 800a432:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a43a:	d302      	bcc.n	800a442 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800a43c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a440:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	b29a      	uxth	r2, r3
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	8b1b      	ldrh	r3, [r3, #24]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d102      	bne.n	800a458 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	2201      	movs	r2, #1
 800a456:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	8b1a      	ldrh	r2, [r3, #24]
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a468:	d01d      	beq.n	800a4a6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46e:	331e      	adds	r3, #30
 800a470:	4a36      	ldr	r2, [pc, #216]	; (800a54c <dhcp_bind+0x1b0>)
 800a472:	fba2 2303 	umull	r2, r3, r2, r3
 800a476:	095b      	lsrs	r3, r3, #5
 800a478:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a480:	d302      	bcc.n	800a488 <dhcp_bind+0xec>
      timeout = 0xffff;
 800a482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a486:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	b29a      	uxth	r2, r3
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	8b5b      	ldrh	r3, [r3, #26]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d102      	bne.n	800a49e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	2201      	movs	r2, #1
 800a49c:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	8b5a      	ldrh	r2, [r3, #26]
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	8b1a      	ldrh	r2, [r3, #24]
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	8b5b      	ldrh	r3, [r3, #26]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d306      	bcc.n	800a4c0 <dhcp_bind+0x124>
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	8b5b      	ldrh	r3, [r3, #26]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d002      	beq.n	800a4c0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	7adb      	ldrb	r3, [r3, #11]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d003      	beq.n	800a4d0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4cc:	613b      	str	r3, [r7, #16]
 800a4ce:	e014      	b.n	800a4fa <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	3328      	adds	r3, #40	; 0x28
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800a4d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	db02      	blt.n	800a4e6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800a4e0:	23ff      	movs	r3, #255	; 0xff
 800a4e2:	613b      	str	r3, [r7, #16]
 800a4e4:	e009      	b.n	800a4fa <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	2bbf      	cmp	r3, #191	; 0xbf
 800a4ea:	d903      	bls.n	800a4f4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800a4ec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800a4f0:	613b      	str	r3, [r7, #16]
 800a4f2:	e002      	b.n	800a4fa <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800a4f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4f8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fe:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d108      	bne.n	800a518 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	4013      	ands	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a516:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800a518:	210a      	movs	r1, #10
 800a51a:	69b8      	ldr	r0, [r7, #24]
 800a51c:	f000 fa78 	bl	800aa10 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800a526:	f107 030c 	add.w	r3, r7, #12
 800a52a:	f107 0210 	add.w	r2, r7, #16
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7f9 fb7e 	bl	8003c30 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800a534:	3720      	adds	r7, #32
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	0801153c 	.word	0x0801153c
 800a540:	0801167c 	.word	0x0801167c
 800a544:	0801159c 	.word	0x0801159c
 800a548:	08011698 	.word	0x08011698
 800a54c:	88888889 	.word	0x88888889

0800a550 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af02      	add	r7, sp, #8
 800a556:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800a55e:	2105      	movs	r1, #5
 800a560:	6938      	ldr	r0, [r7, #16]
 800a562:	f000 fa55 	bl	800aa10 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800a566:	2203      	movs	r2, #3
 800a568:	6939      	ldr	r1, [r7, #16]
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fed6 	bl	800b31c <dhcp_create_msg>
 800a570:	4603      	mov	r3, r0
 800a572:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800a574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d13b      	bne.n	800a5f4 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a57c:	2202      	movs	r2, #2
 800a57e:	2139      	movs	r1, #57	; 0x39
 800a580:	6938      	ldr	r0, [r7, #16]
 800a582:	f000 fa5f 	bl	800aa44 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a58a:	4619      	mov	r1, r3
 800a58c:	6938      	ldr	r0, [r7, #16]
 800a58e:	f000 fabb 	bl	800ab08 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a592:	2203      	movs	r2, #3
 800a594:	2137      	movs	r1, #55	; 0x37
 800a596:	6938      	ldr	r0, [r7, #16]
 800a598:	f000 fa54 	bl	800aa44 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a59c:	2300      	movs	r3, #0
 800a59e:	75fb      	strb	r3, [r7, #23]
 800a5a0:	e009      	b.n	800a5b6 <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	4a2a      	ldr	r2, [pc, #168]	; (800a650 <dhcp_renew+0x100>)
 800a5a6:	5cd3      	ldrb	r3, [r2, r3]
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	6938      	ldr	r0, [r7, #16]
 800a5ac:	f000 fa84 	bl	800aab8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a5b0:	7dfb      	ldrb	r3, [r7, #23]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	75fb      	strb	r3, [r7, #23]
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d9f2      	bls.n	800a5a2 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800a5bc:	6938      	ldr	r0, [r7, #16]
 800a5be:	f001 f851 	bl	800b664 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	68da      	ldr	r2, [r3, #12]
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	8a9b      	ldrh	r3, [r3, #20]
 800a5ca:	33f0      	adds	r3, #240	; 0xf0
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	4610      	mov	r0, r2
 800a5d2:	f7f9 fe39 	bl	8004248 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800a5d6:	4b1f      	ldr	r3, [pc, #124]	; (800a654 <dhcp_renew+0x104>)
 800a5d8:	6818      	ldr	r0, [r3, #0]
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	68d9      	ldr	r1, [r3, #12]
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	2343      	movs	r3, #67	; 0x43
 800a5ea:	f7fe ffdb 	bl	80095a4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a5ee:	6938      	ldr	r0, [r7, #16]
 800a5f0:	f000 fff6 	bl	800b5e0 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	7a9b      	ldrb	r3, [r3, #10]
 800a5f8:	2bff      	cmp	r3, #255	; 0xff
 800a5fa:	d005      	beq.n	800a608 <dhcp_renew+0xb8>
    dhcp->tries++;
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	7a9b      	ldrb	r3, [r3, #10]
 800a600:	3301      	adds	r3, #1
 800a602:	b2da      	uxtb	r2, r3
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	7a9b      	ldrb	r3, [r3, #10]
 800a60c:	2b09      	cmp	r3, #9
 800a60e:	d80a      	bhi.n	800a626 <dhcp_renew+0xd6>
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	7a9b      	ldrb	r3, [r3, #10]
 800a614:	b29b      	uxth	r3, r3
 800a616:	461a      	mov	r2, r3
 800a618:	0152      	lsls	r2, r2, #5
 800a61a:	1ad2      	subs	r2, r2, r3
 800a61c:	0092      	lsls	r2, r2, #2
 800a61e:	4413      	add	r3, r2
 800a620:	011b      	lsls	r3, r3, #4
 800a622:	b29b      	uxth	r3, r3
 800a624:	e001      	b.n	800a62a <dhcp_renew+0xda>
 800a626:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a62a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a62c:	89bb      	ldrh	r3, [r7, #12]
 800a62e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a632:	4a09      	ldr	r2, [pc, #36]	; (800a658 <dhcp_renew+0x108>)
 800a634:	fb82 1203 	smull	r1, r2, r2, r3
 800a638:	1152      	asrs	r2, r2, #5
 800a63a:	17db      	asrs	r3, r3, #31
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	b29a      	uxth	r2, r3
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	20000010 	.word	0x20000010
 800a654:	2000010c 	.word	0x2000010c
 800a658:	10624dd3 	.word	0x10624dd3

0800a65c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b088      	sub	sp, #32
 800a660:	af02      	add	r7, sp, #8
 800a662:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a1b      	ldr	r3, [r3, #32]
 800a668:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800a66a:	2104      	movs	r1, #4
 800a66c:	6938      	ldr	r0, [r7, #16]
 800a66e:	f000 f9cf 	bl	800aa10 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800a672:	2203      	movs	r2, #3
 800a674:	6939      	ldr	r1, [r7, #16]
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 fe50 	bl	800b31c <dhcp_create_msg>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800a680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d139      	bne.n	800a6fc <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a688:	2202      	movs	r2, #2
 800a68a:	2139      	movs	r1, #57	; 0x39
 800a68c:	6938      	ldr	r0, [r7, #16]
 800a68e:	f000 f9d9 	bl	800aa44 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a696:	4619      	mov	r1, r3
 800a698:	6938      	ldr	r0, [r7, #16]
 800a69a:	f000 fa35 	bl	800ab08 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a69e:	2203      	movs	r2, #3
 800a6a0:	2137      	movs	r1, #55	; 0x37
 800a6a2:	6938      	ldr	r0, [r7, #16]
 800a6a4:	f000 f9ce 	bl	800aa44 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	75fb      	strb	r3, [r7, #23]
 800a6ac:	e009      	b.n	800a6c2 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800a6ae:	7dfb      	ldrb	r3, [r7, #23]
 800a6b0:	4a29      	ldr	r2, [pc, #164]	; (800a758 <dhcp_rebind+0xfc>)
 800a6b2:	5cd3      	ldrb	r3, [r2, r3]
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	6938      	ldr	r0, [r7, #16]
 800a6b8:	f000 f9fe 	bl	800aab8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a6bc:	7dfb      	ldrb	r3, [r7, #23]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	75fb      	strb	r3, [r7, #23]
 800a6c2:	7dfb      	ldrb	r3, [r7, #23]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d9f2      	bls.n	800a6ae <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800a6c8:	6938      	ldr	r0, [r7, #16]
 800a6ca:	f000 ffcb 	bl	800b664 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	68da      	ldr	r2, [r3, #12]
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	8a9b      	ldrh	r3, [r3, #20]
 800a6d6:	33f0      	adds	r3, #240	; 0xf0
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	4619      	mov	r1, r3
 800a6dc:	4610      	mov	r0, r2
 800a6de:	f7f9 fdb3 	bl	8004248 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800a6e2:	4b1e      	ldr	r3, [pc, #120]	; (800a75c <dhcp_rebind+0x100>)
 800a6e4:	6818      	ldr	r0, [r3, #0]
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	68d9      	ldr	r1, [r3, #12]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	2343      	movs	r3, #67	; 0x43
 800a6f0:	4a1b      	ldr	r2, [pc, #108]	; (800a760 <dhcp_rebind+0x104>)
 800a6f2:	f7fe ff57 	bl	80095a4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a6f6:	6938      	ldr	r0, [r7, #16]
 800a6f8:	f000 ff72 	bl	800b5e0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	7a9b      	ldrb	r3, [r3, #10]
 800a700:	2bff      	cmp	r3, #255	; 0xff
 800a702:	d005      	beq.n	800a710 <dhcp_rebind+0xb4>
    dhcp->tries++;
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	7a9b      	ldrb	r3, [r3, #10]
 800a708:	3301      	adds	r3, #1
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	7a9b      	ldrb	r3, [r3, #10]
 800a714:	2b09      	cmp	r3, #9
 800a716:	d80a      	bhi.n	800a72e <dhcp_rebind+0xd2>
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	7a9b      	ldrb	r3, [r3, #10]
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	461a      	mov	r2, r3
 800a720:	0152      	lsls	r2, r2, #5
 800a722:	1ad2      	subs	r2, r2, r3
 800a724:	0092      	lsls	r2, r2, #2
 800a726:	4413      	add	r3, r2
 800a728:	00db      	lsls	r3, r3, #3
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	e001      	b.n	800a732 <dhcp_rebind+0xd6>
 800a72e:	f242 7310 	movw	r3, #10000	; 0x2710
 800a732:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a734:	89bb      	ldrh	r3, [r7, #12]
 800a736:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a73a:	4a0a      	ldr	r2, [pc, #40]	; (800a764 <dhcp_rebind+0x108>)
 800a73c:	fb82 1203 	smull	r1, r2, r2, r3
 800a740:	1152      	asrs	r2, r2, #5
 800a742:	17db      	asrs	r3, r3, #31
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	b29a      	uxth	r2, r3
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a74c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3718      	adds	r7, #24
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20000010 	.word	0x20000010
 800a75c:	2000010c 	.word	0x2000010c
 800a760:	080122b4 	.word	0x080122b4
 800a764:	10624dd3 	.word	0x10624dd3

0800a768 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af02      	add	r7, sp, #8
 800a76e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a1b      	ldr	r3, [r3, #32]
 800a774:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800a776:	2103      	movs	r1, #3
 800a778:	6938      	ldr	r0, [r7, #16]
 800a77a:	f000 f949 	bl	800aa10 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800a77e:	2203      	movs	r2, #3
 800a780:	6939      	ldr	r1, [r7, #16]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fdca 	bl	800b31c <dhcp_create_msg>
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800a78c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d147      	bne.n	800a824 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a794:	2202      	movs	r2, #2
 800a796:	2139      	movs	r1, #57	; 0x39
 800a798:	6938      	ldr	r0, [r7, #16]
 800a79a:	f000 f953 	bl	800aa44 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800a79e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a7a2:	6938      	ldr	r0, [r7, #16]
 800a7a4:	f000 f9b0 	bl	800ab08 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800a7a8:	2204      	movs	r2, #4
 800a7aa:	2132      	movs	r1, #50	; 0x32
 800a7ac:	6938      	ldr	r0, [r7, #16]
 800a7ae:	f000 f949 	bl	800aa44 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7f8 fdc0 	bl	800333c <lwip_htonl>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6938      	ldr	r0, [r7, #16]
 800a7c2:	f000 f9db 	bl	800ab7c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a7c6:	2203      	movs	r2, #3
 800a7c8:	2137      	movs	r1, #55	; 0x37
 800a7ca:	6938      	ldr	r0, [r7, #16]
 800a7cc:	f000 f93a 	bl	800aa44 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	75fb      	strb	r3, [r7, #23]
 800a7d4:	e009      	b.n	800a7ea <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800a7d6:	7dfb      	ldrb	r3, [r7, #23]
 800a7d8:	4a29      	ldr	r2, [pc, #164]	; (800a880 <dhcp_reboot+0x118>)
 800a7da:	5cd3      	ldrb	r3, [r2, r3]
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6938      	ldr	r0, [r7, #16]
 800a7e0:	f000 f96a 	bl	800aab8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	75fb      	strb	r3, [r7, #23]
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d9f2      	bls.n	800a7d6 <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 800a7f0:	6938      	ldr	r0, [r7, #16]
 800a7f2:	f000 ff37 	bl	800b664 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	68da      	ldr	r2, [r3, #12]
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	8a9b      	ldrh	r3, [r3, #20]
 800a7fe:	33f0      	adds	r3, #240	; 0xf0
 800a800:	b29b      	uxth	r3, r3
 800a802:	4619      	mov	r1, r3
 800a804:	4610      	mov	r0, r2
 800a806:	f7f9 fd1f 	bl	8004248 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800a80a:	4b1e      	ldr	r3, [pc, #120]	; (800a884 <dhcp_reboot+0x11c>)
 800a80c:	6818      	ldr	r0, [r3, #0]
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	68d9      	ldr	r1, [r3, #12]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	2343      	movs	r3, #67	; 0x43
 800a818:	4a1b      	ldr	r2, [pc, #108]	; (800a888 <dhcp_reboot+0x120>)
 800a81a:	f7fe fec3 	bl	80095a4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a81e:	6938      	ldr	r0, [r7, #16]
 800a820:	f000 fede 	bl	800b5e0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	7a9b      	ldrb	r3, [r3, #10]
 800a828:	2bff      	cmp	r3, #255	; 0xff
 800a82a:	d005      	beq.n	800a838 <dhcp_reboot+0xd0>
    dhcp->tries++;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	7a9b      	ldrb	r3, [r3, #10]
 800a830:	3301      	adds	r3, #1
 800a832:	b2da      	uxtb	r2, r3
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	7a9b      	ldrb	r3, [r3, #10]
 800a83c:	2b09      	cmp	r3, #9
 800a83e:	d80a      	bhi.n	800a856 <dhcp_reboot+0xee>
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	7a9b      	ldrb	r3, [r3, #10]
 800a844:	b29b      	uxth	r3, r3
 800a846:	461a      	mov	r2, r3
 800a848:	0152      	lsls	r2, r2, #5
 800a84a:	1ad2      	subs	r2, r2, r3
 800a84c:	0092      	lsls	r2, r2, #2
 800a84e:	4413      	add	r3, r2
 800a850:	00db      	lsls	r3, r3, #3
 800a852:	b29b      	uxth	r3, r3
 800a854:	e001      	b.n	800a85a <dhcp_reboot+0xf2>
 800a856:	f242 7310 	movw	r3, #10000	; 0x2710
 800a85a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a85c:	89bb      	ldrh	r3, [r7, #12]
 800a85e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a862:	4a0a      	ldr	r2, [pc, #40]	; (800a88c <dhcp_reboot+0x124>)
 800a864:	fb82 1203 	smull	r1, r2, r2, r3
 800a868:	1152      	asrs	r2, r2, #5
 800a86a:	17db      	asrs	r3, r3, #31
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	b29a      	uxth	r2, r3
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3718      	adds	r7, #24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20000010 	.word	0x20000010
 800a884:	2000010c 	.word	0x2000010c
 800a888:	080122b4 	.word	0x080122b4
 800a88c:	10624dd3 	.word	0x10624dd3

0800a890 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b088      	sub	sp, #32
 800a894:	af02      	add	r7, sp, #8
 800a896:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a1b      	ldr	r3, [r3, #32]
 800a89c:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d102      	bne.n	800a8aa <dhcp_release+0x1a>
    return ERR_ARG;
 800a8a4:	f06f 030f 	mvn.w	r3, #15
 800a8a8:	e072      	b.n	800a990 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 ff31 	bl	800b718 <dhcp_supplied_address>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	6978      	ldr	r0, [r7, #20]
 800a8be:	f000 f8a7 	bl	800aa10 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	63da      	str	r2, [r3, #60]	; 0x3c
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	639a      	str	r2, [r3, #56]	; 0x38
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	845a      	strh	r2, [r3, #34]	; 0x22
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	841a      	strh	r2, [r3, #32]
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	8c1a      	ldrh	r2, [r3, #32]
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	83da      	strh	r2, [r3, #30]
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	8bda      	ldrh	r2, [r3, #30]
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800a90e:	7cfb      	ldrb	r3, [r7, #19]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	e03b      	b.n	800a990 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800a918:	2207      	movs	r2, #7
 800a91a:	6979      	ldr	r1, [r7, #20]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fcfd 	bl	800b31c <dhcp_create_msg>
 800a922:	4603      	mov	r3, r0
 800a924:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800a926:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d128      	bne.n	800a980 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800a92e:	2204      	movs	r2, #4
 800a930:	2136      	movs	r1, #54	; 0x36
 800a932:	6978      	ldr	r0, [r7, #20]
 800a934:	f000 f886 	bl	800aa44 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7f8 fcfe 	bl	800333c <lwip_htonl>
 800a940:	4603      	mov	r3, r0
 800a942:	4619      	mov	r1, r3
 800a944:	6978      	ldr	r0, [r7, #20]
 800a946:	f000 f919 	bl	800ab7c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800a94a:	6978      	ldr	r0, [r7, #20]
 800a94c:	f000 fe8a 	bl	800b664 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	68da      	ldr	r2, [r3, #12]
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	8a9b      	ldrh	r3, [r3, #20]
 800a958:	33f0      	adds	r3, #240	; 0xf0
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	4619      	mov	r1, r3
 800a95e:	4610      	mov	r0, r2
 800a960:	f7f9 fc72 	bl	8004248 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800a964:	4b0c      	ldr	r3, [pc, #48]	; (800a998 <dhcp_release+0x108>)
 800a966:	6818      	ldr	r0, [r3, #0]
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	68d9      	ldr	r1, [r3, #12]
 800a96c:	f107 020c 	add.w	r2, r7, #12
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	2343      	movs	r3, #67	; 0x43
 800a976:	f7fe fe15 	bl	80095a4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a97a:	6978      	ldr	r0, [r7, #20]
 800a97c:	f000 fe30 	bl	800b5e0 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800a980:	4b06      	ldr	r3, [pc, #24]	; (800a99c <dhcp_release+0x10c>)
 800a982:	4a06      	ldr	r2, [pc, #24]	; (800a99c <dhcp_release+0x10c>)
 800a984:	4905      	ldr	r1, [pc, #20]	; (800a99c <dhcp_release+0x10c>)
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7f9 f952 	bl	8003c30 <netif_set_addr>

  return result;
 800a98c:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800a990:	4618      	mov	r0, r3
 800a992:	3718      	adds	r7, #24
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	2000010c 	.word	0x2000010c
 800a99c:	080122b0 	.word	0x080122b0

0800a9a0 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d107      	bne.n	800a9be <dhcp_stop+0x1e>
 800a9ae:	4b14      	ldr	r3, [pc, #80]	; (800aa00 <dhcp_stop+0x60>)
 800a9b0:	f240 5242 	movw	r2, #1346	; 0x542
 800a9b4:	4913      	ldr	r1, [pc, #76]	; (800aa04 <dhcp_stop+0x64>)
 800a9b6:	4814      	ldr	r0, [pc, #80]	; (800aa08 <dhcp_stop+0x68>)
 800a9b8:	f004 f9e6 	bl	800ed88 <iprintf>
 800a9bc:	e01d      	b.n	800a9fa <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d017      	beq.n	800a9fa <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d006      	beq.n	800a9e0 <dhcp_stop+0x40>
 800a9d2:	4b0b      	ldr	r3, [pc, #44]	; (800aa00 <dhcp_stop+0x60>)
 800a9d4:	f240 524f 	movw	r2, #1359	; 0x54f
 800a9d8:	490c      	ldr	r1, [pc, #48]	; (800aa0c <dhcp_stop+0x6c>)
 800a9da:	480b      	ldr	r0, [pc, #44]	; (800aa08 <dhcp_stop+0x68>)
 800a9dc:	f004 f9d4 	bl	800ed88 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f000 f814 	bl	800aa10 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	7a1b      	ldrb	r3, [r3, #8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d004      	beq.n	800a9fa <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800a9f0:	f7ff f854 	bl	8009a9c <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	721a      	strb	r2, [r3, #8]
    }
  }
}
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	0801153c 	.word	0x0801153c
 800aa04:	080116b0 	.word	0x080116b0
 800aa08:	0801159c 	.word	0x0801159c
 800aa0c:	08011668 	.word	0x08011668

0800aa10 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	7a5b      	ldrb	r3, [r3, #9]
 800aa20:	78fa      	ldrb	r2, [r7, #3]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d008      	beq.n	800aa38 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	78fa      	ldrb	r2, [r7, #3]
 800aa2a:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	82da      	strh	r2, [r3, #22]
  }
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
 800aa50:	4613      	mov	r3, r2
 800aa52:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	8a9b      	ldrh	r3, [r3, #20]
 800aa58:	461a      	mov	r2, r3
 800aa5a:	78bb      	ldrb	r3, [r7, #2]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	3302      	adds	r3, #2
 800aa60:	2b44      	cmp	r3, #68	; 0x44
 800aa62:	d906      	bls.n	800aa72 <dhcp_option+0x2e>
 800aa64:	4b11      	ldr	r3, [pc, #68]	; (800aaac <dhcp_option+0x68>)
 800aa66:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800aa6a:	4911      	ldr	r1, [pc, #68]	; (800aab0 <dhcp_option+0x6c>)
 800aa6c:	4811      	ldr	r0, [pc, #68]	; (800aab4 <dhcp_option+0x70>)
 800aa6e:	f004 f98b 	bl	800ed88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	691a      	ldr	r2, [r3, #16]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	8a9b      	ldrh	r3, [r3, #20]
 800aa7a:	1c59      	adds	r1, r3, #1
 800aa7c:	b288      	uxth	r0, r1
 800aa7e:	6879      	ldr	r1, [r7, #4]
 800aa80:	8288      	strh	r0, [r1, #20]
 800aa82:	4413      	add	r3, r2
 800aa84:	78fa      	ldrb	r2, [r7, #3]
 800aa86:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	691a      	ldr	r2, [r3, #16]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	8a9b      	ldrh	r3, [r3, #20]
 800aa92:	1c59      	adds	r1, r3, #1
 800aa94:	b288      	uxth	r0, r1
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	8288      	strh	r0, [r1, #20]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	78ba      	ldrb	r2, [r7, #2]
 800aa9e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800aaa2:	bf00      	nop
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	0801153c 	.word	0x0801153c
 800aab0:	080116cc 	.word	0x080116cc
 800aab4:	0801159c 	.word	0x0801159c

0800aab8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	8a9b      	ldrh	r3, [r3, #20]
 800aac8:	2b43      	cmp	r3, #67	; 0x43
 800aaca:	d906      	bls.n	800aada <dhcp_option_byte+0x22>
 800aacc:	4b0b      	ldr	r3, [pc, #44]	; (800aafc <dhcp_option_byte+0x44>)
 800aace:	f240 527b 	movw	r2, #1403	; 0x57b
 800aad2:	490b      	ldr	r1, [pc, #44]	; (800ab00 <dhcp_option_byte+0x48>)
 800aad4:	480b      	ldr	r0, [pc, #44]	; (800ab04 <dhcp_option_byte+0x4c>)
 800aad6:	f004 f957 	bl	800ed88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	691a      	ldr	r2, [r3, #16]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	8a9b      	ldrh	r3, [r3, #20]
 800aae2:	1c59      	adds	r1, r3, #1
 800aae4:	b288      	uxth	r0, r1
 800aae6:	6879      	ldr	r1, [r7, #4]
 800aae8:	8288      	strh	r0, [r1, #20]
 800aaea:	4413      	add	r3, r2
 800aaec:	78fa      	ldrb	r2, [r7, #3]
 800aaee:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800aaf2:	bf00      	nop
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	0801153c 	.word	0x0801153c
 800ab00:	08011714 	.word	0x08011714
 800ab04:	0801159c 	.word	0x0801159c

0800ab08 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800ab08:	b590      	push	{r4, r7, lr}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	460b      	mov	r3, r1
 800ab12:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	8a9b      	ldrh	r3, [r3, #20]
 800ab18:	3302      	adds	r3, #2
 800ab1a:	2b44      	cmp	r3, #68	; 0x44
 800ab1c:	d906      	bls.n	800ab2c <dhcp_option_short+0x24>
 800ab1e:	4b14      	ldr	r3, [pc, #80]	; (800ab70 <dhcp_option_short+0x68>)
 800ab20:	f240 5282 	movw	r2, #1410	; 0x582
 800ab24:	4913      	ldr	r1, [pc, #76]	; (800ab74 <dhcp_option_short+0x6c>)
 800ab26:	4814      	ldr	r0, [pc, #80]	; (800ab78 <dhcp_option_short+0x70>)
 800ab28:	f004 f92e 	bl	800ed88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800ab2c:	887b      	ldrh	r3, [r7, #2]
 800ab2e:	0a1b      	lsrs	r3, r3, #8
 800ab30:	b298      	uxth	r0, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	691a      	ldr	r2, [r3, #16]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	8a9b      	ldrh	r3, [r3, #20]
 800ab3a:	1c59      	adds	r1, r3, #1
 800ab3c:	b28c      	uxth	r4, r1
 800ab3e:	6879      	ldr	r1, [r7, #4]
 800ab40:	828c      	strh	r4, [r1, #20]
 800ab42:	b2c1      	uxtb	r1, r0
 800ab44:	4413      	add	r3, r2
 800ab46:	460a      	mov	r2, r1
 800ab48:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	691a      	ldr	r2, [r3, #16]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	8a9b      	ldrh	r3, [r3, #20]
 800ab54:	1c59      	adds	r1, r3, #1
 800ab56:	b288      	uxth	r0, r1
 800ab58:	6879      	ldr	r1, [r7, #4]
 800ab5a:	8288      	strh	r0, [r1, #20]
 800ab5c:	8879      	ldrh	r1, [r7, #2]
 800ab5e:	b2c9      	uxtb	r1, r1
 800ab60:	4413      	add	r3, r2
 800ab62:	460a      	mov	r2, r1
 800ab64:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800ab68:	bf00      	nop
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd90      	pop	{r4, r7, pc}
 800ab70:	0801153c 	.word	0x0801153c
 800ab74:	08011750 	.word	0x08011750
 800ab78:	0801159c 	.word	0x0801159c

0800ab7c <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800ab7c:	b590      	push	{r4, r7, lr}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	8a9b      	ldrh	r3, [r3, #20]
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	2b44      	cmp	r3, #68	; 0x44
 800ab8e:	d906      	bls.n	800ab9e <dhcp_option_long+0x22>
 800ab90:	4b22      	ldr	r3, [pc, #136]	; (800ac1c <dhcp_option_long+0xa0>)
 800ab92:	f240 528a 	movw	r2, #1418	; 0x58a
 800ab96:	4922      	ldr	r1, [pc, #136]	; (800ac20 <dhcp_option_long+0xa4>)
 800ab98:	4822      	ldr	r0, [pc, #136]	; (800ac24 <dhcp_option_long+0xa8>)
 800ab9a:	f004 f8f5 	bl	800ed88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	0e18      	lsrs	r0, r3, #24
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	691a      	ldr	r2, [r3, #16]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	8a9b      	ldrh	r3, [r3, #20]
 800abaa:	1c59      	adds	r1, r3, #1
 800abac:	b28c      	uxth	r4, r1
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	828c      	strh	r4, [r1, #20]
 800abb2:	b2c1      	uxtb	r1, r0
 800abb4:	4413      	add	r3, r2
 800abb6:	460a      	mov	r2, r1
 800abb8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	0c18      	lsrs	r0, r3, #16
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	691a      	ldr	r2, [r3, #16]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	8a9b      	ldrh	r3, [r3, #20]
 800abc8:	1c59      	adds	r1, r3, #1
 800abca:	b28c      	uxth	r4, r1
 800abcc:	6879      	ldr	r1, [r7, #4]
 800abce:	828c      	strh	r4, [r1, #20]
 800abd0:	b2c1      	uxtb	r1, r0
 800abd2:	4413      	add	r3, r2
 800abd4:	460a      	mov	r2, r1
 800abd6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	0a18      	lsrs	r0, r3, #8
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	691a      	ldr	r2, [r3, #16]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	8a9b      	ldrh	r3, [r3, #20]
 800abe6:	1c59      	adds	r1, r3, #1
 800abe8:	b28c      	uxth	r4, r1
 800abea:	6879      	ldr	r1, [r7, #4]
 800abec:	828c      	strh	r4, [r1, #20]
 800abee:	b2c1      	uxtb	r1, r0
 800abf0:	4413      	add	r3, r2
 800abf2:	460a      	mov	r2, r1
 800abf4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	691a      	ldr	r2, [r3, #16]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	8a9b      	ldrh	r3, [r3, #20]
 800ac00:	1c59      	adds	r1, r3, #1
 800ac02:	b288      	uxth	r0, r1
 800ac04:	6879      	ldr	r1, [r7, #4]
 800ac06:	8288      	strh	r0, [r1, #20]
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	b2c9      	uxtb	r1, r1
 800ac0c:	4413      	add	r3, r2
 800ac0e:	460a      	mov	r2, r1
 800ac10:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800ac14:	bf00      	nop
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd90      	pop	{r4, r7, pc}
 800ac1c:	0801153c 	.word	0x0801153c
 800ac20:	08011794 	.word	0x08011794
 800ac24:	0801159c 	.word	0x0801159c

0800ac28 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b08e      	sub	sp, #56	; 0x38
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800ac32:	2300      	movs	r3, #0
 800ac34:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 800ac36:	2300      	movs	r3, #0
 800ac38:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800ac3a:	2208      	movs	r2, #8
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	48b3      	ldr	r0, [pc, #716]	; (800af0c <dhcp_parse_reply+0x2e4>)
 800ac40:	f004 f89a 	bl	800ed78 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	895b      	ldrh	r3, [r3, #10]
 800ac48:	2b2b      	cmp	r3, #43	; 0x2b
 800ac4a:	d802      	bhi.n	800ac52 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800ac4c:	f06f 0301 	mvn.w	r3, #1
 800ac50:	e26a      	b.n	800b128 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800ac5a:	23f0      	movs	r3, #240	; 0xf0
 800ac5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	891b      	ldrh	r3, [r3, #8]
 800ac62:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800ac68:	e00c      	b.n	800ac84 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 800ac6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6c:	895b      	ldrh	r3, [r3, #10]
 800ac6e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 800ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac76:	895b      	ldrh	r3, [r3, #10]
 800ac78:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 800ac7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800ac84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d004      	beq.n	800ac94 <dhcp_parse_reply+0x6c>
 800ac8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8c:	895b      	ldrh	r3, [r3, #10]
 800ac8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d2ea      	bcs.n	800ac6a <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d102      	bne.n	800aca0 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 800ac9a:	f06f 0301 	mvn.w	r3, #1
 800ac9e:	e243      	b.n	800b128 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 800aca0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aca2:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 800aca4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aca6:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 800aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800acae:	e1fb      	b.n	800b0a8 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 800acb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800acb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acb4:	4413      	add	r3, r2
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 800acba:	2300      	movs	r3, #0
 800acbc:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 800acbe:	f04f 33ff 	mov.w	r3, #4294967295
 800acc2:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 800acc4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800acc6:	3302      	adds	r3, #2
 800acc8:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800acca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800accc:	3301      	adds	r3, #1
 800acce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acd0:	8952      	ldrh	r2, [r2, #10]
 800acd2:	4293      	cmp	r3, r2
 800acd4:	da06      	bge.n	800ace4 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 800acd6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800acd8:	3301      	adds	r3, #1
 800acda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acdc:	4413      	add	r3, r2
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	77fb      	strb	r3, [r7, #31]
 800ace2:	e00a      	b.n	800acfa <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800ace4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d004      	beq.n	800acf6 <dhcp_parse_reply+0xce>
 800acec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	e000      	b.n	800acf8 <dhcp_parse_reply+0xd0>
 800acf6:	2300      	movs	r3, #0
 800acf8:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800acfa:	7ffb      	ldrb	r3, [r7, #31]
 800acfc:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 800acfe:	7d7b      	ldrb	r3, [r7, #21]
 800ad00:	2b3b      	cmp	r3, #59	; 0x3b
 800ad02:	f200 8121 	bhi.w	800af48 <dhcp_parse_reply+0x320>
 800ad06:	a201      	add	r2, pc, #4	; (adr r2, 800ad0c <dhcp_parse_reply+0xe4>)
 800ad08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0c:	0800adfd 	.word	0x0800adfd
 800ad10:	0800ae0d 	.word	0x0800ae0d
 800ad14:	0800af49 	.word	0x0800af49
 800ad18:	0800ae2d 	.word	0x0800ae2d
 800ad1c:	0800af49 	.word	0x0800af49
 800ad20:	0800af49 	.word	0x0800af49
 800ad24:	0800af49 	.word	0x0800af49
 800ad28:	0800af49 	.word	0x0800af49
 800ad2c:	0800af49 	.word	0x0800af49
 800ad30:	0800af49 	.word	0x0800af49
 800ad34:	0800af49 	.word	0x0800af49
 800ad38:	0800af49 	.word	0x0800af49
 800ad3c:	0800af49 	.word	0x0800af49
 800ad40:	0800af49 	.word	0x0800af49
 800ad44:	0800af49 	.word	0x0800af49
 800ad48:	0800af49 	.word	0x0800af49
 800ad4c:	0800af49 	.word	0x0800af49
 800ad50:	0800af49 	.word	0x0800af49
 800ad54:	0800af49 	.word	0x0800af49
 800ad58:	0800af49 	.word	0x0800af49
 800ad5c:	0800af49 	.word	0x0800af49
 800ad60:	0800af49 	.word	0x0800af49
 800ad64:	0800af49 	.word	0x0800af49
 800ad68:	0800af49 	.word	0x0800af49
 800ad6c:	0800af49 	.word	0x0800af49
 800ad70:	0800af49 	.word	0x0800af49
 800ad74:	0800af49 	.word	0x0800af49
 800ad78:	0800af49 	.word	0x0800af49
 800ad7c:	0800af49 	.word	0x0800af49
 800ad80:	0800af49 	.word	0x0800af49
 800ad84:	0800af49 	.word	0x0800af49
 800ad88:	0800af49 	.word	0x0800af49
 800ad8c:	0800af49 	.word	0x0800af49
 800ad90:	0800af49 	.word	0x0800af49
 800ad94:	0800af49 	.word	0x0800af49
 800ad98:	0800af49 	.word	0x0800af49
 800ad9c:	0800af49 	.word	0x0800af49
 800ada0:	0800af49 	.word	0x0800af49
 800ada4:	0800af49 	.word	0x0800af49
 800ada8:	0800af49 	.word	0x0800af49
 800adac:	0800af49 	.word	0x0800af49
 800adb0:	0800af49 	.word	0x0800af49
 800adb4:	0800af49 	.word	0x0800af49
 800adb8:	0800af49 	.word	0x0800af49
 800adbc:	0800af49 	.word	0x0800af49
 800adc0:	0800af49 	.word	0x0800af49
 800adc4:	0800af49 	.word	0x0800af49
 800adc8:	0800af49 	.word	0x0800af49
 800adcc:	0800af49 	.word	0x0800af49
 800add0:	0800af49 	.word	0x0800af49
 800add4:	0800af49 	.word	0x0800af49
 800add8:	0800ae53 	.word	0x0800ae53
 800addc:	0800ae73 	.word	0x0800ae73
 800ade0:	0800aead 	.word	0x0800aead
 800ade4:	0800aecd 	.word	0x0800aecd
 800ade8:	0800af49 	.word	0x0800af49
 800adec:	0800af49 	.word	0x0800af49
 800adf0:	0800af49 	.word	0x0800af49
 800adf4:	0800aeed 	.word	0x0800aeed
 800adf8:	0800af29 	.word	0x0800af29
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	77fb      	strb	r3, [r7, #31]
 800ae00:	7ffb      	ldrb	r3, [r7, #31]
 800ae02:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 800ae04:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae06:	3b01      	subs	r3, #1
 800ae08:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 800ae0a:	e0a0      	b.n	800af4e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ae0c:	7ffb      	ldrb	r3, [r7, #31]
 800ae0e:	2b04      	cmp	r3, #4
 800ae10:	d009      	beq.n	800ae26 <dhcp_parse_reply+0x1fe>
 800ae12:	4b3f      	ldr	r3, [pc, #252]	; (800af10 <dhcp_parse_reply+0x2e8>)
 800ae14:	f240 52f6 	movw	r2, #1526	; 0x5f6
 800ae18:	493e      	ldr	r1, [pc, #248]	; (800af14 <dhcp_parse_reply+0x2ec>)
 800ae1a:	483f      	ldr	r0, [pc, #252]	; (800af18 <dhcp_parse_reply+0x2f0>)
 800ae1c:	f003 ffb4 	bl	800ed88 <iprintf>
 800ae20:	f06f 0305 	mvn.w	r3, #5
 800ae24:	e180      	b.n	800b128 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800ae26:	2306      	movs	r3, #6
 800ae28:	61bb      	str	r3, [r7, #24]
        break;
 800ae2a:	e090      	b.n	800af4e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800ae2c:	2304      	movs	r3, #4
 800ae2e:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800ae30:	7ffa      	ldrb	r2, [r7, #31]
 800ae32:	7fbb      	ldrb	r3, [r7, #30]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d209      	bcs.n	800ae4c <dhcp_parse_reply+0x224>
 800ae38:	4b35      	ldr	r3, [pc, #212]	; (800af10 <dhcp_parse_reply+0x2e8>)
 800ae3a:	f240 52fb 	movw	r2, #1531	; 0x5fb
 800ae3e:	4937      	ldr	r1, [pc, #220]	; (800af1c <dhcp_parse_reply+0x2f4>)
 800ae40:	4835      	ldr	r0, [pc, #212]	; (800af18 <dhcp_parse_reply+0x2f0>)
 800ae42:	f003 ffa1 	bl	800ed88 <iprintf>
 800ae46:	f06f 0305 	mvn.w	r3, #5
 800ae4a:	e16d      	b.n	800b128 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800ae4c:	2307      	movs	r3, #7
 800ae4e:	61bb      	str	r3, [r7, #24]
        break;
 800ae50:	e07d      	b.n	800af4e <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ae52:	7ffb      	ldrb	r3, [r7, #31]
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	d009      	beq.n	800ae6c <dhcp_parse_reply+0x244>
 800ae58:	4b2d      	ldr	r3, [pc, #180]	; (800af10 <dhcp_parse_reply+0x2e8>)
 800ae5a:	f240 6209 	movw	r2, #1545	; 0x609
 800ae5e:	492d      	ldr	r1, [pc, #180]	; (800af14 <dhcp_parse_reply+0x2ec>)
 800ae60:	482d      	ldr	r0, [pc, #180]	; (800af18 <dhcp_parse_reply+0x2f0>)
 800ae62:	f003 ff91 	bl	800ed88 <iprintf>
 800ae66:	f06f 0305 	mvn.w	r3, #5
 800ae6a:	e15d      	b.n	800b128 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	61bb      	str	r3, [r7, #24]
        break;
 800ae70:	e06d      	b.n	800af4e <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ae72:	7ffb      	ldrb	r3, [r7, #31]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d009      	beq.n	800ae8c <dhcp_parse_reply+0x264>
 800ae78:	4b25      	ldr	r3, [pc, #148]	; (800af10 <dhcp_parse_reply+0x2e8>)
 800ae7a:	f240 6217 	movw	r2, #1559	; 0x617
 800ae7e:	4928      	ldr	r1, [pc, #160]	; (800af20 <dhcp_parse_reply+0x2f8>)
 800ae80:	4825      	ldr	r0, [pc, #148]	; (800af18 <dhcp_parse_reply+0x2f0>)
 800ae82:	f003 ff81 	bl	800ed88 <iprintf>
 800ae86:	f06f 0305 	mvn.w	r3, #5
 800ae8a:	e14d      	b.n	800b128 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800ae8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae8e:	2bf0      	cmp	r3, #240	; 0xf0
 800ae90:	d009      	beq.n	800aea6 <dhcp_parse_reply+0x27e>
 800ae92:	4b1f      	ldr	r3, [pc, #124]	; (800af10 <dhcp_parse_reply+0x2e8>)
 800ae94:	f240 6219 	movw	r2, #1561	; 0x619
 800ae98:	4922      	ldr	r1, [pc, #136]	; (800af24 <dhcp_parse_reply+0x2fc>)
 800ae9a:	481f      	ldr	r0, [pc, #124]	; (800af18 <dhcp_parse_reply+0x2f0>)
 800ae9c:	f003 ff74 	bl	800ed88 <iprintf>
 800aea0:	f06f 0305 	mvn.w	r3, #5
 800aea4:	e140      	b.n	800b128 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800aea6:	2300      	movs	r3, #0
 800aea8:	61bb      	str	r3, [r7, #24]
        break;
 800aeaa:	e050      	b.n	800af4e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800aeac:	7ffb      	ldrb	r3, [r7, #31]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d009      	beq.n	800aec6 <dhcp_parse_reply+0x29e>
 800aeb2:	4b17      	ldr	r3, [pc, #92]	; (800af10 <dhcp_parse_reply+0x2e8>)
 800aeb4:	f240 621d 	movw	r2, #1565	; 0x61d
 800aeb8:	4919      	ldr	r1, [pc, #100]	; (800af20 <dhcp_parse_reply+0x2f8>)
 800aeba:	4817      	ldr	r0, [pc, #92]	; (800af18 <dhcp_parse_reply+0x2f0>)
 800aebc:	f003 ff64 	bl	800ed88 <iprintf>
 800aec0:	f06f 0305 	mvn.w	r3, #5
 800aec4:	e130      	b.n	800b128 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800aec6:	2301      	movs	r3, #1
 800aec8:	61bb      	str	r3, [r7, #24]
        break;
 800aeca:	e040      	b.n	800af4e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800aecc:	7ffb      	ldrb	r3, [r7, #31]
 800aece:	2b04      	cmp	r3, #4
 800aed0:	d009      	beq.n	800aee6 <dhcp_parse_reply+0x2be>
 800aed2:	4b0f      	ldr	r3, [pc, #60]	; (800af10 <dhcp_parse_reply+0x2e8>)
 800aed4:	f240 6221 	movw	r2, #1569	; 0x621
 800aed8:	490e      	ldr	r1, [pc, #56]	; (800af14 <dhcp_parse_reply+0x2ec>)
 800aeda:	480f      	ldr	r0, [pc, #60]	; (800af18 <dhcp_parse_reply+0x2f0>)
 800aedc:	f003 ff54 	bl	800ed88 <iprintf>
 800aee0:	f06f 0305 	mvn.w	r3, #5
 800aee4:	e120      	b.n	800b128 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800aee6:	2302      	movs	r3, #2
 800aee8:	61bb      	str	r3, [r7, #24]
        break;
 800aeea:	e030      	b.n	800af4e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800aeec:	7ffb      	ldrb	r3, [r7, #31]
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	d009      	beq.n	800af06 <dhcp_parse_reply+0x2de>
 800aef2:	4b07      	ldr	r3, [pc, #28]	; (800af10 <dhcp_parse_reply+0x2e8>)
 800aef4:	f240 6225 	movw	r2, #1573	; 0x625
 800aef8:	4906      	ldr	r1, [pc, #24]	; (800af14 <dhcp_parse_reply+0x2ec>)
 800aefa:	4807      	ldr	r0, [pc, #28]	; (800af18 <dhcp_parse_reply+0x2f0>)
 800aefc:	f003 ff44 	bl	800ed88 <iprintf>
 800af00:	f06f 0305 	mvn.w	r3, #5
 800af04:	e110      	b.n	800b128 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 800af06:	2304      	movs	r3, #4
 800af08:	61bb      	str	r3, [r7, #24]
        break;
 800af0a:	e020      	b.n	800af4e <dhcp_parse_reply+0x326>
 800af0c:	20003794 	.word	0x20003794
 800af10:	0801153c 	.word	0x0801153c
 800af14:	080117d4 	.word	0x080117d4
 800af18:	0801159c 	.word	0x0801159c
 800af1c:	080117e0 	.word	0x080117e0
 800af20:	080117f4 	.word	0x080117f4
 800af24:	08011800 	.word	0x08011800
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800af28:	7ffb      	ldrb	r3, [r7, #31]
 800af2a:	2b04      	cmp	r3, #4
 800af2c:	d009      	beq.n	800af42 <dhcp_parse_reply+0x31a>
 800af2e:	4b80      	ldr	r3, [pc, #512]	; (800b130 <dhcp_parse_reply+0x508>)
 800af30:	f240 6229 	movw	r2, #1577	; 0x629
 800af34:	497f      	ldr	r1, [pc, #508]	; (800b134 <dhcp_parse_reply+0x50c>)
 800af36:	4880      	ldr	r0, [pc, #512]	; (800b138 <dhcp_parse_reply+0x510>)
 800af38:	f003 ff26 	bl	800ed88 <iprintf>
 800af3c:	f06f 0305 	mvn.w	r3, #5
 800af40:	e0f2      	b.n	800b128 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 800af42:	2305      	movs	r3, #5
 800af44:	61bb      	str	r3, [r7, #24]
        break;
 800af46:	e002      	b.n	800af4e <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 800af48:	2300      	movs	r3, #0
 800af4a:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 800af4c:	bf00      	nop
    }
    offset += len + 2;
 800af4e:	7ffb      	ldrb	r3, [r7, #31]
 800af50:	b29a      	uxth	r2, r3
 800af52:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800af54:	4413      	add	r3, r2
 800af56:	b29b      	uxth	r3, r3
 800af58:	3302      	adds	r3, #2
 800af5a:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 800af5c:	7fbb      	ldrb	r3, [r7, #30]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d079      	beq.n	800b056 <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 800af62:	2300      	movs	r3, #0
 800af64:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	db02      	blt.n	800af72 <dhcp_parse_reply+0x34a>
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	2b07      	cmp	r3, #7
 800af70:	dd06      	ble.n	800af80 <dhcp_parse_reply+0x358>
 800af72:	4b6f      	ldr	r3, [pc, #444]	; (800b130 <dhcp_parse_reply+0x508>)
 800af74:	f240 6236 	movw	r2, #1590	; 0x636
 800af78:	4970      	ldr	r1, [pc, #448]	; (800b13c <dhcp_parse_reply+0x514>)
 800af7a:	486f      	ldr	r0, [pc, #444]	; (800b138 <dhcp_parse_reply+0x510>)
 800af7c:	f003 ff04 	bl	800ed88 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800af80:	4a6f      	ldr	r2, [pc, #444]	; (800b140 <dhcp_parse_reply+0x518>)
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	4413      	add	r3, r2
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d164      	bne.n	800b056 <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 800af8c:	7fbb      	ldrb	r3, [r7, #30]
 800af8e:	2b04      	cmp	r3, #4
 800af90:	bf28      	it	cs
 800af92:	2304      	movcs	r3, #4
 800af94:	b2db      	uxtb	r3, r3
 800af96:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800af98:	8afb      	ldrh	r3, [r7, #22]
 800af9a:	8a7a      	ldrh	r2, [r7, #18]
 800af9c:	f107 0108 	add.w	r1, r7, #8
 800afa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afa2:	f7f9 fcc5 	bl	8004930 <pbuf_copy_partial>
 800afa6:	4603      	mov	r3, r0
 800afa8:	461a      	mov	r2, r3
 800afaa:	8a7b      	ldrh	r3, [r7, #18]
 800afac:	4293      	cmp	r3, r2
 800afae:	d002      	beq.n	800afb6 <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 800afb0:	f06f 0301 	mvn.w	r3, #1
 800afb4:	e0b8      	b.n	800b128 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 800afb6:	7fbb      	ldrb	r3, [r7, #30]
 800afb8:	2b04      	cmp	r3, #4
 800afba:	d927      	bls.n	800b00c <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800afbc:	7fbb      	ldrb	r3, [r7, #30]
 800afbe:	f003 0303 	and.w	r3, r3, #3
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d009      	beq.n	800afdc <dhcp_parse_reply+0x3b4>
 800afc8:	4b59      	ldr	r3, [pc, #356]	; (800b130 <dhcp_parse_reply+0x508>)
 800afca:	f240 623e 	movw	r2, #1598	; 0x63e
 800afce:	495d      	ldr	r1, [pc, #372]	; (800b144 <dhcp_parse_reply+0x51c>)
 800afd0:	4859      	ldr	r0, [pc, #356]	; (800b138 <dhcp_parse_reply+0x510>)
 800afd2:	f003 fed9 	bl	800ed88 <iprintf>
 800afd6:	f06f 0305 	mvn.w	r3, #5
 800afda:	e0a5      	b.n	800b128 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 800afdc:	4a58      	ldr	r2, [pc, #352]	; (800b140 <dhcp_parse_reply+0x518>)
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	4413      	add	r3, r2
 800afe2:	2201      	movs	r2, #1
 800afe4:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7f8 f9a7 	bl	800333c <lwip_htonl>
 800afee:	4601      	mov	r1, r0
 800aff0:	4a55      	ldr	r2, [pc, #340]	; (800b148 <dhcp_parse_reply+0x520>)
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 800aff8:	7fbb      	ldrb	r3, [r7, #30]
 800affa:	3b04      	subs	r3, #4
 800affc:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 800affe:	8afb      	ldrh	r3, [r7, #22]
 800b000:	3304      	adds	r3, #4
 800b002:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	3301      	adds	r3, #1
 800b008:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 800b00a:	e7ac      	b.n	800af66 <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 800b00c:	7fbb      	ldrb	r3, [r7, #30]
 800b00e:	2b04      	cmp	r3, #4
 800b010:	d106      	bne.n	800b020 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	4618      	mov	r0, r3
 800b016:	f7f8 f991 	bl	800333c <lwip_htonl>
 800b01a:	4603      	mov	r3, r0
 800b01c:	60bb      	str	r3, [r7, #8]
 800b01e:	e010      	b.n	800b042 <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800b020:	7fbb      	ldrb	r3, [r7, #30]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d009      	beq.n	800b03a <dhcp_parse_reply+0x412>
 800b026:	4b42      	ldr	r3, [pc, #264]	; (800b130 <dhcp_parse_reply+0x508>)
 800b028:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 800b02c:	4947      	ldr	r1, [pc, #284]	; (800b14c <dhcp_parse_reply+0x524>)
 800b02e:	4842      	ldr	r0, [pc, #264]	; (800b138 <dhcp_parse_reply+0x510>)
 800b030:	f003 feaa 	bl	800ed88 <iprintf>
 800b034:	f06f 0305 	mvn.w	r3, #5
 800b038:	e076      	b.n	800b128 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 800b03a:	f107 0308 	add.w	r3, r7, #8
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 800b042:	4a3f      	ldr	r2, [pc, #252]	; (800b140 <dhcp_parse_reply+0x518>)
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	4413      	add	r3, r2
 800b048:	2201      	movs	r2, #1
 800b04a:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	493e      	ldr	r1, [pc, #248]	; (800b148 <dhcp_parse_reply+0x520>)
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 800b056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b058:	895b      	ldrh	r3, [r3, #10]
 800b05a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d323      	bcc.n	800b0a8 <dhcp_parse_reply+0x480>
      offset -= q->len;
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b062:	895b      	ldrh	r3, [r3, #10]
 800b064:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 800b06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06c:	895b      	ldrh	r3, [r3, #10]
 800b06e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 800b074:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b076:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b078:	429a      	cmp	r2, r3
 800b07a:	d223      	bcs.n	800b0c4 <dhcp_parse_reply+0x49c>
 800b07c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d020      	beq.n	800b0c4 <dhcp_parse_reply+0x49c>
        q = q->next;
 800b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d109      	bne.n	800b0a2 <dhcp_parse_reply+0x47a>
 800b08e:	4b28      	ldr	r3, [pc, #160]	; (800b130 <dhcp_parse_reply+0x508>)
 800b090:	f240 6254 	movw	r2, #1620	; 0x654
 800b094:	492e      	ldr	r1, [pc, #184]	; (800b150 <dhcp_parse_reply+0x528>)
 800b096:	4828      	ldr	r0, [pc, #160]	; (800b138 <dhcp_parse_reply+0x510>)
 800b098:	f003 fe76 	bl	800ed88 <iprintf>
 800b09c:	f06f 0305 	mvn.w	r3, #5
 800b0a0:	e042      	b.n	800b128 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 800b0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00a      	beq.n	800b0c4 <dhcp_parse_reply+0x49c>
 800b0ae:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b0b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d206      	bcs.n	800b0c4 <dhcp_parse_reply+0x49c>
 800b0b6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b0b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0ba:	4413      	add	r3, r2
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	2bff      	cmp	r3, #255	; 0xff
 800b0c0:	f47f adf6 	bne.w	800acb0 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800b0c4:	4b1e      	ldr	r3, [pc, #120]	; (800b140 <dhcp_parse_reply+0x518>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d018      	beq.n	800b0fe <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800b0cc:	4b1e      	ldr	r3, [pc, #120]	; (800b148 <dhcp_parse_reply+0x520>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800b0d2:	4b1b      	ldr	r3, [pc, #108]	; (800b140 <dhcp_parse_reply+0x518>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d102      	bne.n	800b0e4 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b0e2:	e00c      	b.n	800b0fe <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d102      	bne.n	800b0f0 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	623b      	str	r3, [r7, #32]
 800b0ee:	e006      	b.n	800b0fe <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	d103      	bne.n	800b0fe <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	2b00      	cmp	r3, #0
 800b102:	d006      	beq.n	800b112 <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 800b108:	236c      	movs	r3, #108	; 0x6c
 800b10a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800b10c:	23ec      	movs	r3, #236	; 0xec
 800b10e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800b110:	e5a8      	b.n	800ac64 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d006      	beq.n	800b126 <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 800b118:	2300      	movs	r3, #0
 800b11a:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 800b11c:	232c      	movs	r3, #44	; 0x2c
 800b11e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800b120:	236c      	movs	r3, #108	; 0x6c
 800b122:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800b124:	e59e      	b.n	800ac64 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3738      	adds	r7, #56	; 0x38
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	0801153c 	.word	0x0801153c
 800b134:	080117d4 	.word	0x080117d4
 800b138:	0801159c 	.word	0x0801159c
 800b13c:	08011818 	.word	0x08011818
 800b140:	20003794 	.word	0x20003794
 800b144:	0801182c 	.word	0x0801182c
 800b148:	2000379c 	.word	0x2000379c
 800b14c:	08011844 	.word	0x08011844
 800b150:	08011858 	.word	0x08011858

0800b154 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b08a      	sub	sp, #40	; 0x28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
 800b160:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800b162:	4b68      	ldr	r3, [pc, #416]	; (800b304 <dhcp_recv+0x1b0>)
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	6a1b      	ldr	r3, [r3, #32]
 800b16c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	2b00      	cmp	r3, #0
 800b178:	f000 80a9 	beq.w	800b2ce <dhcp_recv+0x17a>
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	7a1b      	ldrb	r3, [r3, #8]
 800b180:	2b00      	cmp	r3, #0
 800b182:	f000 80a4 	beq.w	800b2ce <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d006      	beq.n	800b19c <dhcp_recv+0x48>
 800b18e:	4b5e      	ldr	r3, [pc, #376]	; (800b308 <dhcp_recv+0x1b4>)
 800b190:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 800b194:	495d      	ldr	r1, [pc, #372]	; (800b30c <dhcp_recv+0x1b8>)
 800b196:	485e      	ldr	r0, [pc, #376]	; (800b310 <dhcp_recv+0x1bc>)
 800b198:	f003 fdf6 	bl	800ed88 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	895b      	ldrh	r3, [r3, #10]
 800b1a0:	2b2b      	cmp	r3, #43	; 0x2b
 800b1a2:	f240 8096 	bls.w	800b2d2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	2b02      	cmp	r3, #2
 800b1ac:	f040 8093 	bne.w	800b2d6 <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1b6:	e012      	b.n	800b1de <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800b1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1bc:	6a3a      	ldr	r2, [r7, #32]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800b1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1c8:	69b9      	ldr	r1, [r7, #24]
 800b1ca:	440b      	add	r3, r1
 800b1cc:	7f1b      	ldrb	r3, [r3, #28]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	f040 8083 	bne.w	800b2da <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800b1d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1d8:	3301      	adds	r3, #1
 800b1da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d207      	bcs.n	800b1fc <dhcp_recv+0xa8>
 800b1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1f0:	2b05      	cmp	r3, #5
 800b1f2:	d803      	bhi.n	800b1fc <dhcp_recv+0xa8>
 800b1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1f8:	2b0f      	cmp	r3, #15
 800b1fa:	d9dd      	bls.n	800b1b8 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	4618      	mov	r0, r3
 800b202:	f7f8 f89b 	bl	800333c <lwip_htonl>
 800b206:	4602      	mov	r2, r0
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d166      	bne.n	800b2de <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 800b210:	6879      	ldr	r1, [r7, #4]
 800b212:	69f8      	ldr	r0, [r7, #28]
 800b214:	f7ff fd08 	bl	800ac28 <dhcp_parse_reply>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d161      	bne.n	800b2e2 <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800b21e:	4b3d      	ldr	r3, [pc, #244]	; (800b314 <dhcp_recv+0x1c0>)
 800b220:	785b      	ldrb	r3, [r3, #1]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d05f      	beq.n	800b2e6 <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800b226:	4b3c      	ldr	r3, [pc, #240]	; (800b318 <dhcp_recv+0x1c4>)
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800b22c:	7dfb      	ldrb	r3, [r7, #23]
 800b22e:	2b05      	cmp	r3, #5
 800b230:	d128      	bne.n	800b284 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	7a5b      	ldrb	r3, [r3, #9]
 800b236:	2b01      	cmp	r3, #1
 800b238:	d111      	bne.n	800b25e <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 800b23a:	6a38      	ldr	r0, [r7, #32]
 800b23c:	f7fe fea0 	bl	8009f80 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b246:	f003 0308 	and.w	r3, r3, #8
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d003      	beq.n	800b256 <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800b24e:	6a38      	ldr	r0, [r7, #32]
 800b250:	f7fe fc68 	bl	8009b24 <dhcp_check>
 800b254:	e048      	b.n	800b2e8 <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800b256:	6a38      	ldr	r0, [r7, #32]
 800b258:	f7ff f8a0 	bl	800a39c <dhcp_bind>
 800b25c:	e044      	b.n	800b2e8 <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	7a5b      	ldrb	r3, [r3, #9]
 800b262:	2b03      	cmp	r3, #3
 800b264:	d007      	beq.n	800b276 <dhcp_recv+0x122>
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	7a5b      	ldrb	r3, [r3, #9]
 800b26a:	2b04      	cmp	r3, #4
 800b26c:	d003      	beq.n	800b276 <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800b272:	2b05      	cmp	r3, #5
 800b274:	d138      	bne.n	800b2e8 <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 800b276:	6a38      	ldr	r0, [r7, #32]
 800b278:	f7fe fe82 	bl	8009f80 <dhcp_handle_ack>
      dhcp_bind(netif);
 800b27c:	6a38      	ldr	r0, [r7, #32]
 800b27e:	f7ff f88d 	bl	800a39c <dhcp_bind>
 800b282:	e031      	b.n	800b2e8 <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800b284:	7dfb      	ldrb	r3, [r7, #23]
 800b286:	2b06      	cmp	r3, #6
 800b288:	d113      	bne.n	800b2b2 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d00b      	beq.n	800b2aa <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	7a5b      	ldrb	r3, [r3, #9]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d007      	beq.n	800b2aa <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800b29e:	2b04      	cmp	r3, #4
 800b2a0:	d003      	beq.n	800b2aa <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	7a5b      	ldrb	r3, [r3, #9]
 800b2a6:	2b05      	cmp	r3, #5
 800b2a8:	d103      	bne.n	800b2b2 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800b2aa:	6a38      	ldr	r0, [r7, #32]
 800b2ac:	f7fe fc20 	bl	8009af0 <dhcp_handle_nak>
 800b2b0:	e01a      	b.n	800b2e8 <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800b2b2:	7dfb      	ldrb	r3, [r7, #23]
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d10a      	bne.n	800b2ce <dhcp_recv+0x17a>
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	7a5b      	ldrb	r3, [r3, #9]
 800b2bc:	2b06      	cmp	r3, #6
 800b2be:	d106      	bne.n	800b2ce <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 800b2c6:	6a38      	ldr	r0, [r7, #32]
 800b2c8:	f7fe fc60 	bl	8009b8c <dhcp_handle_offer>
 800b2cc:	e00c      	b.n	800b2e8 <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 800b2ce:	bf00      	nop
 800b2d0:	e00a      	b.n	800b2e8 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800b2d2:	bf00      	nop
 800b2d4:	e008      	b.n	800b2e8 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800b2d6:	bf00      	nop
 800b2d8:	e006      	b.n	800b2e8 <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 800b2da:	bf00      	nop
 800b2dc:	e004      	b.n	800b2e8 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800b2de:	bf00      	nop
 800b2e0:	e002      	b.n	800b2e8 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800b2e2:	bf00      	nop
 800b2e4:	e000      	b.n	800b2e8 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800b2e6:	bf00      	nop
  if (dhcp != NULL) {
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d002      	beq.n	800b2f4 <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7f9 f91b 	bl	8004530 <pbuf_free>
}
 800b2fa:	bf00      	nop
 800b2fc:	3728      	adds	r7, #40	; 0x28
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	20000228 	.word	0x20000228
 800b308:	0801153c 	.word	0x0801153c
 800b30c:	08011668 	.word	0x08011668
 800b310:	0801159c 	.word	0x0801159c
 800b314:	20003794 	.word	0x20003794
 800b318:	2000379c 	.word	0x2000379c

0800b31c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800b31c:	b590      	push	{r4, r7, lr}
 800b31e:	b087      	sub	sp, #28
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	4613      	mov	r3, r2
 800b328:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d109      	bne.n	800b344 <dhcp_create_msg+0x28>
 800b330:	4ba3      	ldr	r3, [pc, #652]	; (800b5c0 <dhcp_create_msg+0x2a4>)
 800b332:	f240 721d 	movw	r2, #1821	; 0x71d
 800b336:	49a3      	ldr	r1, [pc, #652]	; (800b5c4 <dhcp_create_msg+0x2a8>)
 800b338:	48a3      	ldr	r0, [pc, #652]	; (800b5c8 <dhcp_create_msg+0x2ac>)
 800b33a:	f003 fd25 	bl	800ed88 <iprintf>
 800b33e:	f06f 030f 	mvn.w	r3, #15
 800b342:	e138      	b.n	800b5b6 <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d109      	bne.n	800b35e <dhcp_create_msg+0x42>
 800b34a:	4b9d      	ldr	r3, [pc, #628]	; (800b5c0 <dhcp_create_msg+0x2a4>)
 800b34c:	f240 721e 	movw	r2, #1822	; 0x71e
 800b350:	499e      	ldr	r1, [pc, #632]	; (800b5cc <dhcp_create_msg+0x2b0>)
 800b352:	489d      	ldr	r0, [pc, #628]	; (800b5c8 <dhcp_create_msg+0x2ac>)
 800b354:	f003 fd18 	bl	800ed88 <iprintf>
 800b358:	f06f 0305 	mvn.w	r3, #5
 800b35c:	e12b      	b.n	800b5b6 <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d006      	beq.n	800b374 <dhcp_create_msg+0x58>
 800b366:	4b96      	ldr	r3, [pc, #600]	; (800b5c0 <dhcp_create_msg+0x2a4>)
 800b368:	f240 721f 	movw	r2, #1823	; 0x71f
 800b36c:	4998      	ldr	r1, [pc, #608]	; (800b5d0 <dhcp_create_msg+0x2b4>)
 800b36e:	4896      	ldr	r0, [pc, #600]	; (800b5c8 <dhcp_create_msg+0x2ac>)
 800b370:	f003 fd0a 	bl	800ed88 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d006      	beq.n	800b38a <dhcp_create_msg+0x6e>
 800b37c:	4b90      	ldr	r3, [pc, #576]	; (800b5c0 <dhcp_create_msg+0x2a4>)
 800b37e:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800b382:	4994      	ldr	r1, [pc, #592]	; (800b5d4 <dhcp_create_msg+0x2b8>)
 800b384:	4890      	ldr	r0, [pc, #576]	; (800b5c8 <dhcp_create_msg+0x2ac>)
 800b386:	f003 fcff 	bl	800ed88 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800b38a:	2200      	movs	r2, #0
 800b38c:	f44f 719a 	mov.w	r1, #308	; 0x134
 800b390:	2000      	movs	r0, #0
 800b392:	f7f8 fd5b 	bl	8003e4c <pbuf_alloc>
 800b396:	4602      	mov	r2, r0
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d102      	bne.n	800b3aa <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 800b3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3a8:	e105      	b.n	800b5b6 <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	895b      	ldrh	r3, [r3, #10]
 800b3b0:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800b3b4:	d206      	bcs.n	800b3c4 <dhcp_create_msg+0xa8>
 800b3b6:	4b82      	ldr	r3, [pc, #520]	; (800b5c0 <dhcp_create_msg+0x2a4>)
 800b3b8:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b3bc:	4986      	ldr	r1, [pc, #536]	; (800b5d8 <dhcp_create_msg+0x2bc>)
 800b3be:	4882      	ldr	r0, [pc, #520]	; (800b5c8 <dhcp_create_msg+0x2ac>)
 800b3c0:	f003 fce2 	bl	800ed88 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800b3c4:	79fb      	ldrb	r3, [r7, #7]
 800b3c6:	2b03      	cmp	r3, #3
 800b3c8:	d103      	bne.n	800b3d2 <dhcp_create_msg+0xb6>
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	7a5b      	ldrb	r3, [r3, #9]
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	d10d      	bne.n	800b3ee <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	7a9b      	ldrb	r3, [r3, #10]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d105      	bne.n	800b3e6 <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800b3da:	f003 fced 	bl	800edb8 <rand>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	4b7e      	ldr	r3, [pc, #504]	; (800b5dc <dhcp_create_msg+0x2c0>)
 800b3e4:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800b3e6:	4b7d      	ldr	r3, [pc, #500]	; (800b5dc <dhcp_create_msg+0x2c0>)
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	685a      	ldr	r2, [r3, #4]
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	2201      	movs	r2, #1
 800b406:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	691b      	ldr	r3, [r3, #16]
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800b412:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	2200      	movs	r2, #0
 800b41a:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	691c      	ldr	r4, [r3, #16]
 800b424:	4610      	mov	r0, r2
 800b426:	f7f7 ff89 	bl	800333c <lwip_htonl>
 800b42a:	4603      	mov	r3, r0
 800b42c:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	2200      	movs	r2, #0
 800b434:	721a      	strb	r2, [r3, #8]
 800b436:	2200      	movs	r2, #0
 800b438:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	2200      	movs	r2, #0
 800b440:	729a      	strb	r2, [r3, #10]
 800b442:	2200      	movs	r2, #0
 800b444:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	2200      	movs	r2, #0
 800b44c:	731a      	strb	r2, [r3, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	735a      	strb	r2, [r3, #13]
 800b452:	2200      	movs	r2, #0
 800b454:	739a      	strb	r2, [r3, #14]
 800b456:	2200      	movs	r2, #0
 800b458:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800b45a:	79fb      	ldrb	r3, [r7, #7]
 800b45c:	2b08      	cmp	r3, #8
 800b45e:	d010      	beq.n	800b482 <dhcp_create_msg+0x166>
 800b460:	79fb      	ldrb	r3, [r7, #7]
 800b462:	2b04      	cmp	r3, #4
 800b464:	d00d      	beq.n	800b482 <dhcp_create_msg+0x166>
 800b466:	79fb      	ldrb	r3, [r7, #7]
 800b468:	2b07      	cmp	r3, #7
 800b46a:	d00a      	beq.n	800b482 <dhcp_create_msg+0x166>
 800b46c:	79fb      	ldrb	r3, [r7, #7]
 800b46e:	2b03      	cmp	r3, #3
 800b470:	d10d      	bne.n	800b48e <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800b476:	2b05      	cmp	r3, #5
 800b478:	d003      	beq.n	800b482 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	7a5b      	ldrb	r3, [r3, #9]
 800b47e:	2b04      	cmp	r3, #4
 800b480:	d105      	bne.n	800b48e <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	1d1a      	adds	r2, r3, #4
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	6812      	ldr	r2, [r2, #0]
 800b48c:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	2200      	movs	r2, #0
 800b494:	741a      	strb	r2, [r3, #16]
 800b496:	2200      	movs	r2, #0
 800b498:	745a      	strb	r2, [r3, #17]
 800b49a:	2200      	movs	r2, #0
 800b49c:	749a      	strb	r2, [r3, #18]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	751a      	strb	r2, [r3, #20]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	755a      	strb	r2, [r3, #21]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	759a      	strb	r2, [r3, #22]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	761a      	strb	r2, [r3, #24]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	765a      	strb	r2, [r3, #25]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	769a      	strb	r2, [r3, #26]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	82fb      	strh	r3, [r7, #22]
 800b4ce:	e019      	b.n	800b504 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	8afa      	ldrh	r2, [r7, #22]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d208      	bcs.n	800b4f0 <dhcp_create_msg+0x1d4>
 800b4de:	8afb      	ldrh	r3, [r7, #22]
 800b4e0:	2b05      	cmp	r3, #5
 800b4e2:	d805      	bhi.n	800b4f0 <dhcp_create_msg+0x1d4>
 800b4e4:	8afb      	ldrh	r3, [r7, #22]
 800b4e6:	68fa      	ldr	r2, [r7, #12]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 800b4ee:	e000      	b.n	800b4f2 <dhcp_create_msg+0x1d6>
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	691a      	ldr	r2, [r3, #16]
 800b4f6:	8afb      	ldrh	r3, [r7, #22]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	460a      	mov	r2, r1
 800b4fc:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800b4fe:	8afb      	ldrh	r3, [r7, #22]
 800b500:	3301      	adds	r3, #1
 800b502:	82fb      	strh	r3, [r7, #22]
 800b504:	8afb      	ldrh	r3, [r7, #22]
 800b506:	2b0f      	cmp	r3, #15
 800b508:	d9e2      	bls.n	800b4d0 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800b50a:	2300      	movs	r3, #0
 800b50c:	82fb      	strh	r3, [r7, #22]
 800b50e:	e009      	b.n	800b524 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	691a      	ldr	r2, [r3, #16]
 800b514:	8afb      	ldrh	r3, [r7, #22]
 800b516:	4413      	add	r3, r2
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800b51e:	8afb      	ldrh	r3, [r7, #22]
 800b520:	3301      	adds	r3, #1
 800b522:	82fb      	strh	r3, [r7, #22]
 800b524:	8afb      	ldrh	r3, [r7, #22]
 800b526:	2b3f      	cmp	r3, #63	; 0x3f
 800b528:	d9f2      	bls.n	800b510 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800b52a:	2300      	movs	r3, #0
 800b52c:	82fb      	strh	r3, [r7, #22]
 800b52e:	e009      	b.n	800b544 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	691a      	ldr	r2, [r3, #16]
 800b534:	8afb      	ldrh	r3, [r7, #22]
 800b536:	4413      	add	r3, r2
 800b538:	2200      	movs	r2, #0
 800b53a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800b53e:	8afb      	ldrh	r3, [r7, #22]
 800b540:	3301      	adds	r3, #1
 800b542:	82fb      	strh	r3, [r7, #22]
 800b544:	8afb      	ldrh	r3, [r7, #22]
 800b546:	2b7f      	cmp	r3, #127	; 0x7f
 800b548:	d9f2      	bls.n	800b530 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	2200      	movs	r2, #0
 800b550:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800b554:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800b558:	2200      	movs	r2, #0
 800b55a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800b55e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800b562:	2200      	movs	r2, #0
 800b564:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800b568:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800b56c:	2200      	movs	r2, #0
 800b56e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800b572:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	2200      	movs	r2, #0
 800b57a:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800b57c:	2300      	movs	r3, #0
 800b57e:	82fb      	strh	r3, [r7, #22]
 800b580:	e00b      	b.n	800b59a <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	691a      	ldr	r2, [r3, #16]
 800b586:	8afb      	ldrh	r3, [r7, #22]
 800b588:	8af9      	ldrh	r1, [r7, #22]
 800b58a:	b2c9      	uxtb	r1, r1
 800b58c:	4413      	add	r3, r2
 800b58e:	460a      	mov	r2, r1
 800b590:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800b594:	8afb      	ldrh	r3, [r7, #22]
 800b596:	3301      	adds	r3, #1
 800b598:	82fb      	strh	r3, [r7, #22]
 800b59a:	8afb      	ldrh	r3, [r7, #22]
 800b59c:	2b43      	cmp	r3, #67	; 0x43
 800b59e:	d9f0      	bls.n	800b582 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	2135      	movs	r1, #53	; 0x35
 800b5a4:	68b8      	ldr	r0, [r7, #8]
 800b5a6:	f7ff fa4d 	bl	800aa44 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 800b5aa:	79fb      	ldrb	r3, [r7, #7]
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	68b8      	ldr	r0, [r7, #8]
 800b5b0:	f7ff fa82 	bl	800aab8 <dhcp_option_byte>
  return ERR_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	371c      	adds	r7, #28
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd90      	pop	{r4, r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	0801153c 	.word	0x0801153c
 800b5c4:	0801186c 	.word	0x0801186c
 800b5c8:	0801159c 	.word	0x0801159c
 800b5cc:	0801188c 	.word	0x0801188c
 800b5d0:	080118ac 	.word	0x080118ac
 800b5d4:	080118d4 	.word	0x080118d4
 800b5d8:	080118fc 	.word	0x080118fc
 800b5dc:	20000114 	.word	0x20000114

0800b5e0 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d107      	bne.n	800b5fe <dhcp_delete_msg+0x1e>
 800b5ee:	4b18      	ldr	r3, [pc, #96]	; (800b650 <dhcp_delete_msg+0x70>)
 800b5f0:	f240 726d 	movw	r2, #1901	; 0x76d
 800b5f4:	4917      	ldr	r1, [pc, #92]	; (800b654 <dhcp_delete_msg+0x74>)
 800b5f6:	4818      	ldr	r0, [pc, #96]	; (800b658 <dhcp_delete_msg+0x78>)
 800b5f8:	f003 fbc6 	bl	800ed88 <iprintf>
 800b5fc:	e024      	b.n	800b648 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d106      	bne.n	800b614 <dhcp_delete_msg+0x34>
 800b606:	4b12      	ldr	r3, [pc, #72]	; (800b650 <dhcp_delete_msg+0x70>)
 800b608:	f240 726e 	movw	r2, #1902	; 0x76e
 800b60c:	4913      	ldr	r1, [pc, #76]	; (800b65c <dhcp_delete_msg+0x7c>)
 800b60e:	4812      	ldr	r0, [pc, #72]	; (800b658 <dhcp_delete_msg+0x78>)
 800b610:	f003 fbba 	bl	800ed88 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d106      	bne.n	800b62a <dhcp_delete_msg+0x4a>
 800b61c:	4b0c      	ldr	r3, [pc, #48]	; (800b650 <dhcp_delete_msg+0x70>)
 800b61e:	f240 726f 	movw	r2, #1903	; 0x76f
 800b622:	490f      	ldr	r1, [pc, #60]	; (800b660 <dhcp_delete_msg+0x80>)
 800b624:	480c      	ldr	r0, [pc, #48]	; (800b658 <dhcp_delete_msg+0x78>)
 800b626:	f003 fbaf 	bl	800ed88 <iprintf>
  if (dhcp->p_out != NULL) {
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d004      	beq.n	800b63c <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	4618      	mov	r0, r3
 800b638:	f7f8 ff7a 	bl	8004530 <pbuf_free>
  }
  dhcp->p_out = NULL;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	611a      	str	r2, [r3, #16]
}
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	0801153c 	.word	0x0801153c
 800b654:	0801193c 	.word	0x0801193c
 800b658:	0801159c 	.word	0x0801159c
 800b65c:	0801195c 	.word	0x0801195c
 800b660:	08011984 	.word	0x08011984

0800b664 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d107      	bne.n	800b682 <dhcp_option_trailer+0x1e>
 800b672:	4b24      	ldr	r3, [pc, #144]	; (800b704 <dhcp_option_trailer+0xa0>)
 800b674:	f240 7282 	movw	r2, #1922	; 0x782
 800b678:	4923      	ldr	r1, [pc, #140]	; (800b708 <dhcp_option_trailer+0xa4>)
 800b67a:	4824      	ldr	r0, [pc, #144]	; (800b70c <dhcp_option_trailer+0xa8>)
 800b67c:	f003 fb84 	bl	800ed88 <iprintf>
 800b680:	e03c      	b.n	800b6fc <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d106      	bne.n	800b698 <dhcp_option_trailer+0x34>
 800b68a:	4b1e      	ldr	r3, [pc, #120]	; (800b704 <dhcp_option_trailer+0xa0>)
 800b68c:	f240 7283 	movw	r2, #1923	; 0x783
 800b690:	491f      	ldr	r1, [pc, #124]	; (800b710 <dhcp_option_trailer+0xac>)
 800b692:	481e      	ldr	r0, [pc, #120]	; (800b70c <dhcp_option_trailer+0xa8>)
 800b694:	f003 fb78 	bl	800ed88 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	8a9b      	ldrh	r3, [r3, #20]
 800b69c:	2b43      	cmp	r3, #67	; 0x43
 800b69e:	d906      	bls.n	800b6ae <dhcp_option_trailer+0x4a>
 800b6a0:	4b18      	ldr	r3, [pc, #96]	; (800b704 <dhcp_option_trailer+0xa0>)
 800b6a2:	f240 7284 	movw	r2, #1924	; 0x784
 800b6a6:	491b      	ldr	r1, [pc, #108]	; (800b714 <dhcp_option_trailer+0xb0>)
 800b6a8:	4818      	ldr	r0, [pc, #96]	; (800b70c <dhcp_option_trailer+0xa8>)
 800b6aa:	f003 fb6d 	bl	800ed88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	691a      	ldr	r2, [r3, #16]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	8a9b      	ldrh	r3, [r3, #20]
 800b6b6:	1c59      	adds	r1, r3, #1
 800b6b8:	b288      	uxth	r0, r1
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	8288      	strh	r0, [r1, #20]
 800b6be:	4413      	add	r3, r2
 800b6c0:	22ff      	movs	r2, #255	; 0xff
 800b6c2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800b6c6:	e00b      	b.n	800b6e0 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	691a      	ldr	r2, [r3, #16]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	8a9b      	ldrh	r3, [r3, #20]
 800b6d0:	1c59      	adds	r1, r3, #1
 800b6d2:	b288      	uxth	r0, r1
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	8288      	strh	r0, [r1, #20]
 800b6d8:	4413      	add	r3, r2
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	8a9b      	ldrh	r3, [r3, #20]
 800b6e4:	2b43      	cmp	r3, #67	; 0x43
 800b6e6:	d905      	bls.n	800b6f4 <dhcp_option_trailer+0x90>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	8a9b      	ldrh	r3, [r3, #20]
 800b6ec:	f003 0303 	and.w	r3, r3, #3
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d003      	beq.n	800b6fc <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800b6f8:	2b43      	cmp	r3, #67	; 0x43
 800b6fa:	d9e5      	bls.n	800b6c8 <dhcp_option_trailer+0x64>
  }
}
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	0801153c 	.word	0x0801153c
 800b708:	080119ac 	.word	0x080119ac
 800b70c:	0801159c 	.word	0x0801159c
 800b710:	080119d0 	.word	0x080119d0
 800b714:	080119fc 	.word	0x080119fc

0800b718 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d017      	beq.n	800b756 <dhcp_supplied_address+0x3e>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d013      	beq.n	800b756 <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	7a5b      	ldrb	r3, [r3, #9]
 800b738:	2b0a      	cmp	r3, #10
 800b73a:	d007      	beq.n	800b74c <dhcp_supplied_address+0x34>
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	7a5b      	ldrb	r3, [r3, #9]
 800b740:	2b05      	cmp	r3, #5
 800b742:	d003      	beq.n	800b74c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800b748:	2b04      	cmp	r3, #4
 800b74a:	d101      	bne.n	800b750 <dhcp_supplied_address+0x38>
 800b74c:	2301      	movs	r3, #1
 800b74e:	e000      	b.n	800b752 <dhcp_supplied_address+0x3a>
 800b750:	2300      	movs	r3, #0
 800b752:	b2db      	uxtb	r3, r3
 800b754:	e000      	b.n	800b758 <dhcp_supplied_address+0x40>
  }
  return 0;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b76c:	4915      	ldr	r1, [pc, #84]	; (800b7c4 <etharp_free_entry+0x60>)
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	4613      	mov	r3, r2
 800b772:	005b      	lsls	r3, r3, #1
 800b774:	4413      	add	r3, r2
 800b776:	00db      	lsls	r3, r3, #3
 800b778:	440b      	add	r3, r1
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d013      	beq.n	800b7a8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b780:	4910      	ldr	r1, [pc, #64]	; (800b7c4 <etharp_free_entry+0x60>)
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	4613      	mov	r3, r2
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	4413      	add	r3, r2
 800b78a:	00db      	lsls	r3, r3, #3
 800b78c:	440b      	add	r3, r1
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4618      	mov	r0, r3
 800b792:	f7f8 fecd 	bl	8004530 <pbuf_free>
    arp_table[i].q = NULL;
 800b796:	490b      	ldr	r1, [pc, #44]	; (800b7c4 <etharp_free_entry+0x60>)
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	4613      	mov	r3, r2
 800b79c:	005b      	lsls	r3, r3, #1
 800b79e:	4413      	add	r3, r2
 800b7a0:	00db      	lsls	r3, r3, #3
 800b7a2:	440b      	add	r3, r1
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b7a8:	4906      	ldr	r1, [pc, #24]	; (800b7c4 <etharp_free_entry+0x60>)
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	005b      	lsls	r3, r3, #1
 800b7b0:	4413      	add	r3, r2
 800b7b2:	00db      	lsls	r3, r3, #3
 800b7b4:	440b      	add	r3, r1
 800b7b6:	3314      	adds	r3, #20
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b7bc:	bf00      	nop
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	20000118 	.word	0x20000118

0800b7c8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	71fb      	strb	r3, [r7, #7]
 800b7d2:	e096      	b.n	800b902 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b7d4:	79fa      	ldrb	r2, [r7, #7]
 800b7d6:	494f      	ldr	r1, [pc, #316]	; (800b914 <etharp_tmr+0x14c>)
 800b7d8:	4613      	mov	r3, r2
 800b7da:	005b      	lsls	r3, r3, #1
 800b7dc:	4413      	add	r3, r2
 800b7de:	00db      	lsls	r3, r3, #3
 800b7e0:	440b      	add	r3, r1
 800b7e2:	3314      	adds	r3, #20
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800b7e8:	79bb      	ldrb	r3, [r7, #6]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f000 8086 	beq.w	800b8fc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800b7f0:	79fa      	ldrb	r2, [r7, #7]
 800b7f2:	4948      	ldr	r1, [pc, #288]	; (800b914 <etharp_tmr+0x14c>)
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	005b      	lsls	r3, r3, #1
 800b7f8:	4413      	add	r3, r2
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	440b      	add	r3, r1
 800b7fe:	3312      	adds	r3, #18
 800b800:	881b      	ldrh	r3, [r3, #0]
 800b802:	3301      	adds	r3, #1
 800b804:	b298      	uxth	r0, r3
 800b806:	4943      	ldr	r1, [pc, #268]	; (800b914 <etharp_tmr+0x14c>)
 800b808:	4613      	mov	r3, r2
 800b80a:	005b      	lsls	r3, r3, #1
 800b80c:	4413      	add	r3, r2
 800b80e:	00db      	lsls	r3, r3, #3
 800b810:	440b      	add	r3, r1
 800b812:	3312      	adds	r3, #18
 800b814:	4602      	mov	r2, r0
 800b816:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b818:	79fa      	ldrb	r2, [r7, #7]
 800b81a:	493e      	ldr	r1, [pc, #248]	; (800b914 <etharp_tmr+0x14c>)
 800b81c:	4613      	mov	r3, r2
 800b81e:	005b      	lsls	r3, r3, #1
 800b820:	4413      	add	r3, r2
 800b822:	00db      	lsls	r3, r3, #3
 800b824:	440b      	add	r3, r1
 800b826:	3312      	adds	r3, #18
 800b828:	881b      	ldrh	r3, [r3, #0]
 800b82a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b82e:	d215      	bcs.n	800b85c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b830:	79fa      	ldrb	r2, [r7, #7]
 800b832:	4938      	ldr	r1, [pc, #224]	; (800b914 <etharp_tmr+0x14c>)
 800b834:	4613      	mov	r3, r2
 800b836:	005b      	lsls	r3, r3, #1
 800b838:	4413      	add	r3, r2
 800b83a:	00db      	lsls	r3, r3, #3
 800b83c:	440b      	add	r3, r1
 800b83e:	3314      	adds	r3, #20
 800b840:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b842:	2b01      	cmp	r3, #1
 800b844:	d10f      	bne.n	800b866 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b846:	79fa      	ldrb	r2, [r7, #7]
 800b848:	4932      	ldr	r1, [pc, #200]	; (800b914 <etharp_tmr+0x14c>)
 800b84a:	4613      	mov	r3, r2
 800b84c:	005b      	lsls	r3, r3, #1
 800b84e:	4413      	add	r3, r2
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	440b      	add	r3, r1
 800b854:	3312      	adds	r3, #18
 800b856:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b858:	2b04      	cmp	r3, #4
 800b85a:	d904      	bls.n	800b866 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b85c:	79fb      	ldrb	r3, [r7, #7]
 800b85e:	4618      	mov	r0, r3
 800b860:	f7ff ff80 	bl	800b764 <etharp_free_entry>
 800b864:	e04a      	b.n	800b8fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b866:	79fa      	ldrb	r2, [r7, #7]
 800b868:	492a      	ldr	r1, [pc, #168]	; (800b914 <etharp_tmr+0x14c>)
 800b86a:	4613      	mov	r3, r2
 800b86c:	005b      	lsls	r3, r3, #1
 800b86e:	4413      	add	r3, r2
 800b870:	00db      	lsls	r3, r3, #3
 800b872:	440b      	add	r3, r1
 800b874:	3314      	adds	r3, #20
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b03      	cmp	r3, #3
 800b87a:	d10a      	bne.n	800b892 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b87c:	79fa      	ldrb	r2, [r7, #7]
 800b87e:	4925      	ldr	r1, [pc, #148]	; (800b914 <etharp_tmr+0x14c>)
 800b880:	4613      	mov	r3, r2
 800b882:	005b      	lsls	r3, r3, #1
 800b884:	4413      	add	r3, r2
 800b886:	00db      	lsls	r3, r3, #3
 800b888:	440b      	add	r3, r1
 800b88a:	3314      	adds	r3, #20
 800b88c:	2204      	movs	r2, #4
 800b88e:	701a      	strb	r2, [r3, #0]
 800b890:	e034      	b.n	800b8fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b892:	79fa      	ldrb	r2, [r7, #7]
 800b894:	491f      	ldr	r1, [pc, #124]	; (800b914 <etharp_tmr+0x14c>)
 800b896:	4613      	mov	r3, r2
 800b898:	005b      	lsls	r3, r3, #1
 800b89a:	4413      	add	r3, r2
 800b89c:	00db      	lsls	r3, r3, #3
 800b89e:	440b      	add	r3, r1
 800b8a0:	3314      	adds	r3, #20
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	2b04      	cmp	r3, #4
 800b8a6:	d10a      	bne.n	800b8be <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b8a8:	79fa      	ldrb	r2, [r7, #7]
 800b8aa:	491a      	ldr	r1, [pc, #104]	; (800b914 <etharp_tmr+0x14c>)
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	005b      	lsls	r3, r3, #1
 800b8b0:	4413      	add	r3, r2
 800b8b2:	00db      	lsls	r3, r3, #3
 800b8b4:	440b      	add	r3, r1
 800b8b6:	3314      	adds	r3, #20
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	701a      	strb	r2, [r3, #0]
 800b8bc:	e01e      	b.n	800b8fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b8be:	79fa      	ldrb	r2, [r7, #7]
 800b8c0:	4914      	ldr	r1, [pc, #80]	; (800b914 <etharp_tmr+0x14c>)
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	005b      	lsls	r3, r3, #1
 800b8c6:	4413      	add	r3, r2
 800b8c8:	00db      	lsls	r3, r3, #3
 800b8ca:	440b      	add	r3, r1
 800b8cc:	3314      	adds	r3, #20
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d113      	bne.n	800b8fc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b8d4:	79fa      	ldrb	r2, [r7, #7]
 800b8d6:	490f      	ldr	r1, [pc, #60]	; (800b914 <etharp_tmr+0x14c>)
 800b8d8:	4613      	mov	r3, r2
 800b8da:	005b      	lsls	r3, r3, #1
 800b8dc:	4413      	add	r3, r2
 800b8de:	00db      	lsls	r3, r3, #3
 800b8e0:	440b      	add	r3, r1
 800b8e2:	3308      	adds	r3, #8
 800b8e4:	6818      	ldr	r0, [r3, #0]
 800b8e6:	79fa      	ldrb	r2, [r7, #7]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	005b      	lsls	r3, r3, #1
 800b8ec:	4413      	add	r3, r2
 800b8ee:	00db      	lsls	r3, r3, #3
 800b8f0:	4a08      	ldr	r2, [pc, #32]	; (800b914 <etharp_tmr+0x14c>)
 800b8f2:	4413      	add	r3, r2
 800b8f4:	3304      	adds	r3, #4
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	f000 fe3c 	bl	800c574 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b8fc:	79fb      	ldrb	r3, [r7, #7]
 800b8fe:	3301      	adds	r3, #1
 800b900:	71fb      	strb	r3, [r7, #7]
 800b902:	79fb      	ldrb	r3, [r7, #7]
 800b904:	2b09      	cmp	r3, #9
 800b906:	f67f af65 	bls.w	800b7d4 <etharp_tmr+0xc>
      }
    }
  }
}
 800b90a:	bf00      	nop
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	20000118 	.word	0x20000118

0800b918 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b088      	sub	sp, #32
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	460b      	mov	r3, r1
 800b922:	607a      	str	r2, [r7, #4]
 800b924:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b926:	230a      	movs	r3, #10
 800b928:	77fb      	strb	r3, [r7, #31]
 800b92a:	230a      	movs	r3, #10
 800b92c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800b92e:	230a      	movs	r3, #10
 800b930:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800b932:	2300      	movs	r3, #0
 800b934:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800b936:	230a      	movs	r3, #10
 800b938:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b93a:	2300      	movs	r3, #0
 800b93c:	833b      	strh	r3, [r7, #24]
 800b93e:	2300      	movs	r3, #0
 800b940:	82fb      	strh	r3, [r7, #22]
 800b942:	2300      	movs	r3, #0
 800b944:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b946:	2300      	movs	r3, #0
 800b948:	773b      	strb	r3, [r7, #28]
 800b94a:	e093      	b.n	800ba74 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800b94c:	7f3a      	ldrb	r2, [r7, #28]
 800b94e:	4990      	ldr	r1, [pc, #576]	; (800bb90 <etharp_find_entry+0x278>)
 800b950:	4613      	mov	r3, r2
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	4413      	add	r3, r2
 800b956:	00db      	lsls	r3, r3, #3
 800b958:	440b      	add	r3, r1
 800b95a:	3314      	adds	r3, #20
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b960:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b964:	2b0a      	cmp	r3, #10
 800b966:	d105      	bne.n	800b974 <etharp_find_entry+0x5c>
 800b968:	7cfb      	ldrb	r3, [r7, #19]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d102      	bne.n	800b974 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800b96e:	7f3b      	ldrb	r3, [r7, #28]
 800b970:	777b      	strb	r3, [r7, #29]
 800b972:	e07c      	b.n	800ba6e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b974:	7cfb      	ldrb	r3, [r7, #19]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d079      	beq.n	800ba6e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b97a:	7cfb      	ldrb	r3, [r7, #19]
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d009      	beq.n	800b994 <etharp_find_entry+0x7c>
 800b980:	7cfb      	ldrb	r3, [r7, #19]
 800b982:	2b01      	cmp	r3, #1
 800b984:	d806      	bhi.n	800b994 <etharp_find_entry+0x7c>
 800b986:	4b83      	ldr	r3, [pc, #524]	; (800bb94 <etharp_find_entry+0x27c>)
 800b988:	f44f 7293 	mov.w	r2, #294	; 0x126
 800b98c:	4982      	ldr	r1, [pc, #520]	; (800bb98 <etharp_find_entry+0x280>)
 800b98e:	4883      	ldr	r0, [pc, #524]	; (800bb9c <etharp_find_entry+0x284>)
 800b990:	f003 f9fa 	bl	800ed88 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00f      	beq.n	800b9ba <etharp_find_entry+0xa2>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6819      	ldr	r1, [r3, #0]
 800b99e:	7f3a      	ldrb	r2, [r7, #28]
 800b9a0:	487b      	ldr	r0, [pc, #492]	; (800bb90 <etharp_find_entry+0x278>)
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	005b      	lsls	r3, r3, #1
 800b9a6:	4413      	add	r3, r2
 800b9a8:	00db      	lsls	r3, r3, #3
 800b9aa:	4403      	add	r3, r0
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4299      	cmp	r1, r3
 800b9b2:	d102      	bne.n	800b9ba <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b9b4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b9b8:	e0e5      	b.n	800bb86 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b9ba:	7cfb      	ldrb	r3, [r7, #19]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d13b      	bne.n	800ba38 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b9c0:	7f3a      	ldrb	r2, [r7, #28]
 800b9c2:	4973      	ldr	r1, [pc, #460]	; (800bb90 <etharp_find_entry+0x278>)
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	4413      	add	r3, r2
 800b9ca:	00db      	lsls	r3, r3, #3
 800b9cc:	440b      	add	r3, r1
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d018      	beq.n	800ba06 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800b9d4:	7f3a      	ldrb	r2, [r7, #28]
 800b9d6:	496e      	ldr	r1, [pc, #440]	; (800bb90 <etharp_find_entry+0x278>)
 800b9d8:	4613      	mov	r3, r2
 800b9da:	005b      	lsls	r3, r3, #1
 800b9dc:	4413      	add	r3, r2
 800b9de:	00db      	lsls	r3, r3, #3
 800b9e0:	440b      	add	r3, r1
 800b9e2:	3312      	adds	r3, #18
 800b9e4:	881b      	ldrh	r3, [r3, #0]
 800b9e6:	8b3a      	ldrh	r2, [r7, #24]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d840      	bhi.n	800ba6e <etharp_find_entry+0x156>
            old_queue = i;
 800b9ec:	7f3b      	ldrb	r3, [r7, #28]
 800b9ee:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800b9f0:	7f3a      	ldrb	r2, [r7, #28]
 800b9f2:	4967      	ldr	r1, [pc, #412]	; (800bb90 <etharp_find_entry+0x278>)
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	005b      	lsls	r3, r3, #1
 800b9f8:	4413      	add	r3, r2
 800b9fa:	00db      	lsls	r3, r3, #3
 800b9fc:	440b      	add	r3, r1
 800b9fe:	3312      	adds	r3, #18
 800ba00:	881b      	ldrh	r3, [r3, #0]
 800ba02:	833b      	strh	r3, [r7, #24]
 800ba04:	e033      	b.n	800ba6e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ba06:	7f3a      	ldrb	r2, [r7, #28]
 800ba08:	4961      	ldr	r1, [pc, #388]	; (800bb90 <etharp_find_entry+0x278>)
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	005b      	lsls	r3, r3, #1
 800ba0e:	4413      	add	r3, r2
 800ba10:	00db      	lsls	r3, r3, #3
 800ba12:	440b      	add	r3, r1
 800ba14:	3312      	adds	r3, #18
 800ba16:	881b      	ldrh	r3, [r3, #0]
 800ba18:	8afa      	ldrh	r2, [r7, #22]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d827      	bhi.n	800ba6e <etharp_find_entry+0x156>
            old_pending = i;
 800ba1e:	7f3b      	ldrb	r3, [r7, #28]
 800ba20:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800ba22:	7f3a      	ldrb	r2, [r7, #28]
 800ba24:	495a      	ldr	r1, [pc, #360]	; (800bb90 <etharp_find_entry+0x278>)
 800ba26:	4613      	mov	r3, r2
 800ba28:	005b      	lsls	r3, r3, #1
 800ba2a:	4413      	add	r3, r2
 800ba2c:	00db      	lsls	r3, r3, #3
 800ba2e:	440b      	add	r3, r1
 800ba30:	3312      	adds	r3, #18
 800ba32:	881b      	ldrh	r3, [r3, #0]
 800ba34:	82fb      	strh	r3, [r7, #22]
 800ba36:	e01a      	b.n	800ba6e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ba38:	7cfb      	ldrb	r3, [r7, #19]
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d917      	bls.n	800ba6e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ba3e:	7f3a      	ldrb	r2, [r7, #28]
 800ba40:	4953      	ldr	r1, [pc, #332]	; (800bb90 <etharp_find_entry+0x278>)
 800ba42:	4613      	mov	r3, r2
 800ba44:	005b      	lsls	r3, r3, #1
 800ba46:	4413      	add	r3, r2
 800ba48:	00db      	lsls	r3, r3, #3
 800ba4a:	440b      	add	r3, r1
 800ba4c:	3312      	adds	r3, #18
 800ba4e:	881b      	ldrh	r3, [r3, #0]
 800ba50:	8aba      	ldrh	r2, [r7, #20]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d80b      	bhi.n	800ba6e <etharp_find_entry+0x156>
            old_stable = i;
 800ba56:	7f3b      	ldrb	r3, [r7, #28]
 800ba58:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800ba5a:	7f3a      	ldrb	r2, [r7, #28]
 800ba5c:	494c      	ldr	r1, [pc, #304]	; (800bb90 <etharp_find_entry+0x278>)
 800ba5e:	4613      	mov	r3, r2
 800ba60:	005b      	lsls	r3, r3, #1
 800ba62:	4413      	add	r3, r2
 800ba64:	00db      	lsls	r3, r3, #3
 800ba66:	440b      	add	r3, r1
 800ba68:	3312      	adds	r3, #18
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ba6e:	7f3b      	ldrb	r3, [r7, #28]
 800ba70:	3301      	adds	r3, #1
 800ba72:	773b      	strb	r3, [r7, #28]
 800ba74:	7f3b      	ldrb	r3, [r7, #28]
 800ba76:	2b09      	cmp	r3, #9
 800ba78:	f67f af68 	bls.w	800b94c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ba7c:	7afb      	ldrb	r3, [r7, #11]
 800ba7e:	f003 0302 	and.w	r3, r3, #2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d108      	bne.n	800ba98 <etharp_find_entry+0x180>
 800ba86:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ba8a:	2b0a      	cmp	r3, #10
 800ba8c:	d107      	bne.n	800ba9e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ba8e:	7afb      	ldrb	r3, [r7, #11]
 800ba90:	f003 0301 	and.w	r3, r3, #1
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d102      	bne.n	800ba9e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800ba98:	f04f 33ff 	mov.w	r3, #4294967295
 800ba9c:	e073      	b.n	800bb86 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ba9e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800baa2:	2b09      	cmp	r3, #9
 800baa4:	dc02      	bgt.n	800baac <etharp_find_entry+0x194>
    i = empty;
 800baa6:	7f7b      	ldrb	r3, [r7, #29]
 800baa8:	773b      	strb	r3, [r7, #28]
 800baaa:	e036      	b.n	800bb1a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800baac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800bab0:	2b09      	cmp	r3, #9
 800bab2:	dc13      	bgt.n	800badc <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800bab4:	7fbb      	ldrb	r3, [r7, #30]
 800bab6:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bab8:	7f3a      	ldrb	r2, [r7, #28]
 800baba:	4935      	ldr	r1, [pc, #212]	; (800bb90 <etharp_find_entry+0x278>)
 800babc:	4613      	mov	r3, r2
 800babe:	005b      	lsls	r3, r3, #1
 800bac0:	4413      	add	r3, r2
 800bac2:	00db      	lsls	r3, r3, #3
 800bac4:	440b      	add	r3, r1
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d018      	beq.n	800bafe <etharp_find_entry+0x1e6>
 800bacc:	4b31      	ldr	r3, [pc, #196]	; (800bb94 <etharp_find_entry+0x27c>)
 800bace:	f240 126f 	movw	r2, #367	; 0x16f
 800bad2:	4933      	ldr	r1, [pc, #204]	; (800bba0 <etharp_find_entry+0x288>)
 800bad4:	4831      	ldr	r0, [pc, #196]	; (800bb9c <etharp_find_entry+0x284>)
 800bad6:	f003 f957 	bl	800ed88 <iprintf>
 800bada:	e010      	b.n	800bafe <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800badc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bae0:	2b09      	cmp	r3, #9
 800bae2:	dc02      	bgt.n	800baea <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800bae4:	7ffb      	ldrb	r3, [r7, #31]
 800bae6:	773b      	strb	r3, [r7, #28]
 800bae8:	e009      	b.n	800bafe <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800baea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800baee:	2b09      	cmp	r3, #9
 800baf0:	dc02      	bgt.n	800baf8 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800baf2:	7efb      	ldrb	r3, [r7, #27]
 800baf4:	773b      	strb	r3, [r7, #28]
 800baf6:	e002      	b.n	800bafe <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800baf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bafc:	e043      	b.n	800bb86 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bafe:	7f3b      	ldrb	r3, [r7, #28]
 800bb00:	2b09      	cmp	r3, #9
 800bb02:	d906      	bls.n	800bb12 <etharp_find_entry+0x1fa>
 800bb04:	4b23      	ldr	r3, [pc, #140]	; (800bb94 <etharp_find_entry+0x27c>)
 800bb06:	f240 1281 	movw	r2, #385	; 0x181
 800bb0a:	4926      	ldr	r1, [pc, #152]	; (800bba4 <etharp_find_entry+0x28c>)
 800bb0c:	4823      	ldr	r0, [pc, #140]	; (800bb9c <etharp_find_entry+0x284>)
 800bb0e:	f003 f93b 	bl	800ed88 <iprintf>
    etharp_free_entry(i);
 800bb12:	7f3b      	ldrb	r3, [r7, #28]
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7ff fe25 	bl	800b764 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bb1a:	7f3b      	ldrb	r3, [r7, #28]
 800bb1c:	2b09      	cmp	r3, #9
 800bb1e:	d906      	bls.n	800bb2e <etharp_find_entry+0x216>
 800bb20:	4b1c      	ldr	r3, [pc, #112]	; (800bb94 <etharp_find_entry+0x27c>)
 800bb22:	f240 1285 	movw	r2, #389	; 0x185
 800bb26:	491f      	ldr	r1, [pc, #124]	; (800bba4 <etharp_find_entry+0x28c>)
 800bb28:	481c      	ldr	r0, [pc, #112]	; (800bb9c <etharp_find_entry+0x284>)
 800bb2a:	f003 f92d 	bl	800ed88 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bb2e:	7f3a      	ldrb	r2, [r7, #28]
 800bb30:	4917      	ldr	r1, [pc, #92]	; (800bb90 <etharp_find_entry+0x278>)
 800bb32:	4613      	mov	r3, r2
 800bb34:	005b      	lsls	r3, r3, #1
 800bb36:	4413      	add	r3, r2
 800bb38:	00db      	lsls	r3, r3, #3
 800bb3a:	440b      	add	r3, r1
 800bb3c:	3314      	adds	r3, #20
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d006      	beq.n	800bb52 <etharp_find_entry+0x23a>
 800bb44:	4b13      	ldr	r3, [pc, #76]	; (800bb94 <etharp_find_entry+0x27c>)
 800bb46:	f240 1287 	movw	r2, #391	; 0x187
 800bb4a:	4917      	ldr	r1, [pc, #92]	; (800bba8 <etharp_find_entry+0x290>)
 800bb4c:	4813      	ldr	r0, [pc, #76]	; (800bb9c <etharp_find_entry+0x284>)
 800bb4e:	f003 f91b 	bl	800ed88 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00a      	beq.n	800bb6e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800bb58:	7f3a      	ldrb	r2, [r7, #28]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6819      	ldr	r1, [r3, #0]
 800bb5e:	480c      	ldr	r0, [pc, #48]	; (800bb90 <etharp_find_entry+0x278>)
 800bb60:	4613      	mov	r3, r2
 800bb62:	005b      	lsls	r3, r3, #1
 800bb64:	4413      	add	r3, r2
 800bb66:	00db      	lsls	r3, r3, #3
 800bb68:	4403      	add	r3, r0
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800bb6e:	7f3a      	ldrb	r2, [r7, #28]
 800bb70:	4907      	ldr	r1, [pc, #28]	; (800bb90 <etharp_find_entry+0x278>)
 800bb72:	4613      	mov	r3, r2
 800bb74:	005b      	lsls	r3, r3, #1
 800bb76:	4413      	add	r3, r2
 800bb78:	00db      	lsls	r3, r3, #3
 800bb7a:	440b      	add	r3, r1
 800bb7c:	3312      	adds	r3, #18
 800bb7e:	2200      	movs	r2, #0
 800bb80:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800bb82:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3720      	adds	r7, #32
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	20000118 	.word	0x20000118
 800bb94:	08011a3c 	.word	0x08011a3c
 800bb98:	08011a74 	.word	0x08011a74
 800bb9c:	08011ab4 	.word	0x08011ab4
 800bba0:	08011adc 	.word	0x08011adc
 800bba4:	08011af4 	.word	0x08011af4
 800bba8:	08011b08 	.word	0x08011b08

0800bbac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af02      	add	r7, sp, #8
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
 800bbb8:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbc0:	2b06      	cmp	r3, #6
 800bbc2:	d006      	beq.n	800bbd2 <etharp_update_arp_entry+0x26>
 800bbc4:	4b48      	ldr	r3, [pc, #288]	; (800bce8 <etharp_update_arp_entry+0x13c>)
 800bbc6:	f240 12ab 	movw	r2, #427	; 0x1ab
 800bbca:	4948      	ldr	r1, [pc, #288]	; (800bcec <etharp_update_arp_entry+0x140>)
 800bbcc:	4848      	ldr	r0, [pc, #288]	; (800bcf0 <etharp_update_arp_entry+0x144>)
 800bbce:	f003 f8db 	bl	800ed88 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d012      	beq.n	800bbfe <etharp_update_arp_entry+0x52>
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00e      	beq.n	800bbfe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68f9      	ldr	r1, [r7, #12]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f001 f8fc 	bl	800cde4 <ip4_addr_isbroadcast_u32>
 800bbec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d105      	bne.n	800bbfe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bbfa:	2be0      	cmp	r3, #224	; 0xe0
 800bbfc:	d102      	bne.n	800bc04 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bbfe:	f06f 030f 	mvn.w	r3, #15
 800bc02:	e06c      	b.n	800bcde <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bc04:	78fb      	ldrb	r3, [r7, #3]
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	4619      	mov	r1, r3
 800bc0a:	68b8      	ldr	r0, [r7, #8]
 800bc0c:	f7ff fe84 	bl	800b918 <etharp_find_entry>
 800bc10:	4603      	mov	r3, r0
 800bc12:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bc14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	da02      	bge.n	800bc22 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bc1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc20:	e05d      	b.n	800bcde <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bc22:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bc26:	4933      	ldr	r1, [pc, #204]	; (800bcf4 <etharp_update_arp_entry+0x148>)
 800bc28:	4613      	mov	r3, r2
 800bc2a:	005b      	lsls	r3, r3, #1
 800bc2c:	4413      	add	r3, r2
 800bc2e:	00db      	lsls	r3, r3, #3
 800bc30:	440b      	add	r3, r1
 800bc32:	3314      	adds	r3, #20
 800bc34:	2202      	movs	r2, #2
 800bc36:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bc38:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bc3c:	492d      	ldr	r1, [pc, #180]	; (800bcf4 <etharp_update_arp_entry+0x148>)
 800bc3e:	4613      	mov	r3, r2
 800bc40:	005b      	lsls	r3, r3, #1
 800bc42:	4413      	add	r3, r2
 800bc44:	00db      	lsls	r3, r3, #3
 800bc46:	440b      	add	r3, r1
 800bc48:	3308      	adds	r3, #8
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800bc4e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bc52:	4613      	mov	r3, r2
 800bc54:	005b      	lsls	r3, r3, #1
 800bc56:	4413      	add	r3, r2
 800bc58:	00db      	lsls	r3, r3, #3
 800bc5a:	3308      	adds	r3, #8
 800bc5c:	4a25      	ldr	r2, [pc, #148]	; (800bcf4 <etharp_update_arp_entry+0x148>)
 800bc5e:	4413      	add	r3, r2
 800bc60:	3304      	adds	r3, #4
 800bc62:	2206      	movs	r2, #6
 800bc64:	6879      	ldr	r1, [r7, #4]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f003 f87b 	bl	800ed62 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bc6c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bc70:	4920      	ldr	r1, [pc, #128]	; (800bcf4 <etharp_update_arp_entry+0x148>)
 800bc72:	4613      	mov	r3, r2
 800bc74:	005b      	lsls	r3, r3, #1
 800bc76:	4413      	add	r3, r2
 800bc78:	00db      	lsls	r3, r3, #3
 800bc7a:	440b      	add	r3, r1
 800bc7c:	3312      	adds	r3, #18
 800bc7e:	2200      	movs	r2, #0
 800bc80:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bc82:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bc86:	491b      	ldr	r1, [pc, #108]	; (800bcf4 <etharp_update_arp_entry+0x148>)
 800bc88:	4613      	mov	r3, r2
 800bc8a:	005b      	lsls	r3, r3, #1
 800bc8c:	4413      	add	r3, r2
 800bc8e:	00db      	lsls	r3, r3, #3
 800bc90:	440b      	add	r3, r1
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d021      	beq.n	800bcdc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bc98:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bc9c:	4915      	ldr	r1, [pc, #84]	; (800bcf4 <etharp_update_arp_entry+0x148>)
 800bc9e:	4613      	mov	r3, r2
 800bca0:	005b      	lsls	r3, r3, #1
 800bca2:	4413      	add	r3, r2
 800bca4:	00db      	lsls	r3, r3, #3
 800bca6:	440b      	add	r3, r1
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bcac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bcb0:	4910      	ldr	r1, [pc, #64]	; (800bcf4 <etharp_update_arp_entry+0x148>)
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	005b      	lsls	r3, r3, #1
 800bcb6:	4413      	add	r3, r2
 800bcb8:	00db      	lsls	r3, r3, #3
 800bcba:	440b      	add	r3, r1
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800bcc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6939      	ldr	r1, [r7, #16]
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f001 ff29 	bl	800db28 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800bcd6:	6938      	ldr	r0, [r7, #16]
 800bcd8:	f7f8 fc2a 	bl	8004530 <pbuf_free>
  }
  return ERR_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3718      	adds	r7, #24
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	08011a3c 	.word	0x08011a3c
 800bcec:	08011b34 	.word	0x08011b34
 800bcf0:	08011ab4 	.word	0x08011ab4
 800bcf4:	20000118 	.word	0x20000118

0800bcf8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd00:	2300      	movs	r3, #0
 800bd02:	73fb      	strb	r3, [r7, #15]
 800bd04:	e01f      	b.n	800bd46 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800bd06:	7bfa      	ldrb	r2, [r7, #15]
 800bd08:	4912      	ldr	r1, [pc, #72]	; (800bd54 <etharp_cleanup_netif+0x5c>)
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	005b      	lsls	r3, r3, #1
 800bd0e:	4413      	add	r3, r2
 800bd10:	00db      	lsls	r3, r3, #3
 800bd12:	440b      	add	r3, r1
 800bd14:	3314      	adds	r3, #20
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800bd1a:	7bbb      	ldrb	r3, [r7, #14]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00f      	beq.n	800bd40 <etharp_cleanup_netif+0x48>
 800bd20:	7bfa      	ldrb	r2, [r7, #15]
 800bd22:	490c      	ldr	r1, [pc, #48]	; (800bd54 <etharp_cleanup_netif+0x5c>)
 800bd24:	4613      	mov	r3, r2
 800bd26:	005b      	lsls	r3, r3, #1
 800bd28:	4413      	add	r3, r2
 800bd2a:	00db      	lsls	r3, r3, #3
 800bd2c:	440b      	add	r3, r1
 800bd2e:	3308      	adds	r3, #8
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d103      	bne.n	800bd40 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7ff fd12 	bl	800b764 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd40:	7bfb      	ldrb	r3, [r7, #15]
 800bd42:	3301      	adds	r3, #1
 800bd44:	73fb      	strb	r3, [r7, #15]
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
 800bd48:	2b09      	cmp	r3, #9
 800bd4a:	d9dc      	bls.n	800bd06 <etharp_cleanup_netif+0xe>
    }
  }
}
 800bd4c:	bf00      	nop
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	20000118 	.word	0x20000118

0800bd58 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800bd58:	b5b0      	push	{r4, r5, r7, lr}
 800bd5a:	b08a      	sub	sp, #40	; 0x28
 800bd5c:	af04      	add	r7, sp, #16
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d107      	bne.n	800bd78 <etharp_input+0x20>
 800bd68:	4b3f      	ldr	r3, [pc, #252]	; (800be68 <etharp_input+0x110>)
 800bd6a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800bd6e:	493f      	ldr	r1, [pc, #252]	; (800be6c <etharp_input+0x114>)
 800bd70:	483f      	ldr	r0, [pc, #252]	; (800be70 <etharp_input+0x118>)
 800bd72:	f003 f809 	bl	800ed88 <iprintf>
 800bd76:	e074      	b.n	800be62 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	881b      	ldrh	r3, [r3, #0]
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd88:	d10c      	bne.n	800bda4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800bd8e:	2b06      	cmp	r3, #6
 800bd90:	d108      	bne.n	800bda4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bd96:	2b04      	cmp	r3, #4
 800bd98:	d104      	bne.n	800bda4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	885b      	ldrh	r3, [r3, #2]
 800bd9e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bda0:	2b08      	cmp	r3, #8
 800bda2:	d003      	beq.n	800bdac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f7f8 fbc3 	bl	8004530 <pbuf_free>
    return;
 800bdaa:	e05a      	b.n	800be62 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	330e      	adds	r3, #14
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	3318      	adds	r3, #24
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	3304      	adds	r3, #4
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d102      	bne.n	800bdcc <etharp_input+0x74>
    for_us = 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	75fb      	strb	r3, [r7, #23]
 800bdca:	e009      	b.n	800bde0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	bf0c      	ite	eq
 800bdd8:	2301      	moveq	r3, #1
 800bdda:	2300      	movne	r3, #0
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	f103 0208 	add.w	r2, r3, #8
 800bde6:	7dfb      	ldrb	r3, [r7, #23]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <etharp_input+0x98>
 800bdec:	2301      	movs	r3, #1
 800bdee:	e000      	b.n	800bdf2 <etharp_input+0x9a>
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	f107 010c 	add.w	r1, r7, #12
 800bdf6:	6838      	ldr	r0, [r7, #0]
 800bdf8:	f7ff fed8 	bl	800bbac <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	88db      	ldrh	r3, [r3, #6]
 800be00:	b29b      	uxth	r3, r3
 800be02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be06:	d003      	beq.n	800be10 <etharp_input+0xb8>
 800be08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be0c:	d01e      	beq.n	800be4c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800be0e:	e025      	b.n	800be5c <etharp_input+0x104>
    if (for_us) {
 800be10:	7dfb      	ldrb	r3, [r7, #23]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d021      	beq.n	800be5a <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	3208      	adds	r2, #8
      etharp_raw(netif,
 800be30:	2102      	movs	r1, #2
 800be32:	9103      	str	r1, [sp, #12]
 800be34:	f107 010c 	add.w	r1, r7, #12
 800be38:	9102      	str	r1, [sp, #8]
 800be3a:	9201      	str	r2, [sp, #4]
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	462b      	mov	r3, r5
 800be40:	4622      	mov	r2, r4
 800be42:	4601      	mov	r1, r0
 800be44:	6838      	ldr	r0, [r7, #0]
 800be46:	f000 fae7 	bl	800c418 <etharp_raw>
    break;
 800be4a:	e006      	b.n	800be5a <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 800be4c:	f107 030c 	add.w	r3, r7, #12
 800be50:	4619      	mov	r1, r3
 800be52:	6838      	ldr	r0, [r7, #0]
 800be54:	f7fe f980 	bl	800a158 <dhcp_arp_reply>
    break;
 800be58:	e000      	b.n	800be5c <etharp_input+0x104>
    break;
 800be5a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7f8 fb67 	bl	8004530 <pbuf_free>
}
 800be62:	3718      	adds	r7, #24
 800be64:	46bd      	mov	sp, r7
 800be66:	bdb0      	pop	{r4, r5, r7, pc}
 800be68:	08011a3c 	.word	0x08011a3c
 800be6c:	08011b8c 	.word	0x08011b8c
 800be70:	08011ab4 	.word	0x08011ab4

0800be74 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af02      	add	r7, sp, #8
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	4613      	mov	r3, r2
 800be80:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800be82:	79fa      	ldrb	r2, [r7, #7]
 800be84:	4944      	ldr	r1, [pc, #272]	; (800bf98 <etharp_output_to_arp_index+0x124>)
 800be86:	4613      	mov	r3, r2
 800be88:	005b      	lsls	r3, r3, #1
 800be8a:	4413      	add	r3, r2
 800be8c:	00db      	lsls	r3, r3, #3
 800be8e:	440b      	add	r3, r1
 800be90:	3314      	adds	r3, #20
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d806      	bhi.n	800bea6 <etharp_output_to_arp_index+0x32>
 800be98:	4b40      	ldr	r3, [pc, #256]	; (800bf9c <etharp_output_to_arp_index+0x128>)
 800be9a:	f240 22ed 	movw	r2, #749	; 0x2ed
 800be9e:	4940      	ldr	r1, [pc, #256]	; (800bfa0 <etharp_output_to_arp_index+0x12c>)
 800bea0:	4840      	ldr	r0, [pc, #256]	; (800bfa4 <etharp_output_to_arp_index+0x130>)
 800bea2:	f002 ff71 	bl	800ed88 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800bea6:	79fa      	ldrb	r2, [r7, #7]
 800bea8:	493b      	ldr	r1, [pc, #236]	; (800bf98 <etharp_output_to_arp_index+0x124>)
 800beaa:	4613      	mov	r3, r2
 800beac:	005b      	lsls	r3, r3, #1
 800beae:	4413      	add	r3, r2
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	440b      	add	r3, r1
 800beb4:	3314      	adds	r3, #20
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b02      	cmp	r3, #2
 800beba:	d153      	bne.n	800bf64 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800bebc:	79fa      	ldrb	r2, [r7, #7]
 800bebe:	4936      	ldr	r1, [pc, #216]	; (800bf98 <etharp_output_to_arp_index+0x124>)
 800bec0:	4613      	mov	r3, r2
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	4413      	add	r3, r2
 800bec6:	00db      	lsls	r3, r3, #3
 800bec8:	440b      	add	r3, r1
 800beca:	3312      	adds	r3, #18
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800bed2:	d919      	bls.n	800bf08 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800bed4:	79fa      	ldrb	r2, [r7, #7]
 800bed6:	4613      	mov	r3, r2
 800bed8:	005b      	lsls	r3, r3, #1
 800beda:	4413      	add	r3, r2
 800bedc:	00db      	lsls	r3, r3, #3
 800bede:	4a2e      	ldr	r2, [pc, #184]	; (800bf98 <etharp_output_to_arp_index+0x124>)
 800bee0:	4413      	add	r3, r2
 800bee2:	3304      	adds	r3, #4
 800bee4:	4619      	mov	r1, r3
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f000 fb44 	bl	800c574 <etharp_request>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d138      	bne.n	800bf64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bef2:	79fa      	ldrb	r2, [r7, #7]
 800bef4:	4928      	ldr	r1, [pc, #160]	; (800bf98 <etharp_output_to_arp_index+0x124>)
 800bef6:	4613      	mov	r3, r2
 800bef8:	005b      	lsls	r3, r3, #1
 800befa:	4413      	add	r3, r2
 800befc:	00db      	lsls	r3, r3, #3
 800befe:	440b      	add	r3, r1
 800bf00:	3314      	adds	r3, #20
 800bf02:	2203      	movs	r2, #3
 800bf04:	701a      	strb	r2, [r3, #0]
 800bf06:	e02d      	b.n	800bf64 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800bf08:	79fa      	ldrb	r2, [r7, #7]
 800bf0a:	4923      	ldr	r1, [pc, #140]	; (800bf98 <etharp_output_to_arp_index+0x124>)
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	005b      	lsls	r3, r3, #1
 800bf10:	4413      	add	r3, r2
 800bf12:	00db      	lsls	r3, r3, #3
 800bf14:	440b      	add	r3, r1
 800bf16:	3312      	adds	r3, #18
 800bf18:	881b      	ldrh	r3, [r3, #0]
 800bf1a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800bf1e:	d321      	bcc.n	800bf64 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800bf20:	79fa      	ldrb	r2, [r7, #7]
 800bf22:	4613      	mov	r3, r2
 800bf24:	005b      	lsls	r3, r3, #1
 800bf26:	4413      	add	r3, r2
 800bf28:	00db      	lsls	r3, r3, #3
 800bf2a:	4a1b      	ldr	r2, [pc, #108]	; (800bf98 <etharp_output_to_arp_index+0x124>)
 800bf2c:	4413      	add	r3, r2
 800bf2e:	1d19      	adds	r1, r3, #4
 800bf30:	79fa      	ldrb	r2, [r7, #7]
 800bf32:	4613      	mov	r3, r2
 800bf34:	005b      	lsls	r3, r3, #1
 800bf36:	4413      	add	r3, r2
 800bf38:	00db      	lsls	r3, r3, #3
 800bf3a:	3308      	adds	r3, #8
 800bf3c:	4a16      	ldr	r2, [pc, #88]	; (800bf98 <etharp_output_to_arp_index+0x124>)
 800bf3e:	4413      	add	r3, r2
 800bf40:	3304      	adds	r3, #4
 800bf42:	461a      	mov	r2, r3
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f000 faf3 	bl	800c530 <etharp_request_dst>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d109      	bne.n	800bf64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bf50:	79fa      	ldrb	r2, [r7, #7]
 800bf52:	4911      	ldr	r1, [pc, #68]	; (800bf98 <etharp_output_to_arp_index+0x124>)
 800bf54:	4613      	mov	r3, r2
 800bf56:	005b      	lsls	r3, r3, #1
 800bf58:	4413      	add	r3, r2
 800bf5a:	00db      	lsls	r3, r3, #3
 800bf5c:	440b      	add	r3, r1
 800bf5e:	3314      	adds	r3, #20
 800bf60:	2203      	movs	r2, #3
 800bf62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800bf6a:	79fa      	ldrb	r2, [r7, #7]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	005b      	lsls	r3, r3, #1
 800bf70:	4413      	add	r3, r2
 800bf72:	00db      	lsls	r3, r3, #3
 800bf74:	3308      	adds	r3, #8
 800bf76:	4a08      	ldr	r2, [pc, #32]	; (800bf98 <etharp_output_to_arp_index+0x124>)
 800bf78:	4413      	add	r3, r2
 800bf7a:	1d1a      	adds	r2, r3, #4
 800bf7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	4613      	mov	r3, r2
 800bf84:	460a      	mov	r2, r1
 800bf86:	68b9      	ldr	r1, [r7, #8]
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f001 fdcd 	bl	800db28 <ethernet_output>
 800bf8e:	4603      	mov	r3, r0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	20000118 	.word	0x20000118
 800bf9c:	08011a3c 	.word	0x08011a3c
 800bfa0:	08011bac 	.word	0x08011bac
 800bfa4:	08011ab4 	.word	0x08011ab4

0800bfa8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08a      	sub	sp, #40	; 0x28
 800bfac:	af02      	add	r7, sp, #8
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d106      	bne.n	800bfcc <etharp_output+0x24>
 800bfbe:	4b69      	ldr	r3, [pc, #420]	; (800c164 <etharp_output+0x1bc>)
 800bfc0:	f240 321b 	movw	r2, #795	; 0x31b
 800bfc4:	4968      	ldr	r1, [pc, #416]	; (800c168 <etharp_output+0x1c0>)
 800bfc6:	4869      	ldr	r0, [pc, #420]	; (800c16c <etharp_output+0x1c4>)
 800bfc8:	f002 fede 	bl	800ed88 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d106      	bne.n	800bfe0 <etharp_output+0x38>
 800bfd2:	4b64      	ldr	r3, [pc, #400]	; (800c164 <etharp_output+0x1bc>)
 800bfd4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bfd8:	4965      	ldr	r1, [pc, #404]	; (800c170 <etharp_output+0x1c8>)
 800bfda:	4864      	ldr	r0, [pc, #400]	; (800c16c <etharp_output+0x1c4>)
 800bfdc:	f002 fed4 	bl	800ed88 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d106      	bne.n	800bff4 <etharp_output+0x4c>
 800bfe6:	4b5f      	ldr	r3, [pc, #380]	; (800c164 <etharp_output+0x1bc>)
 800bfe8:	f240 321d 	movw	r2, #797	; 0x31d
 800bfec:	4961      	ldr	r1, [pc, #388]	; (800c174 <etharp_output+0x1cc>)
 800bfee:	485f      	ldr	r0, [pc, #380]	; (800c16c <etharp_output+0x1c4>)
 800bff0:	f002 feca 	bl	800ed88 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68f9      	ldr	r1, [r7, #12]
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 fef2 	bl	800cde4 <ip4_addr_isbroadcast_u32>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d002      	beq.n	800c00c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c006:	4b5c      	ldr	r3, [pc, #368]	; (800c178 <etharp_output+0x1d0>)
 800c008:	61fb      	str	r3, [r7, #28]
 800c00a:	e09b      	b.n	800c144 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c014:	2be0      	cmp	r3, #224	; 0xe0
 800c016:	d118      	bne.n	800c04a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c018:	2301      	movs	r3, #1
 800c01a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c01c:	2300      	movs	r3, #0
 800c01e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c020:	235e      	movs	r3, #94	; 0x5e
 800c022:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3301      	adds	r3, #1
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	3302      	adds	r3, #2
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	3303      	adds	r3, #3
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c042:	f107 0310 	add.w	r3, r7, #16
 800c046:	61fb      	str	r3, [r7, #28]
 800c048:	e07c      	b.n	800c144 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3304      	adds	r3, #4
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	405a      	eors	r2, r3
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	3308      	adds	r3, #8
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4013      	ands	r3, r2
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d012      	beq.n	800c088 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c068:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d00b      	beq.n	800c088 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	330c      	adds	r3, #12
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d003      	beq.n	800c082 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	330c      	adds	r3, #12
 800c07e:	61bb      	str	r3, [r7, #24]
 800c080:	e002      	b.n	800c088 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c082:	f06f 0303 	mvn.w	r3, #3
 800c086:	e069      	b.n	800c15c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c088:	4b3c      	ldr	r3, [pc, #240]	; (800c17c <etharp_output+0x1d4>)
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	4619      	mov	r1, r3
 800c08e:	4a3c      	ldr	r2, [pc, #240]	; (800c180 <etharp_output+0x1d8>)
 800c090:	460b      	mov	r3, r1
 800c092:	005b      	lsls	r3, r3, #1
 800c094:	440b      	add	r3, r1
 800c096:	00db      	lsls	r3, r3, #3
 800c098:	4413      	add	r3, r2
 800c09a:	3314      	adds	r3, #20
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d917      	bls.n	800c0d2 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	4b35      	ldr	r3, [pc, #212]	; (800c17c <etharp_output+0x1d4>)
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	4934      	ldr	r1, [pc, #208]	; (800c180 <etharp_output+0x1d8>)
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	4403      	add	r3, r0
 800c0b4:	00db      	lsls	r3, r3, #3
 800c0b6:	440b      	add	r3, r1
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d108      	bne.n	800c0d2 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c0c0:	4b2e      	ldr	r3, [pc, #184]	; (800c17c <etharp_output+0x1d4>)
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	68b9      	ldr	r1, [r7, #8]
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f7ff fed3 	bl	800be74 <etharp_output_to_arp_index>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	e044      	b.n	800c15c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	75fb      	strb	r3, [r7, #23]
 800c0d6:	e02a      	b.n	800c12e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c0d8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c0dc:	4928      	ldr	r1, [pc, #160]	; (800c180 <etharp_output+0x1d8>)
 800c0de:	4613      	mov	r3, r2
 800c0e0:	005b      	lsls	r3, r3, #1
 800c0e2:	4413      	add	r3, r2
 800c0e4:	00db      	lsls	r3, r3, #3
 800c0e6:	440b      	add	r3, r1
 800c0e8:	3314      	adds	r3, #20
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d918      	bls.n	800c122 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	6819      	ldr	r1, [r3, #0]
 800c0f4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c0f8:	4821      	ldr	r0, [pc, #132]	; (800c180 <etharp_output+0x1d8>)
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	005b      	lsls	r3, r3, #1
 800c0fe:	4413      	add	r3, r2
 800c100:	00db      	lsls	r3, r3, #3
 800c102:	4403      	add	r3, r0
 800c104:	3304      	adds	r3, #4
 800c106:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c108:	4299      	cmp	r1, r3
 800c10a:	d10a      	bne.n	800c122 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800c10c:	7dfa      	ldrb	r2, [r7, #23]
 800c10e:	4b1b      	ldr	r3, [pc, #108]	; (800c17c <etharp_output+0x1d4>)
 800c110:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c112:	7dfb      	ldrb	r3, [r7, #23]
 800c114:	461a      	mov	r2, r3
 800c116:	68b9      	ldr	r1, [r7, #8]
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f7ff feab 	bl	800be74 <etharp_output_to_arp_index>
 800c11e:	4603      	mov	r3, r0
 800c120:	e01c      	b.n	800c15c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c122:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c126:	b2db      	uxtb	r3, r3
 800c128:	3301      	adds	r3, #1
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	75fb      	strb	r3, [r7, #23]
 800c12e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c132:	2b09      	cmp	r3, #9
 800c134:	ddd0      	ble.n	800c0d8 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	69b9      	ldr	r1, [r7, #24]
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f000 f822 	bl	800c184 <etharp_query>
 800c140:	4603      	mov	r3, r0
 800c142:	e00b      	b.n	800c15c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800c14a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	68b9      	ldr	r1, [r7, #8]
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f001 fce7 	bl	800db28 <ethernet_output>
 800c15a:	4603      	mov	r3, r0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3720      	adds	r7, #32
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	08011a3c 	.word	0x08011a3c
 800c168:	08011b8c 	.word	0x08011b8c
 800c16c:	08011ab4 	.word	0x08011ab4
 800c170:	08011bdc 	.word	0x08011bdc
 800c174:	08011b7c 	.word	0x08011b7c
 800c178:	080122b8 	.word	0x080122b8
 800c17c:	20000208 	.word	0x20000208
 800c180:	20000118 	.word	0x20000118

0800c184 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b08c      	sub	sp, #48	; 0x30
 800c188:	af02      	add	r7, sp, #8
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	3329      	adds	r3, #41	; 0x29
 800c194:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c196:	23ff      	movs	r3, #255	; 0xff
 800c198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c19c:	2300      	movs	r3, #0
 800c19e:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68f9      	ldr	r1, [r7, #12]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 fe1c 	bl	800cde4 <ip4_addr_isbroadcast_u32>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10c      	bne.n	800c1cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c1ba:	2be0      	cmp	r3, #224	; 0xe0
 800c1bc:	d006      	beq.n	800c1cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d003      	beq.n	800c1cc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d102      	bne.n	800c1d2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c1cc:	f06f 030f 	mvn.w	r3, #15
 800c1d0:	e10f      	b.n	800c3f2 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	2101      	movs	r1, #1
 800c1d6:	68b8      	ldr	r0, [r7, #8]
 800c1d8:	f7ff fb9e 	bl	800b918 <etharp_find_entry>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800c1e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	da02      	bge.n	800c1ee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800c1e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c1ec:	e101      	b.n	800c3f2 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c1ee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c1f2:	4982      	ldr	r1, [pc, #520]	; (800c3fc <etharp_query+0x278>)
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	005b      	lsls	r3, r3, #1
 800c1f8:	4413      	add	r3, r2
 800c1fa:	00db      	lsls	r3, r3, #3
 800c1fc:	440b      	add	r3, r1
 800c1fe:	3314      	adds	r3, #20
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d117      	bne.n	800c236 <etharp_query+0xb2>
    is_new_entry = 1;
 800c206:	2301      	movs	r3, #1
 800c208:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c20a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c20e:	497b      	ldr	r1, [pc, #492]	; (800c3fc <etharp_query+0x278>)
 800c210:	4613      	mov	r3, r2
 800c212:	005b      	lsls	r3, r3, #1
 800c214:	4413      	add	r3, r2
 800c216:	00db      	lsls	r3, r3, #3
 800c218:	440b      	add	r3, r1
 800c21a:	3314      	adds	r3, #20
 800c21c:	2201      	movs	r2, #1
 800c21e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c220:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c224:	4975      	ldr	r1, [pc, #468]	; (800c3fc <etharp_query+0x278>)
 800c226:	4613      	mov	r3, r2
 800c228:	005b      	lsls	r3, r3, #1
 800c22a:	4413      	add	r3, r2
 800c22c:	00db      	lsls	r3, r3, #3
 800c22e:	440b      	add	r3, r1
 800c230:	3308      	adds	r3, #8
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c236:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c23a:	4970      	ldr	r1, [pc, #448]	; (800c3fc <etharp_query+0x278>)
 800c23c:	4613      	mov	r3, r2
 800c23e:	005b      	lsls	r3, r3, #1
 800c240:	4413      	add	r3, r2
 800c242:	00db      	lsls	r3, r3, #3
 800c244:	440b      	add	r3, r1
 800c246:	3314      	adds	r3, #20
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d012      	beq.n	800c274 <etharp_query+0xf0>
 800c24e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c252:	496a      	ldr	r1, [pc, #424]	; (800c3fc <etharp_query+0x278>)
 800c254:	4613      	mov	r3, r2
 800c256:	005b      	lsls	r3, r3, #1
 800c258:	4413      	add	r3, r2
 800c25a:	00db      	lsls	r3, r3, #3
 800c25c:	440b      	add	r3, r1
 800c25e:	3314      	adds	r3, #20
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2b01      	cmp	r3, #1
 800c264:	d806      	bhi.n	800c274 <etharp_query+0xf0>
 800c266:	4b66      	ldr	r3, [pc, #408]	; (800c400 <etharp_query+0x27c>)
 800c268:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c26c:	4965      	ldr	r1, [pc, #404]	; (800c404 <etharp_query+0x280>)
 800c26e:	4866      	ldr	r0, [pc, #408]	; (800c408 <etharp_query+0x284>)
 800c270:	f002 fd8a 	bl	800ed88 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c274:	6a3b      	ldr	r3, [r7, #32]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d102      	bne.n	800c280 <etharp_query+0xfc>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10c      	bne.n	800c29a <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c280:	68b9      	ldr	r1, [r7, #8]
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	f000 f976 	bl	800c574 <etharp_request>
 800c288:	4603      	mov	r3, r0
 800c28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d102      	bne.n	800c29a <etharp_query+0x116>
      return result;
 800c294:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c298:	e0ab      	b.n	800c3f2 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d106      	bne.n	800c2ae <etharp_query+0x12a>
 800c2a0:	4b57      	ldr	r3, [pc, #348]	; (800c400 <etharp_query+0x27c>)
 800c2a2:	f240 32db 	movw	r2, #987	; 0x3db
 800c2a6:	4959      	ldr	r1, [pc, #356]	; (800c40c <etharp_query+0x288>)
 800c2a8:	4857      	ldr	r0, [pc, #348]	; (800c408 <etharp_query+0x284>)
 800c2aa:	f002 fd6d 	bl	800ed88 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c2ae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c2b2:	4952      	ldr	r1, [pc, #328]	; (800c3fc <etharp_query+0x278>)
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	005b      	lsls	r3, r3, #1
 800c2b8:	4413      	add	r3, r2
 800c2ba:	00db      	lsls	r3, r3, #3
 800c2bc:	440b      	add	r3, r1
 800c2be:	3314      	adds	r3, #20
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d919      	bls.n	800c2fa <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800c2c6:	7cfa      	ldrb	r2, [r7, #19]
 800c2c8:	4b51      	ldr	r3, [pc, #324]	; (800c410 <etharp_query+0x28c>)
 800c2ca:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c2cc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	005b      	lsls	r3, r3, #1
 800c2d4:	4413      	add	r3, r2
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	3308      	adds	r3, #8
 800c2da:	4a48      	ldr	r2, [pc, #288]	; (800c3fc <etharp_query+0x278>)
 800c2dc:	4413      	add	r3, r2
 800c2de:	1d1a      	adds	r2, r3, #4
 800c2e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	697a      	ldr	r2, [r7, #20]
 800c2ea:	6879      	ldr	r1, [r7, #4]
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f001 fc1b 	bl	800db28 <ethernet_output>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2f8:	e079      	b.n	800c3ee <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c2fa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c2fe:	493f      	ldr	r1, [pc, #252]	; (800c3fc <etharp_query+0x278>)
 800c300:	4613      	mov	r3, r2
 800c302:	005b      	lsls	r3, r3, #1
 800c304:	4413      	add	r3, r2
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	440b      	add	r3, r1
 800c30a:	3314      	adds	r3, #20
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d16d      	bne.n	800c3ee <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c312:	2300      	movs	r3, #0
 800c314:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c31a:	e01a      	b.n	800c352 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	895a      	ldrh	r2, [r3, #10]
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	891b      	ldrh	r3, [r3, #8]
 800c324:	429a      	cmp	r2, r3
 800c326:	d10a      	bne.n	800c33e <etharp_query+0x1ba>
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d006      	beq.n	800c33e <etharp_query+0x1ba>
 800c330:	4b33      	ldr	r3, [pc, #204]	; (800c400 <etharp_query+0x27c>)
 800c332:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800c336:	4937      	ldr	r1, [pc, #220]	; (800c414 <etharp_query+0x290>)
 800c338:	4833      	ldr	r0, [pc, #204]	; (800c408 <etharp_query+0x284>)
 800c33a:	f002 fd25 	bl	800ed88 <iprintf>
      if (p->type != PBUF_ROM) {
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	7b1b      	ldrb	r3, [r3, #12]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d002      	beq.n	800c34c <etharp_query+0x1c8>
        copy_needed = 1;
 800c346:	2301      	movs	r3, #1
 800c348:	61bb      	str	r3, [r7, #24]
        break;
 800c34a:	e005      	b.n	800c358 <etharp_query+0x1d4>
      }
      p = p->next;
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d1e1      	bne.n	800c31c <etharp_query+0x198>
    }
    if (copy_needed) {
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d017      	beq.n	800c38e <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	891b      	ldrh	r3, [r3, #8]
 800c362:	2200      	movs	r2, #0
 800c364:	4619      	mov	r1, r3
 800c366:	2002      	movs	r0, #2
 800c368:	f7f7 fd70 	bl	8003e4c <pbuf_alloc>
 800c36c:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d011      	beq.n	800c398 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800c374:	6879      	ldr	r1, [r7, #4]
 800c376:	69f8      	ldr	r0, [r7, #28]
 800c378:	f7f8 fa0e 	bl	8004798 <pbuf_copy>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00a      	beq.n	800c398 <etharp_query+0x214>
          pbuf_free(p);
 800c382:	69f8      	ldr	r0, [r7, #28]
 800c384:	f7f8 f8d4 	bl	8004530 <pbuf_free>
          p = NULL;
 800c388:	2300      	movs	r3, #0
 800c38a:	61fb      	str	r3, [r7, #28]
 800c38c:	e004      	b.n	800c398 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c392:	69f8      	ldr	r0, [r7, #28]
 800c394:	f7f8 f978 	bl	8004688 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d024      	beq.n	800c3e8 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c39e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c3a2:	4916      	ldr	r1, [pc, #88]	; (800c3fc <etharp_query+0x278>)
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	4413      	add	r3, r2
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	440b      	add	r3, r1
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d00b      	beq.n	800c3cc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800c3b4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c3b8:	4910      	ldr	r1, [pc, #64]	; (800c3fc <etharp_query+0x278>)
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	4413      	add	r3, r2
 800c3c0:	00db      	lsls	r3, r3, #3
 800c3c2:	440b      	add	r3, r1
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7f8 f8b2 	bl	8004530 <pbuf_free>
      }
      arp_table[i].q = p;
 800c3cc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c3d0:	490a      	ldr	r1, [pc, #40]	; (800c3fc <etharp_query+0x278>)
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	005b      	lsls	r3, r3, #1
 800c3d6:	4413      	add	r3, r2
 800c3d8:	00db      	lsls	r3, r3, #3
 800c3da:	440b      	add	r3, r1
 800c3dc:	69fa      	ldr	r2, [r7, #28]
 800c3de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3e6:	e002      	b.n	800c3ee <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c3e8:	23ff      	movs	r3, #255	; 0xff
 800c3ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c3ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3728      	adds	r7, #40	; 0x28
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	20000118 	.word	0x20000118
 800c400:	08011a3c 	.word	0x08011a3c
 800c404:	08011be8 	.word	0x08011be8
 800c408:	08011ab4 	.word	0x08011ab4
 800c40c:	08011bdc 	.word	0x08011bdc
 800c410:	20000208 	.word	0x20000208
 800c414:	08011c10 	.word	0x08011c10

0800c418 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b08a      	sub	sp, #40	; 0x28
 800c41c:	af02      	add	r7, sp, #8
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
 800c424:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d106      	bne.n	800c43e <etharp_raw+0x26>
 800c430:	4b3a      	ldr	r3, [pc, #232]	; (800c51c <etharp_raw+0x104>)
 800c432:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800c436:	493a      	ldr	r1, [pc, #232]	; (800c520 <etharp_raw+0x108>)
 800c438:	483a      	ldr	r0, [pc, #232]	; (800c524 <etharp_raw+0x10c>)
 800c43a:	f002 fca5 	bl	800ed88 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c43e:	2200      	movs	r2, #0
 800c440:	211c      	movs	r1, #28
 800c442:	2002      	movs	r0, #2
 800c444:	f7f7 fd02 	bl	8003e4c <pbuf_alloc>
 800c448:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d102      	bne.n	800c456 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c450:	f04f 33ff 	mov.w	r3, #4294967295
 800c454:	e05d      	b.n	800c512 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	895b      	ldrh	r3, [r3, #10]
 800c45a:	2b1b      	cmp	r3, #27
 800c45c:	d806      	bhi.n	800c46c <etharp_raw+0x54>
 800c45e:	4b2f      	ldr	r3, [pc, #188]	; (800c51c <etharp_raw+0x104>)
 800c460:	f240 4264 	movw	r2, #1124	; 0x464
 800c464:	4930      	ldr	r1, [pc, #192]	; (800c528 <etharp_raw+0x110>)
 800c466:	482f      	ldr	r0, [pc, #188]	; (800c524 <etharp_raw+0x10c>)
 800c468:	f002 fc8e 	bl	800ed88 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c472:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c474:	4618      	mov	r0, r3
 800c476:	f7f6 ff53 	bl	8003320 <lwip_htons>
 800c47a:	4603      	mov	r3, r0
 800c47c:	461a      	mov	r2, r3
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c488:	2b06      	cmp	r3, #6
 800c48a:	d006      	beq.n	800c49a <etharp_raw+0x82>
 800c48c:	4b23      	ldr	r3, [pc, #140]	; (800c51c <etharp_raw+0x104>)
 800c48e:	f240 426b 	movw	r2, #1131	; 0x46b
 800c492:	4926      	ldr	r1, [pc, #152]	; (800c52c <etharp_raw+0x114>)
 800c494:	4823      	ldr	r0, [pc, #140]	; (800c524 <etharp_raw+0x10c>)
 800c496:	f002 fc77 	bl	800ed88 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	3308      	adds	r3, #8
 800c49e:	2206      	movs	r2, #6
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f002 fc5d 	bl	800ed62 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	3312      	adds	r3, #18
 800c4ac:	2206      	movs	r2, #6
 800c4ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f002 fc56 	bl	800ed62 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	330e      	adds	r3, #14
 800c4ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4bc:	6812      	ldr	r2, [r2, #0]
 800c4be:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	3318      	adds	r3, #24
 800c4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4c6:	6812      	ldr	r2, [r2, #0]
 800c4c8:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	701a      	strb	r2, [r3, #0]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f042 0201 	orr.w	r2, r2, #1
 800c4d6:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f042 0208 	orr.w	r2, r2, #8
 800c4e0:	709a      	strb	r2, [r3, #2]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	2206      	movs	r2, #6
 800c4ea:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2204      	movs	r2, #4
 800c4f0:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c4f2:	f640 0306 	movw	r3, #2054	; 0x806
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	69b9      	ldr	r1, [r7, #24]
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f001 fb12 	bl	800db28 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c504:	69b8      	ldr	r0, [r7, #24]
 800c506:	f7f8 f813 	bl	8004530 <pbuf_free>
  p = NULL;
 800c50a:	2300      	movs	r3, #0
 800c50c:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c50e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c512:	4618      	mov	r0, r3
 800c514:	3720      	adds	r7, #32
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	08011a3c 	.word	0x08011a3c
 800c520:	08011b8c 	.word	0x08011b8c
 800c524:	08011ab4 	.word	0x08011ab4
 800c528:	08011c2c 	.word	0x08011c2c
 800c52c:	08011c60 	.word	0x08011c60

0800c530 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b088      	sub	sp, #32
 800c534:	af04      	add	r7, sp, #16
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c54c:	2201      	movs	r2, #1
 800c54e:	9203      	str	r2, [sp, #12]
 800c550:	68ba      	ldr	r2, [r7, #8]
 800c552:	9202      	str	r2, [sp, #8]
 800c554:	4a06      	ldr	r2, [pc, #24]	; (800c570 <etharp_request_dst+0x40>)
 800c556:	9201      	str	r2, [sp, #4]
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	4603      	mov	r3, r0
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f7ff ff5a 	bl	800c418 <etharp_raw>
 800c564:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	080122c0 	.word	0x080122c0

0800c574 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c57e:	4a05      	ldr	r2, [pc, #20]	; (800c594 <etharp_request+0x20>)
 800c580:	6839      	ldr	r1, [r7, #0]
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f7ff ffd4 	bl	800c530 <etharp_request_dst>
 800c588:	4603      	mov	r3, r0
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	080122b8 	.word	0x080122b8

0800c598 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b08e      	sub	sp, #56	; 0x38
 800c59c:	af04      	add	r7, sp, #16
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c5a2:	4b7a      	ldr	r3, [pc, #488]	; (800c78c <icmp_input+0x1f4>)
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	f003 030f 	and.w	r3, r3, #15
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c5b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c5ba:	2b13      	cmp	r3, #19
 800c5bc:	f240 80d1 	bls.w	800c762 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	895b      	ldrh	r3, [r3, #10]
 800c5c4:	2b03      	cmp	r3, #3
 800c5c6:	f240 80ce 	bls.w	800c766 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c5d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 80bb 	beq.w	800c754 <icmp_input+0x1bc>
 800c5de:	2b08      	cmp	r3, #8
 800c5e0:	f040 80bb 	bne.w	800c75a <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800c5e4:	4b6a      	ldr	r3, [pc, #424]	; (800c790 <icmp_input+0x1f8>)
 800c5e6:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c5e8:	4b68      	ldr	r3, [pc, #416]	; (800c78c <icmp_input+0x1f4>)
 800c5ea:	695b      	ldr	r3, [r3, #20]
 800c5ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5f0:	2be0      	cmp	r3, #224	; 0xe0
 800c5f2:	f000 80bf 	beq.w	800c774 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c5f6:	4b65      	ldr	r3, [pc, #404]	; (800c78c <icmp_input+0x1f4>)
 800c5f8:	695a      	ldr	r2, [r3, #20]
 800c5fa:	4b64      	ldr	r3, [pc, #400]	; (800c78c <icmp_input+0x1f4>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4619      	mov	r1, r3
 800c600:	4610      	mov	r0, r2
 800c602:	f000 fbef 	bl	800cde4 <ip4_addr_isbroadcast_u32>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f040 80b5 	bne.w	800c778 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	891b      	ldrh	r3, [r3, #8]
 800c612:	2b07      	cmp	r3, #7
 800c614:	f240 80a9 	bls.w	800c76a <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c618:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c61a:	330e      	adds	r3, #14
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	b21b      	sxth	r3, r3
 800c620:	4619      	mov	r1, r3
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f7f7 ff60 	bl	80044e8 <pbuf_header>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d046      	beq.n	800c6bc <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	891a      	ldrh	r2, [r3, #8]
 800c632:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c634:	4413      	add	r3, r2
 800c636:	b29b      	uxth	r3, r3
 800c638:	2200      	movs	r2, #0
 800c63a:	4619      	mov	r1, r3
 800c63c:	2002      	movs	r0, #2
 800c63e:	f7f7 fc05 	bl	8003e4c <pbuf_alloc>
 800c642:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	2b00      	cmp	r3, #0
 800c648:	f000 8098 	beq.w	800c77c <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	895b      	ldrh	r3, [r3, #10]
 800c650:	461a      	mov	r2, r3
 800c652:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c654:	3308      	adds	r3, #8
 800c656:	429a      	cmp	r2, r3
 800c658:	d203      	bcs.n	800c662 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800c65a:	69b8      	ldr	r0, [r7, #24]
 800c65c:	f7f7 ff68 	bl	8004530 <pbuf_free>
        goto icmperr;
 800c660:	e08d      	b.n	800c77e <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c66a:	4618      	mov	r0, r3
 800c66c:	f002 fb79 	bl	800ed62 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800c670:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c672:	425b      	negs	r3, r3
 800c674:	b29b      	uxth	r3, r3
 800c676:	b21b      	sxth	r3, r3
 800c678:	4619      	mov	r1, r3
 800c67a:	69b8      	ldr	r0, [r7, #24]
 800c67c:	f7f7 ff34 	bl	80044e8 <pbuf_header>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d009      	beq.n	800c69a <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c686:	4b43      	ldr	r3, [pc, #268]	; (800c794 <icmp_input+0x1fc>)
 800c688:	22af      	movs	r2, #175	; 0xaf
 800c68a:	4943      	ldr	r1, [pc, #268]	; (800c798 <icmp_input+0x200>)
 800c68c:	4843      	ldr	r0, [pc, #268]	; (800c79c <icmp_input+0x204>)
 800c68e:	f002 fb7b 	bl	800ed88 <iprintf>
        pbuf_free(r);
 800c692:	69b8      	ldr	r0, [r7, #24]
 800c694:	f7f7 ff4c 	bl	8004530 <pbuf_free>
        goto icmperr;
 800c698:	e071      	b.n	800c77e <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800c69a:	6879      	ldr	r1, [r7, #4]
 800c69c:	69b8      	ldr	r0, [r7, #24]
 800c69e:	f7f8 f87b 	bl	8004798 <pbuf_copy>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d003      	beq.n	800c6b0 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800c6a8:	69b8      	ldr	r0, [r7, #24]
 800c6aa:	f7f7 ff41 	bl	8004530 <pbuf_free>
        goto icmperr;
 800c6ae:	e066      	b.n	800c77e <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7f7 ff3d 	bl	8004530 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	607b      	str	r3, [r7, #4]
 800c6ba:	e015      	b.n	800c6e8 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c6bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c6be:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800c6c2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c6c6:	33f2      	adds	r3, #242	; 0xf2
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	b21b      	sxth	r3, r3
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f7f7 ff0a 	bl	80044e8 <pbuf_header>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d006      	beq.n	800c6e8 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c6da:	4b2e      	ldr	r3, [pc, #184]	; (800c794 <icmp_input+0x1fc>)
 800c6dc:	22c0      	movs	r2, #192	; 0xc0
 800c6de:	4930      	ldr	r1, [pc, #192]	; (800c7a0 <icmp_input+0x208>)
 800c6e0:	482e      	ldr	r0, [pc, #184]	; (800c79c <icmp_input+0x204>)
 800c6e2:	f002 fb51 	bl	800ed88 <iprintf>
        goto icmperr;
 800c6e6:	e04a      	b.n	800c77e <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800c6ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f7f7 fef7 	bl	80044e8 <pbuf_header>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d12b      	bne.n	800c758 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c70e:	4b1f      	ldr	r3, [pc, #124]	; (800c78c <icmp_input+0x1f4>)
 800c710:	691a      	ldr	r2, [r3, #16]
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	2200      	movs	r2, #0
 800c71a:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	2200      	movs	r2, #0
 800c720:	709a      	strb	r2, [r3, #2]
 800c722:	2200      	movs	r2, #0
 800c724:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	22ff      	movs	r2, #255	; 0xff
 800c72a:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	2200      	movs	r2, #0
 800c730:	729a      	strb	r2, [r3, #10]
 800c732:	2200      	movs	r2, #0
 800c734:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	9302      	str	r3, [sp, #8]
 800c73a:	2301      	movs	r3, #1
 800c73c:	9301      	str	r3, [sp, #4]
 800c73e:	2300      	movs	r3, #0
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	23ff      	movs	r3, #255	; 0xff
 800c744:	2200      	movs	r2, #0
 800c746:	69f9      	ldr	r1, [r7, #28]
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fa79 	bl	800cc40 <ip4_output_if>
 800c74e:	4603      	mov	r3, r0
 800c750:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800c752:	e001      	b.n	800c758 <icmp_input+0x1c0>
    break;
 800c754:	bf00      	nop
 800c756:	e000      	b.n	800c75a <icmp_input+0x1c2>
    break;
 800c758:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7f7 fee8 	bl	8004530 <pbuf_free>
  return;
 800c760:	e011      	b.n	800c786 <icmp_input+0x1ee>
    goto lenerr;
 800c762:	bf00      	nop
 800c764:	e002      	b.n	800c76c <icmp_input+0x1d4>
    goto lenerr;
 800c766:	bf00      	nop
 800c768:	e000      	b.n	800c76c <icmp_input+0x1d4>
      goto lenerr;
 800c76a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7f7 fedf 	bl	8004530 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c772:	e008      	b.n	800c786 <icmp_input+0x1ee>
      goto icmperr;
 800c774:	bf00      	nop
 800c776:	e002      	b.n	800c77e <icmp_input+0x1e6>
      goto icmperr;
 800c778:	bf00      	nop
 800c77a:	e000      	b.n	800c77e <icmp_input+0x1e6>
        goto icmperr;
 800c77c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7f7 fed6 	bl	8004530 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c784:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c786:	3728      	adds	r7, #40	; 0x28
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	20000228 	.word	0x20000228
 800c790:	2000023c 	.word	0x2000023c
 800c794:	08011ca4 	.word	0x08011ca4
 800c798:	08011cdc 	.word	0x08011cdc
 800c79c:	08011d14 	.word	0x08011d14
 800c7a0:	08011d3c 	.word	0x08011d3c

0800c7a4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c7b0:	78fb      	ldrb	r3, [r7, #3]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	2103      	movs	r1, #3
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 f814 	bl	800c7e4 <icmp_send_response>
}
 800c7bc:	bf00      	nop
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c7d0:	78fb      	ldrb	r3, [r7, #3]
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	210b      	movs	r1, #11
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 f804 	bl	800c7e4 <icmp_send_response>
}
 800c7dc:	bf00      	nop
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b08c      	sub	sp, #48	; 0x30
 800c7e8:	af04      	add	r7, sp, #16
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	70fb      	strb	r3, [r7, #3]
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	2124      	movs	r1, #36	; 0x24
 800c7f8:	2001      	movs	r0, #1
 800c7fa:	f7f7 fb27 	bl	8003e4c <pbuf_alloc>
 800c7fe:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d04c      	beq.n	800c8a0 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	895b      	ldrh	r3, [r3, #10]
 800c80a:	2b23      	cmp	r3, #35	; 0x23
 800c80c:	d806      	bhi.n	800c81c <icmp_send_response+0x38>
 800c80e:	4b26      	ldr	r3, [pc, #152]	; (800c8a8 <icmp_send_response+0xc4>)
 800c810:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800c814:	4925      	ldr	r1, [pc, #148]	; (800c8ac <icmp_send_response+0xc8>)
 800c816:	4826      	ldr	r0, [pc, #152]	; (800c8b0 <icmp_send_response+0xcc>)
 800c818:	f002 fab6 	bl	800ed88 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	78fa      	ldrb	r2, [r7, #3]
 800c82c:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	78ba      	ldrb	r2, [r7, #2]
 800c832:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	2200      	movs	r2, #0
 800c838:	711a      	strb	r2, [r3, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	2200      	movs	r2, #0
 800c842:	719a      	strb	r2, [r3, #6]
 800c844:	2200      	movs	r2, #0
 800c846:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	f103 0008 	add.w	r0, r3, #8
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	221c      	movs	r2, #28
 800c856:	4619      	mov	r1, r3
 800c858:	f002 fa83 	bl	800ed62 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c862:	f107 030c 	add.w	r3, r7, #12
 800c866:	4618      	mov	r0, r3
 800c868:	f000 f824 	bl	800c8b4 <ip4_route>
 800c86c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d011      	beq.n	800c898 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	2200      	movs	r2, #0
 800c878:	709a      	strb	r2, [r3, #2]
 800c87a:	2200      	movs	r2, #0
 800c87c:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c87e:	f107 020c 	add.w	r2, r7, #12
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	9302      	str	r3, [sp, #8]
 800c886:	2301      	movs	r3, #1
 800c888:	9301      	str	r3, [sp, #4]
 800c88a:	2300      	movs	r3, #0
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	23ff      	movs	r3, #255	; 0xff
 800c890:	2100      	movs	r1, #0
 800c892:	69f8      	ldr	r0, [r7, #28]
 800c894:	f000 f9d4 	bl	800cc40 <ip4_output_if>
  }
  pbuf_free(q);
 800c898:	69f8      	ldr	r0, [r7, #28]
 800c89a:	f7f7 fe49 	bl	8004530 <pbuf_free>
 800c89e:	e000      	b.n	800c8a2 <icmp_send_response+0xbe>
    return;
 800c8a0:	bf00      	nop
}
 800c8a2:	3720      	adds	r7, #32
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	08011ca4 	.word	0x08011ca4
 800c8ac:	08011d70 	.word	0x08011d70
 800c8b0:	08011d14 	.word	0x08011d14

0800c8b4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c8bc:	4b30      	ldr	r3, [pc, #192]	; (800c980 <ip4_route+0xcc>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	60fb      	str	r3, [r7, #12]
 800c8c2:	e036      	b.n	800c932 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c8ca:	f003 0301 	and.w	r3, r3, #1
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d02b      	beq.n	800c92c <ip4_route+0x78>
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c8da:	089b      	lsrs	r3, r3, #2
 800c8dc:	f003 0301 	and.w	r3, r3, #1
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d022      	beq.n	800c92c <ip4_route+0x78>
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d01d      	beq.n	800c92c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	3304      	adds	r3, #4
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	405a      	eors	r2, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	3308      	adds	r3, #8
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4013      	ands	r3, r2
 800c904:	2b00      	cmp	r3, #0
 800c906:	d101      	bne.n	800c90c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	e033      	b.n	800c974 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c912:	f003 0302 	and.w	r3, r3, #2
 800c916:	2b00      	cmp	r3, #0
 800c918:	d108      	bne.n	800c92c <ip4_route+0x78>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	330c      	adds	r3, #12
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	429a      	cmp	r2, r3
 800c926:	d101      	bne.n	800c92c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	e023      	b.n	800c974 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	60fb      	str	r3, [r7, #12]
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1c5      	bne.n	800c8c4 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c938:	4b12      	ldr	r3, [pc, #72]	; (800c984 <ip4_route+0xd0>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d015      	beq.n	800c96c <ip4_route+0xb8>
 800c940:	4b10      	ldr	r3, [pc, #64]	; (800c984 <ip4_route+0xd0>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00d      	beq.n	800c96c <ip4_route+0xb8>
 800c950:	4b0c      	ldr	r3, [pc, #48]	; (800c984 <ip4_route+0xd0>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c958:	f003 0304 	and.w	r3, r3, #4
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d005      	beq.n	800c96c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800c960:	4b08      	ldr	r3, [pc, #32]	; (800c984 <ip4_route+0xd0>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	3304      	adds	r3, #4
 800c966:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d101      	bne.n	800c970 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c96c:	2300      	movs	r3, #0
 800c96e:	e001      	b.n	800c974 <ip4_route+0xc0>
  }

  return netif_default;
 800c970:	4b04      	ldr	r3, [pc, #16]	; (800c984 <ip4_route+0xd0>)
 800c972:	681b      	ldr	r3, [r3, #0]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3714      	adds	r7, #20
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	20003768 	.word	0x20003768
 800c984:	2000376c 	.word	0x2000376c

0800c988 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b088      	sub	sp, #32
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800c992:	2301      	movs	r3, #1
 800c994:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	091b      	lsrs	r3, r3, #4
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	2b04      	cmp	r3, #4
 800c9a6:	d004      	beq.n	800c9b2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7f7 fdc1 	bl	8004530 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	e13e      	b.n	800cc30 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	f003 030f 	and.w	r3, r3, #15
 800c9bc:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800c9be:	89fb      	ldrh	r3, [r7, #14]
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	885b      	ldrh	r3, [r3, #2]
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7f6 fca8 	bl	8003320 <lwip_htons>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	891b      	ldrh	r3, [r3, #8]
 800c9d8:	89ba      	ldrh	r2, [r7, #12]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d204      	bcs.n	800c9e8 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 800c9de:	89bb      	ldrh	r3, [r7, #12]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7f7 fc30 	bl	8004248 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	895b      	ldrh	r3, [r3, #10]
 800c9ec:	89fa      	ldrh	r2, [r7, #14]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d807      	bhi.n	800ca02 <ip4_input+0x7a>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	891b      	ldrh	r3, [r3, #8]
 800c9f6:	89ba      	ldrh	r2, [r7, #12]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d802      	bhi.n	800ca02 <ip4_input+0x7a>
 800c9fc:	89fb      	ldrh	r3, [r7, #14]
 800c9fe:	2b13      	cmp	r3, #19
 800ca00:	d804      	bhi.n	800ca0c <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7f7 fd94 	bl	8004530 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	e111      	b.n	800cc30 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	4a89      	ldr	r2, [pc, #548]	; (800cc38 <ip4_input+0x2b0>)
 800ca12:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	4a87      	ldr	r2, [pc, #540]	; (800cc38 <ip4_input+0x2b0>)
 800ca1a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ca1c:	4b86      	ldr	r3, [pc, #536]	; (800cc38 <ip4_input+0x2b0>)
 800ca1e:	695b      	ldr	r3, [r3, #20]
 800ca20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca24:	2be0      	cmp	r3, #224	; 0xe0
 800ca26:	d112      	bne.n	800ca4e <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca2e:	f003 0301 	and.w	r3, r3, #1
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d007      	beq.n	800ca48 <ip4_input+0xc0>
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	3304      	adds	r3, #4
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d002      	beq.n	800ca48 <ip4_input+0xc0>
      netif = inp;
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	61bb      	str	r3, [r7, #24]
 800ca46:	e041      	b.n	800cacc <ip4_input+0x144>
    } else {
      netif = NULL;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	61bb      	str	r3, [r7, #24]
 800ca4c:	e03e      	b.n	800cacc <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	613b      	str	r3, [r7, #16]
    netif = inp;
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca5c:	f003 0301 	and.w	r3, r3, #1
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d014      	beq.n	800ca90 <ip4_input+0x108>
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	3304      	adds	r3, #4
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d00f      	beq.n	800ca90 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ca70:	4b71      	ldr	r3, [pc, #452]	; (800cc38 <ip4_input+0x2b0>)
 800ca72:	695a      	ldr	r2, [r3, #20]
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	3304      	adds	r3, #4
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d026      	beq.n	800cacc <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ca7e:	4b6e      	ldr	r3, [pc, #440]	; (800cc38 <ip4_input+0x2b0>)
 800ca80:	695b      	ldr	r3, [r3, #20]
 800ca82:	69b9      	ldr	r1, [r7, #24]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f000 f9ad 	bl	800cde4 <ip4_addr_isbroadcast_u32>
 800ca8a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d11d      	bne.n	800cacc <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00d      	beq.n	800cab2 <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800ca96:	4b68      	ldr	r3, [pc, #416]	; (800cc38 <ip4_input+0x2b0>)
 800ca98:	695b      	ldr	r3, [r3, #20]
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	2b7f      	cmp	r3, #127	; 0x7f
 800ca9e:	d102      	bne.n	800caa6 <ip4_input+0x11e>
          netif = NULL;
 800caa0:	2300      	movs	r3, #0
 800caa2:	61bb      	str	r3, [r7, #24]
          break;
 800caa4:	e012      	b.n	800cacc <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800caa6:	2300      	movs	r3, #0
 800caa8:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 800caaa:	4b64      	ldr	r3, [pc, #400]	; (800cc3c <ip4_input+0x2b4>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	61bb      	str	r3, [r7, #24]
 800cab0:	e002      	b.n	800cab8 <ip4_input+0x130>
      } else {
        netif = netif->next;
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 800cab8:	69ba      	ldr	r2, [r7, #24]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d102      	bne.n	800cac6 <ip4_input+0x13e>
        netif = netif->next;
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1c4      	bne.n	800ca56 <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800cacc:	69bb      	ldr	r3, [r7, #24]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d111      	bne.n	800caf6 <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	7a5b      	ldrb	r3, [r3, #9]
 800cad6:	2b11      	cmp	r3, #17
 800cad8:	d10d      	bne.n	800caf6 <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 800cada:	89fb      	ldrh	r3, [r7, #14]
 800cadc:	69fa      	ldr	r2, [r7, #28]
 800cade:	4413      	add	r3, r2
 800cae0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	885b      	ldrh	r3, [r3, #2]
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800caec:	d103      	bne.n	800caf6 <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800caf2:	2300      	movs	r3, #0
 800caf4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d017      	beq.n	800cb2c <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800cafc:	4b4e      	ldr	r3, [pc, #312]	; (800cc38 <ip4_input+0x2b0>)
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d013      	beq.n	800cb2c <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cb04:	4b4c      	ldr	r3, [pc, #304]	; (800cc38 <ip4_input+0x2b0>)
 800cb06:	691b      	ldr	r3, [r3, #16]
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 f96a 	bl	800cde4 <ip4_addr_isbroadcast_u32>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d105      	bne.n	800cb22 <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800cb16:	4b48      	ldr	r3, [pc, #288]	; (800cc38 <ip4_input+0x2b0>)
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cb1e:	2be0      	cmp	r3, #224	; 0xe0
 800cb20:	d104      	bne.n	800cb2c <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7f7 fd04 	bl	8004530 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	e081      	b.n	800cc30 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d104      	bne.n	800cb3c <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7f7 fcfc 	bl	8004530 <pbuf_free>
    return ERR_OK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	e079      	b.n	800cc30 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	88db      	ldrh	r3, [r3, #6]
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	461a      	mov	r2, r3
 800cb44:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800cb48:	4013      	ands	r3, r2
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00b      	beq.n	800cb66 <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fc8e 	bl	800d470 <ip4_reass>
 800cb54:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d101      	bne.n	800cb60 <ip4_input+0x1d8>
      return ERR_OK;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	e067      	b.n	800cc30 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800cb66:	4a34      	ldr	r2, [pc, #208]	; (800cc38 <ip4_input+0x2b0>)
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800cb6c:	4a32      	ldr	r2, [pc, #200]	; (800cc38 <ip4_input+0x2b0>)
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800cb72:	4a31      	ldr	r2, [pc, #196]	; (800cc38 <ip4_input+0x2b0>)
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	f003 030f 	and.w	r3, r3, #15
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	4b2b      	ldr	r3, [pc, #172]	; (800cc38 <ip4_input+0x2b0>)
 800cb8a:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800cb8c:	89fb      	ldrh	r3, [r7, #14]
 800cb8e:	425b      	negs	r3, r3
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	b21b      	sxth	r3, r3
 800cb94:	4619      	mov	r1, r3
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7f7 fca6 	bl	80044e8 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	7a5b      	ldrb	r3, [r3, #9]
 800cba0:	2b06      	cmp	r3, #6
 800cba2:	d009      	beq.n	800cbb8 <ip4_input+0x230>
 800cba4:	2b11      	cmp	r3, #17
 800cba6:	d002      	beq.n	800cbae <ip4_input+0x226>
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d00a      	beq.n	800cbc2 <ip4_input+0x23a>
 800cbac:	e00e      	b.n	800cbcc <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800cbae:	6839      	ldr	r1, [r7, #0]
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7fc fc11 	bl	80093d8 <udp_input>
      break;
 800cbb6:	e028      	b.n	800cc0a <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800cbb8:	6839      	ldr	r1, [r7, #0]
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f7f9 f900 	bl	8005dc0 <tcp_input>
      break;
 800cbc0:	e023      	b.n	800cc0a <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800cbc2:	6839      	ldr	r1, [r7, #0]
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7ff fce7 	bl	800c598 <icmp_input>
      break;
 800cbca:	e01e      	b.n	800cc0a <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cbcc:	4b1a      	ldr	r3, [pc, #104]	; (800cc38 <ip4_input+0x2b0>)
 800cbce:	695b      	ldr	r3, [r3, #20]
 800cbd0:	69b9      	ldr	r1, [r7, #24]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 f906 	bl	800cde4 <ip4_addr_isbroadcast_u32>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d112      	bne.n	800cc04 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cbde:	4b16      	ldr	r3, [pc, #88]	; (800cc38 <ip4_input+0x2b0>)
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cbe6:	2be0      	cmp	r3, #224	; 0xe0
 800cbe8:	d00c      	beq.n	800cc04 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800cbea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f7f7 fc8b 	bl	800450c <pbuf_header_force>
        p->payload = iphdr;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	69fa      	ldr	r2, [r7, #28]
 800cbfa:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800cbfc:	2102      	movs	r1, #2
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f7ff fdd0 	bl	800c7a4 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f7f7 fc93 	bl	8004530 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800cc0a:	4b0b      	ldr	r3, [pc, #44]	; (800cc38 <ip4_input+0x2b0>)
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800cc10:	4b09      	ldr	r3, [pc, #36]	; (800cc38 <ip4_input+0x2b0>)
 800cc12:	2200      	movs	r2, #0
 800cc14:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800cc16:	4b08      	ldr	r3, [pc, #32]	; (800cc38 <ip4_input+0x2b0>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800cc1c:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <ip4_input+0x2b0>)
 800cc1e:	2200      	movs	r2, #0
 800cc20:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800cc22:	4b05      	ldr	r3, [pc, #20]	; (800cc38 <ip4_input+0x2b0>)
 800cc24:	2200      	movs	r2, #0
 800cc26:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800cc28:	4b03      	ldr	r3, [pc, #12]	; (800cc38 <ip4_input+0x2b0>)
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3720      	adds	r7, #32
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	20000228 	.word	0x20000228
 800cc3c:	20003768 	.word	0x20003768

0800cc40 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b08a      	sub	sp, #40	; 0x28
 800cc44:	af04      	add	r7, sp, #16
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]
 800cc4c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d009      	beq.n	800cc6c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d003      	beq.n	800cc66 <ip4_output_if+0x26>
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d102      	bne.n	800cc6c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800cc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc68:	3304      	adds	r3, #4
 800cc6a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cc6c:	78fa      	ldrb	r2, [r7, #3]
 800cc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc70:	9302      	str	r3, [sp, #8]
 800cc72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cc76:	9301      	str	r3, [sp, #4]
 800cc78:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	4613      	mov	r3, r2
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	6979      	ldr	r1, [r7, #20]
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f000 f805 	bl	800cc94 <ip4_output_if_src>
 800cc8a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b088      	sub	sp, #32
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	89db      	ldrh	r3, [r3, #14]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d006      	beq.n	800ccb8 <ip4_output_if_src+0x24>
 800ccaa:	4b48      	ldr	r3, [pc, #288]	; (800cdcc <ip4_output_if_src+0x138>)
 800ccac:	f240 3233 	movw	r2, #819	; 0x333
 800ccb0:	4947      	ldr	r1, [pc, #284]	; (800cdd0 <ip4_output_if_src+0x13c>)
 800ccb2:	4848      	ldr	r0, [pc, #288]	; (800cdd4 <ip4_output_if_src+0x140>)
 800ccb4:	f002 f868 	bl	800ed88 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d060      	beq.n	800cd80 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ccbe:	2314      	movs	r3, #20
 800ccc0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800ccc2:	2114      	movs	r1, #20
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f7f7 fc0f 	bl	80044e8 <pbuf_header>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d002      	beq.n	800ccd6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ccd0:	f06f 0301 	mvn.w	r3, #1
 800ccd4:	e075      	b.n	800cdc2 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	895b      	ldrh	r3, [r3, #10]
 800cce0:	2b13      	cmp	r3, #19
 800cce2:	d806      	bhi.n	800ccf2 <ip4_output_if_src+0x5e>
 800cce4:	4b39      	ldr	r3, [pc, #228]	; (800cdcc <ip4_output_if_src+0x138>)
 800cce6:	f240 3261 	movw	r2, #865	; 0x361
 800ccea:	493b      	ldr	r1, [pc, #236]	; (800cdd8 <ip4_output_if_src+0x144>)
 800ccec:	4839      	ldr	r0, [pc, #228]	; (800cdd4 <ip4_output_if_src+0x140>)
 800ccee:	f002 f84b 	bl	800ed88 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	78fa      	ldrb	r2, [r7, #3]
 800ccf6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ccfe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cd08:	8b7b      	ldrh	r3, [r7, #26]
 800cd0a:	089b      	lsrs	r3, r3, #2
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd14:	b2da      	uxtb	r2, r3
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cd20:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	891b      	ldrh	r3, [r3, #8]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7f6 fafa 	bl	8003320 <lwip_htons>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	461a      	mov	r2, r3
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	2200      	movs	r2, #0
 800cd38:	719a      	strb	r2, [r3, #6]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800cd3e:	4b27      	ldr	r3, [pc, #156]	; (800cddc <ip4_output_if_src+0x148>)
 800cd40:	881b      	ldrh	r3, [r3, #0]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7f6 faec 	bl	8003320 <lwip_htons>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800cd50:	4b22      	ldr	r3, [pc, #136]	; (800cddc <ip4_output_if_src+0x148>)
 800cd52:	881b      	ldrh	r3, [r3, #0]
 800cd54:	3301      	adds	r3, #1
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	4b20      	ldr	r3, [pc, #128]	; (800cddc <ip4_output_if_src+0x148>)
 800cd5a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d104      	bne.n	800cd6c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800cd62:	4b1f      	ldr	r3, [pc, #124]	; (800cde0 <ip4_output_if_src+0x14c>)
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	60da      	str	r2, [r3, #12]
 800cd6a:	e003      	b.n	800cd74 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	69fb      	ldr	r3, [r7, #28]
 800cd72:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800cd74:	69fb      	ldr	r3, [r7, #28]
 800cd76:	2200      	movs	r2, #0
 800cd78:	729a      	strb	r2, [r3, #10]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	72da      	strb	r2, [r3, #11]
 800cd7e:	e008      	b.n	800cd92 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800cd8c:	f107 0314 	add.w	r3, r7, #20
 800cd90:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800cd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00c      	beq.n	800cdb4 <ip4_output_if_src+0x120>
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	891a      	ldrh	r2, [r3, #8]
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d906      	bls.n	800cdb4 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f000 fd0a 	bl	800d7c4 <ip4_frag>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	e006      	b.n	800cdc2 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb6:	695b      	ldr	r3, [r3, #20]
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	68f9      	ldr	r1, [r7, #12]
 800cdbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdbe:	4798      	blx	r3
 800cdc0:	4603      	mov	r3, r0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3720      	adds	r7, #32
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	08011d9c 	.word	0x08011d9c
 800cdd0:	08011dd0 	.word	0x08011dd0
 800cdd4:	08011ddc 	.word	0x08011ddc
 800cdd8:	08011e04 	.word	0x08011e04
 800cddc:	2000020a 	.word	0x2000020a
 800cde0:	080122b0 	.word	0x080122b0

0800cde4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf8:	d002      	beq.n	800ce00 <ip4_addr_isbroadcast_u32+0x1c>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d101      	bne.n	800ce04 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ce00:	2301      	movs	r3, #1
 800ce02:	e02a      	b.n	800ce5a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce0a:	f003 0302 	and.w	r3, r3, #2
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d101      	bne.n	800ce16 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	e021      	b.n	800ce5a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	3304      	adds	r3, #4
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d101      	bne.n	800ce26 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	e019      	b.n	800ce5a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ce26:	68fa      	ldr	r2, [r7, #12]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	3304      	adds	r3, #4
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	405a      	eors	r2, r3
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	3308      	adds	r3, #8
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4013      	ands	r3, r2
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10d      	bne.n	800ce58 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	3308      	adds	r3, #8
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	43da      	mvns	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	3308      	adds	r3, #8
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d101      	bne.n	800ce58 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ce54:	2301      	movs	r3, #1
 800ce56:	e000      	b.n	800ce5a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ce58:	2300      	movs	r3, #0
  }
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3714      	adds	r7, #20
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce64:	4770      	bx	lr
	...

0800ce68 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ce72:	4b12      	ldr	r3, [pc, #72]	; (800cebc <ip_reass_tmr+0x54>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ce78:	e018      	b.n	800ceac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	7fdb      	ldrb	r3, [r3, #31]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00b      	beq.n	800ce9a <ip_reass_tmr+0x32>
      r->timer--;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	7fdb      	ldrb	r3, [r3, #31]
 800ce86:	3b01      	subs	r3, #1
 800ce88:	b2da      	uxtb	r2, r3
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	60fb      	str	r3, [r7, #12]
 800ce98:	e008      	b.n	800ceac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800cea4:	68b9      	ldr	r1, [r7, #8]
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 f80a 	bl	800cec0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1e3      	bne.n	800ce7a <ip_reass_tmr+0x12>
     }
   }
}
 800ceb2:	bf00      	nop
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	2000020c 	.word	0x2000020c

0800cec0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b088      	sub	sp, #32
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ceca:	2300      	movs	r3, #0
 800cecc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800cece:	683a      	ldr	r2, [r7, #0]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d105      	bne.n	800cee2 <ip_reass_free_complete_datagram+0x22>
 800ced6:	4b45      	ldr	r3, [pc, #276]	; (800cfec <ip_reass_free_complete_datagram+0x12c>)
 800ced8:	22ab      	movs	r2, #171	; 0xab
 800ceda:	4945      	ldr	r1, [pc, #276]	; (800cff0 <ip_reass_free_complete_datagram+0x130>)
 800cedc:	4845      	ldr	r0, [pc, #276]	; (800cff4 <ip_reass_free_complete_datagram+0x134>)
 800cede:	f001 ff53 	bl	800ed88 <iprintf>
  if (prev != NULL) {
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00a      	beq.n	800cefe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d005      	beq.n	800cefe <ip_reass_free_complete_datagram+0x3e>
 800cef2:	4b3e      	ldr	r3, [pc, #248]	; (800cfec <ip_reass_free_complete_datagram+0x12c>)
 800cef4:	22ad      	movs	r2, #173	; 0xad
 800cef6:	4940      	ldr	r1, [pc, #256]	; (800cff8 <ip_reass_free_complete_datagram+0x138>)
 800cef8:	483e      	ldr	r0, [pc, #248]	; (800cff4 <ip_reass_free_complete_datagram+0x134>)
 800cefa:	f001 ff45 	bl	800ed88 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	889b      	ldrh	r3, [r3, #4]
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d12a      	bne.n	800cf66 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	6858      	ldr	r0, [r3, #4]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	3308      	adds	r3, #8
 800cf26:	2214      	movs	r2, #20
 800cf28:	4619      	mov	r1, r3
 800cf2a:	f001 ff1a 	bl	800ed62 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800cf2e:	2101      	movs	r1, #1
 800cf30:	69b8      	ldr	r0, [r7, #24]
 800cf32:	f7ff fc47 	bl	800c7c4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800cf36:	69b8      	ldr	r0, [r7, #24]
 800cf38:	f7f7 fb8e 	bl	8004658 <pbuf_clen>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cf40:	8bfa      	ldrh	r2, [r7, #30]
 800cf42:	8a7b      	ldrh	r3, [r7, #18]
 800cf44:	4413      	add	r3, r2
 800cf46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf4a:	db05      	blt.n	800cf58 <ip_reass_free_complete_datagram+0x98>
 800cf4c:	4b27      	ldr	r3, [pc, #156]	; (800cfec <ip_reass_free_complete_datagram+0x12c>)
 800cf4e:	22bc      	movs	r2, #188	; 0xbc
 800cf50:	492a      	ldr	r1, [pc, #168]	; (800cffc <ip_reass_free_complete_datagram+0x13c>)
 800cf52:	4828      	ldr	r0, [pc, #160]	; (800cff4 <ip_reass_free_complete_datagram+0x134>)
 800cf54:	f001 ff18 	bl	800ed88 <iprintf>
    pbufs_freed += clen;
 800cf58:	8bfa      	ldrh	r2, [r7, #30]
 800cf5a:	8a7b      	ldrh	r3, [r7, #18]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800cf60:	69b8      	ldr	r0, [r7, #24]
 800cf62:	f7f7 fae5 	bl	8004530 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800cf6c:	e01f      	b.n	800cfae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	617b      	str	r3, [r7, #20]
    pcur = p;
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	f7f7 fb6a 	bl	8004658 <pbuf_clen>
 800cf84:	4603      	mov	r3, r0
 800cf86:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cf88:	8bfa      	ldrh	r2, [r7, #30]
 800cf8a:	8a7b      	ldrh	r3, [r7, #18]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf92:	db05      	blt.n	800cfa0 <ip_reass_free_complete_datagram+0xe0>
 800cf94:	4b15      	ldr	r3, [pc, #84]	; (800cfec <ip_reass_free_complete_datagram+0x12c>)
 800cf96:	22cc      	movs	r2, #204	; 0xcc
 800cf98:	4918      	ldr	r1, [pc, #96]	; (800cffc <ip_reass_free_complete_datagram+0x13c>)
 800cf9a:	4816      	ldr	r0, [pc, #88]	; (800cff4 <ip_reass_free_complete_datagram+0x134>)
 800cf9c:	f001 fef4 	bl	800ed88 <iprintf>
    pbufs_freed += clen;
 800cfa0:	8bfa      	ldrh	r2, [r7, #30]
 800cfa2:	8a7b      	ldrh	r3, [r7, #18]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f7f7 fac1 	bl	8004530 <pbuf_free>
  while (p != NULL) {
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d1dc      	bne.n	800cf6e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800cfb4:	6839      	ldr	r1, [r7, #0]
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 f8c2 	bl	800d140 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800cfbc:	4b10      	ldr	r3, [pc, #64]	; (800d000 <ip_reass_free_complete_datagram+0x140>)
 800cfbe:	881b      	ldrh	r3, [r3, #0]
 800cfc0:	8bfa      	ldrh	r2, [r7, #30]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d905      	bls.n	800cfd2 <ip_reass_free_complete_datagram+0x112>
 800cfc6:	4b09      	ldr	r3, [pc, #36]	; (800cfec <ip_reass_free_complete_datagram+0x12c>)
 800cfc8:	22d2      	movs	r2, #210	; 0xd2
 800cfca:	490e      	ldr	r1, [pc, #56]	; (800d004 <ip_reass_free_complete_datagram+0x144>)
 800cfcc:	4809      	ldr	r0, [pc, #36]	; (800cff4 <ip_reass_free_complete_datagram+0x134>)
 800cfce:	f001 fedb 	bl	800ed88 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800cfd2:	4b0b      	ldr	r3, [pc, #44]	; (800d000 <ip_reass_free_complete_datagram+0x140>)
 800cfd4:	881a      	ldrh	r2, [r3, #0]
 800cfd6:	8bfb      	ldrh	r3, [r7, #30]
 800cfd8:	1ad3      	subs	r3, r2, r3
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	4b08      	ldr	r3, [pc, #32]	; (800d000 <ip_reass_free_complete_datagram+0x140>)
 800cfde:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800cfe0:	8bfb      	ldrh	r3, [r7, #30]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3720      	adds	r7, #32
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	08011e34 	.word	0x08011e34
 800cff0:	08011e70 	.word	0x08011e70
 800cff4:	08011e7c 	.word	0x08011e7c
 800cff8:	08011ea4 	.word	0x08011ea4
 800cffc:	08011eb8 	.word	0x08011eb8
 800d000:	20000210 	.word	0x20000210
 800d004:	08011ed8 	.word	0x08011ed8

0800d008 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b08a      	sub	sp, #40	; 0x28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d012:	2300      	movs	r3, #0
 800d014:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d016:	2300      	movs	r3, #0
 800d018:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d01a:	2300      	movs	r3, #0
 800d01c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d01e:	2300      	movs	r3, #0
 800d020:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d022:	2300      	movs	r3, #0
 800d024:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d026:	4b28      	ldr	r3, [pc, #160]	; (800d0c8 <ip_reass_remove_oldest_datagram+0xc0>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d02c:	e030      	b.n	800d090 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d030:	695a      	ldr	r2, [r3, #20]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	429a      	cmp	r2, r3
 800d038:	d10c      	bne.n	800d054 <ip_reass_remove_oldest_datagram+0x4c>
 800d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03c:	699a      	ldr	r2, [r3, #24]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	691b      	ldr	r3, [r3, #16]
 800d042:	429a      	cmp	r2, r3
 800d044:	d106      	bne.n	800d054 <ip_reass_remove_oldest_datagram+0x4c>
 800d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d048:	899a      	ldrh	r2, [r3, #12]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	889b      	ldrh	r3, [r3, #4]
 800d04e:	b29b      	uxth	r3, r3
 800d050:	429a      	cmp	r2, r3
 800d052:	d014      	beq.n	800d07e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	3301      	adds	r3, #1
 800d058:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d05a:	6a3b      	ldr	r3, [r7, #32]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d104      	bne.n	800d06a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	61bb      	str	r3, [r7, #24]
 800d068:	e009      	b.n	800d07e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06c:	7fda      	ldrb	r2, [r3, #31]
 800d06e:	6a3b      	ldr	r3, [r7, #32]
 800d070:	7fdb      	ldrb	r3, [r3, #31]
 800d072:	429a      	cmp	r2, r3
 800d074:	d803      	bhi.n	800d07e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d078:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d001      	beq.n	800d08a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d088:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d092:	2b00      	cmp	r3, #0
 800d094:	d1cb      	bne.n	800d02e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d096:	6a3b      	ldr	r3, [r7, #32]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d008      	beq.n	800d0ae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d09c:	69b9      	ldr	r1, [r7, #24]
 800d09e:	6a38      	ldr	r0, [r7, #32]
 800d0a0:	f7ff ff0e 	bl	800cec0 <ip_reass_free_complete_datagram>
 800d0a4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d0a6:	697a      	ldr	r2, [r7, #20]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	4413      	add	r3, r2
 800d0ac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d0ae:	697a      	ldr	r2, [r7, #20]
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	da02      	bge.n	800d0bc <ip_reass_remove_oldest_datagram+0xb4>
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	dcac      	bgt.n	800d016 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d0bc:	697b      	ldr	r3, [r7, #20]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3728      	adds	r7, #40	; 0x28
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	2000020c 	.word	0x2000020c

0800d0cc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d0d6:	2004      	movs	r0, #4
 800d0d8:	f7f6 fcd0 	bl	8003a7c <memp_malloc>
 800d0dc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d110      	bne.n	800d106 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d0e4:	6839      	ldr	r1, [r7, #0]
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f7ff ff8e 	bl	800d008 <ip_reass_remove_oldest_datagram>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	dc03      	bgt.n	800d0fc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d0f4:	2004      	movs	r0, #4
 800d0f6:	f7f6 fcc1 	bl	8003a7c <memp_malloc>
 800d0fa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d101      	bne.n	800d106 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800d102:	2300      	movs	r3, #0
 800d104:	e016      	b.n	800d134 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d106:	2220      	movs	r2, #32
 800d108:	2100      	movs	r1, #0
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f001 fe34 	bl	800ed78 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2203      	movs	r2, #3
 800d114:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d116:	4b09      	ldr	r3, [pc, #36]	; (800d13c <ip_reass_enqueue_new_datagram+0x70>)
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d11e:	4a07      	ldr	r2, [pc, #28]	; (800d13c <ip_reass_enqueue_new_datagram+0x70>)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	3308      	adds	r3, #8
 800d128:	2214      	movs	r2, #20
 800d12a:	6879      	ldr	r1, [r7, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f001 fe18 	bl	800ed62 <memcpy>
  return ipr;
 800d132:	68fb      	ldr	r3, [r7, #12]
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	2000020c 	.word	0x2000020c

0800d140 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d14a:	4b10      	ldr	r3, [pc, #64]	; (800d18c <ip_reass_dequeue_datagram+0x4c>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	429a      	cmp	r2, r3
 800d152:	d104      	bne.n	800d15e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a0c      	ldr	r2, [pc, #48]	; (800d18c <ip_reass_dequeue_datagram+0x4c>)
 800d15a:	6013      	str	r3, [r2, #0]
 800d15c:	e00d      	b.n	800d17a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d106      	bne.n	800d172 <ip_reass_dequeue_datagram+0x32>
 800d164:	4b0a      	ldr	r3, [pc, #40]	; (800d190 <ip_reass_dequeue_datagram+0x50>)
 800d166:	f240 1245 	movw	r2, #325	; 0x145
 800d16a:	490a      	ldr	r1, [pc, #40]	; (800d194 <ip_reass_dequeue_datagram+0x54>)
 800d16c:	480a      	ldr	r0, [pc, #40]	; (800d198 <ip_reass_dequeue_datagram+0x58>)
 800d16e:	f001 fe0b 	bl	800ed88 <iprintf>
    prev->next = ipr->next;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d17a:	6879      	ldr	r1, [r7, #4]
 800d17c:	2004      	movs	r0, #4
 800d17e:	f7f6 fcc9 	bl	8003b14 <memp_free>
}
 800d182:	bf00      	nop
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	2000020c 	.word	0x2000020c
 800d190:	08011e34 	.word	0x08011e34
 800d194:	08011ef4 	.word	0x08011ef4
 800d198:	08011e7c 	.word	0x08011e7c

0800d19c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b08c      	sub	sp, #48	; 0x30
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	885b      	ldrh	r3, [r3, #2]
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7f6 f8af 	bl	8003320 <lwip_htons>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	f003 030f 	and.w	r3, r3, #15
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	88db      	ldrh	r3, [r3, #6]
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7f6 f89d 	bl	8003320 <lwip_htons>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	00db      	lsls	r3, r3, #3
 800d1f0:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	701a      	strb	r2, [r3, #0]
 800d1fe:	2200      	movs	r2, #0
 800d200:	705a      	strb	r2, [r3, #1]
 800d202:	2200      	movs	r2, #0
 800d204:	709a      	strb	r2, [r3, #2]
 800d206:	2200      	movs	r2, #0
 800d208:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20c:	8b3a      	ldrh	r2, [r7, #24]
 800d20e:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800d210:	8b3a      	ldrh	r2, [r7, #24]
 800d212:	8b7b      	ldrh	r3, [r7, #26]
 800d214:	4413      	add	r3, r2
 800d216:	b29a      	uxth	r2, r3
 800d218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21a:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	627b      	str	r3, [r7, #36]	; 0x24
 800d222:	e061      	b.n	800d2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800d22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22c:	889b      	ldrh	r3, [r3, #4]
 800d22e:	b29a      	uxth	r2, r3
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	889b      	ldrh	r3, [r3, #4]
 800d234:	b29b      	uxth	r3, r3
 800d236:	429a      	cmp	r2, r3
 800d238:	d232      	bcs.n	800d2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d23e:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d242:	2b00      	cmp	r3, #0
 800d244:	d01f      	beq.n	800d286 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d248:	889b      	ldrh	r3, [r3, #4]
 800d24a:	b29a      	uxth	r2, r3
 800d24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24e:	88db      	ldrh	r3, [r3, #6]
 800d250:	b29b      	uxth	r3, r3
 800d252:	429a      	cmp	r2, r3
 800d254:	f0c0 80e3 	bcc.w	800d41e <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800d258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25a:	88db      	ldrh	r3, [r3, #6]
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	889b      	ldrh	r3, [r3, #4]
 800d262:	b29b      	uxth	r3, r3
 800d264:	429a      	cmp	r2, r3
 800d266:	f200 80da 	bhi.w	800d41e <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d272:	88db      	ldrh	r3, [r3, #6]
 800d274:	b29a      	uxth	r2, r3
 800d276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d278:	889b      	ldrh	r3, [r3, #4]
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d037      	beq.n	800d2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d280:	2300      	movs	r3, #0
 800d282:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d284:	e034      	b.n	800d2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800d286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d288:	88db      	ldrh	r3, [r3, #6]
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	889b      	ldrh	r3, [r3, #4]
 800d290:	b29b      	uxth	r3, r3
 800d292:	429a      	cmp	r2, r3
 800d294:	f200 80c5 	bhi.w	800d422 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	68ba      	ldr	r2, [r7, #8]
 800d29c:	605a      	str	r2, [r3, #4]
      break;
 800d29e:	e027      	b.n	800d2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800d2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a2:	889b      	ldrh	r3, [r3, #4]
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	889b      	ldrh	r3, [r3, #4]
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	f000 80ba 	beq.w	800d426 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b4:	889b      	ldrh	r3, [r3, #4]
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	88db      	ldrh	r3, [r3, #6]
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	f0c0 80b3 	bcc.w	800d42a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d009      	beq.n	800d2de <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2cc:	88db      	ldrh	r3, [r3, #6]
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	889b      	ldrh	r3, [r3, #4]
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d001      	beq.n	800d2de <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d19a      	bne.n	800d224 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800d2ee:	e000      	b.n	800d2f2 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800d2f0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d12d      	bne.n	800d354 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d01c      	beq.n	800d338 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d300:	88db      	ldrh	r3, [r3, #6]
 800d302:	b29a      	uxth	r2, r3
 800d304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d306:	889b      	ldrh	r3, [r3, #4]
 800d308:	b29b      	uxth	r3, r3
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d906      	bls.n	800d31c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800d30e:	4b51      	ldr	r3, [pc, #324]	; (800d454 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d310:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d314:	4950      	ldr	r1, [pc, #320]	; (800d458 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d316:	4851      	ldr	r0, [pc, #324]	; (800d45c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d318:	f001 fd36 	bl	800ed88 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d324:	88db      	ldrh	r3, [r3, #6]
 800d326:	b29a      	uxth	r2, r3
 800d328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32a:	889b      	ldrh	r3, [r3, #4]
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	429a      	cmp	r2, r3
 800d330:	d010      	beq.n	800d354 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800d332:	2300      	movs	r3, #0
 800d334:	623b      	str	r3, [r7, #32]
 800d336:	e00d      	b.n	800d354 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d006      	beq.n	800d34e <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800d340:	4b44      	ldr	r3, [pc, #272]	; (800d454 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d342:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800d346:	4946      	ldr	r1, [pc, #280]	; (800d460 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d348:	4844      	ldr	r0, [pc, #272]	; (800d45c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d34a:	f001 fd1d 	bl	800ed88 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d105      	bne.n	800d366 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	7f9b      	ldrb	r3, [r3, #30]
 800d35e:	f003 0301 	and.w	r3, r3, #1
 800d362:	2b00      	cmp	r3, #0
 800d364:	d059      	beq.n	800d41a <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800d366:	6a3b      	ldr	r3, [r7, #32]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d04f      	beq.n	800d40c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d006      	beq.n	800d382 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	889b      	ldrh	r3, [r3, #4]
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d002      	beq.n	800d388 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d382:	2300      	movs	r3, #0
 800d384:	623b      	str	r3, [r7, #32]
 800d386:	e041      	b.n	800d40c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d392:	e012      	b.n	800d3ba <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800d394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39c:	88db      	ldrh	r3, [r3, #6]
 800d39e:	b29a      	uxth	r2, r3
 800d3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a2:	889b      	ldrh	r3, [r3, #4]
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d002      	beq.n	800d3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	623b      	str	r3, [r7, #32]
            break;
 800d3ae:	e007      	b.n	800d3c0 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800d3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d1e9      	bne.n	800d394 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d3c0:	6a3b      	ldr	r3, [r7, #32]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d022      	beq.n	800d40c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d106      	bne.n	800d3dc <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800d3ce:	4b21      	ldr	r3, [pc, #132]	; (800d454 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d3d0:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800d3d4:	4923      	ldr	r1, [pc, #140]	; (800d464 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d3d6:	4821      	ldr	r0, [pc, #132]	; (800d45c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d3d8:	f001 fcd6 	bl	800ed88 <iprintf>
          LWIP_ASSERT("sanity check",
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d106      	bne.n	800d3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800d3e8:	4b1a      	ldr	r3, [pc, #104]	; (800d454 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d3ea:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800d3ee:	491d      	ldr	r1, [pc, #116]	; (800d464 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d3f0:	481a      	ldr	r0, [pc, #104]	; (800d45c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d3f2:	f001 fcc9 	bl	800ed88 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d006      	beq.n	800d40c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800d3fe:	4b15      	ldr	r3, [pc, #84]	; (800d454 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d400:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800d404:	4918      	ldr	r1, [pc, #96]	; (800d468 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d406:	4815      	ldr	r0, [pc, #84]	; (800d45c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d408:	f001 fcbe 	bl	800ed88 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d40c:	6a3b      	ldr	r3, [r7, #32]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	bf14      	ite	ne
 800d412:	2301      	movne	r3, #1
 800d414:	2300      	moveq	r3, #0
 800d416:	b2db      	uxtb	r3, r3
 800d418:	e018      	b.n	800d44c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d41a:	2300      	movs	r3, #0
 800d41c:	e016      	b.n	800d44c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800d41e:	bf00      	nop
 800d420:	e004      	b.n	800d42c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800d422:	bf00      	nop
 800d424:	e002      	b.n	800d42c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d426:	bf00      	nop
 800d428:	e000      	b.n	800d42c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800d42a:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800d42c:	68b8      	ldr	r0, [r7, #8]
 800d42e:	f7f7 f913 	bl	8004658 <pbuf_clen>
 800d432:	4603      	mov	r3, r0
 800d434:	461a      	mov	r2, r3
 800d436:	4b0d      	ldr	r3, [pc, #52]	; (800d46c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d438:	881b      	ldrh	r3, [r3, #0]
 800d43a:	1a9b      	subs	r3, r3, r2
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	4b0b      	ldr	r3, [pc, #44]	; (800d46c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d440:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800d442:	68b8      	ldr	r0, [r7, #8]
 800d444:	f7f7 f874 	bl	8004530 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d448:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3730      	adds	r7, #48	; 0x30
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}
 800d454:	08011e34 	.word	0x08011e34
 800d458:	08011f10 	.word	0x08011f10
 800d45c:	08011e7c 	.word	0x08011e7c
 800d460:	08011f30 	.word	0x08011f30
 800d464:	08011f68 	.word	0x08011f68
 800d468:	08011f78 	.word	0x08011f78
 800d46c:	20000210 	.word	0x20000210

0800d470 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b08e      	sub	sp, #56	; 0x38
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800d47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	f003 030f 	and.w	r3, r3, #15
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	2b14      	cmp	r3, #20
 800d48a:	f040 8131 	bne.w	800d6f0 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d490:	88db      	ldrh	r3, [r3, #6]
 800d492:	b29b      	uxth	r3, r3
 800d494:	4618      	mov	r0, r3
 800d496:	f7f5 ff43 	bl	8003320 <lwip_htons>
 800d49a:	4603      	mov	r3, r0
 800d49c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	00db      	lsls	r3, r3, #3
 800d4a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a8:	885b      	ldrh	r3, [r3, #2]
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7f5 ff37 	bl	8003320 <lwip_htons>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	f003 030f 	and.w	r3, r3, #15
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f7f7 f8c4 	bl	8004658 <pbuf_clen>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d4d4:	4b8d      	ldr	r3, [pc, #564]	; (800d70c <ip4_reass+0x29c>)
 800d4d6:	881b      	ldrh	r3, [r3, #0]
 800d4d8:	461a      	mov	r2, r3
 800d4da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4dc:	4413      	add	r3, r2
 800d4de:	2b0a      	cmp	r3, #10
 800d4e0:	dd10      	ble.n	800d504 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d4e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4e8:	f7ff fd8e 	bl	800d008 <ip_reass_remove_oldest_datagram>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f000 8100 	beq.w	800d6f4 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d4f4:	4b85      	ldr	r3, [pc, #532]	; (800d70c <ip4_reass+0x29c>)
 800d4f6:	881b      	ldrh	r3, [r3, #0]
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4fc:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d4fe:	2b0a      	cmp	r3, #10
 800d500:	f300 80f8 	bgt.w	800d6f4 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d504:	4b82      	ldr	r3, [pc, #520]	; (800d710 <ip4_reass+0x2a0>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	633b      	str	r3, [r7, #48]	; 0x30
 800d50a:	e015      	b.n	800d538 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50e:	695a      	ldr	r2, [r3, #20]
 800d510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	429a      	cmp	r2, r3
 800d516:	d10c      	bne.n	800d532 <ip4_reass+0xc2>
 800d518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51a:	699a      	ldr	r2, [r3, #24]
 800d51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51e:	691b      	ldr	r3, [r3, #16]
 800d520:	429a      	cmp	r2, r3
 800d522:	d106      	bne.n	800d532 <ip4_reass+0xc2>
 800d524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d526:	899a      	ldrh	r2, [r3, #12]
 800d528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52a:	889b      	ldrh	r3, [r3, #4]
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	429a      	cmp	r2, r3
 800d530:	d006      	beq.n	800d540 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	633b      	str	r3, [r7, #48]	; 0x30
 800d538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d1e6      	bne.n	800d50c <ip4_reass+0x9c>
 800d53e:	e000      	b.n	800d542 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d540:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d544:	2b00      	cmp	r3, #0
 800d546:	d109      	bne.n	800d55c <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d548:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d54a:	4619      	mov	r1, r3
 800d54c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d54e:	f7ff fdbd 	bl	800d0cc <ip_reass_enqueue_new_datagram>
 800d552:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d556:	2b00      	cmp	r3, #0
 800d558:	d11c      	bne.n	800d594 <ip4_reass+0x124>
      goto nullreturn;
 800d55a:	e0ce      	b.n	800d6fa <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55e:	88db      	ldrh	r3, [r3, #6]
 800d560:	b29b      	uxth	r3, r3
 800d562:	4618      	mov	r0, r3
 800d564:	f7f5 fedc 	bl	8003320 <lwip_htons>
 800d568:	4603      	mov	r3, r0
 800d56a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d110      	bne.n	800d594 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d574:	89db      	ldrh	r3, [r3, #14]
 800d576:	4618      	mov	r0, r3
 800d578:	f7f5 fed2 	bl	8003320 <lwip_htons>
 800d57c:	4603      	mov	r3, r0
 800d57e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d582:	2b00      	cmp	r3, #0
 800d584:	d006      	beq.n	800d594 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d588:	3308      	adds	r3, #8
 800d58a:	2214      	movs	r2, #20
 800d58c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d58e:	4618      	mov	r0, r3
 800d590:	f001 fbe7 	bl	800ed62 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d596:	88db      	ldrh	r3, [r3, #6]
 800d598:	b29b      	uxth	r3, r3
 800d59a:	f003 0320 	and.w	r3, r3, #32
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	bf0c      	ite	eq
 800d5a2:	2301      	moveq	r3, #1
 800d5a4:	2300      	movne	r3, #0
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00e      	beq.n	800d5ce <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800d5b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d5b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5b4:	4413      	add	r3, r2
 800d5b6:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d5b8:	8b7a      	ldrh	r2, [r7, #26]
 800d5ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	f0c0 8099 	bcc.w	800d6f4 <ip4_reass+0x284>
 800d5c2:	8b7b      	ldrh	r3, [r7, #26]
 800d5c4:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	f200 8093 	bhi.w	800d6f4 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d5ce:	69fa      	ldr	r2, [r7, #28]
 800d5d0:	6879      	ldr	r1, [r7, #4]
 800d5d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5d4:	f7ff fde2 	bl	800d19c <ip_reass_chain_frag_into_datagram_and_validate>
 800d5d8:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5e0:	f000 808a 	beq.w	800d6f8 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d5e4:	4b49      	ldr	r3, [pc, #292]	; (800d70c <ip4_reass+0x29c>)
 800d5e6:	881a      	ldrh	r2, [r3, #0]
 800d5e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5ea:	4413      	add	r3, r2
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	4b47      	ldr	r3, [pc, #284]	; (800d70c <ip4_reass+0x29c>)
 800d5f0:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00d      	beq.n	800d614 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800d5f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d5fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5fc:	4413      	add	r3, r2
 800d5fe:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d602:	8a7a      	ldrh	r2, [r7, #18]
 800d604:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d608:	7f9b      	ldrb	r3, [r3, #30]
 800d60a:	f043 0301 	orr.w	r3, r3, #1
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d612:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	2b01      	cmp	r3, #1
 800d618:	d168      	bne.n	800d6ec <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800d61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61c:	8b9b      	ldrh	r3, [r3, #28]
 800d61e:	3314      	adds	r3, #20
 800d620:	b29a      	uxth	r2, r3
 800d622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d624:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800d626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800d630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63a:	3308      	adds	r3, #8
 800d63c:	2214      	movs	r2, #20
 800d63e:	4619      	mov	r1, r3
 800d640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d642:	f001 fb8e 	bl	800ed62 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800d646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d648:	8b9b      	ldrh	r3, [r3, #28]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7f5 fe68 	bl	8003320 <lwip_htons>
 800d650:	4603      	mov	r3, r0
 800d652:	461a      	mov	r2, r3
 800d654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d656:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65a:	2200      	movs	r2, #0
 800d65c:	719a      	strb	r2, [r3, #6]
 800d65e:	2200      	movs	r2, #0
 800d660:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d664:	2200      	movs	r2, #0
 800d666:	729a      	strb	r2, [r3, #10]
 800d668:	2200      	movs	r2, #0
 800d66a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d672:	e00e      	b.n	800d692 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800d674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800d67a:	f06f 0113 	mvn.w	r1, #19
 800d67e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d680:	f7f6 ff32 	bl	80044e8 <pbuf_header>
      pbuf_cat(p, r);
 800d684:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7f7 f820 	bl	80046cc <pbuf_cat>
      r = iprh->next_pbuf;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800d692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1ed      	bne.n	800d674 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d698:	4b1d      	ldr	r3, [pc, #116]	; (800d710 <ip4_reass+0x2a0>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d102      	bne.n	800d6a8 <ip4_reass+0x238>
      ipr_prev = NULL;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6a6:	e010      	b.n	800d6ca <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d6a8:	4b19      	ldr	r3, [pc, #100]	; (800d710 <ip4_reass+0x2a0>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6ae:	e007      	b.n	800d6c0 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800d6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d006      	beq.n	800d6c8 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d1f4      	bne.n	800d6b0 <ip4_reass+0x240>
 800d6c6:	e000      	b.n	800d6ca <ip4_reass+0x25a>
          break;
 800d6c8:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d6ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6ce:	f7ff fd37 	bl	800d140 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7f6 ffc0 	bl	8004658 <pbuf_clen>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	461a      	mov	r2, r3
 800d6dc:	4b0b      	ldr	r3, [pc, #44]	; (800d70c <ip4_reass+0x29c>)
 800d6de:	881b      	ldrh	r3, [r3, #0]
 800d6e0:	1a9b      	subs	r3, r3, r2
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	4b09      	ldr	r3, [pc, #36]	; (800d70c <ip4_reass+0x29c>)
 800d6e6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	e00a      	b.n	800d702 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	e008      	b.n	800d702 <ip4_reass+0x292>
    goto nullreturn;
 800d6f0:	bf00      	nop
 800d6f2:	e002      	b.n	800d6fa <ip4_reass+0x28a>

nullreturn:
 800d6f4:	bf00      	nop
 800d6f6:	e000      	b.n	800d6fa <ip4_reass+0x28a>
    goto nullreturn;
 800d6f8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f7f6 ff18 	bl	8004530 <pbuf_free>
  return NULL;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3738      	adds	r7, #56	; 0x38
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	20000210 	.word	0x20000210
 800d710:	2000020c 	.word	0x2000020c

0800d714 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800d718:	2005      	movs	r0, #5
 800d71a:	f7f6 f9af 	bl	8003a7c <memp_malloc>
 800d71e:	4603      	mov	r3, r0
}
 800d720:	4618      	mov	r0, r3
 800d722:	bd80      	pop	{r7, pc}

0800d724 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d106      	bne.n	800d740 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d732:	4b07      	ldr	r3, [pc, #28]	; (800d750 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d734:	f240 22ae 	movw	r2, #686	; 0x2ae
 800d738:	4906      	ldr	r1, [pc, #24]	; (800d754 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d73a:	4807      	ldr	r0, [pc, #28]	; (800d758 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d73c:	f001 fb24 	bl	800ed88 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d740:	6879      	ldr	r1, [r7, #4]
 800d742:	2005      	movs	r0, #5
 800d744:	f7f6 f9e6 	bl	8003b14 <memp_free>
}
 800d748:	bf00      	nop
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	08011e34 	.word	0x08011e34
 800d754:	08011f9c 	.word	0x08011f9c
 800d758:	08011e7c 	.word	0x08011e7c

0800d75c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d106      	bne.n	800d77c <ipfrag_free_pbuf_custom+0x20>
 800d76e:	4b11      	ldr	r3, [pc, #68]	; (800d7b4 <ipfrag_free_pbuf_custom+0x58>)
 800d770:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800d774:	4910      	ldr	r1, [pc, #64]	; (800d7b8 <ipfrag_free_pbuf_custom+0x5c>)
 800d776:	4811      	ldr	r0, [pc, #68]	; (800d7bc <ipfrag_free_pbuf_custom+0x60>)
 800d778:	f001 fb06 	bl	800ed88 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	429a      	cmp	r2, r3
 800d782:	d006      	beq.n	800d792 <ipfrag_free_pbuf_custom+0x36>
 800d784:	4b0b      	ldr	r3, [pc, #44]	; (800d7b4 <ipfrag_free_pbuf_custom+0x58>)
 800d786:	f240 22b9 	movw	r2, #697	; 0x2b9
 800d78a:	490d      	ldr	r1, [pc, #52]	; (800d7c0 <ipfrag_free_pbuf_custom+0x64>)
 800d78c:	480b      	ldr	r0, [pc, #44]	; (800d7bc <ipfrag_free_pbuf_custom+0x60>)
 800d78e:	f001 fafb 	bl	800ed88 <iprintf>
  if (pcr->original != NULL) {
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	695b      	ldr	r3, [r3, #20]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d004      	beq.n	800d7a4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	695b      	ldr	r3, [r3, #20]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7f6 fec6 	bl	8004530 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f7ff ffbd 	bl	800d724 <ip_frag_free_pbuf_custom_ref>
}
 800d7aa:	bf00      	nop
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	08011e34 	.word	0x08011e34
 800d7b8:	08011fa8 	.word	0x08011fa8
 800d7bc:	08011e7c 	.word	0x08011e7c
 800d7c0:	08011fb4 	.word	0x08011fb4

0800d7c4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b092      	sub	sp, #72	; 0x48
 800d7c8:	af02      	add	r7, sp, #8
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d7d8:	3b14      	subs	r3, #20
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	da00      	bge.n	800d7e0 <ip4_frag+0x1c>
 800d7de:	3307      	adds	r3, #7
 800d7e0:	10db      	asrs	r3, r3, #3
 800d7e2:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d7e4:	2314      	movs	r3, #20
 800d7e6:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800d7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f0:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800d7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	f003 030f 	and.w	r3, r3, #15
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	2b14      	cmp	r3, #20
 800d7fe:	d009      	beq.n	800d814 <ip4_frag+0x50>
 800d800:	4b79      	ldr	r3, [pc, #484]	; (800d9e8 <ip4_frag+0x224>)
 800d802:	f240 22e1 	movw	r2, #737	; 0x2e1
 800d806:	4979      	ldr	r1, [pc, #484]	; (800d9ec <ip4_frag+0x228>)
 800d808:	4879      	ldr	r0, [pc, #484]	; (800d9f0 <ip4_frag+0x22c>)
 800d80a:	f001 fabd 	bl	800ed88 <iprintf>
 800d80e:	f06f 0305 	mvn.w	r3, #5
 800d812:	e0e5      	b.n	800d9e0 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	88db      	ldrh	r3, [r3, #6]
 800d818:	b29b      	uxth	r3, r3
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7f5 fd80 	bl	8003320 <lwip_htons>
 800d820:	4603      	mov	r3, r0
 800d822:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800d824:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d826:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d82a:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800d82c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d82e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d832:	2b00      	cmp	r3, #0
 800d834:	d009      	beq.n	800d84a <ip4_frag+0x86>
 800d836:	4b6c      	ldr	r3, [pc, #432]	; (800d9e8 <ip4_frag+0x224>)
 800d838:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d83c:	496d      	ldr	r1, [pc, #436]	; (800d9f4 <ip4_frag+0x230>)
 800d83e:	486c      	ldr	r0, [pc, #432]	; (800d9f0 <ip4_frag+0x22c>)
 800d840:	f001 faa2 	bl	800ed88 <iprintf>
 800d844:	f06f 0305 	mvn.w	r3, #5
 800d848:	e0ca      	b.n	800d9e0 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	891b      	ldrh	r3, [r3, #8]
 800d84e:	3b14      	subs	r3, #20
 800d850:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800d852:	e0bc      	b.n	800d9ce <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800d854:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d856:	00da      	lsls	r2, r3, #3
 800d858:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d85a:	4293      	cmp	r3, r2
 800d85c:	bfa8      	it	ge
 800d85e:	4613      	movge	r3, r2
 800d860:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d862:	2200      	movs	r2, #0
 800d864:	2114      	movs	r1, #20
 800d866:	2002      	movs	r0, #2
 800d868:	f7f6 faf0 	bl	8003e4c <pbuf_alloc>
 800d86c:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800d86e:	6a3b      	ldr	r3, [r7, #32]
 800d870:	2b00      	cmp	r3, #0
 800d872:	f000 80b2 	beq.w	800d9da <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	895b      	ldrh	r3, [r3, #10]
 800d87a:	2b13      	cmp	r3, #19
 800d87c:	d806      	bhi.n	800d88c <ip4_frag+0xc8>
 800d87e:	4b5a      	ldr	r3, [pc, #360]	; (800d9e8 <ip4_frag+0x224>)
 800d880:	f240 3209 	movw	r2, #777	; 0x309
 800d884:	495c      	ldr	r1, [pc, #368]	; (800d9f8 <ip4_frag+0x234>)
 800d886:	485a      	ldr	r0, [pc, #360]	; (800d9f0 <ip4_frag+0x22c>)
 800d888:	f001 fa7e 	bl	800ed88 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d88c:	6a3b      	ldr	r3, [r7, #32]
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	2214      	movs	r2, #20
 800d892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d894:	4618      	mov	r0, r3
 800d896:	f001 fa64 	bl	800ed62 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d89a:	6a3b      	ldr	r3, [r7, #32]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800d8a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d8a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800d8a4:	e04f      	b.n	800d946 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	895a      	ldrh	r2, [r3, #10]
 800d8aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d8ac:	1ad3      	subs	r3, r2, r3
 800d8ae:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d8b0:	8b7a      	ldrh	r2, [r7, #26]
 800d8b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	bf28      	it	cs
 800d8b8:	4613      	movcs	r3, r2
 800d8ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d8bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d105      	bne.n	800d8ce <ip4_frag+0x10a>
        poff = 0;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	60fb      	str	r3, [r7, #12]
        continue;
 800d8cc:	e03b      	b.n	800d946 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d8ce:	f7ff ff21 	bl	800d714 <ip_frag_alloc_pbuf_custom_ref>
 800d8d2:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d103      	bne.n	800d8e2 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800d8da:	6a38      	ldr	r0, [r7, #32]
 800d8dc:	f7f6 fe28 	bl	8004530 <pbuf_free>
        goto memerr;
 800d8e0:	e07c      	b.n	800d9dc <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d8e2:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d8e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d8ea:	4413      	add	r3, r2
 800d8ec:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d8ee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d8f0:	9201      	str	r2, [sp, #4]
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2202      	movs	r2, #2
 800d8f8:	2004      	movs	r0, #4
 800d8fa:	f7f6 fc3b 	bl	8004174 <pbuf_alloced_custom>
 800d8fe:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d106      	bne.n	800d914 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d906:	6978      	ldr	r0, [r7, #20]
 800d908:	f7ff ff0c 	bl	800d724 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d90c:	6a38      	ldr	r0, [r7, #32]
 800d90e:	f7f6 fe0f 	bl	8004530 <pbuf_free>
        goto memerr;
 800d912:	e063      	b.n	800d9dc <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800d914:	68f8      	ldr	r0, [r7, #12]
 800d916:	f7f6 feb7 	bl	8004688 <pbuf_ref>
      pcr->original = p;
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	4a36      	ldr	r2, [pc, #216]	; (800d9fc <ip4_frag+0x238>)
 800d924:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d926:	6939      	ldr	r1, [r7, #16]
 800d928:	6a38      	ldr	r0, [r7, #32]
 800d92a:	f7f6 fecf 	bl	80046cc <pbuf_cat>
      left_to_copy -= newpbuflen;
 800d92e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800d930:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d932:	1ad3      	subs	r3, r2, r3
 800d934:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800d936:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d004      	beq.n	800d946 <ip4_frag+0x182>
        poff = 0;
 800d93c:	2300      	movs	r3, #0
 800d93e:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d946:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1ac      	bne.n	800d8a6 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800d94c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d94e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d950:	4413      	add	r3, r2
 800d952:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d954:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d95a:	3b14      	subs	r3, #20
 800d95c:	429a      	cmp	r2, r3
 800d95e:	bfd4      	ite	le
 800d960:	2301      	movle	r3, #1
 800d962:	2300      	movgt	r3, #0
 800d964:	b2db      	uxtb	r3, r3
 800d966:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d968:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d96a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d96e:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d103      	bne.n	800d97e <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800d976:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d978:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d97c:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d97e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d980:	4618      	mov	r0, r3
 800d982:	f7f5 fccd 	bl	8003320 <lwip_htons>
 800d986:	4603      	mov	r3, r0
 800d988:	461a      	mov	r2, r3
 800d98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800d98e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d990:	3314      	adds	r3, #20
 800d992:	b29b      	uxth	r3, r3
 800d994:	4618      	mov	r0, r3
 800d996:	f7f5 fcc3 	bl	8003320 <lwip_htons>
 800d99a:	4603      	mov	r3, r0
 800d99c:	461a      	mov	r2, r3
 800d99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	729a      	strb	r2, [r3, #10]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	695b      	ldr	r3, [r3, #20]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	6a39      	ldr	r1, [r7, #32]
 800d9b4:	68b8      	ldr	r0, [r7, #8]
 800d9b6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d9b8:	6a38      	ldr	r0, [r7, #32]
 800d9ba:	f7f6 fdb9 	bl	8004530 <pbuf_free>
    left -= fragsize;
 800d9be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d9c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9c2:	1ad3      	subs	r3, r2, r3
 800d9c4:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800d9c6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800d9c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d9ca:	4413      	add	r3, r2
 800d9cc:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800d9ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f47f af3f 	bne.w	800d854 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e002      	b.n	800d9e0 <ip4_frag+0x21c>
      goto memerr;
 800d9da:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d9dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3740      	adds	r7, #64	; 0x40
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	08011e34 	.word	0x08011e34
 800d9ec:	08011fc0 	.word	0x08011fc0
 800d9f0:	08011e7c 	.word	0x08011e7c
 800d9f4:	08011fe8 	.word	0x08011fe8
 800d9f8:	08012004 	.word	0x08012004
 800d9fc:	0800d75d 	.word	0x0800d75d

0800da00 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b086      	sub	sp, #24
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800da0a:	230e      	movs	r3, #14
 800da0c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	895b      	ldrh	r3, [r3, #10]
 800da12:	2b0e      	cmp	r3, #14
 800da14:	d977      	bls.n	800db06 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	7b1a      	ldrb	r2, [r3, #12]
 800da20:	7b5b      	ldrb	r3, [r3, #13]
 800da22:	021b      	lsls	r3, r3, #8
 800da24:	4313      	orrs	r3, r2
 800da26:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	f003 0301 	and.w	r3, r3, #1
 800da30:	2b00      	cmp	r3, #0
 800da32:	d023      	beq.n	800da7c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d10f      	bne.n	800da5c <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	785b      	ldrb	r3, [r3, #1]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d11b      	bne.n	800da7c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800da48:	2b5e      	cmp	r3, #94	; 0x5e
 800da4a:	d117      	bne.n	800da7c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	7b5b      	ldrb	r3, [r3, #13]
 800da50:	f043 0310 	orr.w	r3, r3, #16
 800da54:	b2da      	uxtb	r2, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	735a      	strb	r2, [r3, #13]
 800da5a:	e00f      	b.n	800da7c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	2206      	movs	r2, #6
 800da60:	4930      	ldr	r1, [pc, #192]	; (800db24 <ethernet_input+0x124>)
 800da62:	4618      	mov	r0, r3
 800da64:	f001 f96e 	bl	800ed44 <memcmp>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d106      	bne.n	800da7c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	7b5b      	ldrb	r3, [r3, #13]
 800da72:	f043 0308 	orr.w	r3, r3, #8
 800da76:	b2da      	uxtb	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800da7c:	89fb      	ldrh	r3, [r7, #14]
 800da7e:	2b08      	cmp	r3, #8
 800da80:	d003      	beq.n	800da8a <ethernet_input+0x8a>
 800da82:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800da86:	d01e      	beq.n	800dac6 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800da88:	e044      	b.n	800db14 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800da90:	f003 0308 	and.w	r3, r3, #8
 800da94:	2b00      	cmp	r3, #0
 800da96:	d038      	beq.n	800db0a <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	895b      	ldrh	r3, [r3, #10]
 800da9c:	461a      	mov	r2, r3
 800da9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	db33      	blt.n	800db0e <ethernet_input+0x10e>
 800daa6:	8afb      	ldrh	r3, [r7, #22]
 800daa8:	425b      	negs	r3, r3
 800daaa:	b29b      	uxth	r3, r3
 800daac:	b21b      	sxth	r3, r3
 800daae:	4619      	mov	r1, r3
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f7f6 fd19 	bl	80044e8 <pbuf_header>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d128      	bne.n	800db0e <ethernet_input+0x10e>
        ip4_input(p, netif);
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7fe ff62 	bl	800c988 <ip4_input>
      break;
 800dac4:	e01d      	b.n	800db02 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dacc:	f003 0308 	and.w	r3, r3, #8
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d01e      	beq.n	800db12 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	895b      	ldrh	r3, [r3, #10]
 800dad8:	461a      	mov	r2, r3
 800dada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dade:	429a      	cmp	r2, r3
 800dae0:	db15      	blt.n	800db0e <ethernet_input+0x10e>
 800dae2:	8afb      	ldrh	r3, [r7, #22]
 800dae4:	425b      	negs	r3, r3
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	b21b      	sxth	r3, r3
 800daea:	4619      	mov	r1, r3
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7f6 fcfb 	bl	80044e8 <pbuf_header>
 800daf2:	4603      	mov	r3, r0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d10a      	bne.n	800db0e <ethernet_input+0x10e>
        etharp_input(p, netif);
 800daf8:	6839      	ldr	r1, [r7, #0]
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7fe f92c 	bl	800bd58 <etharp_input>
      break;
 800db00:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800db02:	2300      	movs	r3, #0
 800db04:	e00a      	b.n	800db1c <ethernet_input+0x11c>
    goto free_and_return;
 800db06:	bf00      	nop
 800db08:	e004      	b.n	800db14 <ethernet_input+0x114>
        goto free_and_return;
 800db0a:	bf00      	nop
 800db0c:	e002      	b.n	800db14 <ethernet_input+0x114>

free_and_return:
 800db0e:	bf00      	nop
 800db10:	e000      	b.n	800db14 <ethernet_input+0x114>
        goto free_and_return;
 800db12:	bf00      	nop
  pbuf_free(p);
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f7f6 fd0b 	bl	8004530 <pbuf_free>
  return ERR_OK;
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3718      	adds	r7, #24
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	080122b8 	.word	0x080122b8

0800db28 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b086      	sub	sp, #24
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	607a      	str	r2, [r7, #4]
 800db34:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800db36:	8c3b      	ldrh	r3, [r7, #32]
 800db38:	4618      	mov	r0, r3
 800db3a:	f7f5 fbf1 	bl	8003320 <lwip_htons>
 800db3e:	4603      	mov	r3, r0
 800db40:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800db42:	210e      	movs	r1, #14
 800db44:	68b8      	ldr	r0, [r7, #8]
 800db46:	f7f6 fccf 	bl	80044e8 <pbuf_header>
 800db4a:	4603      	mov	r3, r0
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d125      	bne.n	800db9c <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	8afa      	ldrh	r2, [r7, #22]
 800db5a:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	2206      	movs	r2, #6
 800db60:	6839      	ldr	r1, [r7, #0]
 800db62:	4618      	mov	r0, r3
 800db64:	f001 f8fd 	bl	800ed62 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	3306      	adds	r3, #6
 800db6c:	2206      	movs	r2, #6
 800db6e:	6879      	ldr	r1, [r7, #4]
 800db70:	4618      	mov	r0, r3
 800db72:	f001 f8f6 	bl	800ed62 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db7c:	2b06      	cmp	r3, #6
 800db7e:	d006      	beq.n	800db8e <ethernet_output+0x66>
 800db80:	4b0a      	ldr	r3, [pc, #40]	; (800dbac <ethernet_output+0x84>)
 800db82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800db86:	490a      	ldr	r1, [pc, #40]	; (800dbb0 <ethernet_output+0x88>)
 800db88:	480a      	ldr	r0, [pc, #40]	; (800dbb4 <ethernet_output+0x8c>)
 800db8a:	f001 f8fd 	bl	800ed88 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	699b      	ldr	r3, [r3, #24]
 800db92:	68b9      	ldr	r1, [r7, #8]
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	4798      	blx	r3
 800db98:	4603      	mov	r3, r0
 800db9a:	e002      	b.n	800dba2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800db9c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800db9e:	f06f 0301 	mvn.w	r3, #1
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3718      	adds	r7, #24
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	08012024 	.word	0x08012024
 800dbb0:	0801205c 	.word	0x0801205c
 800dbb4:	08012090 	.word	0x08012090

0800dbb8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b08e      	sub	sp, #56	; 0x38
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dbc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	601a      	str	r2, [r3, #0]
 800dbc8:	605a      	str	r2, [r3, #4]
 800dbca:	609a      	str	r2, [r3, #8]
 800dbcc:	60da      	str	r2, [r3, #12]
 800dbce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4a55      	ldr	r2, [pc, #340]	; (800dd2c <HAL_ETH_MspInit+0x174>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	f040 80a4 	bne.w	800dd24 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800dbdc:	2300      	movs	r3, #0
 800dbde:	623b      	str	r3, [r7, #32]
 800dbe0:	4b53      	ldr	r3, [pc, #332]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe4:	4a52      	ldr	r2, [pc, #328]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dbe6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dbea:	6313      	str	r3, [r2, #48]	; 0x30
 800dbec:	4b50      	ldr	r3, [pc, #320]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dbee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbf4:	623b      	str	r3, [r7, #32]
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	61fb      	str	r3, [r7, #28]
 800dbfc:	4b4c      	ldr	r3, [pc, #304]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc00:	4a4b      	ldr	r2, [pc, #300]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dc06:	6313      	str	r3, [r2, #48]	; 0x30
 800dc08:	4b49      	ldr	r3, [pc, #292]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dc10:	61fb      	str	r3, [r7, #28]
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	2300      	movs	r3, #0
 800dc16:	61bb      	str	r3, [r7, #24]
 800dc18:	4b45      	ldr	r3, [pc, #276]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc1c:	4a44      	ldr	r2, [pc, #272]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dc22:	6313      	str	r3, [r2, #48]	; 0x30
 800dc24:	4b42      	ldr	r3, [pc, #264]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc2c:	61bb      	str	r3, [r7, #24]
 800dc2e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dc30:	2300      	movs	r3, #0
 800dc32:	617b      	str	r3, [r7, #20]
 800dc34:	4b3e      	ldr	r3, [pc, #248]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc38:	4a3d      	ldr	r2, [pc, #244]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc3a:	f043 0304 	orr.w	r3, r3, #4
 800dc3e:	6313      	str	r3, [r2, #48]	; 0x30
 800dc40:	4b3b      	ldr	r3, [pc, #236]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc44:	f003 0304 	and.w	r3, r3, #4
 800dc48:	617b      	str	r3, [r7, #20]
 800dc4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	613b      	str	r3, [r7, #16]
 800dc50:	4b37      	ldr	r3, [pc, #220]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc54:	4a36      	ldr	r2, [pc, #216]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc56:	f043 0301 	orr.w	r3, r3, #1
 800dc5a:	6313      	str	r3, [r2, #48]	; 0x30
 800dc5c:	4b34      	ldr	r3, [pc, #208]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc60:	f003 0301 	and.w	r3, r3, #1
 800dc64:	613b      	str	r3, [r7, #16]
 800dc66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dc68:	2300      	movs	r3, #0
 800dc6a:	60fb      	str	r3, [r7, #12]
 800dc6c:	4b30      	ldr	r3, [pc, #192]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc70:	4a2f      	ldr	r2, [pc, #188]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc72:	f043 0302 	orr.w	r3, r3, #2
 800dc76:	6313      	str	r3, [r2, #48]	; 0x30
 800dc78:	4b2d      	ldr	r3, [pc, #180]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc7c:	f003 0302 	and.w	r3, r3, #2
 800dc80:	60fb      	str	r3, [r7, #12]
 800dc82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800dc84:	2300      	movs	r3, #0
 800dc86:	60bb      	str	r3, [r7, #8]
 800dc88:	4b29      	ldr	r3, [pc, #164]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc8c:	4a28      	ldr	r2, [pc, #160]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc92:	6313      	str	r3, [r2, #48]	; 0x30
 800dc94:	4b26      	ldr	r3, [pc, #152]	; (800dd30 <HAL_ETH_MspInit+0x178>)
 800dc96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc9c:	60bb      	str	r3, [r7, #8]
 800dc9e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800dca0:	2332      	movs	r3, #50	; 0x32
 800dca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dca4:	2302      	movs	r3, #2
 800dca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dcac:	2303      	movs	r3, #3
 800dcae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dcb0:	230b      	movs	r3, #11
 800dcb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dcb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcb8:	4619      	mov	r1, r3
 800dcba:	481e      	ldr	r0, [pc, #120]	; (800dd34 <HAL_ETH_MspInit+0x17c>)
 800dcbc:	f7f3 fdf6 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800dcc0:	2386      	movs	r3, #134	; 0x86
 800dcc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcc4:	2302      	movs	r3, #2
 800dcc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dccc:	2303      	movs	r3, #3
 800dcce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dcd0:	230b      	movs	r3, #11
 800dcd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dcd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcd8:	4619      	mov	r1, r3
 800dcda:	4817      	ldr	r0, [pc, #92]	; (800dd38 <HAL_ETH_MspInit+0x180>)
 800dcdc:	f7f3 fde6 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800dce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dce6:	2302      	movs	r3, #2
 800dce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcea:	2300      	movs	r3, #0
 800dcec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dcee:	2303      	movs	r3, #3
 800dcf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dcf2:	230b      	movs	r3, #11
 800dcf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800dcf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	480f      	ldr	r0, [pc, #60]	; (800dd3c <HAL_ETH_MspInit+0x184>)
 800dcfe:	f7f3 fdd5 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800dd02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd08:	2302      	movs	r3, #2
 800dd0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd10:	2303      	movs	r3, #3
 800dd12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dd14:	230b      	movs	r3, #11
 800dd16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800dd18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	4808      	ldr	r0, [pc, #32]	; (800dd40 <HAL_ETH_MspInit+0x188>)
 800dd20:	f7f3 fdc4 	bl	80018ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800dd24:	bf00      	nop
 800dd26:	3738      	adds	r7, #56	; 0x38
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	40028000 	.word	0x40028000
 800dd30:	40023800 	.word	0x40023800
 800dd34:	40020800 	.word	0x40020800
 800dd38:	40020000 	.word	0x40020000
 800dd3c:	40020400 	.word	0x40020400
 800dd40:	40021800 	.word	0x40021800

0800dd44 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800dd50:	4b49      	ldr	r3, [pc, #292]	; (800de78 <low_level_init+0x134>)
 800dd52:	4a4a      	ldr	r2, [pc, #296]	; (800de7c <low_level_init+0x138>)
 800dd54:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800dd56:	4b48      	ldr	r3, [pc, #288]	; (800de78 <low_level_init+0x134>)
 800dd58:	2201      	movs	r2, #1
 800dd5a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800dd5c:	4b46      	ldr	r3, [pc, #280]	; (800de78 <low_level_init+0x134>)
 800dd5e:	2200      	movs	r2, #0
 800dd60:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800dd62:	2300      	movs	r3, #0
 800dd64:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800dd66:	2380      	movs	r3, #128	; 0x80
 800dd68:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800dd6a:	23e1      	movs	r3, #225	; 0xe1
 800dd6c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800dd72:	2300      	movs	r3, #0
 800dd74:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800dd76:	2300      	movs	r3, #0
 800dd78:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800dd7a:	4a3f      	ldr	r2, [pc, #252]	; (800de78 <low_level_init+0x134>)
 800dd7c:	f107 0308 	add.w	r3, r7, #8
 800dd80:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800dd82:	4b3d      	ldr	r3, [pc, #244]	; (800de78 <low_level_init+0x134>)
 800dd84:	2200      	movs	r2, #0
 800dd86:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800dd88:	4b3b      	ldr	r3, [pc, #236]	; (800de78 <low_level_init+0x134>)
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800dd8e:	4b3a      	ldr	r3, [pc, #232]	; (800de78 <low_level_init+0x134>)
 800dd90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800dd94:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800dd96:	4838      	ldr	r0, [pc, #224]	; (800de78 <low_level_init+0x134>)
 800dd98:	f7f2 fe78 	bl	8000a8c <HAL_ETH_Init>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800dda0:	7dfb      	ldrb	r3, [r7, #23]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d108      	bne.n	800ddb8 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ddac:	f043 0304 	orr.w	r3, r3, #4
 800ddb0:	b2da      	uxtb	r2, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ddb8:	2304      	movs	r3, #4
 800ddba:	4a31      	ldr	r2, [pc, #196]	; (800de80 <low_level_init+0x13c>)
 800ddbc:	4931      	ldr	r1, [pc, #196]	; (800de84 <low_level_init+0x140>)
 800ddbe:	482e      	ldr	r0, [pc, #184]	; (800de78 <low_level_init+0x134>)
 800ddc0:	f7f3 f802 	bl	8000dc8 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ddc4:	2304      	movs	r3, #4
 800ddc6:	4a30      	ldr	r2, [pc, #192]	; (800de88 <low_level_init+0x144>)
 800ddc8:	4930      	ldr	r1, [pc, #192]	; (800de8c <low_level_init+0x148>)
 800ddca:	482b      	ldr	r0, [pc, #172]	; (800de78 <low_level_init+0x134>)
 800ddcc:	f7f3 f865 	bl	8000e9a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2206      	movs	r2, #6
 800ddd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ddd8:	4b27      	ldr	r3, [pc, #156]	; (800de78 <low_level_init+0x134>)
 800ddda:	695b      	ldr	r3, [r3, #20]
 800dddc:	781a      	ldrb	r2, [r3, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800dde4:	4b24      	ldr	r3, [pc, #144]	; (800de78 <low_level_init+0x134>)
 800dde6:	695b      	ldr	r3, [r3, #20]
 800dde8:	785a      	ldrb	r2, [r3, #1]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ddf0:	4b21      	ldr	r3, [pc, #132]	; (800de78 <low_level_init+0x134>)
 800ddf2:	695b      	ldr	r3, [r3, #20]
 800ddf4:	789a      	ldrb	r2, [r3, #2]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ddfc:	4b1e      	ldr	r3, [pc, #120]	; (800de78 <low_level_init+0x134>)
 800ddfe:	695b      	ldr	r3, [r3, #20]
 800de00:	78da      	ldrb	r2, [r3, #3]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800de08:	4b1b      	ldr	r3, [pc, #108]	; (800de78 <low_level_init+0x134>)
 800de0a:	695b      	ldr	r3, [r3, #20]
 800de0c:	791a      	ldrb	r2, [r3, #4]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800de14:	4b18      	ldr	r3, [pc, #96]	; (800de78 <low_level_init+0x134>)
 800de16:	695b      	ldr	r3, [r3, #20]
 800de18:	795a      	ldrb	r2, [r3, #5]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800de26:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de2e:	f043 030a 	orr.w	r3, r3, #10
 800de32:	b2da      	uxtb	r2, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800de3a:	480f      	ldr	r0, [pc, #60]	; (800de78 <low_level_init+0x134>)
 800de3c:	f7f3 fa52 	bl	80012e4 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800de40:	f107 0310 	add.w	r3, r7, #16
 800de44:	461a      	mov	r2, r3
 800de46:	211d      	movs	r1, #29
 800de48:	480b      	ldr	r0, [pc, #44]	; (800de78 <low_level_init+0x134>)
 800de4a:	f7f3 f97d 	bl	8001148 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	f043 030b 	orr.w	r3, r3, #11
 800de54:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	461a      	mov	r2, r3
 800de5a:	211d      	movs	r1, #29
 800de5c:	4806      	ldr	r0, [pc, #24]	; (800de78 <low_level_init+0x134>)
 800de5e:	f7f3 f9db 	bl	8001218 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800de62:	f107 0310 	add.w	r3, r7, #16
 800de66:	461a      	mov	r2, r3
 800de68:	211d      	movs	r1, #29
 800de6a:	4803      	ldr	r0, [pc, #12]	; (800de78 <low_level_init+0x134>)
 800de6c:	f7f3 f96c 	bl	8001148 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800de70:	bf00      	nop
 800de72:	3718      	adds	r7, #24
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	2000508c 	.word	0x2000508c
 800de7c:	40028000 	.word	0x40028000
 800de80:	200050d4 	.word	0x200050d4
 800de84:	200037bc 	.word	0x200037bc
 800de88:	2000383c 	.word	0x2000383c
 800de8c:	2000500c 	.word	0x2000500c

0800de90 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b08a      	sub	sp, #40	; 0x28
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800de9a:	4b4b      	ldr	r3, [pc, #300]	; (800dfc8 <low_level_output+0x138>)
 800de9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800dea2:	2300      	movs	r3, #0
 800dea4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800dea6:	2300      	movs	r3, #0
 800dea8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800deae:	2300      	movs	r3, #0
 800deb0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800deb2:	4b45      	ldr	r3, [pc, #276]	; (800dfc8 <low_level_output+0x138>)
 800deb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800deb8:	2300      	movs	r3, #0
 800deba:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	623b      	str	r3, [r7, #32]
 800dec0:	e05a      	b.n	800df78 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800dec2:	69bb      	ldr	r3, [r7, #24]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	da03      	bge.n	800ded2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800deca:	23f8      	movs	r3, #248	; 0xf8
 800decc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800ded0:	e05c      	b.n	800df8c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800ded2:	6a3b      	ldr	r3, [r7, #32]
 800ded4:	895b      	ldrh	r3, [r3, #10]
 800ded6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800ded8:	2300      	movs	r3, #0
 800deda:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800dedc:	e02f      	b.n	800df3e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800dede:	69fa      	ldr	r2, [r7, #28]
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	18d0      	adds	r0, r2, r3
 800dee4:	6a3b      	ldr	r3, [r7, #32]
 800dee6:	685a      	ldr	r2, [r3, #4]
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	18d1      	adds	r1, r2, r3
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800def2:	3304      	adds	r3, #4
 800def4:	461a      	mov	r2, r3
 800def6:	f000 ff34 	bl	800ed62 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800defa:	69bb      	ldr	r3, [r7, #24]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	da03      	bge.n	800df10 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800df08:	23f8      	movs	r3, #248	; 0xf8
 800df0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800df0e:	e03d      	b.n	800df8c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800df16:	693a      	ldr	r2, [r7, #16]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	4413      	add	r3, r2
 800df1c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800df20:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800df22:	68ba      	ldr	r2, [r7, #8]
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	1ad3      	subs	r3, r2, r3
 800df28:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800df2c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800df2e:	697a      	ldr	r2, [r7, #20]
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800df38:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800df3a:	2300      	movs	r3, #0
 800df3c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800df3e:	68fa      	ldr	r2, [r7, #12]
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	4413      	add	r3, r2
 800df44:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800df48:	4293      	cmp	r3, r2
 800df4a:	d8c8      	bhi.n	800dede <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800df4c:	69fa      	ldr	r2, [r7, #28]
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	18d0      	adds	r0, r2, r3
 800df52:	6a3b      	ldr	r3, [r7, #32]
 800df54:	685a      	ldr	r2, [r3, #4]
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	4413      	add	r3, r2
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	4619      	mov	r1, r3
 800df5e:	f000 ff00 	bl	800ed62 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800df62:	693a      	ldr	r2, [r7, #16]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	4413      	add	r3, r2
 800df68:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800df6a:	697a      	ldr	r2, [r7, #20]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	4413      	add	r3, r2
 800df70:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800df72:	6a3b      	ldr	r3, [r7, #32]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	623b      	str	r3, [r7, #32]
 800df78:	6a3b      	ldr	r3, [r7, #32]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d1a1      	bne.n	800dec2 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800df7e:	6979      	ldr	r1, [r7, #20]
 800df80:	4811      	ldr	r0, [pc, #68]	; (800dfc8 <low_level_output+0x138>)
 800df82:	f7f2 fff7 	bl	8000f74 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800df86:	2300      	movs	r3, #0
 800df88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800df8c:	4b0e      	ldr	r3, [pc, #56]	; (800dfc8 <low_level_output+0x138>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df94:	3314      	adds	r3, #20
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f003 0320 	and.w	r3, r3, #32
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d00d      	beq.n	800dfbc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800dfa0:	4b09      	ldr	r3, [pc, #36]	; (800dfc8 <low_level_output+0x138>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfa8:	3314      	adds	r3, #20
 800dfaa:	2220      	movs	r2, #32
 800dfac:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800dfae:	4b06      	ldr	r3, [pc, #24]	; (800dfc8 <low_level_output+0x138>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfb6:	3304      	adds	r3, #4
 800dfb8:	2200      	movs	r2, #0
 800dfba:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800dfbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3728      	adds	r7, #40	; 0x28
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	2000508c 	.word	0x2000508c

0800dfcc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d106      	bne.n	800dfe8 <ethernetif_init+0x1c>
 800dfda:	4b0e      	ldr	r3, [pc, #56]	; (800e014 <ethernetif_init+0x48>)
 800dfdc:	f44f 7204 	mov.w	r2, #528	; 0x210
 800dfe0:	490d      	ldr	r1, [pc, #52]	; (800e018 <ethernetif_init+0x4c>)
 800dfe2:	480e      	ldr	r0, [pc, #56]	; (800e01c <ethernetif_init+0x50>)
 800dfe4:	f000 fed0 	bl	800ed88 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2273      	movs	r2, #115	; 0x73
 800dfec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2274      	movs	r2, #116	; 0x74
 800dff4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	4a09      	ldr	r2, [pc, #36]	; (800e020 <ethernetif_init+0x54>)
 800dffc:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4a08      	ldr	r2, [pc, #32]	; (800e024 <ethernetif_init+0x58>)
 800e002:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff fe9d 	bl	800dd44 <low_level_init>

  return ERR_OK;
 800e00a:	2300      	movs	r3, #0
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	080120b8 	.word	0x080120b8
 800e018:	080120cc 	.word	0x080120cc
 800e01c:	080120dc 	.word	0x080120dc
 800e020:	0800bfa9 	.word	0x0800bfa9
 800e024:	0800de91 	.word	0x0800de91

0800e028 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e02c:	f7f2 fb1e 	bl	800066c <HAL_GetTick>
 800e030:	4603      	mov	r3, r0
}
 800e032:	4618      	mov	r0, r3
 800e034:	bd80      	pop	{r7, pc}
	...

0800e038 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800e03e:	f7f5 f996 	bl	800336e <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800e042:	4b17      	ldr	r3, [pc, #92]	; (800e0a0 <MX_LWIP_Init+0x68>)
 800e044:	2200      	movs	r2, #0
 800e046:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800e048:	4b16      	ldr	r3, [pc, #88]	; (800e0a4 <MX_LWIP_Init+0x6c>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800e04e:	4b16      	ldr	r3, [pc, #88]	; (800e0a8 <MX_LWIP_Init+0x70>)
 800e050:	2200      	movs	r2, #0
 800e052:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800e054:	4b15      	ldr	r3, [pc, #84]	; (800e0ac <MX_LWIP_Init+0x74>)
 800e056:	9302      	str	r3, [sp, #8]
 800e058:	4b15      	ldr	r3, [pc, #84]	; (800e0b0 <MX_LWIP_Init+0x78>)
 800e05a:	9301      	str	r3, [sp, #4]
 800e05c:	2300      	movs	r3, #0
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	4b11      	ldr	r3, [pc, #68]	; (800e0a8 <MX_LWIP_Init+0x70>)
 800e062:	4a10      	ldr	r2, [pc, #64]	; (800e0a4 <MX_LWIP_Init+0x6c>)
 800e064:	490e      	ldr	r1, [pc, #56]	; (800e0a0 <MX_LWIP_Init+0x68>)
 800e066:	4813      	ldr	r0, [pc, #76]	; (800e0b4 <MX_LWIP_Init+0x7c>)
 800e068:	f7f5 fd86 	bl	8003b78 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e06c:	4811      	ldr	r0, [pc, #68]	; (800e0b4 <MX_LWIP_Init+0x7c>)
 800e06e:	f7f5 fe6b 	bl	8003d48 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e072:	4b10      	ldr	r3, [pc, #64]	; (800e0b4 <MX_LWIP_Init+0x7c>)
 800e074:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e078:	089b      	lsrs	r3, r3, #2
 800e07a:	f003 0301 	and.w	r3, r3, #1
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	2b00      	cmp	r3, #0
 800e082:	d003      	beq.n	800e08c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e084:	480b      	ldr	r0, [pc, #44]	; (800e0b4 <MX_LWIP_Init+0x7c>)
 800e086:	f7f5 fe6f 	bl	8003d68 <netif_set_up>
 800e08a:	e002      	b.n	800e092 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e08c:	4809      	ldr	r0, [pc, #36]	; (800e0b4 <MX_LWIP_Init+0x7c>)
 800e08e:	f7f5 feaf 	bl	8003df0 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800e092:	4808      	ldr	r0, [pc, #32]	; (800e0b4 <MX_LWIP_Init+0x7c>)
 800e094:	f7fb ffd4 	bl	800a040 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e098:	bf00      	nop
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	200068d8 	.word	0x200068d8
 800e0a4:	200068dc 	.word	0x200068dc
 800e0a8:	200068e0 	.word	0x200068e0
 800e0ac:	0800da01 	.word	0x0800da01
 800e0b0:	0800dfcd 	.word	0x0800dfcd
 800e0b4:	200068a4 	.word	0x200068a4

0800e0b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e0be:	f7f2 fa6f 	bl	80005a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  loops = 0;
 800e0c2:	4b5a      	ldr	r3, [pc, #360]	; (800e22c <main+0x174>)
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e0c8:	f000 f8ce 	bl	800e268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e0cc:	f000 fa20 	bl	800e510 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800e0d0:	f000 f9c6 	bl	800e460 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800e0d4:	f000 f9ee 	bl	800e4b4 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 800e0d8:	f000 f930 	bl	800e33c <MX_CAN1_Init>
  MX_CAN2_Init();
 800e0dc:	f000 f962 	bl	800e3a4 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 800e0e0:	f000 f994 	bl	800e40c <MX_USART2_UART_Init>
  MX_LWIP_Init();
 800e0e4:	f7ff ffa8 	bl	800e038 <MX_LWIP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_Delay(500);
 800e0e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e0ec:	f7f2 faca 	bl	8000684 <HAL_Delay>
	// Lecture des entrées gpio , (variable = fonction(localisation port, localisation pin);)
	voitureConnectee = HAL_GPIO_ReadPin(SW_E0_CN10_33_GPIO_Port, SW_E0_CN10_33_Pin);
 800e0f0:	2101      	movs	r1, #1
 800e0f2:	484f      	ldr	r0, [pc, #316]	; (800e230 <main+0x178>)
 800e0f4:	f7f3 fd84 	bl	8001c00 <HAL_GPIO_ReadPin>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	4b4d      	ldr	r3, [pc, #308]	; (800e234 <main+0x17c>)
 800e0fe:	701a      	strb	r2, [r3, #0]
	voitureEnCharge = HAL_GPIO_ReadPin(SW_B0_EN10_31_GPIO_Port, SW_B0_EN10_31_Pin);
 800e100:	2101      	movs	r1, #1
 800e102:	484d      	ldr	r0, [pc, #308]	; (800e238 <main+0x180>)
 800e104:	f7f3 fd7c 	bl	8001c00 <HAL_GPIO_ReadPin>
 800e108:	4603      	mov	r3, r0
 800e10a:	461a      	mov	r2, r3
 800e10c:	4b4b      	ldr	r3, [pc, #300]	; (800e23c <main+0x184>)
 800e10e:	701a      	strb	r2, [r3, #0]
	// Clignotement de la led
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800e110:	2180      	movs	r1, #128	; 0x80
 800e112:	4849      	ldr	r0, [pc, #292]	; (800e238 <main+0x180>)
 800e114:	f7f3 fda5 	bl	8001c62 <HAL_GPIO_TogglePin>
	// Ecriture du message sur usart3, %d comme valeur d'une variable entière
	sprintf(texte_ecrit, "Message %5d sur UART3, switchs %d%d\n", loops++, voitureConnectee, voitureEnCharge);
 800e118:	4b44      	ldr	r3, [pc, #272]	; (800e22c <main+0x174>)
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	1c53      	adds	r3, r2, #1
 800e11e:	4943      	ldr	r1, [pc, #268]	; (800e22c <main+0x174>)
 800e120:	600b      	str	r3, [r1, #0]
 800e122:	4b44      	ldr	r3, [pc, #272]	; (800e234 <main+0x17c>)
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	4619      	mov	r1, r3
 800e128:	4b44      	ldr	r3, [pc, #272]	; (800e23c <main+0x184>)
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	460b      	mov	r3, r1
 800e130:	4943      	ldr	r1, [pc, #268]	; (800e240 <main+0x188>)
 800e132:	4844      	ldr	r0, [pc, #272]	; (800e244 <main+0x18c>)
 800e134:	f000 fe74 	bl	800ee20 <siprintf>
	// affichage du message
	HAL_UART_Transmit(&huart3, (uint8_t *)texte_ecrit, strlen(texte_ecrit), 100);
 800e138:	4842      	ldr	r0, [pc, #264]	; (800e244 <main+0x18c>)
 800e13a:	f7f2 f859 	bl	80001f0 <strlen>
 800e13e:	4603      	mov	r3, r0
 800e140:	b29a      	uxth	r2, r3
 800e142:	2364      	movs	r3, #100	; 0x64
 800e144:	493f      	ldr	r1, [pc, #252]	; (800e244 <main+0x18c>)
 800e146:	4840      	ldr	r0, [pc, #256]	; (800e248 <main+0x190>)
 800e148:	f7f4 fb41 	bl	80027ce <HAL_UART_Transmit>
	switch(voitureConnectee)
 800e14c:	4b39      	ldr	r3, [pc, #228]	; (800e234 <main+0x17c>)
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d120      	bne.n	800e196 <main+0xde>
	{
		case VOITURE_CONNECTEE:
		{
			switch(voitureEnCharge)
 800e154:	4b39      	ldr	r3, [pc, #228]	; (800e23c <main+0x184>)
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d10b      	bne.n	800e174 <main+0xbc>
			{
				case VOITURE_EN_CHARGE:
				{
					sprintf(etatVoiture, "Voiture en charge");
 800e15c:	4a3b      	ldr	r2, [pc, #236]	; (800e24c <main+0x194>)
 800e15e:	4b3c      	ldr	r3, [pc, #240]	; (800e250 <main+0x198>)
 800e160:	4615      	mov	r5, r2
 800e162:	461c      	mov	r4, r3
 800e164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e166:	6028      	str	r0, [r5, #0]
 800e168:	6069      	str	r1, [r5, #4]
 800e16a:	60aa      	str	r2, [r5, #8]
 800e16c:	60eb      	str	r3, [r5, #12]
 800e16e:	8823      	ldrh	r3, [r4, #0]
 800e170:	822b      	strh	r3, [r5, #16]
					break;
 800e172:	e00f      	b.n	800e194 <main+0xdc>
				}
				default :
				{
					sprintf(etatVoiture, "Voiture detectée hors charge");
 800e174:	4a35      	ldr	r2, [pc, #212]	; (800e24c <main+0x194>)
 800e176:	4b37      	ldr	r3, [pc, #220]	; (800e254 <main+0x19c>)
 800e178:	4615      	mov	r5, r2
 800e17a:	461c      	mov	r4, r3
 800e17c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e17e:	6028      	str	r0, [r5, #0]
 800e180:	6069      	str	r1, [r5, #4]
 800e182:	60aa      	str	r2, [r5, #8]
 800e184:	60eb      	str	r3, [r5, #12]
 800e186:	cc07      	ldmia	r4!, {r0, r1, r2}
 800e188:	6128      	str	r0, [r5, #16]
 800e18a:	6169      	str	r1, [r5, #20]
 800e18c:	61aa      	str	r2, [r5, #24]
 800e18e:	8823      	ldrh	r3, [r4, #0]
 800e190:	83ab      	strh	r3, [r5, #28]
					break;
 800e192:	bf00      	nop
				}
			}
			break;
 800e194:	e035      	b.n	800e202 <main+0x14a>
		}
		default :
		{
			switch(voitureEnCharge)
 800e196:	4b29      	ldr	r3, [pc, #164]	; (800e23c <main+0x184>)
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d118      	bne.n	800e1d0 <main+0x118>
			{
				case VOITURE_EN_CHARGE:
				{
					sprintf(etatVoiture, "Voiture en charge ? Ce n'est pas possible !");
 800e19e:	4b2b      	ldr	r3, [pc, #172]	; (800e24c <main+0x194>)
 800e1a0:	4a2d      	ldr	r2, [pc, #180]	; (800e258 <main+0x1a0>)
 800e1a2:	4614      	mov	r4, r2
 800e1a4:	469c      	mov	ip, r3
 800e1a6:	f104 0e20 	add.w	lr, r4, #32
 800e1aa:	4665      	mov	r5, ip
 800e1ac:	4626      	mov	r6, r4
 800e1ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e1b0:	6028      	str	r0, [r5, #0]
 800e1b2:	6069      	str	r1, [r5, #4]
 800e1b4:	60aa      	str	r2, [r5, #8]
 800e1b6:	60eb      	str	r3, [r5, #12]
 800e1b8:	3410      	adds	r4, #16
 800e1ba:	f10c 0c10 	add.w	ip, ip, #16
 800e1be:	4574      	cmp	r4, lr
 800e1c0:	d1f3      	bne.n	800e1aa <main+0xf2>
 800e1c2:	4665      	mov	r5, ip
 800e1c4:	4623      	mov	r3, r4
 800e1c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e1c8:	6028      	str	r0, [r5, #0]
 800e1ca:	6069      	str	r1, [r5, #4]
 800e1cc:	60aa      	str	r2, [r5, #8]
					break;
 800e1ce:	e017      	b.n	800e200 <main+0x148>
				}
				default :
				{
					sprintf(etatVoiture, "Voiture non detectée, donc hors charge");
 800e1d0:	4b1e      	ldr	r3, [pc, #120]	; (800e24c <main+0x194>)
 800e1d2:	4a22      	ldr	r2, [pc, #136]	; (800e25c <main+0x1a4>)
 800e1d4:	4614      	mov	r4, r2
 800e1d6:	469c      	mov	ip, r3
 800e1d8:	f104 0e20 	add.w	lr, r4, #32
 800e1dc:	4665      	mov	r5, ip
 800e1de:	4626      	mov	r6, r4
 800e1e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e1e2:	6028      	str	r0, [r5, #0]
 800e1e4:	6069      	str	r1, [r5, #4]
 800e1e6:	60aa      	str	r2, [r5, #8]
 800e1e8:	60eb      	str	r3, [r5, #12]
 800e1ea:	3410      	adds	r4, #16
 800e1ec:	f10c 0c10 	add.w	ip, ip, #16
 800e1f0:	4574      	cmp	r4, lr
 800e1f2:	d1f3      	bne.n	800e1dc <main+0x124>
 800e1f4:	4662      	mov	r2, ip
 800e1f6:	4623      	mov	r3, r4
 800e1f8:	cb03      	ldmia	r3!, {r0, r1}
 800e1fa:	6010      	str	r0, [r2, #0]
 800e1fc:	6051      	str	r1, [r2, #4]
					break;
 800e1fe:	bf00      	nop
				}
			}
			break;
 800e200:	bf00      	nop
		}
	}
	// Ecriture de message sur usart2
	sprintf(texte_ecrit, "Message %5d sur UART2: %s\n", loops++, etatVoiture);
 800e202:	4b0a      	ldr	r3, [pc, #40]	; (800e22c <main+0x174>)
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	1c53      	adds	r3, r2, #1
 800e208:	4908      	ldr	r1, [pc, #32]	; (800e22c <main+0x174>)
 800e20a:	600b      	str	r3, [r1, #0]
 800e20c:	4b0f      	ldr	r3, [pc, #60]	; (800e24c <main+0x194>)
 800e20e:	4914      	ldr	r1, [pc, #80]	; (800e260 <main+0x1a8>)
 800e210:	480c      	ldr	r0, [pc, #48]	; (800e244 <main+0x18c>)
 800e212:	f000 fe05 	bl	800ee20 <siprintf>
	// affichage du message
	HAL_UART_Transmit(&huart2, (uint8_t *)texte_ecrit, strlen(texte_ecrit), 100);
 800e216:	480b      	ldr	r0, [pc, #44]	; (800e244 <main+0x18c>)
 800e218:	f7f1 ffea 	bl	80001f0 <strlen>
 800e21c:	4603      	mov	r3, r0
 800e21e:	b29a      	uxth	r2, r3
 800e220:	2364      	movs	r3, #100	; 0x64
 800e222:	4908      	ldr	r1, [pc, #32]	; (800e244 <main+0x18c>)
 800e224:	480f      	ldr	r0, [pc, #60]	; (800e264 <main+0x1ac>)
 800e226:	f7f4 fad2 	bl	80027ce <HAL_UART_Transmit>
	HAL_Delay(500);
 800e22a:	e75d      	b.n	800e0e8 <main+0x30>
 800e22c:	20007500 	.word	0x20007500
 800e230:	40021000 	.word	0x40021000
 800e234:	2000752c 	.word	0x2000752c
 800e238:	40020400 	.word	0x40020400
 800e23c:	200068e4 	.word	0x200068e4
 800e240:	08012104 	.word	0x08012104
 800e244:	20007530 	.word	0x20007530
 800e248:	200068e8 	.word	0x200068e8
 800e24c:	20006d30 	.word	0x20006d30
 800e250:	0801212c 	.word	0x0801212c
 800e254:	08012140 	.word	0x08012140
 800e258:	08012160 	.word	0x08012160
 800e25c:	0801218c 	.word	0x0801218c
 800e260:	080121b4 	.word	0x080121b4
 800e264:	20007918 	.word	0x20007918

0800e268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b094      	sub	sp, #80	; 0x50
 800e26c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e26e:	f107 0320 	add.w	r3, r7, #32
 800e272:	2230      	movs	r2, #48	; 0x30
 800e274:	2100      	movs	r1, #0
 800e276:	4618      	mov	r0, r3
 800e278:	f000 fd7e 	bl	800ed78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e27c:	f107 030c 	add.w	r3, r7, #12
 800e280:	2200      	movs	r2, #0
 800e282:	601a      	str	r2, [r3, #0]
 800e284:	605a      	str	r2, [r3, #4]
 800e286:	609a      	str	r2, [r3, #8]
 800e288:	60da      	str	r2, [r3, #12]
 800e28a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e28c:	2300      	movs	r3, #0
 800e28e:	60bb      	str	r3, [r7, #8]
 800e290:	4b28      	ldr	r3, [pc, #160]	; (800e334 <SystemClock_Config+0xcc>)
 800e292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e294:	4a27      	ldr	r2, [pc, #156]	; (800e334 <SystemClock_Config+0xcc>)
 800e296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e29a:	6413      	str	r3, [r2, #64]	; 0x40
 800e29c:	4b25      	ldr	r3, [pc, #148]	; (800e334 <SystemClock_Config+0xcc>)
 800e29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2a4:	60bb      	str	r3, [r7, #8]
 800e2a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	607b      	str	r3, [r7, #4]
 800e2ac:	4b22      	ldr	r3, [pc, #136]	; (800e338 <SystemClock_Config+0xd0>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a21      	ldr	r2, [pc, #132]	; (800e338 <SystemClock_Config+0xd0>)
 800e2b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e2b6:	6013      	str	r3, [r2, #0]
 800e2b8:	4b1f      	ldr	r3, [pc, #124]	; (800e338 <SystemClock_Config+0xd0>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e2c0:	607b      	str	r3, [r7, #4]
 800e2c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800e2c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800e2cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e2ce:	2302      	movs	r3, #2
 800e2d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e2d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800e2d8:	2304      	movs	r3, #4
 800e2da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800e2dc:	23a8      	movs	r3, #168	; 0xa8
 800e2de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e2e0:	2302      	movs	r3, #2
 800e2e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800e2e4:	2307      	movs	r3, #7
 800e2e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e2e8:	f107 0320 	add.w	r3, r7, #32
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7f3 fdf1 	bl	8001ed4 <HAL_RCC_OscConfig>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d001      	beq.n	800e2fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 800e2f8:	f000 fa10 	bl	800e71c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e2fc:	230f      	movs	r3, #15
 800e2fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e300:	2302      	movs	r3, #2
 800e302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e304:	2300      	movs	r3, #0
 800e306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e308:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e30c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e30e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e312:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e314:	f107 030c 	add.w	r3, r7, #12
 800e318:	2105      	movs	r1, #5
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7f4 f81c 	bl	8002358 <HAL_RCC_ClockConfig>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d001      	beq.n	800e32a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800e326:	f000 f9f9 	bl	800e71c <Error_Handler>
  }
}
 800e32a:	bf00      	nop
 800e32c:	3750      	adds	r7, #80	; 0x50
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	40023800 	.word	0x40023800
 800e338:	40007000 	.word	0x40007000

0800e33c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800e340:	4b16      	ldr	r3, [pc, #88]	; (800e39c <MX_CAN1_Init+0x60>)
 800e342:	4a17      	ldr	r2, [pc, #92]	; (800e3a0 <MX_CAN1_Init+0x64>)
 800e344:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800e346:	4b15      	ldr	r3, [pc, #84]	; (800e39c <MX_CAN1_Init+0x60>)
 800e348:	2210      	movs	r2, #16
 800e34a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800e34c:	4b13      	ldr	r3, [pc, #76]	; (800e39c <MX_CAN1_Init+0x60>)
 800e34e:	2200      	movs	r2, #0
 800e350:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800e352:	4b12      	ldr	r3, [pc, #72]	; (800e39c <MX_CAN1_Init+0x60>)
 800e354:	2200      	movs	r2, #0
 800e356:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800e358:	4b10      	ldr	r3, [pc, #64]	; (800e39c <MX_CAN1_Init+0x60>)
 800e35a:	2200      	movs	r2, #0
 800e35c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800e35e:	4b0f      	ldr	r3, [pc, #60]	; (800e39c <MX_CAN1_Init+0x60>)
 800e360:	2200      	movs	r2, #0
 800e362:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800e364:	4b0d      	ldr	r3, [pc, #52]	; (800e39c <MX_CAN1_Init+0x60>)
 800e366:	2200      	movs	r2, #0
 800e368:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800e36a:	4b0c      	ldr	r3, [pc, #48]	; (800e39c <MX_CAN1_Init+0x60>)
 800e36c:	2200      	movs	r2, #0
 800e36e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800e370:	4b0a      	ldr	r3, [pc, #40]	; (800e39c <MX_CAN1_Init+0x60>)
 800e372:	2200      	movs	r2, #0
 800e374:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800e376:	4b09      	ldr	r3, [pc, #36]	; (800e39c <MX_CAN1_Init+0x60>)
 800e378:	2200      	movs	r2, #0
 800e37a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800e37c:	4b07      	ldr	r3, [pc, #28]	; (800e39c <MX_CAN1_Init+0x60>)
 800e37e:	2200      	movs	r2, #0
 800e380:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800e382:	4b06      	ldr	r3, [pc, #24]	; (800e39c <MX_CAN1_Init+0x60>)
 800e384:	2200      	movs	r2, #0
 800e386:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800e388:	4804      	ldr	r0, [pc, #16]	; (800e39c <MX_CAN1_Init+0x60>)
 800e38a:	f7f2 f99d 	bl	80006c8 <HAL_CAN_Init>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800e394:	f000 f9c2 	bl	800e71c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800e398:	bf00      	nop
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	20007958 	.word	0x20007958
 800e3a0:	40006400 	.word	0x40006400

0800e3a4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800e3a8:	4b16      	ldr	r3, [pc, #88]	; (800e404 <MX_CAN2_Init+0x60>)
 800e3aa:	4a17      	ldr	r2, [pc, #92]	; (800e408 <MX_CAN2_Init+0x64>)
 800e3ac:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800e3ae:	4b15      	ldr	r3, [pc, #84]	; (800e404 <MX_CAN2_Init+0x60>)
 800e3b0:	2210      	movs	r2, #16
 800e3b2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800e3b4:	4b13      	ldr	r3, [pc, #76]	; (800e404 <MX_CAN2_Init+0x60>)
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800e3ba:	4b12      	ldr	r3, [pc, #72]	; (800e404 <MX_CAN2_Init+0x60>)
 800e3bc:	2200      	movs	r2, #0
 800e3be:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800e3c0:	4b10      	ldr	r3, [pc, #64]	; (800e404 <MX_CAN2_Init+0x60>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800e3c6:	4b0f      	ldr	r3, [pc, #60]	; (800e404 <MX_CAN2_Init+0x60>)
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800e3cc:	4b0d      	ldr	r3, [pc, #52]	; (800e404 <MX_CAN2_Init+0x60>)
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800e3d2:	4b0c      	ldr	r3, [pc, #48]	; (800e404 <MX_CAN2_Init+0x60>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800e3d8:	4b0a      	ldr	r3, [pc, #40]	; (800e404 <MX_CAN2_Init+0x60>)
 800e3da:	2200      	movs	r2, #0
 800e3dc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800e3de:	4b09      	ldr	r3, [pc, #36]	; (800e404 <MX_CAN2_Init+0x60>)
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800e3e4:	4b07      	ldr	r3, [pc, #28]	; (800e404 <MX_CAN2_Init+0x60>)
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800e3ea:	4b06      	ldr	r3, [pc, #24]	; (800e404 <MX_CAN2_Init+0x60>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800e3f0:	4804      	ldr	r0, [pc, #16]	; (800e404 <MX_CAN2_Init+0x60>)
 800e3f2:	f7f2 f969 	bl	80006c8 <HAL_CAN_Init>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d001      	beq.n	800e400 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 800e3fc:	f000 f98e 	bl	800e71c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800e400:	bf00      	nop
 800e402:	bd80      	pop	{r7, pc}
 800e404:	20007504 	.word	0x20007504
 800e408:	40006800 	.word	0x40006800

0800e40c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800e410:	4b11      	ldr	r3, [pc, #68]	; (800e458 <MX_USART2_UART_Init+0x4c>)
 800e412:	4a12      	ldr	r2, [pc, #72]	; (800e45c <MX_USART2_UART_Init+0x50>)
 800e414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800e416:	4b10      	ldr	r3, [pc, #64]	; (800e458 <MX_USART2_UART_Init+0x4c>)
 800e418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e41c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e41e:	4b0e      	ldr	r3, [pc, #56]	; (800e458 <MX_USART2_UART_Init+0x4c>)
 800e420:	2200      	movs	r2, #0
 800e422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e424:	4b0c      	ldr	r3, [pc, #48]	; (800e458 <MX_USART2_UART_Init+0x4c>)
 800e426:	2200      	movs	r2, #0
 800e428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e42a:	4b0b      	ldr	r3, [pc, #44]	; (800e458 <MX_USART2_UART_Init+0x4c>)
 800e42c:	2200      	movs	r2, #0
 800e42e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e430:	4b09      	ldr	r3, [pc, #36]	; (800e458 <MX_USART2_UART_Init+0x4c>)
 800e432:	220c      	movs	r2, #12
 800e434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e436:	4b08      	ldr	r3, [pc, #32]	; (800e458 <MX_USART2_UART_Init+0x4c>)
 800e438:	2200      	movs	r2, #0
 800e43a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e43c:	4b06      	ldr	r3, [pc, #24]	; (800e458 <MX_USART2_UART_Init+0x4c>)
 800e43e:	2200      	movs	r2, #0
 800e440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800e442:	4805      	ldr	r0, [pc, #20]	; (800e458 <MX_USART2_UART_Init+0x4c>)
 800e444:	f7f4 f976 	bl	8002734 <HAL_UART_Init>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d001      	beq.n	800e452 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800e44e:	f000 f965 	bl	800e71c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800e452:	bf00      	nop
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	20007918 	.word	0x20007918
 800e45c:	40004400 	.word	0x40004400

0800e460 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800e464:	4b11      	ldr	r3, [pc, #68]	; (800e4ac <MX_USART3_UART_Init+0x4c>)
 800e466:	4a12      	ldr	r2, [pc, #72]	; (800e4b0 <MX_USART3_UART_Init+0x50>)
 800e468:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800e46a:	4b10      	ldr	r3, [pc, #64]	; (800e4ac <MX_USART3_UART_Init+0x4c>)
 800e46c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e470:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e472:	4b0e      	ldr	r3, [pc, #56]	; (800e4ac <MX_USART3_UART_Init+0x4c>)
 800e474:	2200      	movs	r2, #0
 800e476:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e478:	4b0c      	ldr	r3, [pc, #48]	; (800e4ac <MX_USART3_UART_Init+0x4c>)
 800e47a:	2200      	movs	r2, #0
 800e47c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e47e:	4b0b      	ldr	r3, [pc, #44]	; (800e4ac <MX_USART3_UART_Init+0x4c>)
 800e480:	2200      	movs	r2, #0
 800e482:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e484:	4b09      	ldr	r3, [pc, #36]	; (800e4ac <MX_USART3_UART_Init+0x4c>)
 800e486:	220c      	movs	r2, #12
 800e488:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e48a:	4b08      	ldr	r3, [pc, #32]	; (800e4ac <MX_USART3_UART_Init+0x4c>)
 800e48c:	2200      	movs	r2, #0
 800e48e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e490:	4b06      	ldr	r3, [pc, #24]	; (800e4ac <MX_USART3_UART_Init+0x4c>)
 800e492:	2200      	movs	r2, #0
 800e494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800e496:	4805      	ldr	r0, [pc, #20]	; (800e4ac <MX_USART3_UART_Init+0x4c>)
 800e498:	f7f4 f94c 	bl	8002734 <HAL_UART_Init>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800e4a2:	f000 f93b 	bl	800e71c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800e4a6:	bf00      	nop
 800e4a8:	bd80      	pop	{r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	200068e8 	.word	0x200068e8
 800e4b0:	40004800 	.word	0x40004800

0800e4b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e4b8:	4b14      	ldr	r3, [pc, #80]	; (800e50c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800e4ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e4be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e4c0:	4b12      	ldr	r3, [pc, #72]	; (800e50c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800e4c2:	2204      	movs	r2, #4
 800e4c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e4c6:	4b11      	ldr	r3, [pc, #68]	; (800e50c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800e4c8:	2202      	movs	r2, #2
 800e4ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e4cc:	4b0f      	ldr	r3, [pc, #60]	; (800e50c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e4d2:	4b0e      	ldr	r3, [pc, #56]	; (800e50c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800e4d4:	2202      	movs	r2, #2
 800e4d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e4d8:	4b0c      	ldr	r3, [pc, #48]	; (800e50c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800e4da:	2201      	movs	r2, #1
 800e4dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e4de:	4b0b      	ldr	r3, [pc, #44]	; (800e50c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e4e4:	4b09      	ldr	r3, [pc, #36]	; (800e50c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e4ea:	4b08      	ldr	r3, [pc, #32]	; (800e50c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e4f0:	4b06      	ldr	r3, [pc, #24]	; (800e50c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e4f6:	4805      	ldr	r0, [pc, #20]	; (800e50c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800e4f8:	f7f3 fbce 	bl	8001c98 <HAL_PCD_Init>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d001      	beq.n	800e506 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800e502:	f000 f90b 	bl	800e71c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800e506:	bf00      	nop
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	20006928 	.word	0x20006928

0800e510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b08c      	sub	sp, #48	; 0x30
 800e514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e516:	f107 031c 	add.w	r3, r7, #28
 800e51a:	2200      	movs	r2, #0
 800e51c:	601a      	str	r2, [r3, #0]
 800e51e:	605a      	str	r2, [r3, #4]
 800e520:	609a      	str	r2, [r3, #8]
 800e522:	60da      	str	r2, [r3, #12]
 800e524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800e526:	2300      	movs	r3, #0
 800e528:	61bb      	str	r3, [r7, #24]
 800e52a:	4b75      	ldr	r3, [pc, #468]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e52e:	4a74      	ldr	r2, [pc, #464]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e530:	f043 0310 	orr.w	r3, r3, #16
 800e534:	6313      	str	r3, [r2, #48]	; 0x30
 800e536:	4b72      	ldr	r3, [pc, #456]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e53a:	f003 0310 	and.w	r3, r3, #16
 800e53e:	61bb      	str	r3, [r7, #24]
 800e540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e542:	2300      	movs	r3, #0
 800e544:	617b      	str	r3, [r7, #20]
 800e546:	4b6e      	ldr	r3, [pc, #440]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e54a:	4a6d      	ldr	r2, [pc, #436]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e54c:	f043 0304 	orr.w	r3, r3, #4
 800e550:	6313      	str	r3, [r2, #48]	; 0x30
 800e552:	4b6b      	ldr	r3, [pc, #428]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e556:	f003 0304 	and.w	r3, r3, #4
 800e55a:	617b      	str	r3, [r7, #20]
 800e55c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e55e:	2300      	movs	r3, #0
 800e560:	613b      	str	r3, [r7, #16]
 800e562:	4b67      	ldr	r3, [pc, #412]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e566:	4a66      	ldr	r2, [pc, #408]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e56c:	6313      	str	r3, [r2, #48]	; 0x30
 800e56e:	4b64      	ldr	r3, [pc, #400]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e576:	613b      	str	r3, [r7, #16]
 800e578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e57a:	2300      	movs	r3, #0
 800e57c:	60fb      	str	r3, [r7, #12]
 800e57e:	4b60      	ldr	r3, [pc, #384]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e582:	4a5f      	ldr	r2, [pc, #380]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e584:	f043 0301 	orr.w	r3, r3, #1
 800e588:	6313      	str	r3, [r2, #48]	; 0x30
 800e58a:	4b5d      	ldr	r3, [pc, #372]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e58e:	f003 0301 	and.w	r3, r3, #1
 800e592:	60fb      	str	r3, [r7, #12]
 800e594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e596:	2300      	movs	r3, #0
 800e598:	60bb      	str	r3, [r7, #8]
 800e59a:	4b59      	ldr	r3, [pc, #356]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e59e:	4a58      	ldr	r2, [pc, #352]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e5a0:	f043 0302 	orr.w	r3, r3, #2
 800e5a4:	6313      	str	r3, [r2, #48]	; 0x30
 800e5a6:	4b56      	ldr	r3, [pc, #344]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5aa:	f003 0302 	and.w	r3, r3, #2
 800e5ae:	60bb      	str	r3, [r7, #8]
 800e5b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	607b      	str	r3, [r7, #4]
 800e5b6:	4b52      	ldr	r3, [pc, #328]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ba:	4a51      	ldr	r2, [pc, #324]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e5bc:	f043 0308 	orr.w	r3, r3, #8
 800e5c0:	6313      	str	r3, [r2, #48]	; 0x30
 800e5c2:	4b4f      	ldr	r3, [pc, #316]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5c6:	f003 0308 	and.w	r3, r3, #8
 800e5ca:	607b      	str	r3, [r7, #4]
 800e5cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	603b      	str	r3, [r7, #0]
 800e5d2:	4b4b      	ldr	r3, [pc, #300]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5d6:	4a4a      	ldr	r2, [pc, #296]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e5d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5dc:	6313      	str	r3, [r2, #48]	; 0x30
 800e5de:	4b48      	ldr	r3, [pc, #288]	; (800e700 <MX_GPIO_Init+0x1f0>)
 800e5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5e6:	603b      	str	r3, [r7, #0]
 800e5e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800e5f0:	4844      	ldr	r0, [pc, #272]	; (800e704 <MX_GPIO_Init+0x1f4>)
 800e5f2:	f7f3 fb1d 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	2140      	movs	r1, #64	; 0x40
 800e5fa:	4843      	ldr	r0, [pc, #268]	; (800e708 <MX_GPIO_Init+0x1f8>)
 800e5fc:	f7f3 fb18 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800e600:	2200      	movs	r2, #0
 800e602:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e606:	4841      	ldr	r0, [pc, #260]	; (800e70c <MX_GPIO_Init+0x1fc>)
 800e608:	f7f3 fb12 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e60c:	2304      	movs	r3, #4
 800e60e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e610:	2303      	movs	r3, #3
 800e612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e614:	2300      	movs	r3, #0
 800e616:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e618:	f107 031c 	add.w	r3, r7, #28
 800e61c:	4619      	mov	r1, r3
 800e61e:	483c      	ldr	r0, [pc, #240]	; (800e710 <MX_GPIO_Init+0x200>)
 800e620:	f7f3 f944 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800e624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e62a:	4b3a      	ldr	r3, [pc, #232]	; (800e714 <MX_GPIO_Init+0x204>)
 800e62c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e62e:	2300      	movs	r3, #0
 800e630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800e632:	f107 031c 	add.w	r3, r7, #28
 800e636:	4619      	mov	r1, r3
 800e638:	4834      	ldr	r0, [pc, #208]	; (800e70c <MX_GPIO_Init+0x1fc>)
 800e63a:	f7f3 f937 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e63e:	2301      	movs	r3, #1
 800e640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e642:	2303      	movs	r3, #3
 800e644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e646:	2300      	movs	r3, #0
 800e648:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e64a:	f107 031c 	add.w	r3, r7, #28
 800e64e:	4619      	mov	r1, r3
 800e650:	4831      	ldr	r0, [pc, #196]	; (800e718 <MX_GPIO_Init+0x208>)
 800e652:	f7f3 f92b 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_B0_EN10_31_Pin */
  GPIO_InitStruct.Pin = SW_B0_EN10_31_Pin;
 800e656:	2301      	movs	r3, #1
 800e658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e65a:	2300      	movs	r3, #0
 800e65c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e65e:	2301      	movs	r3, #1
 800e660:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_B0_EN10_31_GPIO_Port, &GPIO_InitStruct);
 800e662:	f107 031c 	add.w	r3, r7, #28
 800e666:	4619      	mov	r1, r3
 800e668:	4826      	ldr	r0, [pc, #152]	; (800e704 <MX_GPIO_Init+0x1f4>)
 800e66a:	f7f3 f91f 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800e66e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800e672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e674:	2301      	movs	r3, #1
 800e676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e678:	2300      	movs	r3, #0
 800e67a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e67c:	2300      	movs	r3, #0
 800e67e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e680:	f107 031c 	add.w	r3, r7, #28
 800e684:	4619      	mov	r1, r3
 800e686:	481f      	ldr	r0, [pc, #124]	; (800e704 <MX_GPIO_Init+0x1f4>)
 800e688:	f7f3 f910 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800e68c:	2340      	movs	r3, #64	; 0x40
 800e68e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e690:	2301      	movs	r3, #1
 800e692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e694:	2300      	movs	r3, #0
 800e696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e698:	2300      	movs	r3, #0
 800e69a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800e69c:	f107 031c 	add.w	r3, r7, #28
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	4819      	ldr	r0, [pc, #100]	; (800e708 <MX_GPIO_Init+0x1f8>)
 800e6a4:	f7f3 f902 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800e6a8:	2380      	movs	r3, #128	; 0x80
 800e6aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800e6b4:	f107 031c 	add.w	r3, r7, #28
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	4813      	ldr	r0, [pc, #76]	; (800e708 <MX_GPIO_Init+0x1f8>)
 800e6bc:	f7f3 f8f6 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800e6c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800e6d2:	f107 031c 	add.w	r3, r7, #28
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	480c      	ldr	r0, [pc, #48]	; (800e70c <MX_GPIO_Init+0x1fc>)
 800e6da:	f7f3 f8e7 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_E0_CN10_33_Pin */
  GPIO_InitStruct.Pin = SW_E0_CN10_33_Pin;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_E0_CN10_33_GPIO_Port, &GPIO_InitStruct);
 800e6ea:	f107 031c 	add.w	r3, r7, #28
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	4807      	ldr	r0, [pc, #28]	; (800e710 <MX_GPIO_Init+0x200>)
 800e6f2:	f7f3 f8db 	bl	80018ac <HAL_GPIO_Init>

}
 800e6f6:	bf00      	nop
 800e6f8:	3730      	adds	r7, #48	; 0x30
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	40023800 	.word	0x40023800
 800e704:	40020400 	.word	0x40020400
 800e708:	40021800 	.word	0x40021800
 800e70c:	40020800 	.word	0x40020800
 800e710:	40021000 	.word	0x40021000
 800e714:	10110000 	.word	0x10110000
 800e718:	40020000 	.word	0x40020000

0800e71c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e71c:	b480      	push	{r7}
 800e71e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800e720:	bf00      	nop
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr
	...

0800e72c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e732:	2300      	movs	r3, #0
 800e734:	607b      	str	r3, [r7, #4]
 800e736:	4b10      	ldr	r3, [pc, #64]	; (800e778 <HAL_MspInit+0x4c>)
 800e738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e73a:	4a0f      	ldr	r2, [pc, #60]	; (800e778 <HAL_MspInit+0x4c>)
 800e73c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e740:	6453      	str	r3, [r2, #68]	; 0x44
 800e742:	4b0d      	ldr	r3, [pc, #52]	; (800e778 <HAL_MspInit+0x4c>)
 800e744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e74a:	607b      	str	r3, [r7, #4]
 800e74c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e74e:	2300      	movs	r3, #0
 800e750:	603b      	str	r3, [r7, #0]
 800e752:	4b09      	ldr	r3, [pc, #36]	; (800e778 <HAL_MspInit+0x4c>)
 800e754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e756:	4a08      	ldr	r2, [pc, #32]	; (800e778 <HAL_MspInit+0x4c>)
 800e758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e75c:	6413      	str	r3, [r2, #64]	; 0x40
 800e75e:	4b06      	ldr	r3, [pc, #24]	; (800e778 <HAL_MspInit+0x4c>)
 800e760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e76a:	bf00      	nop
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	40023800 	.word	0x40023800

0800e77c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b08c      	sub	sp, #48	; 0x30
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e784:	f107 031c 	add.w	r3, r7, #28
 800e788:	2200      	movs	r2, #0
 800e78a:	601a      	str	r2, [r3, #0]
 800e78c:	605a      	str	r2, [r3, #4]
 800e78e:	609a      	str	r2, [r3, #8]
 800e790:	60da      	str	r2, [r3, #12]
 800e792:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4a42      	ldr	r2, [pc, #264]	; (800e8a4 <HAL_CAN_MspInit+0x128>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d135      	bne.n	800e80a <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800e79e:	4b42      	ldr	r3, [pc, #264]	; (800e8a8 <HAL_CAN_MspInit+0x12c>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	4a40      	ldr	r2, [pc, #256]	; (800e8a8 <HAL_CAN_MspInit+0x12c>)
 800e7a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800e7a8:	4b3f      	ldr	r3, [pc, #252]	; (800e8a8 <HAL_CAN_MspInit+0x12c>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d10d      	bne.n	800e7cc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	61bb      	str	r3, [r7, #24]
 800e7b4:	4b3d      	ldr	r3, [pc, #244]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7b8:	4a3c      	ldr	r2, [pc, #240]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e7ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e7be:	6413      	str	r3, [r2, #64]	; 0x40
 800e7c0:	4b3a      	ldr	r3, [pc, #232]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7c8:	61bb      	str	r3, [r7, #24]
 800e7ca:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	617b      	str	r3, [r7, #20]
 800e7d0:	4b36      	ldr	r3, [pc, #216]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7d4:	4a35      	ldr	r2, [pc, #212]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e7d6:	f043 0308 	orr.w	r3, r3, #8
 800e7da:	6313      	str	r3, [r2, #48]	; 0x30
 800e7dc:	4b33      	ldr	r3, [pc, #204]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e0:	f003 0308 	and.w	r3, r3, #8
 800e7e4:	617b      	str	r3, [r7, #20]
 800e7e6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e7e8:	2303      	movs	r3, #3
 800e7ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7ec:	2302      	movs	r3, #2
 800e7ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7f4:	2303      	movs	r3, #3
 800e7f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800e7f8:	2309      	movs	r3, #9
 800e7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e7fc:	f107 031c 	add.w	r3, r7, #28
 800e800:	4619      	mov	r1, r3
 800e802:	482b      	ldr	r0, [pc, #172]	; (800e8b0 <HAL_CAN_MspInit+0x134>)
 800e804:	f7f3 f852 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800e808:	e048      	b.n	800e89c <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4a29      	ldr	r2, [pc, #164]	; (800e8b4 <HAL_CAN_MspInit+0x138>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d143      	bne.n	800e89c <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800e814:	2300      	movs	r3, #0
 800e816:	613b      	str	r3, [r7, #16]
 800e818:	4b24      	ldr	r3, [pc, #144]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e81a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e81c:	4a23      	ldr	r2, [pc, #140]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e81e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e822:	6413      	str	r3, [r2, #64]	; 0x40
 800e824:	4b21      	ldr	r3, [pc, #132]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e82c:	613b      	str	r3, [r7, #16]
 800e82e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800e830:	4b1d      	ldr	r3, [pc, #116]	; (800e8a8 <HAL_CAN_MspInit+0x12c>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	3301      	adds	r3, #1
 800e836:	4a1c      	ldr	r2, [pc, #112]	; (800e8a8 <HAL_CAN_MspInit+0x12c>)
 800e838:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800e83a:	4b1b      	ldr	r3, [pc, #108]	; (800e8a8 <HAL_CAN_MspInit+0x12c>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d10d      	bne.n	800e85e <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800e842:	2300      	movs	r3, #0
 800e844:	60fb      	str	r3, [r7, #12]
 800e846:	4b19      	ldr	r3, [pc, #100]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e84a:	4a18      	ldr	r2, [pc, #96]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e84c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e850:	6413      	str	r3, [r2, #64]	; 0x40
 800e852:	4b16      	ldr	r3, [pc, #88]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e85a:	60fb      	str	r3, [r7, #12]
 800e85c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e85e:	2300      	movs	r3, #0
 800e860:	60bb      	str	r3, [r7, #8]
 800e862:	4b12      	ldr	r3, [pc, #72]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e866:	4a11      	ldr	r2, [pc, #68]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e868:	f043 0302 	orr.w	r3, r3, #2
 800e86c:	6313      	str	r3, [r2, #48]	; 0x30
 800e86e:	4b0f      	ldr	r3, [pc, #60]	; (800e8ac <HAL_CAN_MspInit+0x130>)
 800e870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e872:	f003 0302 	and.w	r3, r3, #2
 800e876:	60bb      	str	r3, [r7, #8]
 800e878:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 800e87a:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800e87e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e880:	2302      	movs	r3, #2
 800e882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e884:	2300      	movs	r3, #0
 800e886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e888:	2303      	movs	r3, #3
 800e88a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800e88c:	2309      	movs	r3, #9
 800e88e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e890:	f107 031c 	add.w	r3, r7, #28
 800e894:	4619      	mov	r1, r3
 800e896:	4808      	ldr	r0, [pc, #32]	; (800e8b8 <HAL_CAN_MspInit+0x13c>)
 800e898:	f7f3 f808 	bl	80018ac <HAL_GPIO_Init>
}
 800e89c:	bf00      	nop
 800e89e:	3730      	adds	r7, #48	; 0x30
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	40006400 	.word	0x40006400
 800e8a8:	20000214 	.word	0x20000214
 800e8ac:	40023800 	.word	0x40023800
 800e8b0:	40020c00 	.word	0x40020c00
 800e8b4:	40006800 	.word	0x40006800
 800e8b8:	40020400 	.word	0x40020400

0800e8bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b08c      	sub	sp, #48	; 0x30
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8c4:	f107 031c 	add.w	r3, r7, #28
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	601a      	str	r2, [r3, #0]
 800e8cc:	605a      	str	r2, [r3, #4]
 800e8ce:	609a      	str	r2, [r3, #8]
 800e8d0:	60da      	str	r2, [r3, #12]
 800e8d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a41      	ldr	r2, [pc, #260]	; (800e9e0 <HAL_UART_MspInit+0x124>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d14a      	bne.n	800e974 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800e8de:	2300      	movs	r3, #0
 800e8e0:	61bb      	str	r3, [r7, #24]
 800e8e2:	4b40      	ldr	r3, [pc, #256]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8e6:	4a3f      	ldr	r2, [pc, #252]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e8e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e8ec:	6413      	str	r3, [r2, #64]	; 0x40
 800e8ee:	4b3d      	ldr	r3, [pc, #244]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8f6:	61bb      	str	r3, [r7, #24]
 800e8f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	617b      	str	r3, [r7, #20]
 800e8fe:	4b39      	ldr	r3, [pc, #228]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e902:	4a38      	ldr	r2, [pc, #224]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e904:	f043 0301 	orr.w	r3, r3, #1
 800e908:	6313      	str	r3, [r2, #48]	; 0x30
 800e90a:	4b36      	ldr	r3, [pc, #216]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e90e:	f003 0301 	and.w	r3, r3, #1
 800e912:	617b      	str	r3, [r7, #20]
 800e914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e916:	2300      	movs	r3, #0
 800e918:	613b      	str	r3, [r7, #16]
 800e91a:	4b32      	ldr	r3, [pc, #200]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e91e:	4a31      	ldr	r2, [pc, #196]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e920:	f043 0308 	orr.w	r3, r3, #8
 800e924:	6313      	str	r3, [r2, #48]	; 0x30
 800e926:	4b2f      	ldr	r3, [pc, #188]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e92a:	f003 0308 	and.w	r3, r3, #8
 800e92e:	613b      	str	r3, [r7, #16]
 800e930:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e932:	2308      	movs	r3, #8
 800e934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e936:	2302      	movs	r3, #2
 800e938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e93a:	2301      	movs	r3, #1
 800e93c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e93e:	2303      	movs	r3, #3
 800e940:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e942:	2307      	movs	r3, #7
 800e944:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e946:	f107 031c 	add.w	r3, r7, #28
 800e94a:	4619      	mov	r1, r3
 800e94c:	4826      	ldr	r0, [pc, #152]	; (800e9e8 <HAL_UART_MspInit+0x12c>)
 800e94e:	f7f2 ffad 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800e952:	2320      	movs	r3, #32
 800e954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e956:	2302      	movs	r3, #2
 800e958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e95a:	2301      	movs	r3, #1
 800e95c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e95e:	2303      	movs	r3, #3
 800e960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e962:	2307      	movs	r3, #7
 800e964:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e966:	f107 031c 	add.w	r3, r7, #28
 800e96a:	4619      	mov	r1, r3
 800e96c:	481f      	ldr	r0, [pc, #124]	; (800e9ec <HAL_UART_MspInit+0x130>)
 800e96e:	f7f2 ff9d 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800e972:	e031      	b.n	800e9d8 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4a1d      	ldr	r2, [pc, #116]	; (800e9f0 <HAL_UART_MspInit+0x134>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d12c      	bne.n	800e9d8 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800e97e:	2300      	movs	r3, #0
 800e980:	60fb      	str	r3, [r7, #12]
 800e982:	4b18      	ldr	r3, [pc, #96]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e986:	4a17      	ldr	r2, [pc, #92]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e98c:	6413      	str	r3, [r2, #64]	; 0x40
 800e98e:	4b15      	ldr	r3, [pc, #84]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e996:	60fb      	str	r3, [r7, #12]
 800e998:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e99a:	2300      	movs	r3, #0
 800e99c:	60bb      	str	r3, [r7, #8]
 800e99e:	4b11      	ldr	r3, [pc, #68]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9a2:	4a10      	ldr	r2, [pc, #64]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e9a4:	f043 0308 	orr.w	r3, r3, #8
 800e9a8:	6313      	str	r3, [r2, #48]	; 0x30
 800e9aa:	4b0e      	ldr	r3, [pc, #56]	; (800e9e4 <HAL_UART_MspInit+0x128>)
 800e9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ae:	f003 0308 	and.w	r3, r3, #8
 800e9b2:	60bb      	str	r3, [r7, #8]
 800e9b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800e9b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e9ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9bc:	2302      	movs	r3, #2
 800e9be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9c4:	2303      	movs	r3, #3
 800e9c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e9c8:	2307      	movs	r3, #7
 800e9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e9cc:	f107 031c 	add.w	r3, r7, #28
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	4806      	ldr	r0, [pc, #24]	; (800e9ec <HAL_UART_MspInit+0x130>)
 800e9d4:	f7f2 ff6a 	bl	80018ac <HAL_GPIO_Init>
}
 800e9d8:	bf00      	nop
 800e9da:	3730      	adds	r7, #48	; 0x30
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}
 800e9e0:	40004400 	.word	0x40004400
 800e9e4:	40023800 	.word	0x40023800
 800e9e8:	40020000 	.word	0x40020000
 800e9ec:	40020c00 	.word	0x40020c00
 800e9f0:	40004800 	.word	0x40004800

0800e9f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b08a      	sub	sp, #40	; 0x28
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9fc:	f107 0314 	add.w	r3, r7, #20
 800ea00:	2200      	movs	r2, #0
 800ea02:	601a      	str	r2, [r3, #0]
 800ea04:	605a      	str	r2, [r3, #4]
 800ea06:	609a      	str	r2, [r3, #8]
 800ea08:	60da      	str	r2, [r3, #12]
 800ea0a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ea14:	d13f      	bne.n	800ea96 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ea16:	2300      	movs	r3, #0
 800ea18:	613b      	str	r3, [r7, #16]
 800ea1a:	4b21      	ldr	r3, [pc, #132]	; (800eaa0 <HAL_PCD_MspInit+0xac>)
 800ea1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea1e:	4a20      	ldr	r2, [pc, #128]	; (800eaa0 <HAL_PCD_MspInit+0xac>)
 800ea20:	f043 0301 	orr.w	r3, r3, #1
 800ea24:	6313      	str	r3, [r2, #48]	; 0x30
 800ea26:	4b1e      	ldr	r3, [pc, #120]	; (800eaa0 <HAL_PCD_MspInit+0xac>)
 800ea28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea2a:	f003 0301 	and.w	r3, r3, #1
 800ea2e:	613b      	str	r3, [r7, #16]
 800ea30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800ea32:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800ea36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea38:	2302      	movs	r3, #2
 800ea3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea40:	2303      	movs	r3, #3
 800ea42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ea44:	230a      	movs	r3, #10
 800ea46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea48:	f107 0314 	add.w	r3, r7, #20
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	4815      	ldr	r0, [pc, #84]	; (800eaa4 <HAL_PCD_MspInit+0xb0>)
 800ea50:	f7f2 ff2c 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800ea54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ea62:	f107 0314 	add.w	r3, r7, #20
 800ea66:	4619      	mov	r1, r3
 800ea68:	480e      	ldr	r0, [pc, #56]	; (800eaa4 <HAL_PCD_MspInit+0xb0>)
 800ea6a:	f7f2 ff1f 	bl	80018ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ea6e:	4b0c      	ldr	r3, [pc, #48]	; (800eaa0 <HAL_PCD_MspInit+0xac>)
 800ea70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea72:	4a0b      	ldr	r2, [pc, #44]	; (800eaa0 <HAL_PCD_MspInit+0xac>)
 800ea74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea78:	6353      	str	r3, [r2, #52]	; 0x34
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	60fb      	str	r3, [r7, #12]
 800ea7e:	4b08      	ldr	r3, [pc, #32]	; (800eaa0 <HAL_PCD_MspInit+0xac>)
 800ea80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea82:	4a07      	ldr	r2, [pc, #28]	; (800eaa0 <HAL_PCD_MspInit+0xac>)
 800ea84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ea88:	6453      	str	r3, [r2, #68]	; 0x44
 800ea8a:	4b05      	ldr	r3, [pc, #20]	; (800eaa0 <HAL_PCD_MspInit+0xac>)
 800ea8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea92:	60fb      	str	r3, [r7, #12]
 800ea94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800ea96:	bf00      	nop
 800ea98:	3728      	adds	r7, #40	; 0x28
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	40023800 	.word	0x40023800
 800eaa4:	40020000 	.word	0x40020000

0800eaa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800eaac:	bf00      	nop
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr

0800eab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800eab6:	b480      	push	{r7}
 800eab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800eaba:	e7fe      	b.n	800eaba <HardFault_Handler+0x4>

0800eabc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800eabc:	b480      	push	{r7}
 800eabe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800eac0:	e7fe      	b.n	800eac0 <MemManage_Handler+0x4>

0800eac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800eac2:	b480      	push	{r7}
 800eac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800eac6:	e7fe      	b.n	800eac6 <BusFault_Handler+0x4>

0800eac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800eac8:	b480      	push	{r7}
 800eaca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800eacc:	e7fe      	b.n	800eacc <UsageFault_Handler+0x4>

0800eace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800eace:	b480      	push	{r7}
 800ead0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ead2:	bf00      	nop
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800eadc:	b480      	push	{r7}
 800eade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800eae0:	bf00      	nop
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr

0800eaea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800eaea:	b480      	push	{r7}
 800eaec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800eaee:	bf00      	nop
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800eafc:	f7f1 fda2 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800eb00:	bf00      	nop
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b086      	sub	sp, #24
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eb10:	2300      	movs	r3, #0
 800eb12:	617b      	str	r3, [r7, #20]
 800eb14:	e00a      	b.n	800eb2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800eb16:	f3af 8000 	nop.w
 800eb1a:	4601      	mov	r1, r0
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	1c5a      	adds	r2, r3, #1
 800eb20:	60ba      	str	r2, [r7, #8]
 800eb22:	b2ca      	uxtb	r2, r1
 800eb24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	617b      	str	r3, [r7, #20]
 800eb2c:	697a      	ldr	r2, [r7, #20]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	dbf0      	blt.n	800eb16 <_read+0x12>
	}

return len;
 800eb34:	687b      	ldr	r3, [r7, #4]
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3718      	adds	r7, #24
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}

0800eb3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800eb3e:	b580      	push	{r7, lr}
 800eb40:	b086      	sub	sp, #24
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	60f8      	str	r0, [r7, #12]
 800eb46:	60b9      	str	r1, [r7, #8]
 800eb48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	617b      	str	r3, [r7, #20]
 800eb4e:	e009      	b.n	800eb64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	1c5a      	adds	r2, r3, #1
 800eb54:	60ba      	str	r2, [r7, #8]
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	3301      	adds	r3, #1
 800eb62:	617b      	str	r3, [r7, #20]
 800eb64:	697a      	ldr	r2, [r7, #20]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	dbf1      	blt.n	800eb50 <_write+0x12>
	}
	return len;
 800eb6c:	687b      	ldr	r3, [r7, #4]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3718      	adds	r7, #24
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <_close>:

int _close(int file)
{
 800eb76:	b480      	push	{r7}
 800eb78:	b083      	sub	sp, #12
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
	return -1;
 800eb7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	370c      	adds	r7, #12
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr

0800eb8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800eb8e:	b480      	push	{r7}
 800eb90:	b083      	sub	sp, #12
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]
 800eb96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eb9e:	605a      	str	r2, [r3, #4]
	return 0;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	370c      	adds	r7, #12
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr

0800ebae <_isatty>:

int _isatty(int file)
{
 800ebae:	b480      	push	{r7}
 800ebb0:	b083      	sub	sp, #12
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	6078      	str	r0, [r7, #4]
	return 1;
 800ebb6:	2301      	movs	r3, #1
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr

0800ebc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b085      	sub	sp, #20
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	60f8      	str	r0, [r7, #12]
 800ebcc:	60b9      	str	r1, [r7, #8]
 800ebce:	607a      	str	r2, [r7, #4]
	return 0;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3714      	adds	r7, #20
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebdc:	4770      	bx	lr
	...

0800ebe0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b085      	sub	sp, #20
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ebe8:	4b11      	ldr	r3, [pc, #68]	; (800ec30 <_sbrk+0x50>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d102      	bne.n	800ebf6 <_sbrk+0x16>
		heap_end = &end;
 800ebf0:	4b0f      	ldr	r3, [pc, #60]	; (800ec30 <_sbrk+0x50>)
 800ebf2:	4a10      	ldr	r2, [pc, #64]	; (800ec34 <_sbrk+0x54>)
 800ebf4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ebf6:	4b0e      	ldr	r3, [pc, #56]	; (800ec30 <_sbrk+0x50>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ebfc:	4b0c      	ldr	r3, [pc, #48]	; (800ec30 <_sbrk+0x50>)
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	4413      	add	r3, r2
 800ec04:	466a      	mov	r2, sp
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d905      	bls.n	800ec16 <_sbrk+0x36>
	{
		errno = ENOMEM;
 800ec0a:	4b0b      	ldr	r3, [pc, #44]	; (800ec38 <_sbrk+0x58>)
 800ec0c:	220c      	movs	r2, #12
 800ec0e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800ec10:	f04f 33ff 	mov.w	r3, #4294967295
 800ec14:	e006      	b.n	800ec24 <_sbrk+0x44>
	}

	heap_end += incr;
 800ec16:	4b06      	ldr	r3, [pc, #24]	; (800ec30 <_sbrk+0x50>)
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	4a04      	ldr	r2, [pc, #16]	; (800ec30 <_sbrk+0x50>)
 800ec20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ec22:	68fb      	ldr	r3, [r7, #12]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3714      	adds	r7, #20
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr
 800ec30:	20000218 	.word	0x20000218
 800ec34:	20007988 	.word	0x20007988
 800ec38:	20007980 	.word	0x20007980

0800ec3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ec40:	4b16      	ldr	r3, [pc, #88]	; (800ec9c <SystemInit+0x60>)
 800ec42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec46:	4a15      	ldr	r2, [pc, #84]	; (800ec9c <SystemInit+0x60>)
 800ec48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ec50:	4b13      	ldr	r3, [pc, #76]	; (800eca0 <SystemInit+0x64>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4a12      	ldr	r2, [pc, #72]	; (800eca0 <SystemInit+0x64>)
 800ec56:	f043 0301 	orr.w	r3, r3, #1
 800ec5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ec5c:	4b10      	ldr	r3, [pc, #64]	; (800eca0 <SystemInit+0x64>)
 800ec5e:	2200      	movs	r2, #0
 800ec60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ec62:	4b0f      	ldr	r3, [pc, #60]	; (800eca0 <SystemInit+0x64>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4a0e      	ldr	r2, [pc, #56]	; (800eca0 <SystemInit+0x64>)
 800ec68:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800ec6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec70:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ec72:	4b0b      	ldr	r3, [pc, #44]	; (800eca0 <SystemInit+0x64>)
 800ec74:	4a0b      	ldr	r2, [pc, #44]	; (800eca4 <SystemInit+0x68>)
 800ec76:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ec78:	4b09      	ldr	r3, [pc, #36]	; (800eca0 <SystemInit+0x64>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4a08      	ldr	r2, [pc, #32]	; (800eca0 <SystemInit+0x64>)
 800ec7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ec82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ec84:	4b06      	ldr	r3, [pc, #24]	; (800eca0 <SystemInit+0x64>)
 800ec86:	2200      	movs	r2, #0
 800ec88:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ec8a:	4b04      	ldr	r3, [pc, #16]	; (800ec9c <SystemInit+0x60>)
 800ec8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ec90:	609a      	str	r2, [r3, #8]
#endif
}
 800ec92:	bf00      	nop
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr
 800ec9c:	e000ed00 	.word	0xe000ed00
 800eca0:	40023800 	.word	0x40023800
 800eca4:	24003010 	.word	0x24003010

0800eca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800eca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ece0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ecac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ecae:	e003      	b.n	800ecb8 <LoopCopyDataInit>

0800ecb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ecb0:	4b0c      	ldr	r3, [pc, #48]	; (800ece4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ecb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ecb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ecb6:	3104      	adds	r1, #4

0800ecb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ecb8:	480b      	ldr	r0, [pc, #44]	; (800ece8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ecba:	4b0c      	ldr	r3, [pc, #48]	; (800ecec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ecbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ecbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ecc0:	d3f6      	bcc.n	800ecb0 <CopyDataInit>
  ldr  r2, =_sbss
 800ecc2:	4a0b      	ldr	r2, [pc, #44]	; (800ecf0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ecc4:	e002      	b.n	800eccc <LoopFillZerobss>

0800ecc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ecc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ecc8:	f842 3b04 	str.w	r3, [r2], #4

0800eccc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800eccc:	4b09      	ldr	r3, [pc, #36]	; (800ecf4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ecce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ecd0:	d3f9      	bcc.n	800ecc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ecd2:	f7ff ffb3 	bl	800ec3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ecd6:	f000 f811 	bl	800ecfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ecda:	f7ff f9ed 	bl	800e0b8 <main>
  bx  lr    
 800ecde:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800ece0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800ece4:	08012388 	.word	0x08012388
  ldr  r0, =_sdata
 800ece8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ecec:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800ecf0:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800ecf4:	20007984 	.word	0x20007984

0800ecf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ecf8:	e7fe      	b.n	800ecf8 <ADC_IRQHandler>
	...

0800ecfc <__libc_init_array>:
 800ecfc:	b570      	push	{r4, r5, r6, lr}
 800ecfe:	4e0d      	ldr	r6, [pc, #52]	; (800ed34 <__libc_init_array+0x38>)
 800ed00:	4c0d      	ldr	r4, [pc, #52]	; (800ed38 <__libc_init_array+0x3c>)
 800ed02:	1ba4      	subs	r4, r4, r6
 800ed04:	10a4      	asrs	r4, r4, #2
 800ed06:	2500      	movs	r5, #0
 800ed08:	42a5      	cmp	r5, r4
 800ed0a:	d109      	bne.n	800ed20 <__libc_init_array+0x24>
 800ed0c:	4e0b      	ldr	r6, [pc, #44]	; (800ed3c <__libc_init_array+0x40>)
 800ed0e:	4c0c      	ldr	r4, [pc, #48]	; (800ed40 <__libc_init_array+0x44>)
 800ed10:	f001 f914 	bl	800ff3c <_init>
 800ed14:	1ba4      	subs	r4, r4, r6
 800ed16:	10a4      	asrs	r4, r4, #2
 800ed18:	2500      	movs	r5, #0
 800ed1a:	42a5      	cmp	r5, r4
 800ed1c:	d105      	bne.n	800ed2a <__libc_init_array+0x2e>
 800ed1e:	bd70      	pop	{r4, r5, r6, pc}
 800ed20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ed24:	4798      	blx	r3
 800ed26:	3501      	adds	r5, #1
 800ed28:	e7ee      	b.n	800ed08 <__libc_init_array+0xc>
 800ed2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ed2e:	4798      	blx	r3
 800ed30:	3501      	adds	r5, #1
 800ed32:	e7f2      	b.n	800ed1a <__libc_init_array+0x1e>
 800ed34:	08012380 	.word	0x08012380
 800ed38:	08012380 	.word	0x08012380
 800ed3c:	08012380 	.word	0x08012380
 800ed40:	08012384 	.word	0x08012384

0800ed44 <memcmp>:
 800ed44:	b530      	push	{r4, r5, lr}
 800ed46:	2400      	movs	r4, #0
 800ed48:	42a2      	cmp	r2, r4
 800ed4a:	d101      	bne.n	800ed50 <memcmp+0xc>
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	e007      	b.n	800ed60 <memcmp+0x1c>
 800ed50:	5d03      	ldrb	r3, [r0, r4]
 800ed52:	3401      	adds	r4, #1
 800ed54:	190d      	adds	r5, r1, r4
 800ed56:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800ed5a:	42ab      	cmp	r3, r5
 800ed5c:	d0f4      	beq.n	800ed48 <memcmp+0x4>
 800ed5e:	1b58      	subs	r0, r3, r5
 800ed60:	bd30      	pop	{r4, r5, pc}

0800ed62 <memcpy>:
 800ed62:	b510      	push	{r4, lr}
 800ed64:	1e43      	subs	r3, r0, #1
 800ed66:	440a      	add	r2, r1
 800ed68:	4291      	cmp	r1, r2
 800ed6a:	d100      	bne.n	800ed6e <memcpy+0xc>
 800ed6c:	bd10      	pop	{r4, pc}
 800ed6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed76:	e7f7      	b.n	800ed68 <memcpy+0x6>

0800ed78 <memset>:
 800ed78:	4402      	add	r2, r0
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d100      	bne.n	800ed82 <memset+0xa>
 800ed80:	4770      	bx	lr
 800ed82:	f803 1b01 	strb.w	r1, [r3], #1
 800ed86:	e7f9      	b.n	800ed7c <memset+0x4>

0800ed88 <iprintf>:
 800ed88:	b40f      	push	{r0, r1, r2, r3}
 800ed8a:	4b0a      	ldr	r3, [pc, #40]	; (800edb4 <iprintf+0x2c>)
 800ed8c:	b513      	push	{r0, r1, r4, lr}
 800ed8e:	681c      	ldr	r4, [r3, #0]
 800ed90:	b124      	cbz	r4, 800ed9c <iprintf+0x14>
 800ed92:	69a3      	ldr	r3, [r4, #24]
 800ed94:	b913      	cbnz	r3, 800ed9c <iprintf+0x14>
 800ed96:	4620      	mov	r0, r4
 800ed98:	f000 f8a2 	bl	800eee0 <__sinit>
 800ed9c:	ab05      	add	r3, sp, #20
 800ed9e:	9a04      	ldr	r2, [sp, #16]
 800eda0:	68a1      	ldr	r1, [r4, #8]
 800eda2:	9301      	str	r3, [sp, #4]
 800eda4:	4620      	mov	r0, r4
 800eda6:	f000 fb51 	bl	800f44c <_vfiprintf_r>
 800edaa:	b002      	add	sp, #8
 800edac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edb0:	b004      	add	sp, #16
 800edb2:	4770      	bx	lr
 800edb4:	20000018 	.word	0x20000018

0800edb8 <rand>:
 800edb8:	b538      	push	{r3, r4, r5, lr}
 800edba:	4b13      	ldr	r3, [pc, #76]	; (800ee08 <rand+0x50>)
 800edbc:	681c      	ldr	r4, [r3, #0]
 800edbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800edc0:	b97b      	cbnz	r3, 800ede2 <rand+0x2a>
 800edc2:	2018      	movs	r0, #24
 800edc4:	f000 f916 	bl	800eff4 <malloc>
 800edc8:	4a10      	ldr	r2, [pc, #64]	; (800ee0c <rand+0x54>)
 800edca:	4b11      	ldr	r3, [pc, #68]	; (800ee10 <rand+0x58>)
 800edcc:	63a0      	str	r0, [r4, #56]	; 0x38
 800edce:	e9c0 2300 	strd	r2, r3, [r0]
 800edd2:	4b10      	ldr	r3, [pc, #64]	; (800ee14 <rand+0x5c>)
 800edd4:	6083      	str	r3, [r0, #8]
 800edd6:	230b      	movs	r3, #11
 800edd8:	8183      	strh	r3, [r0, #12]
 800edda:	2201      	movs	r2, #1
 800eddc:	2300      	movs	r3, #0
 800edde:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ede2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ede4:	480c      	ldr	r0, [pc, #48]	; (800ee18 <rand+0x60>)
 800ede6:	690a      	ldr	r2, [r1, #16]
 800ede8:	694b      	ldr	r3, [r1, #20]
 800edea:	4c0c      	ldr	r4, [pc, #48]	; (800ee1c <rand+0x64>)
 800edec:	4350      	muls	r0, r2
 800edee:	fb04 0003 	mla	r0, r4, r3, r0
 800edf2:	fba2 2304 	umull	r2, r3, r2, r4
 800edf6:	4403      	add	r3, r0
 800edf8:	1c54      	adds	r4, r2, #1
 800edfa:	f143 0500 	adc.w	r5, r3, #0
 800edfe:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800ee02:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800ee06:	bd38      	pop	{r3, r4, r5, pc}
 800ee08:	20000018 	.word	0x20000018
 800ee0c:	abcd330e 	.word	0xabcd330e
 800ee10:	e66d1234 	.word	0xe66d1234
 800ee14:	0005deec 	.word	0x0005deec
 800ee18:	5851f42d 	.word	0x5851f42d
 800ee1c:	4c957f2d 	.word	0x4c957f2d

0800ee20 <siprintf>:
 800ee20:	b40e      	push	{r1, r2, r3}
 800ee22:	b500      	push	{lr}
 800ee24:	b09c      	sub	sp, #112	; 0x70
 800ee26:	ab1d      	add	r3, sp, #116	; 0x74
 800ee28:	9002      	str	r0, [sp, #8]
 800ee2a:	9006      	str	r0, [sp, #24]
 800ee2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee30:	4809      	ldr	r0, [pc, #36]	; (800ee58 <siprintf+0x38>)
 800ee32:	9107      	str	r1, [sp, #28]
 800ee34:	9104      	str	r1, [sp, #16]
 800ee36:	4909      	ldr	r1, [pc, #36]	; (800ee5c <siprintf+0x3c>)
 800ee38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee3c:	9105      	str	r1, [sp, #20]
 800ee3e:	6800      	ldr	r0, [r0, #0]
 800ee40:	9301      	str	r3, [sp, #4]
 800ee42:	a902      	add	r1, sp, #8
 800ee44:	f000 f9e0 	bl	800f208 <_svfiprintf_r>
 800ee48:	9b02      	ldr	r3, [sp, #8]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	701a      	strb	r2, [r3, #0]
 800ee4e:	b01c      	add	sp, #112	; 0x70
 800ee50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee54:	b003      	add	sp, #12
 800ee56:	4770      	bx	lr
 800ee58:	20000018 	.word	0x20000018
 800ee5c:	ffff0208 	.word	0xffff0208

0800ee60 <std>:
 800ee60:	2300      	movs	r3, #0
 800ee62:	b510      	push	{r4, lr}
 800ee64:	4604      	mov	r4, r0
 800ee66:	e9c0 3300 	strd	r3, r3, [r0]
 800ee6a:	6083      	str	r3, [r0, #8]
 800ee6c:	8181      	strh	r1, [r0, #12]
 800ee6e:	6643      	str	r3, [r0, #100]	; 0x64
 800ee70:	81c2      	strh	r2, [r0, #14]
 800ee72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee76:	6183      	str	r3, [r0, #24]
 800ee78:	4619      	mov	r1, r3
 800ee7a:	2208      	movs	r2, #8
 800ee7c:	305c      	adds	r0, #92	; 0x5c
 800ee7e:	f7ff ff7b 	bl	800ed78 <memset>
 800ee82:	4b05      	ldr	r3, [pc, #20]	; (800ee98 <std+0x38>)
 800ee84:	6263      	str	r3, [r4, #36]	; 0x24
 800ee86:	4b05      	ldr	r3, [pc, #20]	; (800ee9c <std+0x3c>)
 800ee88:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee8a:	4b05      	ldr	r3, [pc, #20]	; (800eea0 <std+0x40>)
 800ee8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee8e:	4b05      	ldr	r3, [pc, #20]	; (800eea4 <std+0x44>)
 800ee90:	6224      	str	r4, [r4, #32]
 800ee92:	6323      	str	r3, [r4, #48]	; 0x30
 800ee94:	bd10      	pop	{r4, pc}
 800ee96:	bf00      	nop
 800ee98:	0800f9a9 	.word	0x0800f9a9
 800ee9c:	0800f9cb 	.word	0x0800f9cb
 800eea0:	0800fa03 	.word	0x0800fa03
 800eea4:	0800fa27 	.word	0x0800fa27

0800eea8 <_cleanup_r>:
 800eea8:	4901      	ldr	r1, [pc, #4]	; (800eeb0 <_cleanup_r+0x8>)
 800eeaa:	f000 b885 	b.w	800efb8 <_fwalk_reent>
 800eeae:	bf00      	nop
 800eeb0:	0800fd01 	.word	0x0800fd01

0800eeb4 <__sfmoreglue>:
 800eeb4:	b570      	push	{r4, r5, r6, lr}
 800eeb6:	1e4a      	subs	r2, r1, #1
 800eeb8:	2568      	movs	r5, #104	; 0x68
 800eeba:	4355      	muls	r5, r2
 800eebc:	460e      	mov	r6, r1
 800eebe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eec2:	f000 f8ed 	bl	800f0a0 <_malloc_r>
 800eec6:	4604      	mov	r4, r0
 800eec8:	b140      	cbz	r0, 800eedc <__sfmoreglue+0x28>
 800eeca:	2100      	movs	r1, #0
 800eecc:	e9c0 1600 	strd	r1, r6, [r0]
 800eed0:	300c      	adds	r0, #12
 800eed2:	60a0      	str	r0, [r4, #8]
 800eed4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eed8:	f7ff ff4e 	bl	800ed78 <memset>
 800eedc:	4620      	mov	r0, r4
 800eede:	bd70      	pop	{r4, r5, r6, pc}

0800eee0 <__sinit>:
 800eee0:	6983      	ldr	r3, [r0, #24]
 800eee2:	b510      	push	{r4, lr}
 800eee4:	4604      	mov	r4, r0
 800eee6:	bb33      	cbnz	r3, 800ef36 <__sinit+0x56>
 800eee8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800eeec:	6503      	str	r3, [r0, #80]	; 0x50
 800eeee:	4b12      	ldr	r3, [pc, #72]	; (800ef38 <__sinit+0x58>)
 800eef0:	4a12      	ldr	r2, [pc, #72]	; (800ef3c <__sinit+0x5c>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	6282      	str	r2, [r0, #40]	; 0x28
 800eef6:	4298      	cmp	r0, r3
 800eef8:	bf04      	itt	eq
 800eefa:	2301      	moveq	r3, #1
 800eefc:	6183      	streq	r3, [r0, #24]
 800eefe:	f000 f81f 	bl	800ef40 <__sfp>
 800ef02:	6060      	str	r0, [r4, #4]
 800ef04:	4620      	mov	r0, r4
 800ef06:	f000 f81b 	bl	800ef40 <__sfp>
 800ef0a:	60a0      	str	r0, [r4, #8]
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f000 f817 	bl	800ef40 <__sfp>
 800ef12:	2200      	movs	r2, #0
 800ef14:	60e0      	str	r0, [r4, #12]
 800ef16:	2104      	movs	r1, #4
 800ef18:	6860      	ldr	r0, [r4, #4]
 800ef1a:	f7ff ffa1 	bl	800ee60 <std>
 800ef1e:	2201      	movs	r2, #1
 800ef20:	2109      	movs	r1, #9
 800ef22:	68a0      	ldr	r0, [r4, #8]
 800ef24:	f7ff ff9c 	bl	800ee60 <std>
 800ef28:	2202      	movs	r2, #2
 800ef2a:	2112      	movs	r1, #18
 800ef2c:	68e0      	ldr	r0, [r4, #12]
 800ef2e:	f7ff ff97 	bl	800ee60 <std>
 800ef32:	2301      	movs	r3, #1
 800ef34:	61a3      	str	r3, [r4, #24]
 800ef36:	bd10      	pop	{r4, pc}
 800ef38:	080122e0 	.word	0x080122e0
 800ef3c:	0800eea9 	.word	0x0800eea9

0800ef40 <__sfp>:
 800ef40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef42:	4b1b      	ldr	r3, [pc, #108]	; (800efb0 <__sfp+0x70>)
 800ef44:	681e      	ldr	r6, [r3, #0]
 800ef46:	69b3      	ldr	r3, [r6, #24]
 800ef48:	4607      	mov	r7, r0
 800ef4a:	b913      	cbnz	r3, 800ef52 <__sfp+0x12>
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	f7ff ffc7 	bl	800eee0 <__sinit>
 800ef52:	3648      	adds	r6, #72	; 0x48
 800ef54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef58:	3b01      	subs	r3, #1
 800ef5a:	d503      	bpl.n	800ef64 <__sfp+0x24>
 800ef5c:	6833      	ldr	r3, [r6, #0]
 800ef5e:	b133      	cbz	r3, 800ef6e <__sfp+0x2e>
 800ef60:	6836      	ldr	r6, [r6, #0]
 800ef62:	e7f7      	b.n	800ef54 <__sfp+0x14>
 800ef64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef68:	b16d      	cbz	r5, 800ef86 <__sfp+0x46>
 800ef6a:	3468      	adds	r4, #104	; 0x68
 800ef6c:	e7f4      	b.n	800ef58 <__sfp+0x18>
 800ef6e:	2104      	movs	r1, #4
 800ef70:	4638      	mov	r0, r7
 800ef72:	f7ff ff9f 	bl	800eeb4 <__sfmoreglue>
 800ef76:	6030      	str	r0, [r6, #0]
 800ef78:	2800      	cmp	r0, #0
 800ef7a:	d1f1      	bne.n	800ef60 <__sfp+0x20>
 800ef7c:	230c      	movs	r3, #12
 800ef7e:	603b      	str	r3, [r7, #0]
 800ef80:	4604      	mov	r4, r0
 800ef82:	4620      	mov	r0, r4
 800ef84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef86:	4b0b      	ldr	r3, [pc, #44]	; (800efb4 <__sfp+0x74>)
 800ef88:	6665      	str	r5, [r4, #100]	; 0x64
 800ef8a:	e9c4 5500 	strd	r5, r5, [r4]
 800ef8e:	60a5      	str	r5, [r4, #8]
 800ef90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ef94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ef98:	2208      	movs	r2, #8
 800ef9a:	4629      	mov	r1, r5
 800ef9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800efa0:	f7ff feea 	bl	800ed78 <memset>
 800efa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800efa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800efac:	e7e9      	b.n	800ef82 <__sfp+0x42>
 800efae:	bf00      	nop
 800efb0:	080122e0 	.word	0x080122e0
 800efb4:	ffff0001 	.word	0xffff0001

0800efb8 <_fwalk_reent>:
 800efb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efbc:	4680      	mov	r8, r0
 800efbe:	4689      	mov	r9, r1
 800efc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800efc4:	2600      	movs	r6, #0
 800efc6:	b914      	cbnz	r4, 800efce <_fwalk_reent+0x16>
 800efc8:	4630      	mov	r0, r6
 800efca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800efd2:	3f01      	subs	r7, #1
 800efd4:	d501      	bpl.n	800efda <_fwalk_reent+0x22>
 800efd6:	6824      	ldr	r4, [r4, #0]
 800efd8:	e7f5      	b.n	800efc6 <_fwalk_reent+0xe>
 800efda:	89ab      	ldrh	r3, [r5, #12]
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d907      	bls.n	800eff0 <_fwalk_reent+0x38>
 800efe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800efe4:	3301      	adds	r3, #1
 800efe6:	d003      	beq.n	800eff0 <_fwalk_reent+0x38>
 800efe8:	4629      	mov	r1, r5
 800efea:	4640      	mov	r0, r8
 800efec:	47c8      	blx	r9
 800efee:	4306      	orrs	r6, r0
 800eff0:	3568      	adds	r5, #104	; 0x68
 800eff2:	e7ee      	b.n	800efd2 <_fwalk_reent+0x1a>

0800eff4 <malloc>:
 800eff4:	4b02      	ldr	r3, [pc, #8]	; (800f000 <malloc+0xc>)
 800eff6:	4601      	mov	r1, r0
 800eff8:	6818      	ldr	r0, [r3, #0]
 800effa:	f000 b851 	b.w	800f0a0 <_malloc_r>
 800effe:	bf00      	nop
 800f000:	20000018 	.word	0x20000018

0800f004 <_free_r>:
 800f004:	b538      	push	{r3, r4, r5, lr}
 800f006:	4605      	mov	r5, r0
 800f008:	2900      	cmp	r1, #0
 800f00a:	d045      	beq.n	800f098 <_free_r+0x94>
 800f00c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f010:	1f0c      	subs	r4, r1, #4
 800f012:	2b00      	cmp	r3, #0
 800f014:	bfb8      	it	lt
 800f016:	18e4      	addlt	r4, r4, r3
 800f018:	f000 ff2b 	bl	800fe72 <__malloc_lock>
 800f01c:	4a1f      	ldr	r2, [pc, #124]	; (800f09c <_free_r+0x98>)
 800f01e:	6813      	ldr	r3, [r2, #0]
 800f020:	4610      	mov	r0, r2
 800f022:	b933      	cbnz	r3, 800f032 <_free_r+0x2e>
 800f024:	6063      	str	r3, [r4, #4]
 800f026:	6014      	str	r4, [r2, #0]
 800f028:	4628      	mov	r0, r5
 800f02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f02e:	f000 bf21 	b.w	800fe74 <__malloc_unlock>
 800f032:	42a3      	cmp	r3, r4
 800f034:	d90c      	bls.n	800f050 <_free_r+0x4c>
 800f036:	6821      	ldr	r1, [r4, #0]
 800f038:	1862      	adds	r2, r4, r1
 800f03a:	4293      	cmp	r3, r2
 800f03c:	bf04      	itt	eq
 800f03e:	681a      	ldreq	r2, [r3, #0]
 800f040:	685b      	ldreq	r3, [r3, #4]
 800f042:	6063      	str	r3, [r4, #4]
 800f044:	bf04      	itt	eq
 800f046:	1852      	addeq	r2, r2, r1
 800f048:	6022      	streq	r2, [r4, #0]
 800f04a:	6004      	str	r4, [r0, #0]
 800f04c:	e7ec      	b.n	800f028 <_free_r+0x24>
 800f04e:	4613      	mov	r3, r2
 800f050:	685a      	ldr	r2, [r3, #4]
 800f052:	b10a      	cbz	r2, 800f058 <_free_r+0x54>
 800f054:	42a2      	cmp	r2, r4
 800f056:	d9fa      	bls.n	800f04e <_free_r+0x4a>
 800f058:	6819      	ldr	r1, [r3, #0]
 800f05a:	1858      	adds	r0, r3, r1
 800f05c:	42a0      	cmp	r0, r4
 800f05e:	d10b      	bne.n	800f078 <_free_r+0x74>
 800f060:	6820      	ldr	r0, [r4, #0]
 800f062:	4401      	add	r1, r0
 800f064:	1858      	adds	r0, r3, r1
 800f066:	4282      	cmp	r2, r0
 800f068:	6019      	str	r1, [r3, #0]
 800f06a:	d1dd      	bne.n	800f028 <_free_r+0x24>
 800f06c:	6810      	ldr	r0, [r2, #0]
 800f06e:	6852      	ldr	r2, [r2, #4]
 800f070:	605a      	str	r2, [r3, #4]
 800f072:	4401      	add	r1, r0
 800f074:	6019      	str	r1, [r3, #0]
 800f076:	e7d7      	b.n	800f028 <_free_r+0x24>
 800f078:	d902      	bls.n	800f080 <_free_r+0x7c>
 800f07a:	230c      	movs	r3, #12
 800f07c:	602b      	str	r3, [r5, #0]
 800f07e:	e7d3      	b.n	800f028 <_free_r+0x24>
 800f080:	6820      	ldr	r0, [r4, #0]
 800f082:	1821      	adds	r1, r4, r0
 800f084:	428a      	cmp	r2, r1
 800f086:	bf04      	itt	eq
 800f088:	6811      	ldreq	r1, [r2, #0]
 800f08a:	6852      	ldreq	r2, [r2, #4]
 800f08c:	6062      	str	r2, [r4, #4]
 800f08e:	bf04      	itt	eq
 800f090:	1809      	addeq	r1, r1, r0
 800f092:	6021      	streq	r1, [r4, #0]
 800f094:	605c      	str	r4, [r3, #4]
 800f096:	e7c7      	b.n	800f028 <_free_r+0x24>
 800f098:	bd38      	pop	{r3, r4, r5, pc}
 800f09a:	bf00      	nop
 800f09c:	2000021c 	.word	0x2000021c

0800f0a0 <_malloc_r>:
 800f0a0:	b570      	push	{r4, r5, r6, lr}
 800f0a2:	1ccd      	adds	r5, r1, #3
 800f0a4:	f025 0503 	bic.w	r5, r5, #3
 800f0a8:	3508      	adds	r5, #8
 800f0aa:	2d0c      	cmp	r5, #12
 800f0ac:	bf38      	it	cc
 800f0ae:	250c      	movcc	r5, #12
 800f0b0:	2d00      	cmp	r5, #0
 800f0b2:	4606      	mov	r6, r0
 800f0b4:	db01      	blt.n	800f0ba <_malloc_r+0x1a>
 800f0b6:	42a9      	cmp	r1, r5
 800f0b8:	d903      	bls.n	800f0c2 <_malloc_r+0x22>
 800f0ba:	230c      	movs	r3, #12
 800f0bc:	6033      	str	r3, [r6, #0]
 800f0be:	2000      	movs	r0, #0
 800f0c0:	bd70      	pop	{r4, r5, r6, pc}
 800f0c2:	f000 fed6 	bl	800fe72 <__malloc_lock>
 800f0c6:	4a21      	ldr	r2, [pc, #132]	; (800f14c <_malloc_r+0xac>)
 800f0c8:	6814      	ldr	r4, [r2, #0]
 800f0ca:	4621      	mov	r1, r4
 800f0cc:	b991      	cbnz	r1, 800f0f4 <_malloc_r+0x54>
 800f0ce:	4c20      	ldr	r4, [pc, #128]	; (800f150 <_malloc_r+0xb0>)
 800f0d0:	6823      	ldr	r3, [r4, #0]
 800f0d2:	b91b      	cbnz	r3, 800f0dc <_malloc_r+0x3c>
 800f0d4:	4630      	mov	r0, r6
 800f0d6:	f000 fc57 	bl	800f988 <_sbrk_r>
 800f0da:	6020      	str	r0, [r4, #0]
 800f0dc:	4629      	mov	r1, r5
 800f0de:	4630      	mov	r0, r6
 800f0e0:	f000 fc52 	bl	800f988 <_sbrk_r>
 800f0e4:	1c43      	adds	r3, r0, #1
 800f0e6:	d124      	bne.n	800f132 <_malloc_r+0x92>
 800f0e8:	230c      	movs	r3, #12
 800f0ea:	6033      	str	r3, [r6, #0]
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	f000 fec1 	bl	800fe74 <__malloc_unlock>
 800f0f2:	e7e4      	b.n	800f0be <_malloc_r+0x1e>
 800f0f4:	680b      	ldr	r3, [r1, #0]
 800f0f6:	1b5b      	subs	r3, r3, r5
 800f0f8:	d418      	bmi.n	800f12c <_malloc_r+0x8c>
 800f0fa:	2b0b      	cmp	r3, #11
 800f0fc:	d90f      	bls.n	800f11e <_malloc_r+0x7e>
 800f0fe:	600b      	str	r3, [r1, #0]
 800f100:	50cd      	str	r5, [r1, r3]
 800f102:	18cc      	adds	r4, r1, r3
 800f104:	4630      	mov	r0, r6
 800f106:	f000 feb5 	bl	800fe74 <__malloc_unlock>
 800f10a:	f104 000b 	add.w	r0, r4, #11
 800f10e:	1d23      	adds	r3, r4, #4
 800f110:	f020 0007 	bic.w	r0, r0, #7
 800f114:	1ac3      	subs	r3, r0, r3
 800f116:	d0d3      	beq.n	800f0c0 <_malloc_r+0x20>
 800f118:	425a      	negs	r2, r3
 800f11a:	50e2      	str	r2, [r4, r3]
 800f11c:	e7d0      	b.n	800f0c0 <_malloc_r+0x20>
 800f11e:	428c      	cmp	r4, r1
 800f120:	684b      	ldr	r3, [r1, #4]
 800f122:	bf16      	itet	ne
 800f124:	6063      	strne	r3, [r4, #4]
 800f126:	6013      	streq	r3, [r2, #0]
 800f128:	460c      	movne	r4, r1
 800f12a:	e7eb      	b.n	800f104 <_malloc_r+0x64>
 800f12c:	460c      	mov	r4, r1
 800f12e:	6849      	ldr	r1, [r1, #4]
 800f130:	e7cc      	b.n	800f0cc <_malloc_r+0x2c>
 800f132:	1cc4      	adds	r4, r0, #3
 800f134:	f024 0403 	bic.w	r4, r4, #3
 800f138:	42a0      	cmp	r0, r4
 800f13a:	d005      	beq.n	800f148 <_malloc_r+0xa8>
 800f13c:	1a21      	subs	r1, r4, r0
 800f13e:	4630      	mov	r0, r6
 800f140:	f000 fc22 	bl	800f988 <_sbrk_r>
 800f144:	3001      	adds	r0, #1
 800f146:	d0cf      	beq.n	800f0e8 <_malloc_r+0x48>
 800f148:	6025      	str	r5, [r4, #0]
 800f14a:	e7db      	b.n	800f104 <_malloc_r+0x64>
 800f14c:	2000021c 	.word	0x2000021c
 800f150:	20000220 	.word	0x20000220

0800f154 <__ssputs_r>:
 800f154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f158:	688e      	ldr	r6, [r1, #8]
 800f15a:	429e      	cmp	r6, r3
 800f15c:	4682      	mov	sl, r0
 800f15e:	460c      	mov	r4, r1
 800f160:	4690      	mov	r8, r2
 800f162:	4699      	mov	r9, r3
 800f164:	d837      	bhi.n	800f1d6 <__ssputs_r+0x82>
 800f166:	898a      	ldrh	r2, [r1, #12]
 800f168:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f16c:	d031      	beq.n	800f1d2 <__ssputs_r+0x7e>
 800f16e:	6825      	ldr	r5, [r4, #0]
 800f170:	6909      	ldr	r1, [r1, #16]
 800f172:	1a6f      	subs	r7, r5, r1
 800f174:	6965      	ldr	r5, [r4, #20]
 800f176:	2302      	movs	r3, #2
 800f178:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f17c:	fb95 f5f3 	sdiv	r5, r5, r3
 800f180:	f109 0301 	add.w	r3, r9, #1
 800f184:	443b      	add	r3, r7
 800f186:	429d      	cmp	r5, r3
 800f188:	bf38      	it	cc
 800f18a:	461d      	movcc	r5, r3
 800f18c:	0553      	lsls	r3, r2, #21
 800f18e:	d530      	bpl.n	800f1f2 <__ssputs_r+0x9e>
 800f190:	4629      	mov	r1, r5
 800f192:	f7ff ff85 	bl	800f0a0 <_malloc_r>
 800f196:	4606      	mov	r6, r0
 800f198:	b950      	cbnz	r0, 800f1b0 <__ssputs_r+0x5c>
 800f19a:	230c      	movs	r3, #12
 800f19c:	f8ca 3000 	str.w	r3, [sl]
 800f1a0:	89a3      	ldrh	r3, [r4, #12]
 800f1a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1a6:	81a3      	strh	r3, [r4, #12]
 800f1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1b0:	463a      	mov	r2, r7
 800f1b2:	6921      	ldr	r1, [r4, #16]
 800f1b4:	f7ff fdd5 	bl	800ed62 <memcpy>
 800f1b8:	89a3      	ldrh	r3, [r4, #12]
 800f1ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1c2:	81a3      	strh	r3, [r4, #12]
 800f1c4:	6126      	str	r6, [r4, #16]
 800f1c6:	6165      	str	r5, [r4, #20]
 800f1c8:	443e      	add	r6, r7
 800f1ca:	1bed      	subs	r5, r5, r7
 800f1cc:	6026      	str	r6, [r4, #0]
 800f1ce:	60a5      	str	r5, [r4, #8]
 800f1d0:	464e      	mov	r6, r9
 800f1d2:	454e      	cmp	r6, r9
 800f1d4:	d900      	bls.n	800f1d8 <__ssputs_r+0x84>
 800f1d6:	464e      	mov	r6, r9
 800f1d8:	4632      	mov	r2, r6
 800f1da:	4641      	mov	r1, r8
 800f1dc:	6820      	ldr	r0, [r4, #0]
 800f1de:	f000 fe2f 	bl	800fe40 <memmove>
 800f1e2:	68a3      	ldr	r3, [r4, #8]
 800f1e4:	1b9b      	subs	r3, r3, r6
 800f1e6:	60a3      	str	r3, [r4, #8]
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	441e      	add	r6, r3
 800f1ec:	6026      	str	r6, [r4, #0]
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	e7dc      	b.n	800f1ac <__ssputs_r+0x58>
 800f1f2:	462a      	mov	r2, r5
 800f1f4:	f000 fe3f 	bl	800fe76 <_realloc_r>
 800f1f8:	4606      	mov	r6, r0
 800f1fa:	2800      	cmp	r0, #0
 800f1fc:	d1e2      	bne.n	800f1c4 <__ssputs_r+0x70>
 800f1fe:	6921      	ldr	r1, [r4, #16]
 800f200:	4650      	mov	r0, sl
 800f202:	f7ff feff 	bl	800f004 <_free_r>
 800f206:	e7c8      	b.n	800f19a <__ssputs_r+0x46>

0800f208 <_svfiprintf_r>:
 800f208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f20c:	461d      	mov	r5, r3
 800f20e:	898b      	ldrh	r3, [r1, #12]
 800f210:	061f      	lsls	r7, r3, #24
 800f212:	b09d      	sub	sp, #116	; 0x74
 800f214:	4680      	mov	r8, r0
 800f216:	460c      	mov	r4, r1
 800f218:	4616      	mov	r6, r2
 800f21a:	d50f      	bpl.n	800f23c <_svfiprintf_r+0x34>
 800f21c:	690b      	ldr	r3, [r1, #16]
 800f21e:	b96b      	cbnz	r3, 800f23c <_svfiprintf_r+0x34>
 800f220:	2140      	movs	r1, #64	; 0x40
 800f222:	f7ff ff3d 	bl	800f0a0 <_malloc_r>
 800f226:	6020      	str	r0, [r4, #0]
 800f228:	6120      	str	r0, [r4, #16]
 800f22a:	b928      	cbnz	r0, 800f238 <_svfiprintf_r+0x30>
 800f22c:	230c      	movs	r3, #12
 800f22e:	f8c8 3000 	str.w	r3, [r8]
 800f232:	f04f 30ff 	mov.w	r0, #4294967295
 800f236:	e0c8      	b.n	800f3ca <_svfiprintf_r+0x1c2>
 800f238:	2340      	movs	r3, #64	; 0x40
 800f23a:	6163      	str	r3, [r4, #20]
 800f23c:	2300      	movs	r3, #0
 800f23e:	9309      	str	r3, [sp, #36]	; 0x24
 800f240:	2320      	movs	r3, #32
 800f242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f246:	2330      	movs	r3, #48	; 0x30
 800f248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f24c:	9503      	str	r5, [sp, #12]
 800f24e:	f04f 0b01 	mov.w	fp, #1
 800f252:	4637      	mov	r7, r6
 800f254:	463d      	mov	r5, r7
 800f256:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f25a:	b10b      	cbz	r3, 800f260 <_svfiprintf_r+0x58>
 800f25c:	2b25      	cmp	r3, #37	; 0x25
 800f25e:	d13e      	bne.n	800f2de <_svfiprintf_r+0xd6>
 800f260:	ebb7 0a06 	subs.w	sl, r7, r6
 800f264:	d00b      	beq.n	800f27e <_svfiprintf_r+0x76>
 800f266:	4653      	mov	r3, sl
 800f268:	4632      	mov	r2, r6
 800f26a:	4621      	mov	r1, r4
 800f26c:	4640      	mov	r0, r8
 800f26e:	f7ff ff71 	bl	800f154 <__ssputs_r>
 800f272:	3001      	adds	r0, #1
 800f274:	f000 80a4 	beq.w	800f3c0 <_svfiprintf_r+0x1b8>
 800f278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f27a:	4453      	add	r3, sl
 800f27c:	9309      	str	r3, [sp, #36]	; 0x24
 800f27e:	783b      	ldrb	r3, [r7, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	f000 809d 	beq.w	800f3c0 <_svfiprintf_r+0x1b8>
 800f286:	2300      	movs	r3, #0
 800f288:	f04f 32ff 	mov.w	r2, #4294967295
 800f28c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f290:	9304      	str	r3, [sp, #16]
 800f292:	9307      	str	r3, [sp, #28]
 800f294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f298:	931a      	str	r3, [sp, #104]	; 0x68
 800f29a:	462f      	mov	r7, r5
 800f29c:	2205      	movs	r2, #5
 800f29e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f2a2:	4850      	ldr	r0, [pc, #320]	; (800f3e4 <_svfiprintf_r+0x1dc>)
 800f2a4:	f7f0 ffac 	bl	8000200 <memchr>
 800f2a8:	9b04      	ldr	r3, [sp, #16]
 800f2aa:	b9d0      	cbnz	r0, 800f2e2 <_svfiprintf_r+0xda>
 800f2ac:	06d9      	lsls	r1, r3, #27
 800f2ae:	bf44      	itt	mi
 800f2b0:	2220      	movmi	r2, #32
 800f2b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f2b6:	071a      	lsls	r2, r3, #28
 800f2b8:	bf44      	itt	mi
 800f2ba:	222b      	movmi	r2, #43	; 0x2b
 800f2bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f2c0:	782a      	ldrb	r2, [r5, #0]
 800f2c2:	2a2a      	cmp	r2, #42	; 0x2a
 800f2c4:	d015      	beq.n	800f2f2 <_svfiprintf_r+0xea>
 800f2c6:	9a07      	ldr	r2, [sp, #28]
 800f2c8:	462f      	mov	r7, r5
 800f2ca:	2000      	movs	r0, #0
 800f2cc:	250a      	movs	r5, #10
 800f2ce:	4639      	mov	r1, r7
 800f2d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2d4:	3b30      	subs	r3, #48	; 0x30
 800f2d6:	2b09      	cmp	r3, #9
 800f2d8:	d94d      	bls.n	800f376 <_svfiprintf_r+0x16e>
 800f2da:	b1b8      	cbz	r0, 800f30c <_svfiprintf_r+0x104>
 800f2dc:	e00f      	b.n	800f2fe <_svfiprintf_r+0xf6>
 800f2de:	462f      	mov	r7, r5
 800f2e0:	e7b8      	b.n	800f254 <_svfiprintf_r+0x4c>
 800f2e2:	4a40      	ldr	r2, [pc, #256]	; (800f3e4 <_svfiprintf_r+0x1dc>)
 800f2e4:	1a80      	subs	r0, r0, r2
 800f2e6:	fa0b f000 	lsl.w	r0, fp, r0
 800f2ea:	4318      	orrs	r0, r3
 800f2ec:	9004      	str	r0, [sp, #16]
 800f2ee:	463d      	mov	r5, r7
 800f2f0:	e7d3      	b.n	800f29a <_svfiprintf_r+0x92>
 800f2f2:	9a03      	ldr	r2, [sp, #12]
 800f2f4:	1d11      	adds	r1, r2, #4
 800f2f6:	6812      	ldr	r2, [r2, #0]
 800f2f8:	9103      	str	r1, [sp, #12]
 800f2fa:	2a00      	cmp	r2, #0
 800f2fc:	db01      	blt.n	800f302 <_svfiprintf_r+0xfa>
 800f2fe:	9207      	str	r2, [sp, #28]
 800f300:	e004      	b.n	800f30c <_svfiprintf_r+0x104>
 800f302:	4252      	negs	r2, r2
 800f304:	f043 0302 	orr.w	r3, r3, #2
 800f308:	9207      	str	r2, [sp, #28]
 800f30a:	9304      	str	r3, [sp, #16]
 800f30c:	783b      	ldrb	r3, [r7, #0]
 800f30e:	2b2e      	cmp	r3, #46	; 0x2e
 800f310:	d10c      	bne.n	800f32c <_svfiprintf_r+0x124>
 800f312:	787b      	ldrb	r3, [r7, #1]
 800f314:	2b2a      	cmp	r3, #42	; 0x2a
 800f316:	d133      	bne.n	800f380 <_svfiprintf_r+0x178>
 800f318:	9b03      	ldr	r3, [sp, #12]
 800f31a:	1d1a      	adds	r2, r3, #4
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	9203      	str	r2, [sp, #12]
 800f320:	2b00      	cmp	r3, #0
 800f322:	bfb8      	it	lt
 800f324:	f04f 33ff 	movlt.w	r3, #4294967295
 800f328:	3702      	adds	r7, #2
 800f32a:	9305      	str	r3, [sp, #20]
 800f32c:	4d2e      	ldr	r5, [pc, #184]	; (800f3e8 <_svfiprintf_r+0x1e0>)
 800f32e:	7839      	ldrb	r1, [r7, #0]
 800f330:	2203      	movs	r2, #3
 800f332:	4628      	mov	r0, r5
 800f334:	f7f0 ff64 	bl	8000200 <memchr>
 800f338:	b138      	cbz	r0, 800f34a <_svfiprintf_r+0x142>
 800f33a:	2340      	movs	r3, #64	; 0x40
 800f33c:	1b40      	subs	r0, r0, r5
 800f33e:	fa03 f000 	lsl.w	r0, r3, r0
 800f342:	9b04      	ldr	r3, [sp, #16]
 800f344:	4303      	orrs	r3, r0
 800f346:	3701      	adds	r7, #1
 800f348:	9304      	str	r3, [sp, #16]
 800f34a:	7839      	ldrb	r1, [r7, #0]
 800f34c:	4827      	ldr	r0, [pc, #156]	; (800f3ec <_svfiprintf_r+0x1e4>)
 800f34e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f352:	2206      	movs	r2, #6
 800f354:	1c7e      	adds	r6, r7, #1
 800f356:	f7f0 ff53 	bl	8000200 <memchr>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	d038      	beq.n	800f3d0 <_svfiprintf_r+0x1c8>
 800f35e:	4b24      	ldr	r3, [pc, #144]	; (800f3f0 <_svfiprintf_r+0x1e8>)
 800f360:	bb13      	cbnz	r3, 800f3a8 <_svfiprintf_r+0x1a0>
 800f362:	9b03      	ldr	r3, [sp, #12]
 800f364:	3307      	adds	r3, #7
 800f366:	f023 0307 	bic.w	r3, r3, #7
 800f36a:	3308      	adds	r3, #8
 800f36c:	9303      	str	r3, [sp, #12]
 800f36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f370:	444b      	add	r3, r9
 800f372:	9309      	str	r3, [sp, #36]	; 0x24
 800f374:	e76d      	b.n	800f252 <_svfiprintf_r+0x4a>
 800f376:	fb05 3202 	mla	r2, r5, r2, r3
 800f37a:	2001      	movs	r0, #1
 800f37c:	460f      	mov	r7, r1
 800f37e:	e7a6      	b.n	800f2ce <_svfiprintf_r+0xc6>
 800f380:	2300      	movs	r3, #0
 800f382:	3701      	adds	r7, #1
 800f384:	9305      	str	r3, [sp, #20]
 800f386:	4619      	mov	r1, r3
 800f388:	250a      	movs	r5, #10
 800f38a:	4638      	mov	r0, r7
 800f38c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f390:	3a30      	subs	r2, #48	; 0x30
 800f392:	2a09      	cmp	r2, #9
 800f394:	d903      	bls.n	800f39e <_svfiprintf_r+0x196>
 800f396:	2b00      	cmp	r3, #0
 800f398:	d0c8      	beq.n	800f32c <_svfiprintf_r+0x124>
 800f39a:	9105      	str	r1, [sp, #20]
 800f39c:	e7c6      	b.n	800f32c <_svfiprintf_r+0x124>
 800f39e:	fb05 2101 	mla	r1, r5, r1, r2
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	4607      	mov	r7, r0
 800f3a6:	e7f0      	b.n	800f38a <_svfiprintf_r+0x182>
 800f3a8:	ab03      	add	r3, sp, #12
 800f3aa:	9300      	str	r3, [sp, #0]
 800f3ac:	4622      	mov	r2, r4
 800f3ae:	4b11      	ldr	r3, [pc, #68]	; (800f3f4 <_svfiprintf_r+0x1ec>)
 800f3b0:	a904      	add	r1, sp, #16
 800f3b2:	4640      	mov	r0, r8
 800f3b4:	f3af 8000 	nop.w
 800f3b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f3bc:	4681      	mov	r9, r0
 800f3be:	d1d6      	bne.n	800f36e <_svfiprintf_r+0x166>
 800f3c0:	89a3      	ldrh	r3, [r4, #12]
 800f3c2:	065b      	lsls	r3, r3, #25
 800f3c4:	f53f af35 	bmi.w	800f232 <_svfiprintf_r+0x2a>
 800f3c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3ca:	b01d      	add	sp, #116	; 0x74
 800f3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3d0:	ab03      	add	r3, sp, #12
 800f3d2:	9300      	str	r3, [sp, #0]
 800f3d4:	4622      	mov	r2, r4
 800f3d6:	4b07      	ldr	r3, [pc, #28]	; (800f3f4 <_svfiprintf_r+0x1ec>)
 800f3d8:	a904      	add	r1, sp, #16
 800f3da:	4640      	mov	r0, r8
 800f3dc:	f000 f9c2 	bl	800f764 <_printf_i>
 800f3e0:	e7ea      	b.n	800f3b8 <_svfiprintf_r+0x1b0>
 800f3e2:	bf00      	nop
 800f3e4:	08012344 	.word	0x08012344
 800f3e8:	0801234a 	.word	0x0801234a
 800f3ec:	0801234e 	.word	0x0801234e
 800f3f0:	00000000 	.word	0x00000000
 800f3f4:	0800f155 	.word	0x0800f155

0800f3f8 <__sfputc_r>:
 800f3f8:	6893      	ldr	r3, [r2, #8]
 800f3fa:	3b01      	subs	r3, #1
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	b410      	push	{r4}
 800f400:	6093      	str	r3, [r2, #8]
 800f402:	da08      	bge.n	800f416 <__sfputc_r+0x1e>
 800f404:	6994      	ldr	r4, [r2, #24]
 800f406:	42a3      	cmp	r3, r4
 800f408:	db01      	blt.n	800f40e <__sfputc_r+0x16>
 800f40a:	290a      	cmp	r1, #10
 800f40c:	d103      	bne.n	800f416 <__sfputc_r+0x1e>
 800f40e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f412:	f000 bb0d 	b.w	800fa30 <__swbuf_r>
 800f416:	6813      	ldr	r3, [r2, #0]
 800f418:	1c58      	adds	r0, r3, #1
 800f41a:	6010      	str	r0, [r2, #0]
 800f41c:	7019      	strb	r1, [r3, #0]
 800f41e:	4608      	mov	r0, r1
 800f420:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f424:	4770      	bx	lr

0800f426 <__sfputs_r>:
 800f426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f428:	4606      	mov	r6, r0
 800f42a:	460f      	mov	r7, r1
 800f42c:	4614      	mov	r4, r2
 800f42e:	18d5      	adds	r5, r2, r3
 800f430:	42ac      	cmp	r4, r5
 800f432:	d101      	bne.n	800f438 <__sfputs_r+0x12>
 800f434:	2000      	movs	r0, #0
 800f436:	e007      	b.n	800f448 <__sfputs_r+0x22>
 800f438:	463a      	mov	r2, r7
 800f43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f43e:	4630      	mov	r0, r6
 800f440:	f7ff ffda 	bl	800f3f8 <__sfputc_r>
 800f444:	1c43      	adds	r3, r0, #1
 800f446:	d1f3      	bne.n	800f430 <__sfputs_r+0xa>
 800f448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f44c <_vfiprintf_r>:
 800f44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f450:	460c      	mov	r4, r1
 800f452:	b09d      	sub	sp, #116	; 0x74
 800f454:	4617      	mov	r7, r2
 800f456:	461d      	mov	r5, r3
 800f458:	4606      	mov	r6, r0
 800f45a:	b118      	cbz	r0, 800f464 <_vfiprintf_r+0x18>
 800f45c:	6983      	ldr	r3, [r0, #24]
 800f45e:	b90b      	cbnz	r3, 800f464 <_vfiprintf_r+0x18>
 800f460:	f7ff fd3e 	bl	800eee0 <__sinit>
 800f464:	4b7c      	ldr	r3, [pc, #496]	; (800f658 <_vfiprintf_r+0x20c>)
 800f466:	429c      	cmp	r4, r3
 800f468:	d158      	bne.n	800f51c <_vfiprintf_r+0xd0>
 800f46a:	6874      	ldr	r4, [r6, #4]
 800f46c:	89a3      	ldrh	r3, [r4, #12]
 800f46e:	0718      	lsls	r0, r3, #28
 800f470:	d55e      	bpl.n	800f530 <_vfiprintf_r+0xe4>
 800f472:	6923      	ldr	r3, [r4, #16]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d05b      	beq.n	800f530 <_vfiprintf_r+0xe4>
 800f478:	2300      	movs	r3, #0
 800f47a:	9309      	str	r3, [sp, #36]	; 0x24
 800f47c:	2320      	movs	r3, #32
 800f47e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f482:	2330      	movs	r3, #48	; 0x30
 800f484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f488:	9503      	str	r5, [sp, #12]
 800f48a:	f04f 0b01 	mov.w	fp, #1
 800f48e:	46b8      	mov	r8, r7
 800f490:	4645      	mov	r5, r8
 800f492:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f496:	b10b      	cbz	r3, 800f49c <_vfiprintf_r+0x50>
 800f498:	2b25      	cmp	r3, #37	; 0x25
 800f49a:	d154      	bne.n	800f546 <_vfiprintf_r+0xfa>
 800f49c:	ebb8 0a07 	subs.w	sl, r8, r7
 800f4a0:	d00b      	beq.n	800f4ba <_vfiprintf_r+0x6e>
 800f4a2:	4653      	mov	r3, sl
 800f4a4:	463a      	mov	r2, r7
 800f4a6:	4621      	mov	r1, r4
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f7ff ffbc 	bl	800f426 <__sfputs_r>
 800f4ae:	3001      	adds	r0, #1
 800f4b0:	f000 80c2 	beq.w	800f638 <_vfiprintf_r+0x1ec>
 800f4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4b6:	4453      	add	r3, sl
 800f4b8:	9309      	str	r3, [sp, #36]	; 0x24
 800f4ba:	f898 3000 	ldrb.w	r3, [r8]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	f000 80ba 	beq.w	800f638 <_vfiprintf_r+0x1ec>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4ce:	9304      	str	r3, [sp, #16]
 800f4d0:	9307      	str	r3, [sp, #28]
 800f4d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4d6:	931a      	str	r3, [sp, #104]	; 0x68
 800f4d8:	46a8      	mov	r8, r5
 800f4da:	2205      	movs	r2, #5
 800f4dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f4e0:	485e      	ldr	r0, [pc, #376]	; (800f65c <_vfiprintf_r+0x210>)
 800f4e2:	f7f0 fe8d 	bl	8000200 <memchr>
 800f4e6:	9b04      	ldr	r3, [sp, #16]
 800f4e8:	bb78      	cbnz	r0, 800f54a <_vfiprintf_r+0xfe>
 800f4ea:	06d9      	lsls	r1, r3, #27
 800f4ec:	bf44      	itt	mi
 800f4ee:	2220      	movmi	r2, #32
 800f4f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f4f4:	071a      	lsls	r2, r3, #28
 800f4f6:	bf44      	itt	mi
 800f4f8:	222b      	movmi	r2, #43	; 0x2b
 800f4fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f4fe:	782a      	ldrb	r2, [r5, #0]
 800f500:	2a2a      	cmp	r2, #42	; 0x2a
 800f502:	d02a      	beq.n	800f55a <_vfiprintf_r+0x10e>
 800f504:	9a07      	ldr	r2, [sp, #28]
 800f506:	46a8      	mov	r8, r5
 800f508:	2000      	movs	r0, #0
 800f50a:	250a      	movs	r5, #10
 800f50c:	4641      	mov	r1, r8
 800f50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f512:	3b30      	subs	r3, #48	; 0x30
 800f514:	2b09      	cmp	r3, #9
 800f516:	d969      	bls.n	800f5ec <_vfiprintf_r+0x1a0>
 800f518:	b360      	cbz	r0, 800f574 <_vfiprintf_r+0x128>
 800f51a:	e024      	b.n	800f566 <_vfiprintf_r+0x11a>
 800f51c:	4b50      	ldr	r3, [pc, #320]	; (800f660 <_vfiprintf_r+0x214>)
 800f51e:	429c      	cmp	r4, r3
 800f520:	d101      	bne.n	800f526 <_vfiprintf_r+0xda>
 800f522:	68b4      	ldr	r4, [r6, #8]
 800f524:	e7a2      	b.n	800f46c <_vfiprintf_r+0x20>
 800f526:	4b4f      	ldr	r3, [pc, #316]	; (800f664 <_vfiprintf_r+0x218>)
 800f528:	429c      	cmp	r4, r3
 800f52a:	bf08      	it	eq
 800f52c:	68f4      	ldreq	r4, [r6, #12]
 800f52e:	e79d      	b.n	800f46c <_vfiprintf_r+0x20>
 800f530:	4621      	mov	r1, r4
 800f532:	4630      	mov	r0, r6
 800f534:	f000 fae0 	bl	800faf8 <__swsetup_r>
 800f538:	2800      	cmp	r0, #0
 800f53a:	d09d      	beq.n	800f478 <_vfiprintf_r+0x2c>
 800f53c:	f04f 30ff 	mov.w	r0, #4294967295
 800f540:	b01d      	add	sp, #116	; 0x74
 800f542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f546:	46a8      	mov	r8, r5
 800f548:	e7a2      	b.n	800f490 <_vfiprintf_r+0x44>
 800f54a:	4a44      	ldr	r2, [pc, #272]	; (800f65c <_vfiprintf_r+0x210>)
 800f54c:	1a80      	subs	r0, r0, r2
 800f54e:	fa0b f000 	lsl.w	r0, fp, r0
 800f552:	4318      	orrs	r0, r3
 800f554:	9004      	str	r0, [sp, #16]
 800f556:	4645      	mov	r5, r8
 800f558:	e7be      	b.n	800f4d8 <_vfiprintf_r+0x8c>
 800f55a:	9a03      	ldr	r2, [sp, #12]
 800f55c:	1d11      	adds	r1, r2, #4
 800f55e:	6812      	ldr	r2, [r2, #0]
 800f560:	9103      	str	r1, [sp, #12]
 800f562:	2a00      	cmp	r2, #0
 800f564:	db01      	blt.n	800f56a <_vfiprintf_r+0x11e>
 800f566:	9207      	str	r2, [sp, #28]
 800f568:	e004      	b.n	800f574 <_vfiprintf_r+0x128>
 800f56a:	4252      	negs	r2, r2
 800f56c:	f043 0302 	orr.w	r3, r3, #2
 800f570:	9207      	str	r2, [sp, #28]
 800f572:	9304      	str	r3, [sp, #16]
 800f574:	f898 3000 	ldrb.w	r3, [r8]
 800f578:	2b2e      	cmp	r3, #46	; 0x2e
 800f57a:	d10e      	bne.n	800f59a <_vfiprintf_r+0x14e>
 800f57c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f580:	2b2a      	cmp	r3, #42	; 0x2a
 800f582:	d138      	bne.n	800f5f6 <_vfiprintf_r+0x1aa>
 800f584:	9b03      	ldr	r3, [sp, #12]
 800f586:	1d1a      	adds	r2, r3, #4
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	9203      	str	r2, [sp, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	bfb8      	it	lt
 800f590:	f04f 33ff 	movlt.w	r3, #4294967295
 800f594:	f108 0802 	add.w	r8, r8, #2
 800f598:	9305      	str	r3, [sp, #20]
 800f59a:	4d33      	ldr	r5, [pc, #204]	; (800f668 <_vfiprintf_r+0x21c>)
 800f59c:	f898 1000 	ldrb.w	r1, [r8]
 800f5a0:	2203      	movs	r2, #3
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	f7f0 fe2c 	bl	8000200 <memchr>
 800f5a8:	b140      	cbz	r0, 800f5bc <_vfiprintf_r+0x170>
 800f5aa:	2340      	movs	r3, #64	; 0x40
 800f5ac:	1b40      	subs	r0, r0, r5
 800f5ae:	fa03 f000 	lsl.w	r0, r3, r0
 800f5b2:	9b04      	ldr	r3, [sp, #16]
 800f5b4:	4303      	orrs	r3, r0
 800f5b6:	f108 0801 	add.w	r8, r8, #1
 800f5ba:	9304      	str	r3, [sp, #16]
 800f5bc:	f898 1000 	ldrb.w	r1, [r8]
 800f5c0:	482a      	ldr	r0, [pc, #168]	; (800f66c <_vfiprintf_r+0x220>)
 800f5c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5c6:	2206      	movs	r2, #6
 800f5c8:	f108 0701 	add.w	r7, r8, #1
 800f5cc:	f7f0 fe18 	bl	8000200 <memchr>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	d037      	beq.n	800f644 <_vfiprintf_r+0x1f8>
 800f5d4:	4b26      	ldr	r3, [pc, #152]	; (800f670 <_vfiprintf_r+0x224>)
 800f5d6:	bb1b      	cbnz	r3, 800f620 <_vfiprintf_r+0x1d4>
 800f5d8:	9b03      	ldr	r3, [sp, #12]
 800f5da:	3307      	adds	r3, #7
 800f5dc:	f023 0307 	bic.w	r3, r3, #7
 800f5e0:	3308      	adds	r3, #8
 800f5e2:	9303      	str	r3, [sp, #12]
 800f5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5e6:	444b      	add	r3, r9
 800f5e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ea:	e750      	b.n	800f48e <_vfiprintf_r+0x42>
 800f5ec:	fb05 3202 	mla	r2, r5, r2, r3
 800f5f0:	2001      	movs	r0, #1
 800f5f2:	4688      	mov	r8, r1
 800f5f4:	e78a      	b.n	800f50c <_vfiprintf_r+0xc0>
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	f108 0801 	add.w	r8, r8, #1
 800f5fc:	9305      	str	r3, [sp, #20]
 800f5fe:	4619      	mov	r1, r3
 800f600:	250a      	movs	r5, #10
 800f602:	4640      	mov	r0, r8
 800f604:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f608:	3a30      	subs	r2, #48	; 0x30
 800f60a:	2a09      	cmp	r2, #9
 800f60c:	d903      	bls.n	800f616 <_vfiprintf_r+0x1ca>
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d0c3      	beq.n	800f59a <_vfiprintf_r+0x14e>
 800f612:	9105      	str	r1, [sp, #20]
 800f614:	e7c1      	b.n	800f59a <_vfiprintf_r+0x14e>
 800f616:	fb05 2101 	mla	r1, r5, r1, r2
 800f61a:	2301      	movs	r3, #1
 800f61c:	4680      	mov	r8, r0
 800f61e:	e7f0      	b.n	800f602 <_vfiprintf_r+0x1b6>
 800f620:	ab03      	add	r3, sp, #12
 800f622:	9300      	str	r3, [sp, #0]
 800f624:	4622      	mov	r2, r4
 800f626:	4b13      	ldr	r3, [pc, #76]	; (800f674 <_vfiprintf_r+0x228>)
 800f628:	a904      	add	r1, sp, #16
 800f62a:	4630      	mov	r0, r6
 800f62c:	f3af 8000 	nop.w
 800f630:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f634:	4681      	mov	r9, r0
 800f636:	d1d5      	bne.n	800f5e4 <_vfiprintf_r+0x198>
 800f638:	89a3      	ldrh	r3, [r4, #12]
 800f63a:	065b      	lsls	r3, r3, #25
 800f63c:	f53f af7e 	bmi.w	800f53c <_vfiprintf_r+0xf0>
 800f640:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f642:	e77d      	b.n	800f540 <_vfiprintf_r+0xf4>
 800f644:	ab03      	add	r3, sp, #12
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	4622      	mov	r2, r4
 800f64a:	4b0a      	ldr	r3, [pc, #40]	; (800f674 <_vfiprintf_r+0x228>)
 800f64c:	a904      	add	r1, sp, #16
 800f64e:	4630      	mov	r0, r6
 800f650:	f000 f888 	bl	800f764 <_printf_i>
 800f654:	e7ec      	b.n	800f630 <_vfiprintf_r+0x1e4>
 800f656:	bf00      	nop
 800f658:	08012304 	.word	0x08012304
 800f65c:	08012344 	.word	0x08012344
 800f660:	08012324 	.word	0x08012324
 800f664:	080122e4 	.word	0x080122e4
 800f668:	0801234a 	.word	0x0801234a
 800f66c:	0801234e 	.word	0x0801234e
 800f670:	00000000 	.word	0x00000000
 800f674:	0800f427 	.word	0x0800f427

0800f678 <_printf_common>:
 800f678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f67c:	4691      	mov	r9, r2
 800f67e:	461f      	mov	r7, r3
 800f680:	688a      	ldr	r2, [r1, #8]
 800f682:	690b      	ldr	r3, [r1, #16]
 800f684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f688:	4293      	cmp	r3, r2
 800f68a:	bfb8      	it	lt
 800f68c:	4613      	movlt	r3, r2
 800f68e:	f8c9 3000 	str.w	r3, [r9]
 800f692:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f696:	4606      	mov	r6, r0
 800f698:	460c      	mov	r4, r1
 800f69a:	b112      	cbz	r2, 800f6a2 <_printf_common+0x2a>
 800f69c:	3301      	adds	r3, #1
 800f69e:	f8c9 3000 	str.w	r3, [r9]
 800f6a2:	6823      	ldr	r3, [r4, #0]
 800f6a4:	0699      	lsls	r1, r3, #26
 800f6a6:	bf42      	ittt	mi
 800f6a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f6ac:	3302      	addmi	r3, #2
 800f6ae:	f8c9 3000 	strmi.w	r3, [r9]
 800f6b2:	6825      	ldr	r5, [r4, #0]
 800f6b4:	f015 0506 	ands.w	r5, r5, #6
 800f6b8:	d107      	bne.n	800f6ca <_printf_common+0x52>
 800f6ba:	f104 0a19 	add.w	sl, r4, #25
 800f6be:	68e3      	ldr	r3, [r4, #12]
 800f6c0:	f8d9 2000 	ldr.w	r2, [r9]
 800f6c4:	1a9b      	subs	r3, r3, r2
 800f6c6:	42ab      	cmp	r3, r5
 800f6c8:	dc28      	bgt.n	800f71c <_printf_common+0xa4>
 800f6ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f6ce:	6822      	ldr	r2, [r4, #0]
 800f6d0:	3300      	adds	r3, #0
 800f6d2:	bf18      	it	ne
 800f6d4:	2301      	movne	r3, #1
 800f6d6:	0692      	lsls	r2, r2, #26
 800f6d8:	d42d      	bmi.n	800f736 <_printf_common+0xbe>
 800f6da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f6de:	4639      	mov	r1, r7
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	47c0      	blx	r8
 800f6e4:	3001      	adds	r0, #1
 800f6e6:	d020      	beq.n	800f72a <_printf_common+0xb2>
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	68e5      	ldr	r5, [r4, #12]
 800f6ec:	f8d9 2000 	ldr.w	r2, [r9]
 800f6f0:	f003 0306 	and.w	r3, r3, #6
 800f6f4:	2b04      	cmp	r3, #4
 800f6f6:	bf08      	it	eq
 800f6f8:	1aad      	subeq	r5, r5, r2
 800f6fa:	68a3      	ldr	r3, [r4, #8]
 800f6fc:	6922      	ldr	r2, [r4, #16]
 800f6fe:	bf0c      	ite	eq
 800f700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f704:	2500      	movne	r5, #0
 800f706:	4293      	cmp	r3, r2
 800f708:	bfc4      	itt	gt
 800f70a:	1a9b      	subgt	r3, r3, r2
 800f70c:	18ed      	addgt	r5, r5, r3
 800f70e:	f04f 0900 	mov.w	r9, #0
 800f712:	341a      	adds	r4, #26
 800f714:	454d      	cmp	r5, r9
 800f716:	d11a      	bne.n	800f74e <_printf_common+0xd6>
 800f718:	2000      	movs	r0, #0
 800f71a:	e008      	b.n	800f72e <_printf_common+0xb6>
 800f71c:	2301      	movs	r3, #1
 800f71e:	4652      	mov	r2, sl
 800f720:	4639      	mov	r1, r7
 800f722:	4630      	mov	r0, r6
 800f724:	47c0      	blx	r8
 800f726:	3001      	adds	r0, #1
 800f728:	d103      	bne.n	800f732 <_printf_common+0xba>
 800f72a:	f04f 30ff 	mov.w	r0, #4294967295
 800f72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f732:	3501      	adds	r5, #1
 800f734:	e7c3      	b.n	800f6be <_printf_common+0x46>
 800f736:	18e1      	adds	r1, r4, r3
 800f738:	1c5a      	adds	r2, r3, #1
 800f73a:	2030      	movs	r0, #48	; 0x30
 800f73c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f740:	4422      	add	r2, r4
 800f742:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f746:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f74a:	3302      	adds	r3, #2
 800f74c:	e7c5      	b.n	800f6da <_printf_common+0x62>
 800f74e:	2301      	movs	r3, #1
 800f750:	4622      	mov	r2, r4
 800f752:	4639      	mov	r1, r7
 800f754:	4630      	mov	r0, r6
 800f756:	47c0      	blx	r8
 800f758:	3001      	adds	r0, #1
 800f75a:	d0e6      	beq.n	800f72a <_printf_common+0xb2>
 800f75c:	f109 0901 	add.w	r9, r9, #1
 800f760:	e7d8      	b.n	800f714 <_printf_common+0x9c>
	...

0800f764 <_printf_i>:
 800f764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f768:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f76c:	460c      	mov	r4, r1
 800f76e:	7e09      	ldrb	r1, [r1, #24]
 800f770:	b085      	sub	sp, #20
 800f772:	296e      	cmp	r1, #110	; 0x6e
 800f774:	4617      	mov	r7, r2
 800f776:	4606      	mov	r6, r0
 800f778:	4698      	mov	r8, r3
 800f77a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f77c:	f000 80b3 	beq.w	800f8e6 <_printf_i+0x182>
 800f780:	d822      	bhi.n	800f7c8 <_printf_i+0x64>
 800f782:	2963      	cmp	r1, #99	; 0x63
 800f784:	d036      	beq.n	800f7f4 <_printf_i+0x90>
 800f786:	d80a      	bhi.n	800f79e <_printf_i+0x3a>
 800f788:	2900      	cmp	r1, #0
 800f78a:	f000 80b9 	beq.w	800f900 <_printf_i+0x19c>
 800f78e:	2958      	cmp	r1, #88	; 0x58
 800f790:	f000 8083 	beq.w	800f89a <_printf_i+0x136>
 800f794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f798:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f79c:	e032      	b.n	800f804 <_printf_i+0xa0>
 800f79e:	2964      	cmp	r1, #100	; 0x64
 800f7a0:	d001      	beq.n	800f7a6 <_printf_i+0x42>
 800f7a2:	2969      	cmp	r1, #105	; 0x69
 800f7a4:	d1f6      	bne.n	800f794 <_printf_i+0x30>
 800f7a6:	6820      	ldr	r0, [r4, #0]
 800f7a8:	6813      	ldr	r3, [r2, #0]
 800f7aa:	0605      	lsls	r5, r0, #24
 800f7ac:	f103 0104 	add.w	r1, r3, #4
 800f7b0:	d52a      	bpl.n	800f808 <_printf_i+0xa4>
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	6011      	str	r1, [r2, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	da03      	bge.n	800f7c2 <_printf_i+0x5e>
 800f7ba:	222d      	movs	r2, #45	; 0x2d
 800f7bc:	425b      	negs	r3, r3
 800f7be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f7c2:	486f      	ldr	r0, [pc, #444]	; (800f980 <_printf_i+0x21c>)
 800f7c4:	220a      	movs	r2, #10
 800f7c6:	e039      	b.n	800f83c <_printf_i+0xd8>
 800f7c8:	2973      	cmp	r1, #115	; 0x73
 800f7ca:	f000 809d 	beq.w	800f908 <_printf_i+0x1a4>
 800f7ce:	d808      	bhi.n	800f7e2 <_printf_i+0x7e>
 800f7d0:	296f      	cmp	r1, #111	; 0x6f
 800f7d2:	d020      	beq.n	800f816 <_printf_i+0xb2>
 800f7d4:	2970      	cmp	r1, #112	; 0x70
 800f7d6:	d1dd      	bne.n	800f794 <_printf_i+0x30>
 800f7d8:	6823      	ldr	r3, [r4, #0]
 800f7da:	f043 0320 	orr.w	r3, r3, #32
 800f7de:	6023      	str	r3, [r4, #0]
 800f7e0:	e003      	b.n	800f7ea <_printf_i+0x86>
 800f7e2:	2975      	cmp	r1, #117	; 0x75
 800f7e4:	d017      	beq.n	800f816 <_printf_i+0xb2>
 800f7e6:	2978      	cmp	r1, #120	; 0x78
 800f7e8:	d1d4      	bne.n	800f794 <_printf_i+0x30>
 800f7ea:	2378      	movs	r3, #120	; 0x78
 800f7ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f7f0:	4864      	ldr	r0, [pc, #400]	; (800f984 <_printf_i+0x220>)
 800f7f2:	e055      	b.n	800f8a0 <_printf_i+0x13c>
 800f7f4:	6813      	ldr	r3, [r2, #0]
 800f7f6:	1d19      	adds	r1, r3, #4
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	6011      	str	r1, [r2, #0]
 800f7fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f804:	2301      	movs	r3, #1
 800f806:	e08c      	b.n	800f922 <_printf_i+0x1be>
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	6011      	str	r1, [r2, #0]
 800f80c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f810:	bf18      	it	ne
 800f812:	b21b      	sxthne	r3, r3
 800f814:	e7cf      	b.n	800f7b6 <_printf_i+0x52>
 800f816:	6813      	ldr	r3, [r2, #0]
 800f818:	6825      	ldr	r5, [r4, #0]
 800f81a:	1d18      	adds	r0, r3, #4
 800f81c:	6010      	str	r0, [r2, #0]
 800f81e:	0628      	lsls	r0, r5, #24
 800f820:	d501      	bpl.n	800f826 <_printf_i+0xc2>
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	e002      	b.n	800f82c <_printf_i+0xc8>
 800f826:	0668      	lsls	r0, r5, #25
 800f828:	d5fb      	bpl.n	800f822 <_printf_i+0xbe>
 800f82a:	881b      	ldrh	r3, [r3, #0]
 800f82c:	4854      	ldr	r0, [pc, #336]	; (800f980 <_printf_i+0x21c>)
 800f82e:	296f      	cmp	r1, #111	; 0x6f
 800f830:	bf14      	ite	ne
 800f832:	220a      	movne	r2, #10
 800f834:	2208      	moveq	r2, #8
 800f836:	2100      	movs	r1, #0
 800f838:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f83c:	6865      	ldr	r5, [r4, #4]
 800f83e:	60a5      	str	r5, [r4, #8]
 800f840:	2d00      	cmp	r5, #0
 800f842:	f2c0 8095 	blt.w	800f970 <_printf_i+0x20c>
 800f846:	6821      	ldr	r1, [r4, #0]
 800f848:	f021 0104 	bic.w	r1, r1, #4
 800f84c:	6021      	str	r1, [r4, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d13d      	bne.n	800f8ce <_printf_i+0x16a>
 800f852:	2d00      	cmp	r5, #0
 800f854:	f040 808e 	bne.w	800f974 <_printf_i+0x210>
 800f858:	4665      	mov	r5, ip
 800f85a:	2a08      	cmp	r2, #8
 800f85c:	d10b      	bne.n	800f876 <_printf_i+0x112>
 800f85e:	6823      	ldr	r3, [r4, #0]
 800f860:	07db      	lsls	r3, r3, #31
 800f862:	d508      	bpl.n	800f876 <_printf_i+0x112>
 800f864:	6923      	ldr	r3, [r4, #16]
 800f866:	6862      	ldr	r2, [r4, #4]
 800f868:	429a      	cmp	r2, r3
 800f86a:	bfde      	ittt	le
 800f86c:	2330      	movle	r3, #48	; 0x30
 800f86e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f872:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f876:	ebac 0305 	sub.w	r3, ip, r5
 800f87a:	6123      	str	r3, [r4, #16]
 800f87c:	f8cd 8000 	str.w	r8, [sp]
 800f880:	463b      	mov	r3, r7
 800f882:	aa03      	add	r2, sp, #12
 800f884:	4621      	mov	r1, r4
 800f886:	4630      	mov	r0, r6
 800f888:	f7ff fef6 	bl	800f678 <_printf_common>
 800f88c:	3001      	adds	r0, #1
 800f88e:	d14d      	bne.n	800f92c <_printf_i+0x1c8>
 800f890:	f04f 30ff 	mov.w	r0, #4294967295
 800f894:	b005      	add	sp, #20
 800f896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f89a:	4839      	ldr	r0, [pc, #228]	; (800f980 <_printf_i+0x21c>)
 800f89c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f8a0:	6813      	ldr	r3, [r2, #0]
 800f8a2:	6821      	ldr	r1, [r4, #0]
 800f8a4:	1d1d      	adds	r5, r3, #4
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	6015      	str	r5, [r2, #0]
 800f8aa:	060a      	lsls	r2, r1, #24
 800f8ac:	d50b      	bpl.n	800f8c6 <_printf_i+0x162>
 800f8ae:	07ca      	lsls	r2, r1, #31
 800f8b0:	bf44      	itt	mi
 800f8b2:	f041 0120 	orrmi.w	r1, r1, #32
 800f8b6:	6021      	strmi	r1, [r4, #0]
 800f8b8:	b91b      	cbnz	r3, 800f8c2 <_printf_i+0x15e>
 800f8ba:	6822      	ldr	r2, [r4, #0]
 800f8bc:	f022 0220 	bic.w	r2, r2, #32
 800f8c0:	6022      	str	r2, [r4, #0]
 800f8c2:	2210      	movs	r2, #16
 800f8c4:	e7b7      	b.n	800f836 <_printf_i+0xd2>
 800f8c6:	064d      	lsls	r5, r1, #25
 800f8c8:	bf48      	it	mi
 800f8ca:	b29b      	uxthmi	r3, r3
 800f8cc:	e7ef      	b.n	800f8ae <_printf_i+0x14a>
 800f8ce:	4665      	mov	r5, ip
 800f8d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f8d4:	fb02 3311 	mls	r3, r2, r1, r3
 800f8d8:	5cc3      	ldrb	r3, [r0, r3]
 800f8da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f8de:	460b      	mov	r3, r1
 800f8e0:	2900      	cmp	r1, #0
 800f8e2:	d1f5      	bne.n	800f8d0 <_printf_i+0x16c>
 800f8e4:	e7b9      	b.n	800f85a <_printf_i+0xf6>
 800f8e6:	6813      	ldr	r3, [r2, #0]
 800f8e8:	6825      	ldr	r5, [r4, #0]
 800f8ea:	6961      	ldr	r1, [r4, #20]
 800f8ec:	1d18      	adds	r0, r3, #4
 800f8ee:	6010      	str	r0, [r2, #0]
 800f8f0:	0628      	lsls	r0, r5, #24
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	d501      	bpl.n	800f8fa <_printf_i+0x196>
 800f8f6:	6019      	str	r1, [r3, #0]
 800f8f8:	e002      	b.n	800f900 <_printf_i+0x19c>
 800f8fa:	066a      	lsls	r2, r5, #25
 800f8fc:	d5fb      	bpl.n	800f8f6 <_printf_i+0x192>
 800f8fe:	8019      	strh	r1, [r3, #0]
 800f900:	2300      	movs	r3, #0
 800f902:	6123      	str	r3, [r4, #16]
 800f904:	4665      	mov	r5, ip
 800f906:	e7b9      	b.n	800f87c <_printf_i+0x118>
 800f908:	6813      	ldr	r3, [r2, #0]
 800f90a:	1d19      	adds	r1, r3, #4
 800f90c:	6011      	str	r1, [r2, #0]
 800f90e:	681d      	ldr	r5, [r3, #0]
 800f910:	6862      	ldr	r2, [r4, #4]
 800f912:	2100      	movs	r1, #0
 800f914:	4628      	mov	r0, r5
 800f916:	f7f0 fc73 	bl	8000200 <memchr>
 800f91a:	b108      	cbz	r0, 800f920 <_printf_i+0x1bc>
 800f91c:	1b40      	subs	r0, r0, r5
 800f91e:	6060      	str	r0, [r4, #4]
 800f920:	6863      	ldr	r3, [r4, #4]
 800f922:	6123      	str	r3, [r4, #16]
 800f924:	2300      	movs	r3, #0
 800f926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f92a:	e7a7      	b.n	800f87c <_printf_i+0x118>
 800f92c:	6923      	ldr	r3, [r4, #16]
 800f92e:	462a      	mov	r2, r5
 800f930:	4639      	mov	r1, r7
 800f932:	4630      	mov	r0, r6
 800f934:	47c0      	blx	r8
 800f936:	3001      	adds	r0, #1
 800f938:	d0aa      	beq.n	800f890 <_printf_i+0x12c>
 800f93a:	6823      	ldr	r3, [r4, #0]
 800f93c:	079b      	lsls	r3, r3, #30
 800f93e:	d413      	bmi.n	800f968 <_printf_i+0x204>
 800f940:	68e0      	ldr	r0, [r4, #12]
 800f942:	9b03      	ldr	r3, [sp, #12]
 800f944:	4298      	cmp	r0, r3
 800f946:	bfb8      	it	lt
 800f948:	4618      	movlt	r0, r3
 800f94a:	e7a3      	b.n	800f894 <_printf_i+0x130>
 800f94c:	2301      	movs	r3, #1
 800f94e:	464a      	mov	r2, r9
 800f950:	4639      	mov	r1, r7
 800f952:	4630      	mov	r0, r6
 800f954:	47c0      	blx	r8
 800f956:	3001      	adds	r0, #1
 800f958:	d09a      	beq.n	800f890 <_printf_i+0x12c>
 800f95a:	3501      	adds	r5, #1
 800f95c:	68e3      	ldr	r3, [r4, #12]
 800f95e:	9a03      	ldr	r2, [sp, #12]
 800f960:	1a9b      	subs	r3, r3, r2
 800f962:	42ab      	cmp	r3, r5
 800f964:	dcf2      	bgt.n	800f94c <_printf_i+0x1e8>
 800f966:	e7eb      	b.n	800f940 <_printf_i+0x1dc>
 800f968:	2500      	movs	r5, #0
 800f96a:	f104 0919 	add.w	r9, r4, #25
 800f96e:	e7f5      	b.n	800f95c <_printf_i+0x1f8>
 800f970:	2b00      	cmp	r3, #0
 800f972:	d1ac      	bne.n	800f8ce <_printf_i+0x16a>
 800f974:	7803      	ldrb	r3, [r0, #0]
 800f976:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f97a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f97e:	e76c      	b.n	800f85a <_printf_i+0xf6>
 800f980:	08012355 	.word	0x08012355
 800f984:	08012366 	.word	0x08012366

0800f988 <_sbrk_r>:
 800f988:	b538      	push	{r3, r4, r5, lr}
 800f98a:	4c06      	ldr	r4, [pc, #24]	; (800f9a4 <_sbrk_r+0x1c>)
 800f98c:	2300      	movs	r3, #0
 800f98e:	4605      	mov	r5, r0
 800f990:	4608      	mov	r0, r1
 800f992:	6023      	str	r3, [r4, #0]
 800f994:	f7ff f924 	bl	800ebe0 <_sbrk>
 800f998:	1c43      	adds	r3, r0, #1
 800f99a:	d102      	bne.n	800f9a2 <_sbrk_r+0x1a>
 800f99c:	6823      	ldr	r3, [r4, #0]
 800f99e:	b103      	cbz	r3, 800f9a2 <_sbrk_r+0x1a>
 800f9a0:	602b      	str	r3, [r5, #0]
 800f9a2:	bd38      	pop	{r3, r4, r5, pc}
 800f9a4:	20007980 	.word	0x20007980

0800f9a8 <__sread>:
 800f9a8:	b510      	push	{r4, lr}
 800f9aa:	460c      	mov	r4, r1
 800f9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9b0:	f000 fa88 	bl	800fec4 <_read_r>
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	bfab      	itete	ge
 800f9b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f9ba:	89a3      	ldrhlt	r3, [r4, #12]
 800f9bc:	181b      	addge	r3, r3, r0
 800f9be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f9c2:	bfac      	ite	ge
 800f9c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f9c6:	81a3      	strhlt	r3, [r4, #12]
 800f9c8:	bd10      	pop	{r4, pc}

0800f9ca <__swrite>:
 800f9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ce:	461f      	mov	r7, r3
 800f9d0:	898b      	ldrh	r3, [r1, #12]
 800f9d2:	05db      	lsls	r3, r3, #23
 800f9d4:	4605      	mov	r5, r0
 800f9d6:	460c      	mov	r4, r1
 800f9d8:	4616      	mov	r6, r2
 800f9da:	d505      	bpl.n	800f9e8 <__swrite+0x1e>
 800f9dc:	2302      	movs	r3, #2
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9e4:	f000 f9b6 	bl	800fd54 <_lseek_r>
 800f9e8:	89a3      	ldrh	r3, [r4, #12]
 800f9ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9f2:	81a3      	strh	r3, [r4, #12]
 800f9f4:	4632      	mov	r2, r6
 800f9f6:	463b      	mov	r3, r7
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9fe:	f000 b869 	b.w	800fad4 <_write_r>

0800fa02 <__sseek>:
 800fa02:	b510      	push	{r4, lr}
 800fa04:	460c      	mov	r4, r1
 800fa06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa0a:	f000 f9a3 	bl	800fd54 <_lseek_r>
 800fa0e:	1c43      	adds	r3, r0, #1
 800fa10:	89a3      	ldrh	r3, [r4, #12]
 800fa12:	bf15      	itete	ne
 800fa14:	6560      	strne	r0, [r4, #84]	; 0x54
 800fa16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fa1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa1e:	81a3      	strheq	r3, [r4, #12]
 800fa20:	bf18      	it	ne
 800fa22:	81a3      	strhne	r3, [r4, #12]
 800fa24:	bd10      	pop	{r4, pc}

0800fa26 <__sclose>:
 800fa26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa2a:	f000 b8d3 	b.w	800fbd4 <_close_r>
	...

0800fa30 <__swbuf_r>:
 800fa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa32:	460e      	mov	r6, r1
 800fa34:	4614      	mov	r4, r2
 800fa36:	4605      	mov	r5, r0
 800fa38:	b118      	cbz	r0, 800fa42 <__swbuf_r+0x12>
 800fa3a:	6983      	ldr	r3, [r0, #24]
 800fa3c:	b90b      	cbnz	r3, 800fa42 <__swbuf_r+0x12>
 800fa3e:	f7ff fa4f 	bl	800eee0 <__sinit>
 800fa42:	4b21      	ldr	r3, [pc, #132]	; (800fac8 <__swbuf_r+0x98>)
 800fa44:	429c      	cmp	r4, r3
 800fa46:	d12a      	bne.n	800fa9e <__swbuf_r+0x6e>
 800fa48:	686c      	ldr	r4, [r5, #4]
 800fa4a:	69a3      	ldr	r3, [r4, #24]
 800fa4c:	60a3      	str	r3, [r4, #8]
 800fa4e:	89a3      	ldrh	r3, [r4, #12]
 800fa50:	071a      	lsls	r2, r3, #28
 800fa52:	d52e      	bpl.n	800fab2 <__swbuf_r+0x82>
 800fa54:	6923      	ldr	r3, [r4, #16]
 800fa56:	b363      	cbz	r3, 800fab2 <__swbuf_r+0x82>
 800fa58:	6923      	ldr	r3, [r4, #16]
 800fa5a:	6820      	ldr	r0, [r4, #0]
 800fa5c:	1ac0      	subs	r0, r0, r3
 800fa5e:	6963      	ldr	r3, [r4, #20]
 800fa60:	b2f6      	uxtb	r6, r6
 800fa62:	4283      	cmp	r3, r0
 800fa64:	4637      	mov	r7, r6
 800fa66:	dc04      	bgt.n	800fa72 <__swbuf_r+0x42>
 800fa68:	4621      	mov	r1, r4
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	f000 f948 	bl	800fd00 <_fflush_r>
 800fa70:	bb28      	cbnz	r0, 800fabe <__swbuf_r+0x8e>
 800fa72:	68a3      	ldr	r3, [r4, #8]
 800fa74:	3b01      	subs	r3, #1
 800fa76:	60a3      	str	r3, [r4, #8]
 800fa78:	6823      	ldr	r3, [r4, #0]
 800fa7a:	1c5a      	adds	r2, r3, #1
 800fa7c:	6022      	str	r2, [r4, #0]
 800fa7e:	701e      	strb	r6, [r3, #0]
 800fa80:	6963      	ldr	r3, [r4, #20]
 800fa82:	3001      	adds	r0, #1
 800fa84:	4283      	cmp	r3, r0
 800fa86:	d004      	beq.n	800fa92 <__swbuf_r+0x62>
 800fa88:	89a3      	ldrh	r3, [r4, #12]
 800fa8a:	07db      	lsls	r3, r3, #31
 800fa8c:	d519      	bpl.n	800fac2 <__swbuf_r+0x92>
 800fa8e:	2e0a      	cmp	r6, #10
 800fa90:	d117      	bne.n	800fac2 <__swbuf_r+0x92>
 800fa92:	4621      	mov	r1, r4
 800fa94:	4628      	mov	r0, r5
 800fa96:	f000 f933 	bl	800fd00 <_fflush_r>
 800fa9a:	b190      	cbz	r0, 800fac2 <__swbuf_r+0x92>
 800fa9c:	e00f      	b.n	800fabe <__swbuf_r+0x8e>
 800fa9e:	4b0b      	ldr	r3, [pc, #44]	; (800facc <__swbuf_r+0x9c>)
 800faa0:	429c      	cmp	r4, r3
 800faa2:	d101      	bne.n	800faa8 <__swbuf_r+0x78>
 800faa4:	68ac      	ldr	r4, [r5, #8]
 800faa6:	e7d0      	b.n	800fa4a <__swbuf_r+0x1a>
 800faa8:	4b09      	ldr	r3, [pc, #36]	; (800fad0 <__swbuf_r+0xa0>)
 800faaa:	429c      	cmp	r4, r3
 800faac:	bf08      	it	eq
 800faae:	68ec      	ldreq	r4, [r5, #12]
 800fab0:	e7cb      	b.n	800fa4a <__swbuf_r+0x1a>
 800fab2:	4621      	mov	r1, r4
 800fab4:	4628      	mov	r0, r5
 800fab6:	f000 f81f 	bl	800faf8 <__swsetup_r>
 800faba:	2800      	cmp	r0, #0
 800fabc:	d0cc      	beq.n	800fa58 <__swbuf_r+0x28>
 800fabe:	f04f 37ff 	mov.w	r7, #4294967295
 800fac2:	4638      	mov	r0, r7
 800fac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fac6:	bf00      	nop
 800fac8:	08012304 	.word	0x08012304
 800facc:	08012324 	.word	0x08012324
 800fad0:	080122e4 	.word	0x080122e4

0800fad4 <_write_r>:
 800fad4:	b538      	push	{r3, r4, r5, lr}
 800fad6:	4c07      	ldr	r4, [pc, #28]	; (800faf4 <_write_r+0x20>)
 800fad8:	4605      	mov	r5, r0
 800fada:	4608      	mov	r0, r1
 800fadc:	4611      	mov	r1, r2
 800fade:	2200      	movs	r2, #0
 800fae0:	6022      	str	r2, [r4, #0]
 800fae2:	461a      	mov	r2, r3
 800fae4:	f7ff f82b 	bl	800eb3e <_write>
 800fae8:	1c43      	adds	r3, r0, #1
 800faea:	d102      	bne.n	800faf2 <_write_r+0x1e>
 800faec:	6823      	ldr	r3, [r4, #0]
 800faee:	b103      	cbz	r3, 800faf2 <_write_r+0x1e>
 800faf0:	602b      	str	r3, [r5, #0]
 800faf2:	bd38      	pop	{r3, r4, r5, pc}
 800faf4:	20007980 	.word	0x20007980

0800faf8 <__swsetup_r>:
 800faf8:	4b32      	ldr	r3, [pc, #200]	; (800fbc4 <__swsetup_r+0xcc>)
 800fafa:	b570      	push	{r4, r5, r6, lr}
 800fafc:	681d      	ldr	r5, [r3, #0]
 800fafe:	4606      	mov	r6, r0
 800fb00:	460c      	mov	r4, r1
 800fb02:	b125      	cbz	r5, 800fb0e <__swsetup_r+0x16>
 800fb04:	69ab      	ldr	r3, [r5, #24]
 800fb06:	b913      	cbnz	r3, 800fb0e <__swsetup_r+0x16>
 800fb08:	4628      	mov	r0, r5
 800fb0a:	f7ff f9e9 	bl	800eee0 <__sinit>
 800fb0e:	4b2e      	ldr	r3, [pc, #184]	; (800fbc8 <__swsetup_r+0xd0>)
 800fb10:	429c      	cmp	r4, r3
 800fb12:	d10f      	bne.n	800fb34 <__swsetup_r+0x3c>
 800fb14:	686c      	ldr	r4, [r5, #4]
 800fb16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	0715      	lsls	r5, r2, #28
 800fb1e:	d42c      	bmi.n	800fb7a <__swsetup_r+0x82>
 800fb20:	06d0      	lsls	r0, r2, #27
 800fb22:	d411      	bmi.n	800fb48 <__swsetup_r+0x50>
 800fb24:	2209      	movs	r2, #9
 800fb26:	6032      	str	r2, [r6, #0]
 800fb28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb2c:	81a3      	strh	r3, [r4, #12]
 800fb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb32:	e03e      	b.n	800fbb2 <__swsetup_r+0xba>
 800fb34:	4b25      	ldr	r3, [pc, #148]	; (800fbcc <__swsetup_r+0xd4>)
 800fb36:	429c      	cmp	r4, r3
 800fb38:	d101      	bne.n	800fb3e <__swsetup_r+0x46>
 800fb3a:	68ac      	ldr	r4, [r5, #8]
 800fb3c:	e7eb      	b.n	800fb16 <__swsetup_r+0x1e>
 800fb3e:	4b24      	ldr	r3, [pc, #144]	; (800fbd0 <__swsetup_r+0xd8>)
 800fb40:	429c      	cmp	r4, r3
 800fb42:	bf08      	it	eq
 800fb44:	68ec      	ldreq	r4, [r5, #12]
 800fb46:	e7e6      	b.n	800fb16 <__swsetup_r+0x1e>
 800fb48:	0751      	lsls	r1, r2, #29
 800fb4a:	d512      	bpl.n	800fb72 <__swsetup_r+0x7a>
 800fb4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb4e:	b141      	cbz	r1, 800fb62 <__swsetup_r+0x6a>
 800fb50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb54:	4299      	cmp	r1, r3
 800fb56:	d002      	beq.n	800fb5e <__swsetup_r+0x66>
 800fb58:	4630      	mov	r0, r6
 800fb5a:	f7ff fa53 	bl	800f004 <_free_r>
 800fb5e:	2300      	movs	r3, #0
 800fb60:	6363      	str	r3, [r4, #52]	; 0x34
 800fb62:	89a3      	ldrh	r3, [r4, #12]
 800fb64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb68:	81a3      	strh	r3, [r4, #12]
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	6063      	str	r3, [r4, #4]
 800fb6e:	6923      	ldr	r3, [r4, #16]
 800fb70:	6023      	str	r3, [r4, #0]
 800fb72:	89a3      	ldrh	r3, [r4, #12]
 800fb74:	f043 0308 	orr.w	r3, r3, #8
 800fb78:	81a3      	strh	r3, [r4, #12]
 800fb7a:	6923      	ldr	r3, [r4, #16]
 800fb7c:	b94b      	cbnz	r3, 800fb92 <__swsetup_r+0x9a>
 800fb7e:	89a3      	ldrh	r3, [r4, #12]
 800fb80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb88:	d003      	beq.n	800fb92 <__swsetup_r+0x9a>
 800fb8a:	4621      	mov	r1, r4
 800fb8c:	4630      	mov	r0, r6
 800fb8e:	f000 f917 	bl	800fdc0 <__smakebuf_r>
 800fb92:	89a2      	ldrh	r2, [r4, #12]
 800fb94:	f012 0301 	ands.w	r3, r2, #1
 800fb98:	d00c      	beq.n	800fbb4 <__swsetup_r+0xbc>
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	60a3      	str	r3, [r4, #8]
 800fb9e:	6963      	ldr	r3, [r4, #20]
 800fba0:	425b      	negs	r3, r3
 800fba2:	61a3      	str	r3, [r4, #24]
 800fba4:	6923      	ldr	r3, [r4, #16]
 800fba6:	b953      	cbnz	r3, 800fbbe <__swsetup_r+0xc6>
 800fba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fbb0:	d1ba      	bne.n	800fb28 <__swsetup_r+0x30>
 800fbb2:	bd70      	pop	{r4, r5, r6, pc}
 800fbb4:	0792      	lsls	r2, r2, #30
 800fbb6:	bf58      	it	pl
 800fbb8:	6963      	ldrpl	r3, [r4, #20]
 800fbba:	60a3      	str	r3, [r4, #8]
 800fbbc:	e7f2      	b.n	800fba4 <__swsetup_r+0xac>
 800fbbe:	2000      	movs	r0, #0
 800fbc0:	e7f7      	b.n	800fbb2 <__swsetup_r+0xba>
 800fbc2:	bf00      	nop
 800fbc4:	20000018 	.word	0x20000018
 800fbc8:	08012304 	.word	0x08012304
 800fbcc:	08012324 	.word	0x08012324
 800fbd0:	080122e4 	.word	0x080122e4

0800fbd4 <_close_r>:
 800fbd4:	b538      	push	{r3, r4, r5, lr}
 800fbd6:	4c06      	ldr	r4, [pc, #24]	; (800fbf0 <_close_r+0x1c>)
 800fbd8:	2300      	movs	r3, #0
 800fbda:	4605      	mov	r5, r0
 800fbdc:	4608      	mov	r0, r1
 800fbde:	6023      	str	r3, [r4, #0]
 800fbe0:	f7fe ffc9 	bl	800eb76 <_close>
 800fbe4:	1c43      	adds	r3, r0, #1
 800fbe6:	d102      	bne.n	800fbee <_close_r+0x1a>
 800fbe8:	6823      	ldr	r3, [r4, #0]
 800fbea:	b103      	cbz	r3, 800fbee <_close_r+0x1a>
 800fbec:	602b      	str	r3, [r5, #0]
 800fbee:	bd38      	pop	{r3, r4, r5, pc}
 800fbf0:	20007980 	.word	0x20007980

0800fbf4 <__sflush_r>:
 800fbf4:	898a      	ldrh	r2, [r1, #12]
 800fbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbfa:	4605      	mov	r5, r0
 800fbfc:	0710      	lsls	r0, r2, #28
 800fbfe:	460c      	mov	r4, r1
 800fc00:	d458      	bmi.n	800fcb4 <__sflush_r+0xc0>
 800fc02:	684b      	ldr	r3, [r1, #4]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	dc05      	bgt.n	800fc14 <__sflush_r+0x20>
 800fc08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	dc02      	bgt.n	800fc14 <__sflush_r+0x20>
 800fc0e:	2000      	movs	r0, #0
 800fc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc16:	2e00      	cmp	r6, #0
 800fc18:	d0f9      	beq.n	800fc0e <__sflush_r+0x1a>
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc20:	682f      	ldr	r7, [r5, #0]
 800fc22:	6a21      	ldr	r1, [r4, #32]
 800fc24:	602b      	str	r3, [r5, #0]
 800fc26:	d032      	beq.n	800fc8e <__sflush_r+0x9a>
 800fc28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fc2a:	89a3      	ldrh	r3, [r4, #12]
 800fc2c:	075a      	lsls	r2, r3, #29
 800fc2e:	d505      	bpl.n	800fc3c <__sflush_r+0x48>
 800fc30:	6863      	ldr	r3, [r4, #4]
 800fc32:	1ac0      	subs	r0, r0, r3
 800fc34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc36:	b10b      	cbz	r3, 800fc3c <__sflush_r+0x48>
 800fc38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc3a:	1ac0      	subs	r0, r0, r3
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	4602      	mov	r2, r0
 800fc40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc42:	6a21      	ldr	r1, [r4, #32]
 800fc44:	4628      	mov	r0, r5
 800fc46:	47b0      	blx	r6
 800fc48:	1c43      	adds	r3, r0, #1
 800fc4a:	89a3      	ldrh	r3, [r4, #12]
 800fc4c:	d106      	bne.n	800fc5c <__sflush_r+0x68>
 800fc4e:	6829      	ldr	r1, [r5, #0]
 800fc50:	291d      	cmp	r1, #29
 800fc52:	d848      	bhi.n	800fce6 <__sflush_r+0xf2>
 800fc54:	4a29      	ldr	r2, [pc, #164]	; (800fcfc <__sflush_r+0x108>)
 800fc56:	40ca      	lsrs	r2, r1
 800fc58:	07d6      	lsls	r6, r2, #31
 800fc5a:	d544      	bpl.n	800fce6 <__sflush_r+0xf2>
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	6062      	str	r2, [r4, #4]
 800fc60:	04d9      	lsls	r1, r3, #19
 800fc62:	6922      	ldr	r2, [r4, #16]
 800fc64:	6022      	str	r2, [r4, #0]
 800fc66:	d504      	bpl.n	800fc72 <__sflush_r+0x7e>
 800fc68:	1c42      	adds	r2, r0, #1
 800fc6a:	d101      	bne.n	800fc70 <__sflush_r+0x7c>
 800fc6c:	682b      	ldr	r3, [r5, #0]
 800fc6e:	b903      	cbnz	r3, 800fc72 <__sflush_r+0x7e>
 800fc70:	6560      	str	r0, [r4, #84]	; 0x54
 800fc72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc74:	602f      	str	r7, [r5, #0]
 800fc76:	2900      	cmp	r1, #0
 800fc78:	d0c9      	beq.n	800fc0e <__sflush_r+0x1a>
 800fc7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc7e:	4299      	cmp	r1, r3
 800fc80:	d002      	beq.n	800fc88 <__sflush_r+0x94>
 800fc82:	4628      	mov	r0, r5
 800fc84:	f7ff f9be 	bl	800f004 <_free_r>
 800fc88:	2000      	movs	r0, #0
 800fc8a:	6360      	str	r0, [r4, #52]	; 0x34
 800fc8c:	e7c0      	b.n	800fc10 <__sflush_r+0x1c>
 800fc8e:	2301      	movs	r3, #1
 800fc90:	4628      	mov	r0, r5
 800fc92:	47b0      	blx	r6
 800fc94:	1c41      	adds	r1, r0, #1
 800fc96:	d1c8      	bne.n	800fc2a <__sflush_r+0x36>
 800fc98:	682b      	ldr	r3, [r5, #0]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d0c5      	beq.n	800fc2a <__sflush_r+0x36>
 800fc9e:	2b1d      	cmp	r3, #29
 800fca0:	d001      	beq.n	800fca6 <__sflush_r+0xb2>
 800fca2:	2b16      	cmp	r3, #22
 800fca4:	d101      	bne.n	800fcaa <__sflush_r+0xb6>
 800fca6:	602f      	str	r7, [r5, #0]
 800fca8:	e7b1      	b.n	800fc0e <__sflush_r+0x1a>
 800fcaa:	89a3      	ldrh	r3, [r4, #12]
 800fcac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcb0:	81a3      	strh	r3, [r4, #12]
 800fcb2:	e7ad      	b.n	800fc10 <__sflush_r+0x1c>
 800fcb4:	690f      	ldr	r7, [r1, #16]
 800fcb6:	2f00      	cmp	r7, #0
 800fcb8:	d0a9      	beq.n	800fc0e <__sflush_r+0x1a>
 800fcba:	0793      	lsls	r3, r2, #30
 800fcbc:	680e      	ldr	r6, [r1, #0]
 800fcbe:	bf08      	it	eq
 800fcc0:	694b      	ldreq	r3, [r1, #20]
 800fcc2:	600f      	str	r7, [r1, #0]
 800fcc4:	bf18      	it	ne
 800fcc6:	2300      	movne	r3, #0
 800fcc8:	eba6 0807 	sub.w	r8, r6, r7
 800fccc:	608b      	str	r3, [r1, #8]
 800fcce:	f1b8 0f00 	cmp.w	r8, #0
 800fcd2:	dd9c      	ble.n	800fc0e <__sflush_r+0x1a>
 800fcd4:	4643      	mov	r3, r8
 800fcd6:	463a      	mov	r2, r7
 800fcd8:	6a21      	ldr	r1, [r4, #32]
 800fcda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fcdc:	4628      	mov	r0, r5
 800fcde:	47b0      	blx	r6
 800fce0:	2800      	cmp	r0, #0
 800fce2:	dc06      	bgt.n	800fcf2 <__sflush_r+0xfe>
 800fce4:	89a3      	ldrh	r3, [r4, #12]
 800fce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcea:	81a3      	strh	r3, [r4, #12]
 800fcec:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf0:	e78e      	b.n	800fc10 <__sflush_r+0x1c>
 800fcf2:	4407      	add	r7, r0
 800fcf4:	eba8 0800 	sub.w	r8, r8, r0
 800fcf8:	e7e9      	b.n	800fcce <__sflush_r+0xda>
 800fcfa:	bf00      	nop
 800fcfc:	20400001 	.word	0x20400001

0800fd00 <_fflush_r>:
 800fd00:	b538      	push	{r3, r4, r5, lr}
 800fd02:	690b      	ldr	r3, [r1, #16]
 800fd04:	4605      	mov	r5, r0
 800fd06:	460c      	mov	r4, r1
 800fd08:	b1db      	cbz	r3, 800fd42 <_fflush_r+0x42>
 800fd0a:	b118      	cbz	r0, 800fd14 <_fflush_r+0x14>
 800fd0c:	6983      	ldr	r3, [r0, #24]
 800fd0e:	b90b      	cbnz	r3, 800fd14 <_fflush_r+0x14>
 800fd10:	f7ff f8e6 	bl	800eee0 <__sinit>
 800fd14:	4b0c      	ldr	r3, [pc, #48]	; (800fd48 <_fflush_r+0x48>)
 800fd16:	429c      	cmp	r4, r3
 800fd18:	d109      	bne.n	800fd2e <_fflush_r+0x2e>
 800fd1a:	686c      	ldr	r4, [r5, #4]
 800fd1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd20:	b17b      	cbz	r3, 800fd42 <_fflush_r+0x42>
 800fd22:	4621      	mov	r1, r4
 800fd24:	4628      	mov	r0, r5
 800fd26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd2a:	f7ff bf63 	b.w	800fbf4 <__sflush_r>
 800fd2e:	4b07      	ldr	r3, [pc, #28]	; (800fd4c <_fflush_r+0x4c>)
 800fd30:	429c      	cmp	r4, r3
 800fd32:	d101      	bne.n	800fd38 <_fflush_r+0x38>
 800fd34:	68ac      	ldr	r4, [r5, #8]
 800fd36:	e7f1      	b.n	800fd1c <_fflush_r+0x1c>
 800fd38:	4b05      	ldr	r3, [pc, #20]	; (800fd50 <_fflush_r+0x50>)
 800fd3a:	429c      	cmp	r4, r3
 800fd3c:	bf08      	it	eq
 800fd3e:	68ec      	ldreq	r4, [r5, #12]
 800fd40:	e7ec      	b.n	800fd1c <_fflush_r+0x1c>
 800fd42:	2000      	movs	r0, #0
 800fd44:	bd38      	pop	{r3, r4, r5, pc}
 800fd46:	bf00      	nop
 800fd48:	08012304 	.word	0x08012304
 800fd4c:	08012324 	.word	0x08012324
 800fd50:	080122e4 	.word	0x080122e4

0800fd54 <_lseek_r>:
 800fd54:	b538      	push	{r3, r4, r5, lr}
 800fd56:	4c07      	ldr	r4, [pc, #28]	; (800fd74 <_lseek_r+0x20>)
 800fd58:	4605      	mov	r5, r0
 800fd5a:	4608      	mov	r0, r1
 800fd5c:	4611      	mov	r1, r2
 800fd5e:	2200      	movs	r2, #0
 800fd60:	6022      	str	r2, [r4, #0]
 800fd62:	461a      	mov	r2, r3
 800fd64:	f7fe ff2e 	bl	800ebc4 <_lseek>
 800fd68:	1c43      	adds	r3, r0, #1
 800fd6a:	d102      	bne.n	800fd72 <_lseek_r+0x1e>
 800fd6c:	6823      	ldr	r3, [r4, #0]
 800fd6e:	b103      	cbz	r3, 800fd72 <_lseek_r+0x1e>
 800fd70:	602b      	str	r3, [r5, #0]
 800fd72:	bd38      	pop	{r3, r4, r5, pc}
 800fd74:	20007980 	.word	0x20007980

0800fd78 <__swhatbuf_r>:
 800fd78:	b570      	push	{r4, r5, r6, lr}
 800fd7a:	460e      	mov	r6, r1
 800fd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd80:	2900      	cmp	r1, #0
 800fd82:	b096      	sub	sp, #88	; 0x58
 800fd84:	4614      	mov	r4, r2
 800fd86:	461d      	mov	r5, r3
 800fd88:	da07      	bge.n	800fd9a <__swhatbuf_r+0x22>
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	602b      	str	r3, [r5, #0]
 800fd8e:	89b3      	ldrh	r3, [r6, #12]
 800fd90:	061a      	lsls	r2, r3, #24
 800fd92:	d410      	bmi.n	800fdb6 <__swhatbuf_r+0x3e>
 800fd94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd98:	e00e      	b.n	800fdb8 <__swhatbuf_r+0x40>
 800fd9a:	466a      	mov	r2, sp
 800fd9c:	f000 f8a4 	bl	800fee8 <_fstat_r>
 800fda0:	2800      	cmp	r0, #0
 800fda2:	dbf2      	blt.n	800fd8a <__swhatbuf_r+0x12>
 800fda4:	9a01      	ldr	r2, [sp, #4]
 800fda6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fdaa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fdae:	425a      	negs	r2, r3
 800fdb0:	415a      	adcs	r2, r3
 800fdb2:	602a      	str	r2, [r5, #0]
 800fdb4:	e7ee      	b.n	800fd94 <__swhatbuf_r+0x1c>
 800fdb6:	2340      	movs	r3, #64	; 0x40
 800fdb8:	2000      	movs	r0, #0
 800fdba:	6023      	str	r3, [r4, #0]
 800fdbc:	b016      	add	sp, #88	; 0x58
 800fdbe:	bd70      	pop	{r4, r5, r6, pc}

0800fdc0 <__smakebuf_r>:
 800fdc0:	898b      	ldrh	r3, [r1, #12]
 800fdc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fdc4:	079d      	lsls	r5, r3, #30
 800fdc6:	4606      	mov	r6, r0
 800fdc8:	460c      	mov	r4, r1
 800fdca:	d507      	bpl.n	800fddc <__smakebuf_r+0x1c>
 800fdcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fdd0:	6023      	str	r3, [r4, #0]
 800fdd2:	6123      	str	r3, [r4, #16]
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	6163      	str	r3, [r4, #20]
 800fdd8:	b002      	add	sp, #8
 800fdda:	bd70      	pop	{r4, r5, r6, pc}
 800fddc:	ab01      	add	r3, sp, #4
 800fdde:	466a      	mov	r2, sp
 800fde0:	f7ff ffca 	bl	800fd78 <__swhatbuf_r>
 800fde4:	9900      	ldr	r1, [sp, #0]
 800fde6:	4605      	mov	r5, r0
 800fde8:	4630      	mov	r0, r6
 800fdea:	f7ff f959 	bl	800f0a0 <_malloc_r>
 800fdee:	b948      	cbnz	r0, 800fe04 <__smakebuf_r+0x44>
 800fdf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdf4:	059a      	lsls	r2, r3, #22
 800fdf6:	d4ef      	bmi.n	800fdd8 <__smakebuf_r+0x18>
 800fdf8:	f023 0303 	bic.w	r3, r3, #3
 800fdfc:	f043 0302 	orr.w	r3, r3, #2
 800fe00:	81a3      	strh	r3, [r4, #12]
 800fe02:	e7e3      	b.n	800fdcc <__smakebuf_r+0xc>
 800fe04:	4b0d      	ldr	r3, [pc, #52]	; (800fe3c <__smakebuf_r+0x7c>)
 800fe06:	62b3      	str	r3, [r6, #40]	; 0x28
 800fe08:	89a3      	ldrh	r3, [r4, #12]
 800fe0a:	6020      	str	r0, [r4, #0]
 800fe0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe10:	81a3      	strh	r3, [r4, #12]
 800fe12:	9b00      	ldr	r3, [sp, #0]
 800fe14:	6163      	str	r3, [r4, #20]
 800fe16:	9b01      	ldr	r3, [sp, #4]
 800fe18:	6120      	str	r0, [r4, #16]
 800fe1a:	b15b      	cbz	r3, 800fe34 <__smakebuf_r+0x74>
 800fe1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe20:	4630      	mov	r0, r6
 800fe22:	f000 f873 	bl	800ff0c <_isatty_r>
 800fe26:	b128      	cbz	r0, 800fe34 <__smakebuf_r+0x74>
 800fe28:	89a3      	ldrh	r3, [r4, #12]
 800fe2a:	f023 0303 	bic.w	r3, r3, #3
 800fe2e:	f043 0301 	orr.w	r3, r3, #1
 800fe32:	81a3      	strh	r3, [r4, #12]
 800fe34:	89a3      	ldrh	r3, [r4, #12]
 800fe36:	431d      	orrs	r5, r3
 800fe38:	81a5      	strh	r5, [r4, #12]
 800fe3a:	e7cd      	b.n	800fdd8 <__smakebuf_r+0x18>
 800fe3c:	0800eea9 	.word	0x0800eea9

0800fe40 <memmove>:
 800fe40:	4288      	cmp	r0, r1
 800fe42:	b510      	push	{r4, lr}
 800fe44:	eb01 0302 	add.w	r3, r1, r2
 800fe48:	d807      	bhi.n	800fe5a <memmove+0x1a>
 800fe4a:	1e42      	subs	r2, r0, #1
 800fe4c:	4299      	cmp	r1, r3
 800fe4e:	d00a      	beq.n	800fe66 <memmove+0x26>
 800fe50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe54:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fe58:	e7f8      	b.n	800fe4c <memmove+0xc>
 800fe5a:	4283      	cmp	r3, r0
 800fe5c:	d9f5      	bls.n	800fe4a <memmove+0xa>
 800fe5e:	1881      	adds	r1, r0, r2
 800fe60:	1ad2      	subs	r2, r2, r3
 800fe62:	42d3      	cmn	r3, r2
 800fe64:	d100      	bne.n	800fe68 <memmove+0x28>
 800fe66:	bd10      	pop	{r4, pc}
 800fe68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fe70:	e7f7      	b.n	800fe62 <memmove+0x22>

0800fe72 <__malloc_lock>:
 800fe72:	4770      	bx	lr

0800fe74 <__malloc_unlock>:
 800fe74:	4770      	bx	lr

0800fe76 <_realloc_r>:
 800fe76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe78:	4607      	mov	r7, r0
 800fe7a:	4614      	mov	r4, r2
 800fe7c:	460e      	mov	r6, r1
 800fe7e:	b921      	cbnz	r1, 800fe8a <_realloc_r+0x14>
 800fe80:	4611      	mov	r1, r2
 800fe82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fe86:	f7ff b90b 	b.w	800f0a0 <_malloc_r>
 800fe8a:	b922      	cbnz	r2, 800fe96 <_realloc_r+0x20>
 800fe8c:	f7ff f8ba 	bl	800f004 <_free_r>
 800fe90:	4625      	mov	r5, r4
 800fe92:	4628      	mov	r0, r5
 800fe94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe96:	f000 f849 	bl	800ff2c <_malloc_usable_size_r>
 800fe9a:	42a0      	cmp	r0, r4
 800fe9c:	d20f      	bcs.n	800febe <_realloc_r+0x48>
 800fe9e:	4621      	mov	r1, r4
 800fea0:	4638      	mov	r0, r7
 800fea2:	f7ff f8fd 	bl	800f0a0 <_malloc_r>
 800fea6:	4605      	mov	r5, r0
 800fea8:	2800      	cmp	r0, #0
 800feaa:	d0f2      	beq.n	800fe92 <_realloc_r+0x1c>
 800feac:	4631      	mov	r1, r6
 800feae:	4622      	mov	r2, r4
 800feb0:	f7fe ff57 	bl	800ed62 <memcpy>
 800feb4:	4631      	mov	r1, r6
 800feb6:	4638      	mov	r0, r7
 800feb8:	f7ff f8a4 	bl	800f004 <_free_r>
 800febc:	e7e9      	b.n	800fe92 <_realloc_r+0x1c>
 800febe:	4635      	mov	r5, r6
 800fec0:	e7e7      	b.n	800fe92 <_realloc_r+0x1c>
	...

0800fec4 <_read_r>:
 800fec4:	b538      	push	{r3, r4, r5, lr}
 800fec6:	4c07      	ldr	r4, [pc, #28]	; (800fee4 <_read_r+0x20>)
 800fec8:	4605      	mov	r5, r0
 800feca:	4608      	mov	r0, r1
 800fecc:	4611      	mov	r1, r2
 800fece:	2200      	movs	r2, #0
 800fed0:	6022      	str	r2, [r4, #0]
 800fed2:	461a      	mov	r2, r3
 800fed4:	f7fe fe16 	bl	800eb04 <_read>
 800fed8:	1c43      	adds	r3, r0, #1
 800feda:	d102      	bne.n	800fee2 <_read_r+0x1e>
 800fedc:	6823      	ldr	r3, [r4, #0]
 800fede:	b103      	cbz	r3, 800fee2 <_read_r+0x1e>
 800fee0:	602b      	str	r3, [r5, #0]
 800fee2:	bd38      	pop	{r3, r4, r5, pc}
 800fee4:	20007980 	.word	0x20007980

0800fee8 <_fstat_r>:
 800fee8:	b538      	push	{r3, r4, r5, lr}
 800feea:	4c07      	ldr	r4, [pc, #28]	; (800ff08 <_fstat_r+0x20>)
 800feec:	2300      	movs	r3, #0
 800feee:	4605      	mov	r5, r0
 800fef0:	4608      	mov	r0, r1
 800fef2:	4611      	mov	r1, r2
 800fef4:	6023      	str	r3, [r4, #0]
 800fef6:	f7fe fe4a 	bl	800eb8e <_fstat>
 800fefa:	1c43      	adds	r3, r0, #1
 800fefc:	d102      	bne.n	800ff04 <_fstat_r+0x1c>
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	b103      	cbz	r3, 800ff04 <_fstat_r+0x1c>
 800ff02:	602b      	str	r3, [r5, #0]
 800ff04:	bd38      	pop	{r3, r4, r5, pc}
 800ff06:	bf00      	nop
 800ff08:	20007980 	.word	0x20007980

0800ff0c <_isatty_r>:
 800ff0c:	b538      	push	{r3, r4, r5, lr}
 800ff0e:	4c06      	ldr	r4, [pc, #24]	; (800ff28 <_isatty_r+0x1c>)
 800ff10:	2300      	movs	r3, #0
 800ff12:	4605      	mov	r5, r0
 800ff14:	4608      	mov	r0, r1
 800ff16:	6023      	str	r3, [r4, #0]
 800ff18:	f7fe fe49 	bl	800ebae <_isatty>
 800ff1c:	1c43      	adds	r3, r0, #1
 800ff1e:	d102      	bne.n	800ff26 <_isatty_r+0x1a>
 800ff20:	6823      	ldr	r3, [r4, #0]
 800ff22:	b103      	cbz	r3, 800ff26 <_isatty_r+0x1a>
 800ff24:	602b      	str	r3, [r5, #0]
 800ff26:	bd38      	pop	{r3, r4, r5, pc}
 800ff28:	20007980 	.word	0x20007980

0800ff2c <_malloc_usable_size_r>:
 800ff2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff30:	1f18      	subs	r0, r3, #4
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	bfbc      	itt	lt
 800ff36:	580b      	ldrlt	r3, [r1, r0]
 800ff38:	18c0      	addlt	r0, r0, r3
 800ff3a:	4770      	bx	lr

0800ff3c <_init>:
 800ff3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff3e:	bf00      	nop
 800ff40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff42:	bc08      	pop	{r3}
 800ff44:	469e      	mov	lr, r3
 800ff46:	4770      	bx	lr

0800ff48 <_fini>:
 800ff48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff4a:	bf00      	nop
 800ff4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff4e:	bc08      	pop	{r3}
 800ff50:	469e      	mov	lr, r3
 800ff52:	4770      	bx	lr
