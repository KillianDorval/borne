
borneSimulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011cd4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003344  08011e84  08011e84  00021e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080151c8  080151c8  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080151c8  080151c8  000251c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080151d0  080151d0  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080151d0  080151d0  000251d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080151d4  080151d4  000251d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080151d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007d54  2000007c  08015254  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007dd0  08015254  00037dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ffe0  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005c17  00000000  00000000  0006008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001708  00000000  00000000  00065ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001560  00000000  00000000  000673b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002eb69  00000000  00000000  00068910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022053  00000000  00000000  00097479  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed29b  00000000  00000000  000b94cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a6767  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006430  00000000  00000000  001a67e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011e6c 	.word	0x08011e6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08011e6c 	.word	0x08011e6c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_Init+0x40>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <HAL_Init+0x40>)
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x40>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <HAL_Init+0x40>)
 80005d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x40>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x40>)
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 fa2b 	bl	8000a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f010 f9cc 	bl	8010990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023c00 	.word	0x40023c00

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fa35 	bl	8000a92 <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 fa0b 	bl	8000a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000014 	.word	0x20000014
 800065c:	20000004 	.word	0x20000004
 8000660:	20000000 	.word	0x20000000

08000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x20>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x24>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_IncTick+0x24>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000004 	.word	0x20000004
 8000688:	20000664 	.word	0x20000664

0800068c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GetTick+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000664 	.word	0x20000664

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006ac:	f7ff ffee 	bl	800068c <HAL_GetTick>
 80006b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006bc:	d005      	beq.n	80006ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_Delay+0x40>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ca:	bf00      	nop
 80006cc:	f7ff ffde 	bl	800068c <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d8f7      	bhi.n	80006cc <HAL_Delay+0x28>
  {
  }
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000004 	.word	0x20000004

080006e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e0ed      	b.n	80008d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d102      	bne.n	800070c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f010 f96a 	bl	80109e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f022 0202 	bic.w	r2, r2, #2
 800071a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800071c:	f7ff ffb6 	bl	800068c <HAL_GetTick>
 8000720:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000722:	e012      	b.n	800074a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000724:	f7ff ffb2 	bl	800068c <HAL_GetTick>
 8000728:	4602      	mov	r2, r0
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	2b0a      	cmp	r3, #10
 8000730:	d90b      	bls.n	800074a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000736:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2205      	movs	r2, #5
 8000742:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e0c5      	b.n	80008d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	f003 0302 	and.w	r3, r3, #2
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1e5      	bne.n	8000724 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f042 0201 	orr.w	r2, r2, #1
 8000766:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000768:	f7ff ff90 	bl	800068c <HAL_GetTick>
 800076c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800076e:	e012      	b.n	8000796 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000770:	f7ff ff8c 	bl	800068c <HAL_GetTick>
 8000774:	4602      	mov	r2, r0
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	2b0a      	cmp	r3, #10
 800077c:	d90b      	bls.n	8000796 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000782:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2205      	movs	r2, #5
 800078e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	e09f      	b.n	80008d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0e5      	beq.n	8000770 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	7e1b      	ldrb	r3, [r3, #24]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d108      	bne.n	80007be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	e007      	b.n	80007ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	7e5b      	ldrb	r3, [r3, #25]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d108      	bne.n	80007e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	e007      	b.n	80007f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80007f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7e9b      	ldrb	r3, [r3, #26]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d108      	bne.n	8000812 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f042 0220 	orr.w	r2, r2, #32
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	e007      	b.n	8000822 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f022 0220 	bic.w	r2, r2, #32
 8000820:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7edb      	ldrb	r3, [r3, #27]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d108      	bne.n	800083c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f022 0210 	bic.w	r2, r2, #16
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	e007      	b.n	800084c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f042 0210 	orr.w	r2, r2, #16
 800084a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7f1b      	ldrb	r3, [r3, #28]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d108      	bne.n	8000866 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f042 0208 	orr.w	r2, r2, #8
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	e007      	b.n	8000876 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f022 0208 	bic.w	r2, r2, #8
 8000874:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7f5b      	ldrb	r3, [r3, #29]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d108      	bne.n	8000890 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f042 0204 	orr.w	r2, r2, #4
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	e007      	b.n	80008a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f022 0204 	bic.w	r2, r2, #4
 800089e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689a      	ldr	r2, [r3, #8]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	431a      	orrs	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	431a      	orrs	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	ea42 0103 	orr.w	r1, r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2201      	movs	r2, #1
 80008d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800090c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000912:	4a04      	ldr	r2, [pc, #16]	; (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	60d3      	str	r3, [r2, #12]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <__NVIC_GetPriorityGrouping+0x18>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	f003 0307 	and.w	r3, r3, #7
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	db0a      	blt.n	800096e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	490c      	ldr	r1, [pc, #48]	; (8000990 <__NVIC_SetPriority+0x4c>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	440b      	add	r3, r1
 8000968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800096c:	e00a      	b.n	8000984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4908      	ldr	r1, [pc, #32]	; (8000994 <__NVIC_SetPriority+0x50>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	3b04      	subs	r3, #4
 800097c:	0112      	lsls	r2, r2, #4
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	440b      	add	r3, r1
 8000982:	761a      	strb	r2, [r3, #24]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000e100 	.word	0xe000e100
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000998:	b480      	push	{r7}
 800099a:	b089      	sub	sp, #36	; 0x24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f1c3 0307 	rsb	r3, r3, #7
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	bf28      	it	cs
 80009b6:	2304      	movcs	r3, #4
 80009b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3304      	adds	r3, #4
 80009be:	2b06      	cmp	r3, #6
 80009c0:	d902      	bls.n	80009c8 <NVIC_EncodePriority+0x30>
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3b03      	subs	r3, #3
 80009c6:	e000      	b.n	80009ca <NVIC_EncodePriority+0x32>
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43da      	mvns	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	401a      	ands	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e0:	f04f 31ff 	mov.w	r1, #4294967295
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43d9      	mvns	r1, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	4313      	orrs	r3, r2
         );
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3724      	adds	r7, #36	; 0x24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
	...

08000a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a10:	d301      	bcc.n	8000a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00f      	b.n	8000a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <SysTick_Config+0x40>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1e:	210f      	movs	r1, #15
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f7ff ff8e 	bl	8000944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <SysTick_Config+0x40>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SysTick_Config+0x40>)
 8000a30:	2207      	movs	r2, #7
 8000a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff47 	bl	80008e0 <__NVIC_SetPriorityGrouping>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4603      	mov	r3, r0
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a6c:	f7ff ff5c 	bl	8000928 <__NVIC_GetPriorityGrouping>
 8000a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	68b9      	ldr	r1, [r7, #8]
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f7ff ff8e 	bl	8000998 <NVIC_EncodePriority>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff5d 	bl	8000944 <__NVIC_SetPriority>
}
 8000a8a:	bf00      	nop
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ffb0 	bl	8000a00 <SysTick_Config>
 8000aa0:	4603      	mov	r3, r0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000abc:	4baa      	ldr	r3, [pc, #680]	; (8000d68 <HAL_ETH_Init+0x2bc>)
 8000abe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e185      	b.n	8000dde <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d106      	bne.n	8000aec <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f00f f978 	bl	800fddc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	4b9e      	ldr	r3, [pc, #632]	; (8000d6c <HAL_ETH_Init+0x2c0>)
 8000af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af4:	4a9d      	ldr	r2, [pc, #628]	; (8000d6c <HAL_ETH_Init+0x2c0>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afa:	6453      	str	r3, [r2, #68]	; 0x44
 8000afc:	4b9b      	ldr	r3, [pc, #620]	; (8000d6c <HAL_ETH_Init+0x2c0>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000b08:	4b99      	ldr	r3, [pc, #612]	; (8000d70 <HAL_ETH_Init+0x2c4>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	4a98      	ldr	r2, [pc, #608]	; (8000d70 <HAL_ETH_Init+0x2c4>)
 8000b0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b12:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000b14:	4b96      	ldr	r3, [pc, #600]	; (8000d70 <HAL_ETH_Init+0x2c4>)
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	4994      	ldr	r1, [pc, #592]	; (8000d70 <HAL_ETH_Init+0x2c4>)
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f042 0201 	orr.w	r2, r2, #1
 8000b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b38:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000b3a:	f7ff fda7 	bl	800068c <HAL_GetTick>
 8000b3e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000b40:	e011      	b.n	8000b66 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000b42:	f7ff fda3 	bl	800068c <HAL_GetTick>
 8000b46:	4602      	mov	r2, r0
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b50:	d909      	bls.n	8000b66 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2203      	movs	r2, #3
 8000b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000b62:	2303      	movs	r3, #3
 8000b64:	e13b      	b.n	8000dde <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1e4      	bne.n	8000b42 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f023 031c 	bic.w	r3, r3, #28
 8000b86:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000b88:	f001 fe00 	bl	800278c <HAL_RCC_GetHCLKFreq>
 8000b8c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	4a78      	ldr	r2, [pc, #480]	; (8000d74 <HAL_ETH_Init+0x2c8>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d908      	bls.n	8000ba8 <HAL_ETH_Init+0xfc>
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4a77      	ldr	r2, [pc, #476]	; (8000d78 <HAL_ETH_Init+0x2cc>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d804      	bhi.n	8000ba8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	61fb      	str	r3, [r7, #28]
 8000ba6:	e027      	b.n	8000bf8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	4a73      	ldr	r2, [pc, #460]	; (8000d78 <HAL_ETH_Init+0x2cc>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d908      	bls.n	8000bc2 <HAL_ETH_Init+0x116>
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	4a72      	ldr	r2, [pc, #456]	; (8000d7c <HAL_ETH_Init+0x2d0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d804      	bhi.n	8000bc2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f043 030c 	orr.w	r3, r3, #12
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	e01a      	b.n	8000bf8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	4a6d      	ldr	r2, [pc, #436]	; (8000d7c <HAL_ETH_Init+0x2d0>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d903      	bls.n	8000bd2 <HAL_ETH_Init+0x126>
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	4a6c      	ldr	r2, [pc, #432]	; (8000d80 <HAL_ETH_Init+0x2d4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d911      	bls.n	8000bf6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	4a6a      	ldr	r2, [pc, #424]	; (8000d80 <HAL_ETH_Init+0x2d4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d908      	bls.n	8000bec <HAL_ETH_Init+0x140>
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4a69      	ldr	r2, [pc, #420]	; (8000d84 <HAL_ETH_Init+0x2d8>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d804      	bhi.n	8000bec <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	61fb      	str	r3, [r7, #28]
 8000bea:	e005      	b.n	8000bf8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	e000      	b.n	8000bf8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000bf6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	69fa      	ldr	r2, [r7, #28]
 8000bfe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c04:	2100      	movs	r1, #0
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 fb9a 	bl	8001340 <HAL_ETH_WritePHYRegister>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00b      	beq.n	8000c2a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000c16:	6939      	ldr	r1, [r7, #16]
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f000 fc27 	bl	800146c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e0d9      	b.n	8000dde <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000c2a:	20ff      	movs	r0, #255	; 0xff
 8000c2c:	f7ff fd3a 	bl	80006a4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f000 80a7 	beq.w	8000d88 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000c3a:	f7ff fd27 	bl	800068c <HAL_GetTick>
 8000c3e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	461a      	mov	r2, r3
 8000c46:	2101      	movs	r1, #1
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 fb11 	bl	8001270 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000c4e:	f7ff fd1d 	bl	800068c <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d90f      	bls.n	8000c80 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000c64:	6939      	ldr	r1, [r7, #16]
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 fc00 	bl	800146c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e0ae      	b.n	8000dde <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0da      	beq.n	8000c40 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000c8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c8e:	2100      	movs	r1, #0
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f000 fb55 	bl	8001340 <HAL_ETH_WritePHYRegister>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d00b      	beq.n	8000cb4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ca0:	6939      	ldr	r1, [r7, #16]
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 fbe2 	bl	800146c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e094      	b.n	8000dde <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000cb4:	f7ff fcea 	bl	800068c <HAL_GetTick>
 8000cb8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 fad4 	bl	8001270 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000cc8:	f7ff fce0 	bl	800068c <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d90f      	bls.n	8000cfa <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000cde:	6939      	ldr	r1, [r7, #16]
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 fbc3 	bl	800146c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e071      	b.n	8000dde <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f003 0320 	and.w	r3, r3, #32
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0da      	beq.n	8000cba <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	461a      	mov	r2, r3
 8000d0a:	211f      	movs	r1, #31
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 faaf 	bl	8001270 <HAL_ETH_ReadPHYRegister>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00b      	beq.n	8000d30 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000d1c:	6939      	ldr	r1, [r7, #16]
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 fba4 	bl	800146c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2201      	movs	r2, #1
 8000d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e056      	b.n	8000dde <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d004      	beq.n	8000d44 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	e002      	b.n	8000d4a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	e037      	b.n	8000dcc <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	e032      	b.n	8000dcc <HAL_ETH_Init+0x320>
 8000d66:	bf00      	nop
 8000d68:	03938700 	.word	0x03938700
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40013800 	.word	0x40013800
 8000d74:	01312cff 	.word	0x01312cff
 8000d78:	02160ebf 	.word	0x02160ebf
 8000d7c:	039386ff 	.word	0x039386ff
 8000d80:	05f5e0ff 	.word	0x05f5e0ff
 8000d84:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	08db      	lsrs	r3, r3, #3
 8000d8e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	085b      	lsrs	r3, r3, #1
 8000d96:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f000 facd 	bl	8001340 <HAL_ETH_WritePHYRegister>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00b      	beq.n	8000dc4 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000db0:	6939      	ldr	r1, [r7, #16]
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 fb5a 	bl	800146c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e00c      	b.n	8000dde <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000dc4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000dc8:	f7ff fc6c 	bl	80006a4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000dcc:	6939      	ldr	r1, [r7, #16]
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 fb4c 	bl	800146c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3720      	adds	r7, #32
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop

08000de8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d101      	bne.n	8000e08 <HAL_ETH_DMATxDescListInit+0x20>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e052      	b.n	8000eae <HAL_ETH_DMATxDescListInit+0xc6>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2202      	movs	r2, #2
 8000e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	e030      	b.n	8000e86 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	015b      	lsls	r3, r3, #5
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e34:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e3c:	fb02 f303 	mul.w	r3, r2, r3
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	461a      	mov	r2, r3
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d105      	bne.n	8000e5e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d208      	bcs.n	8000e7a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	015b      	lsls	r3, r3, #5
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	4413      	add	r3, r2
 8000e72:	461a      	mov	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	e002      	b.n	8000e80 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d3ca      	bcc.n	8000e24 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e98:	3310      	adds	r3, #16
 8000e9a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	371c      	adds	r7, #28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b087      	sub	sp, #28
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d101      	bne.n	8000eda <HAL_ETH_DMARxDescListInit+0x20>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e056      	b.n	8000f88 <HAL_ETH_DMARxDescListInit+0xce>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	e034      	b.n	8000f60 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	015b      	lsls	r3, r3, #5
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	4413      	add	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f06:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000f0e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	461a      	mov	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d105      	bne.n	8000f38 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d208      	bcs.n	8000f54 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	015b      	lsls	r3, r3, #5
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	e002      	b.n	8000f5a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d3c6      	bcc.n	8000ef6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f72:	330c      	adds	r3, #12
 8000f74:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	371c      	adds	r7, #28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <HAL_ETH_TransmitFrame+0x24>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e0cd      	b.n	8001154 <HAL_ETH_TransmitFrame+0x1c0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d109      	bne.n	8000fe2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0b8      	b.n	8001154 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	da09      	bge.n	8001000 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2212      	movs	r2, #18
 8000ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e0a9      	b.n	8001154 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001006:	4293      	cmp	r3, r2
 8001008:	d915      	bls.n	8001036 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	4a54      	ldr	r2, [pc, #336]	; (8001160 <HAL_ETH_TransmitFrame+0x1cc>)
 800100e:	fba2 2303 	umull	r2, r3, r2, r3
 8001012:	0a9b      	lsrs	r3, r3, #10
 8001014:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	4b51      	ldr	r3, [pc, #324]	; (8001160 <HAL_ETH_TransmitFrame+0x1cc>)
 800101a:	fba3 1302 	umull	r1, r3, r3, r2
 800101e:	0a9b      	lsrs	r3, r3, #10
 8001020:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001024:	fb01 f303 	mul.w	r3, r1, r3
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	e001      	b.n	800103a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001036:	2301      	movs	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d11c      	bne.n	800107a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800104e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800105a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001066:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800106a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	461a      	mov	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
 8001078:	e04b      	b.n	8001112 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	e044      	b.n	800110a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800108e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d107      	bne.n	80010a6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010a4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010ae:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d116      	bne.n	80010e8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80010c8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	4a25      	ldr	r2, [pc, #148]	; (8001164 <HAL_ETH_TransmitFrame+0x1d0>)
 80010ce:	fb02 f203 	mul.w	r2, r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80010da:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80010e6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010f6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	461a      	mov	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	3301      	adds	r3, #1
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	429a      	cmp	r2, r3
 8001110:	d3b6      	bcc.n	8001080 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800111a:	3314      	adds	r3, #20
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00d      	beq.n	8001142 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800112e:	3314      	adds	r3, #20
 8001130:	2204      	movs	r2, #4
 8001132:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800113c:	3304      	adds	r3, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	ac02b00b 	.word	0xac02b00b
 8001164:	fffffa0c 	.word	0xfffffa0c

08001168 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HAL_ETH_GetReceivedFrame+0x1a>
 800117e:	2302      	movs	r3, #2
 8001180:	e070      	b.n	8001264 <HAL_ETH_GetReceivedFrame+0xfc>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2202      	movs	r2, #2
 800118e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db5a      	blt.n	8001252 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d030      	beq.n	800120c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d103      	bne.n	80011c4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	0c1b      	lsrs	r3, r3, #16
 80011d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80011d8:	3b04      	subs	r3, #4
 80011da:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	e02b      	b.n	8001264 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001216:	2b00      	cmp	r3, #0
 8001218:	d010      	beq.n	800123c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	461a      	mov	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
 800123a:	e00a      	b.n	8001252 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	461a      	mov	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	460b      	mov	r3, r1
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b82      	cmp	r3, #130	; 0x82
 8001290:	d101      	bne.n	8001296 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001292:	2302      	movs	r3, #2
 8001294:	e050      	b.n	8001338 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2282      	movs	r2, #130	; 0x82
 800129a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f003 031c 	and.w	r3, r3, #28
 80012ac:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8a1b      	ldrh	r3, [r3, #16]
 80012b2:	02db      	lsls	r3, r3, #11
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80012bc:	897b      	ldrh	r3, [r7, #10]
 80012be:	019b      	lsls	r3, r3, #6
 80012c0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f023 0302 	bic.w	r3, r3, #2
 80012d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80012e2:	f7ff f9d3 	bl	800068c <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80012e8:	e015      	b.n	8001316 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80012ea:	f7ff f9cf 	bl	800068c <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f8:	d309      	bcc.n	800130e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e014      	b.n	8001338 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e4      	bne.n	80012ea <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	b29b      	uxth	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	460b      	mov	r3, r1
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b42      	cmp	r3, #66	; 0x42
 8001360:	d101      	bne.n	8001366 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001362:	2302      	movs	r3, #2
 8001364:	e04e      	b.n	8001404 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2242      	movs	r2, #66	; 0x42
 800136a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f003 031c 	and.w	r3, r3, #28
 800137c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8a1b      	ldrh	r3, [r3, #16]
 8001382:	02db      	lsls	r3, r3, #11
 8001384:	b29b      	uxth	r3, r3
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4313      	orrs	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800138c:	897b      	ldrh	r3, [r7, #10]
 800138e:	019b      	lsls	r3, r3, #6
 8001390:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	4313      	orrs	r3, r2
 8001398:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013bc:	f7ff f966 	bl	800068c <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80013c2:	e015      	b.n	80013f0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80013c4:	f7ff f962 	bl	800068c <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d2:	d309      	bcc.n	80013e8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e00d      	b.n	8001404 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1e4      	bne.n	80013c4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_ETH_Start+0x16>
 800141e:	2302      	movs	r3, #2
 8001420:	e01f      	b.n	8001462 <HAL_ETH_Start+0x56>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2202      	movs	r2, #2
 800142e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fa1c 	bl	8001870 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fa36 	bl	80018aa <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 fa80 	bl	8001944 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 fa4d 	bl	80018e4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fa62 	bl	8001914 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0b0      	sub	sp, #192	; 0xc0
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d007      	beq.n	8001492 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001488:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001490:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800149a:	2300      	movs	r3, #0
 800149c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d103      	bne.n	80014ba <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80014b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b6:	663b      	str	r3, [r7, #96]	; 0x60
 80014b8:	e001      	b.n	80014be <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80014be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80014c8:	2300      	movs	r3, #0
 80014ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80014d8:	2340      	movs	r3, #64	; 0x40
 80014da:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001540:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001544:	4bac      	ldr	r3, [pc, #688]	; (80017f8 <ETH_MACDMAConfig+0x38c>)
 8001546:	4013      	ands	r3, r2
 8001548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800154c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800154e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001550:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001554:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001558:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800155e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001562:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001566:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800156c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800156e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001570:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001574:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001578:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800157a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800157c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800157e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001580:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001582:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001586:	4313      	orrs	r3, r2
 8001588:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001594:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f7ff f87f 	bl	80006a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015ae:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80015b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80015b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80015b4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80015b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80015b8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80015ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80015be:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80015c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80015c4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80015c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80015ca:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80015cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80015d0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80015d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80015dc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80015de:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff f85a 	bl	80006a4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015f8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001602:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800160c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001618:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800161c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001620:	4013      	ands	r3, r2
 8001622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001626:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800162a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800162c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001630:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001632:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001636:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001638:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800163c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800163e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001642:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001644:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001648:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800164a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800164e:	4313      	orrs	r3, r2
 8001650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800165c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001668:	2001      	movs	r0, #1
 800166a:	f7ff f81b 	bl	80006a4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001676:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001678:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800167c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001692:	2001      	movs	r0, #1
 8001694:	f7ff f806 	bl	80006a4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016a0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80016a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016aa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80016b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016b4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80016c6:	2304      	movs	r3, #4
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80016ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80016d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f6:	3318      	adds	r3, #24
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001702:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <ETH_MACDMAConfig+0x390>)
 8001704:	4013      	ands	r3, r2
 8001706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800170a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800170c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800170e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001710:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001712:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001714:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001716:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001718:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800171a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800171c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800171e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001720:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001722:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001726:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800172a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800172c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001730:	4313      	orrs	r3, r2
 8001732:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173e:	3318      	adds	r3, #24
 8001740:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001744:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174e:	3318      	adds	r3, #24
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001756:	2001      	movs	r0, #1
 8001758:	f7fe ffa4 	bl	80006a4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001764:	3318      	adds	r3, #24
 8001766:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800176a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800176c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800176e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001770:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001774:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001778:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800177a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800177c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800177e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001780:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001782:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001786:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001794:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f7fe ff7d 	bl	80006a4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017b6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d10f      	bne.n	80017e0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c8:	331c      	adds	r3, #28
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017dc:	331c      	adds	r3, #28
 80017de:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	461a      	mov	r2, r3
 80017e6:	2100      	movs	r1, #0
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f809 	bl	8001800 <ETH_MACAddressConfig>
}
 80017ee:	bf00      	nop
 80017f0:	37c0      	adds	r7, #192	; 0xc0
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	ff20810f 	.word	0xff20810f
 80017fc:	f8de3f23 	.word	0xf8de3f23

08001800 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3305      	adds	r3, #5
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	3204      	adds	r2, #4
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <ETH_MACAddressConfig+0x68>)
 8001822:	4413      	add	r3, r2
 8001824:	461a      	mov	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3303      	adds	r3, #3
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	061a      	lsls	r2, r3, #24
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3302      	adds	r3, #2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	4313      	orrs	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	7812      	ldrb	r2, [r2, #0]
 800184a:	4313      	orrs	r3, r2
 800184c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <ETH_MACAddressConfig+0x6c>)
 8001852:	4413      	add	r3, r2
 8001854:	461a      	mov	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	6013      	str	r3, [r2, #0]
}
 800185a:	bf00      	nop
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40028040 	.word	0x40028040
 800186c:	40028044 	.word	0x40028044

08001870 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0208 	orr.w	r2, r2, #8
 800188a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001894:	2001      	movs	r0, #1
 8001896:	f000 f87f 	bl	8001998 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	601a      	str	r2, [r3, #0]
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0204 	orr.w	r2, r2, #4
 80018c4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f000 f862 	bl	8001998 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f4:	3318      	adds	r3, #24
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001904:	3318      	adds	r3, #24
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001924:	3318      	adds	r3, #24
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0202 	orr.w	r2, r2, #2
 8001930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001934:	3318      	adds	r3, #24
 8001936:	601a      	str	r2, [r3, #0]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001958:	3318      	adds	r3, #24
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001968:	3318      	adds	r3, #24
 800196a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001974:	3318      	adds	r3, #24
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800197a:	2001      	movs	r0, #1
 800197c:	f000 f80c 	bl	8001998 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800198a:	3318      	adds	r3, #24
 800198c:	601a      	str	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <ETH_Delay+0x34>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <ETH_Delay+0x38>)
 80019a6:	fba2 2303 	umull	r2, r3, r2, r3
 80019aa:	0a5b      	lsrs	r3, r3, #9
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80019b4:	bf00      	nop
  } 
  while (Delay --);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1e5a      	subs	r2, r3, #1
 80019ba:	60fa      	str	r2, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f9      	bne.n	80019b4 <ETH_Delay+0x1c>
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	20000014 	.word	0x20000014
 80019d0:	10624dd3 	.word	0x10624dd3

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
 80019ee:	e177      	b.n	8001ce0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f0:	2201      	movs	r2, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	f040 8166 	bne.w	8001cda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x4a>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d123      	bne.n	8001a66 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	08da      	lsrs	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3208      	adds	r2, #8
 8001a60:	69b9      	ldr	r1, [r7, #24]
 8001a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	2203      	movs	r2, #3
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0203 	and.w	r2, r3, #3
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d00b      	beq.n	8001aba <HAL_GPIO_Init+0xe6>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d007      	beq.n	8001aba <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aae:	2b11      	cmp	r3, #17
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b12      	cmp	r3, #18
 8001ab8:	d130      	bne.n	8001b1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 0201 	and.w	r2, r3, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80c0 	beq.w	8001cda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b65      	ldr	r3, [pc, #404]	; (8001cf4 <HAL_GPIO_Init+0x320>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	4a64      	ldr	r2, [pc, #400]	; (8001cf4 <HAL_GPIO_Init+0x320>)
 8001b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b68:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6a:	4b62      	ldr	r3, [pc, #392]	; (8001cf4 <HAL_GPIO_Init+0x320>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b76:	4a60      	ldr	r2, [pc, #384]	; (8001cf8 <HAL_GPIO_Init+0x324>)
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a57      	ldr	r2, [pc, #348]	; (8001cfc <HAL_GPIO_Init+0x328>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d037      	beq.n	8001c12 <HAL_GPIO_Init+0x23e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a56      	ldr	r2, [pc, #344]	; (8001d00 <HAL_GPIO_Init+0x32c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d031      	beq.n	8001c0e <HAL_GPIO_Init+0x23a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a55      	ldr	r2, [pc, #340]	; (8001d04 <HAL_GPIO_Init+0x330>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d02b      	beq.n	8001c0a <HAL_GPIO_Init+0x236>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a54      	ldr	r2, [pc, #336]	; (8001d08 <HAL_GPIO_Init+0x334>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d025      	beq.n	8001c06 <HAL_GPIO_Init+0x232>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a53      	ldr	r2, [pc, #332]	; (8001d0c <HAL_GPIO_Init+0x338>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d01f      	beq.n	8001c02 <HAL_GPIO_Init+0x22e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <HAL_GPIO_Init+0x33c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d019      	beq.n	8001bfe <HAL_GPIO_Init+0x22a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a51      	ldr	r2, [pc, #324]	; (8001d14 <HAL_GPIO_Init+0x340>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0x226>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a50      	ldr	r2, [pc, #320]	; (8001d18 <HAL_GPIO_Init+0x344>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00d      	beq.n	8001bf6 <HAL_GPIO_Init+0x222>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4f      	ldr	r2, [pc, #316]	; (8001d1c <HAL_GPIO_Init+0x348>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d007      	beq.n	8001bf2 <HAL_GPIO_Init+0x21e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4e      	ldr	r2, [pc, #312]	; (8001d20 <HAL_GPIO_Init+0x34c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d101      	bne.n	8001bee <HAL_GPIO_Init+0x21a>
 8001bea:	2309      	movs	r3, #9
 8001bec:	e012      	b.n	8001c14 <HAL_GPIO_Init+0x240>
 8001bee:	230a      	movs	r3, #10
 8001bf0:	e010      	b.n	8001c14 <HAL_GPIO_Init+0x240>
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	e00e      	b.n	8001c14 <HAL_GPIO_Init+0x240>
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	e00c      	b.n	8001c14 <HAL_GPIO_Init+0x240>
 8001bfa:	2306      	movs	r3, #6
 8001bfc:	e00a      	b.n	8001c14 <HAL_GPIO_Init+0x240>
 8001bfe:	2305      	movs	r3, #5
 8001c00:	e008      	b.n	8001c14 <HAL_GPIO_Init+0x240>
 8001c02:	2304      	movs	r3, #4
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x240>
 8001c06:	2303      	movs	r3, #3
 8001c08:	e004      	b.n	8001c14 <HAL_GPIO_Init+0x240>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_Init+0x240>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_GPIO_Init+0x240>
 8001c12:	2300      	movs	r3, #0
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	f002 0203 	and.w	r2, r2, #3
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	4093      	lsls	r3, r2
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c24:	4934      	ldr	r1, [pc, #208]	; (8001cf8 <HAL_GPIO_Init+0x324>)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c32:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c56:	4a33      	ldr	r2, [pc, #204]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c5c:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c80:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c86:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001caa:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd4:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <HAL_GPIO_Init+0x350>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b0f      	cmp	r3, #15
 8001ce4:	f67f ae84 	bls.w	80019f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3724      	adds	r7, #36	; 0x24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40013800 	.word	0x40013800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40020800 	.word	0x40020800
 8001d08:	40020c00 	.word	0x40020c00
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40021400 	.word	0x40021400
 8001d14:	40021800 	.word	0x40021800
 8001d18:	40021c00 	.word	0x40021c00
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	40022400 	.word	0x40022400
 8001d24:	40013c00 	.word	0x40013c00

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
 8001d34:	4613      	mov	r3, r2
 8001d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d38:	787b      	ldrb	r3, [r7, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d44:	e003      	b.n	8001d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d46:	887b      	ldrh	r3, [r7, #2]
 8001d48:	041a      	lsls	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	619a      	str	r2, [r3, #24]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5c:	b08f      	sub	sp, #60	; 0x3c
 8001d5e:	af0a      	add	r7, sp, #40	; 0x28
 8001d60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e10f      	b.n	8001f8c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f00e ff66 	bl	8010c58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 ffdb 	bl	8002d66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	687e      	ldr	r6, [r7, #4]
 8001db8:	466d      	mov	r5, sp
 8001dba:	f106 0410 	add.w	r4, r6, #16
 8001dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dca:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dce:	1d33      	adds	r3, r6, #4
 8001dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dd2:	6838      	ldr	r0, [r7, #0]
 8001dd4:	f000 ff66 	bl	8002ca4 <USB_CoreInit>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2202      	movs	r2, #2
 8001de2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0d0      	b.n	8001f8c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 ffc9 	bl	8002d88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	e04a      	b.n	8001e92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	333d      	adds	r3, #61	; 0x3d
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	333c      	adds	r3, #60	; 0x3c
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	b298      	uxth	r0, r3
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	3342      	adds	r3, #66	; 0x42
 8001e38:	4602      	mov	r2, r0
 8001e3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	333f      	adds	r3, #63	; 0x3f
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3344      	adds	r3, #68	; 0x44
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	3348      	adds	r3, #72	; 0x48
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	3350      	adds	r3, #80	; 0x50
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d3af      	bcc.n	8001dfc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e044      	b.n	8001f2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d3b5      	bcc.n	8001ea2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	687e      	ldr	r6, [r7, #4]
 8001f3e:	466d      	mov	r5, sp
 8001f40:	f106 0410 	add.w	r4, r6, #16
 8001f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f50:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f54:	1d33      	adds	r3, r6, #4
 8001f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f58:	6838      	ldr	r0, [r7, #0]
 8001f5a:	f000 ff3f 	bl	8002ddc <USB_DevInit>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e00d      	b.n	8001f8c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 f8fc 	bl	8003182 <USB_DevDisconnect>

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e22d      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d075      	beq.n	800209e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fb2:	4ba3      	ldr	r3, [pc, #652]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d00c      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fbe:	4ba0      	ldr	r3, [pc, #640]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d112      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fca:	4b9d      	ldr	r3, [pc, #628]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	4b99      	ldr	r3, [pc, #612]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d05b      	beq.n	800209c <HAL_RCC_OscConfig+0x108>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d157      	bne.n	800209c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e208      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	d106      	bne.n	8002008 <HAL_RCC_OscConfig+0x74>
 8001ffa:	4b91      	ldr	r3, [pc, #580]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a90      	ldr	r2, [pc, #576]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e01d      	b.n	8002044 <HAL_RCC_OscConfig+0xb0>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x98>
 8002012:	4b8b      	ldr	r3, [pc, #556]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a8a      	ldr	r2, [pc, #552]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b88      	ldr	r3, [pc, #544]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a87      	ldr	r2, [pc, #540]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0xb0>
 800202c:	4b84      	ldr	r3, [pc, #528]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a83      	ldr	r2, [pc, #524]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b81      	ldr	r3, [pc, #516]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a80      	ldr	r2, [pc, #512]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 800203e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7fe fb1e 	bl	800068c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002054:	f7fe fb1a 	bl	800068c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1cd      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0xc0>
 8002072:	e014      	b.n	800209e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7fe fb0a 	bl	800068c <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800207c:	f7fe fb06 	bl	800068c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e1b9      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	4b6c      	ldr	r3, [pc, #432]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0xe8>
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d063      	beq.n	8002172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020aa:	4b65      	ldr	r3, [pc, #404]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b6:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d11c      	bne.n	80020fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c2:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d116      	bne.n	80020fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ce:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x152>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e18d      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b56      	ldr	r3, [pc, #344]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4952      	ldr	r1, [pc, #328]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	e03a      	b.n	8002172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002104:	4b4f      	ldr	r3, [pc, #316]	; (8002244 <HAL_RCC_OscConfig+0x2b0>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210a:	f7fe fabf 	bl	800068c <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002112:	f7fe fabb 	bl	800068c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e16e      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	4b46      	ldr	r3, [pc, #280]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4940      	ldr	r1, [pc, #256]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
 8002144:	e015      	b.n	8002172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002146:	4b3f      	ldr	r3, [pc, #252]	; (8002244 <HAL_RCC_OscConfig+0x2b0>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe fa9e 	bl	800068c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002154:	f7fe fa9a 	bl	800068c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e14d      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d030      	beq.n	80021e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d016      	beq.n	80021b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002186:	4b30      	ldr	r3, [pc, #192]	; (8002248 <HAL_RCC_OscConfig+0x2b4>)
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7fe fa7e 	bl	800068c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002194:	f7fe fa7a 	bl	800068c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e12d      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x200>
 80021b2:	e015      	b.n	80021e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_RCC_OscConfig+0x2b4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7fe fa67 	bl	800068c <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c2:	f7fe fa63 	bl	800068c <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e116      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a0 	beq.w	800232e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10f      	bne.n	800221e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800221a:	2301      	movs	r3, #1
 800221c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_OscConfig+0x2b8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d121      	bne.n	800226e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_RCC_OscConfig+0x2b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a07      	ldr	r2, [pc, #28]	; (800224c <HAL_RCC_OscConfig+0x2b8>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002236:	f7fe fa29 	bl	800068c <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	e011      	b.n	8002262 <HAL_RCC_OscConfig+0x2ce>
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	42470000 	.word	0x42470000
 8002248:	42470e80 	.word	0x42470e80
 800224c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002250:	f7fe fa1c 	bl	800068c <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0cf      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_RCC_OscConfig+0x478>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d106      	bne.n	8002284 <HAL_RCC_OscConfig+0x2f0>
 8002276:	4b66      	ldr	r3, [pc, #408]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	4a65      	ldr	r2, [pc, #404]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6713      	str	r3, [r2, #112]	; 0x70
 8002282:	e01c      	b.n	80022be <HAL_RCC_OscConfig+0x32a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d10c      	bne.n	80022a6 <HAL_RCC_OscConfig+0x312>
 800228c:	4b60      	ldr	r3, [pc, #384]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	4a5f      	ldr	r2, [pc, #380]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	6713      	str	r3, [r2, #112]	; 0x70
 8002298:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	4a5c      	ldr	r2, [pc, #368]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6713      	str	r3, [r2, #112]	; 0x70
 80022a4:	e00b      	b.n	80022be <HAL_RCC_OscConfig+0x32a>
 80022a6:	4b5a      	ldr	r3, [pc, #360]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022aa:	4a59      	ldr	r2, [pc, #356]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	6713      	str	r3, [r2, #112]	; 0x70
 80022b2:	4b57      	ldr	r3, [pc, #348]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a56      	ldr	r2, [pc, #344]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d015      	beq.n	80022f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7fe f9e1 	bl	800068c <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe f9dd 	bl	800068c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e08e      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	4b4a      	ldr	r3, [pc, #296]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ee      	beq.n	80022ce <HAL_RCC_OscConfig+0x33a>
 80022f0:	e014      	b.n	800231c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7fe f9cb 	bl	800068c <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7fe f9c7 	bl	800068c <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e078      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 8002312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ee      	bne.n	80022fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d105      	bne.n	800232e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002322:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a3a      	ldr	r2, [pc, #232]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 8002328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d064      	beq.n	8002400 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b08      	cmp	r3, #8
 8002340:	d05c      	beq.n	80023fc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d141      	bne.n	80023ce <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234a:	4b32      	ldr	r3, [pc, #200]	; (8002414 <HAL_RCC_OscConfig+0x480>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7fe f99c 	bl	800068c <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe f998 	bl	800068c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e04b      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69da      	ldr	r2, [r3, #28]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	019b      	lsls	r3, r3, #6
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	085b      	lsrs	r3, r3, #1
 800238e:	3b01      	subs	r3, #1
 8002390:	041b      	lsls	r3, r3, #16
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	061b      	lsls	r3, r3, #24
 800239a:	491d      	ldr	r1, [pc, #116]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a0:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HAL_RCC_OscConfig+0x480>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7fe f971 	bl	800068c <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ae:	f7fe f96d 	bl	800068c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e020      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x41a>
 80023cc:	e018      	b.n	8002400 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_RCC_OscConfig+0x480>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe f95a 	bl	800068c <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023dc:	f7fe f956 	bl	800068c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e009      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_RCC_OscConfig+0x47c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x448>
 80023fa:	e001      	b.n	8002400 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40007000 	.word	0x40007000
 8002410:	40023800 	.word	0x40023800
 8002414:	42470060 	.word	0x42470060

08002418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0ca      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b67      	ldr	r3, [pc, #412]	; (80025cc <HAL_RCC_ClockConfig+0x1b4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d90c      	bls.n	8002454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b64      	ldr	r3, [pc, #400]	; (80025cc <HAL_RCC_ClockConfig+0x1b4>)
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b62      	ldr	r3, [pc, #392]	; (80025cc <HAL_RCC_ClockConfig+0x1b4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0b6      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d020      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800246c:	4b58      	ldr	r3, [pc, #352]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a57      	ldr	r2, [pc, #348]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002472:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002476:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002484:	4b52      	ldr	r3, [pc, #328]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4a51      	ldr	r2, [pc, #324]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800248e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4b4f      	ldr	r3, [pc, #316]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	494c      	ldr	r1, [pc, #304]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d044      	beq.n	8002538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d119      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e07d      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d6:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e06d      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e065      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4933      	ldr	r1, [pc, #204]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002508:	f7fe f8c0 	bl	800068c <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7fe f8bc 	bl	800068c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e04d      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_RCC_ClockConfig+0x1b4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d20c      	bcs.n	8002560 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_RCC_ClockConfig+0x1b4>)
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_RCC_ClockConfig+0x1b4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e030      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4915      	ldr	r1, [pc, #84]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d009      	beq.n	800259e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	490d      	ldr	r1, [pc, #52]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800259e:	f000 f81d 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 80025a2:	4601      	mov	r1, r0
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	5cd3      	ldrb	r3, [r2, r3]
 80025b2:	fa21 f303 	lsr.w	r3, r1, r3
 80025b6:	4a08      	ldr	r2, [pc, #32]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe f822 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023c00 	.word	0x40023c00
 80025d0:	40023800 	.word	0x40023800
 80025d4:	08015118 	.word	0x08015118
 80025d8:	20000014 	.word	0x20000014

080025dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	2300      	movs	r3, #0
 80025ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d007      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x32>
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d008      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x38>
 8002602:	2b00      	cmp	r3, #0
 8002604:	f040 80b4 	bne.w	8002770 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800260a:	60bb      	str	r3, [r7, #8]
       break;
 800260c:	e0b3      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800260e:	4b5e      	ldr	r3, [pc, #376]	; (8002788 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002610:	60bb      	str	r3, [r7, #8]
      break;
 8002612:	e0b0      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002614:	4b5a      	ldr	r3, [pc, #360]	; (8002780 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800261c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800261e:	4b58      	ldr	r3, [pc, #352]	; (8002780 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d04a      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262a:	4b55      	ldr	r3, [pc, #340]	; (8002780 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	099b      	lsrs	r3, r3, #6
 8002630:	f04f 0400 	mov.w	r4, #0
 8002634:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	ea03 0501 	and.w	r5, r3, r1
 8002640:	ea04 0602 	and.w	r6, r4, r2
 8002644:	4629      	mov	r1, r5
 8002646:	4632      	mov	r2, r6
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	f04f 0400 	mov.w	r4, #0
 8002650:	0154      	lsls	r4, r2, #5
 8002652:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002656:	014b      	lsls	r3, r1, #5
 8002658:	4619      	mov	r1, r3
 800265a:	4622      	mov	r2, r4
 800265c:	1b49      	subs	r1, r1, r5
 800265e:	eb62 0206 	sbc.w	r2, r2, r6
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	f04f 0400 	mov.w	r4, #0
 800266a:	0194      	lsls	r4, r2, #6
 800266c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002670:	018b      	lsls	r3, r1, #6
 8002672:	1a5b      	subs	r3, r3, r1
 8002674:	eb64 0402 	sbc.w	r4, r4, r2
 8002678:	f04f 0100 	mov.w	r1, #0
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	00e2      	lsls	r2, r4, #3
 8002682:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002686:	00d9      	lsls	r1, r3, #3
 8002688:	460b      	mov	r3, r1
 800268a:	4614      	mov	r4, r2
 800268c:	195b      	adds	r3, r3, r5
 800268e:	eb44 0406 	adc.w	r4, r4, r6
 8002692:	f04f 0100 	mov.w	r1, #0
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	0262      	lsls	r2, r4, #9
 800269c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80026a0:	0259      	lsls	r1, r3, #9
 80026a2:	460b      	mov	r3, r1
 80026a4:	4614      	mov	r4, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	4621      	mov	r1, r4
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f04f 0400 	mov.w	r4, #0
 80026b0:	461a      	mov	r2, r3
 80026b2:	4623      	mov	r3, r4
 80026b4:	f7fd fe04 	bl	80002c0 <__aeabi_uldivmod>
 80026b8:	4603      	mov	r3, r0
 80026ba:	460c      	mov	r4, r1
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	e049      	b.n	8002754 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c0:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	f04f 0400 	mov.w	r4, #0
 80026ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	ea03 0501 	and.w	r5, r3, r1
 80026d6:	ea04 0602 	and.w	r6, r4, r2
 80026da:	4629      	mov	r1, r5
 80026dc:	4632      	mov	r2, r6
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	f04f 0400 	mov.w	r4, #0
 80026e6:	0154      	lsls	r4, r2, #5
 80026e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026ec:	014b      	lsls	r3, r1, #5
 80026ee:	4619      	mov	r1, r3
 80026f0:	4622      	mov	r2, r4
 80026f2:	1b49      	subs	r1, r1, r5
 80026f4:	eb62 0206 	sbc.w	r2, r2, r6
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	f04f 0400 	mov.w	r4, #0
 8002700:	0194      	lsls	r4, r2, #6
 8002702:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002706:	018b      	lsls	r3, r1, #6
 8002708:	1a5b      	subs	r3, r3, r1
 800270a:	eb64 0402 	sbc.w	r4, r4, r2
 800270e:	f04f 0100 	mov.w	r1, #0
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	00e2      	lsls	r2, r4, #3
 8002718:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800271c:	00d9      	lsls	r1, r3, #3
 800271e:	460b      	mov	r3, r1
 8002720:	4614      	mov	r4, r2
 8002722:	195b      	adds	r3, r3, r5
 8002724:	eb44 0406 	adc.w	r4, r4, r6
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	02a2      	lsls	r2, r4, #10
 8002732:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002736:	0299      	lsls	r1, r3, #10
 8002738:	460b      	mov	r3, r1
 800273a:	4614      	mov	r4, r2
 800273c:	4618      	mov	r0, r3
 800273e:	4621      	mov	r1, r4
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f04f 0400 	mov.w	r4, #0
 8002746:	461a      	mov	r2, r3
 8002748:	4623      	mov	r3, r4
 800274a:	f7fd fdb9 	bl	80002c0 <__aeabi_uldivmod>
 800274e:	4603      	mov	r3, r0
 8002750:	460c      	mov	r4, r1
 8002752:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	0c1b      	lsrs	r3, r3, #16
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	3301      	adds	r3, #1
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	60bb      	str	r3, [r7, #8]
      break;
 800276e:	e002      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002772:	60bb      	str	r3, [r7, #8]
      break;
 8002774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002776:	68bb      	ldr	r3, [r7, #8]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	00f42400 	.word	0x00f42400
 8002788:	007a1200 	.word	0x007a1200

0800278c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000014 	.word	0x20000014

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027a8:	f7ff fff0 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027ac:	4601      	mov	r1, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0a9b      	lsrs	r3, r3, #10
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4a03      	ldr	r2, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	08015128 	.word	0x08015128

080027cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027d0:	f7ff ffdc 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027d4:	4601      	mov	r1, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	0b5b      	lsrs	r3, r3, #13
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4a03      	ldr	r2, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	08015128 	.word	0x08015128

080027f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e03f      	b.n	8002886 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f00e f980 	bl	8010b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f829 	bl	8002890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800284c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800285c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800286c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002890:	b5b0      	push	{r4, r5, r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028d0:	f023 030c 	bic.w	r3, r3, #12
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	430b      	orrs	r3, r1
 80028dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699a      	ldr	r2, [r3, #24]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028fc:	f040 80e4 	bne.w	8002ac8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4aab      	ldr	r2, [pc, #684]	; (8002bb4 <UART_SetConfig+0x324>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d004      	beq.n	8002914 <UART_SetConfig+0x84>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4aaa      	ldr	r2, [pc, #680]	; (8002bb8 <UART_SetConfig+0x328>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d16c      	bne.n	80029ee <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002914:	f7ff ff5a 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8002918:	4602      	mov	r2, r0
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	009a      	lsls	r2, r3, #2
 8002922:	441a      	add	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4aa3      	ldr	r2, [pc, #652]	; (8002bbc <UART_SetConfig+0x32c>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	011c      	lsls	r4, r3, #4
 8002938:	f7ff ff48 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 800293c:	4602      	mov	r2, r0
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	009a      	lsls	r2, r3, #2
 8002946:	441a      	add	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002952:	f7ff ff3b 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8002956:	4602      	mov	r2, r0
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009a      	lsls	r2, r3, #2
 8002960:	441a      	add	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	4a93      	ldr	r2, [pc, #588]	; (8002bbc <UART_SetConfig+0x32c>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	2264      	movs	r2, #100	; 0x64
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	1aeb      	subs	r3, r5, r3
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	3332      	adds	r3, #50	; 0x32
 8002980:	4a8e      	ldr	r2, [pc, #568]	; (8002bbc <UART_SetConfig+0x32c>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800298e:	441c      	add	r4, r3
 8002990:	f7ff ff1c 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8002994:	4602      	mov	r2, r0
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009a      	lsls	r2, r3, #2
 800299e:	441a      	add	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fbb2 f5f3 	udiv	r5, r2, r3
 80029aa:	f7ff ff0f 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 80029ae:	4602      	mov	r2, r0
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	009a      	lsls	r2, r3, #2
 80029b8:	441a      	add	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	4a7d      	ldr	r2, [pc, #500]	; (8002bbc <UART_SetConfig+0x32c>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2264      	movs	r2, #100	; 0x64
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	1aeb      	subs	r3, r5, r3
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	3332      	adds	r3, #50	; 0x32
 80029d8:	4a78      	ldr	r2, [pc, #480]	; (8002bbc <UART_SetConfig+0x32c>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	f003 0207 	and.w	r2, r3, #7
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4422      	add	r2, r4
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e154      	b.n	8002c98 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80029ee:	f7ff fed9 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009a      	lsls	r2, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	4a6c      	ldr	r2, [pc, #432]	; (8002bbc <UART_SetConfig+0x32c>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	011c      	lsls	r4, r3, #4
 8002a12:	f7ff fec7 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8002a16:	4602      	mov	r2, r0
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009a      	lsls	r2, r3, #2
 8002a20:	441a      	add	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a2c:	f7ff feba 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	009a      	lsls	r2, r3, #2
 8002a3a:	441a      	add	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	4a5d      	ldr	r2, [pc, #372]	; (8002bbc <UART_SetConfig+0x32c>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	2264      	movs	r2, #100	; 0x64
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	1aeb      	subs	r3, r5, r3
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	3332      	adds	r3, #50	; 0x32
 8002a5a:	4a58      	ldr	r2, [pc, #352]	; (8002bbc <UART_SetConfig+0x32c>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a68:	441c      	add	r4, r3
 8002a6a:	f7ff fe9b 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009a      	lsls	r2, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a84:	f7ff fe8e 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	009a      	lsls	r2, r3, #2
 8002a92:	441a      	add	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9e:	4a47      	ldr	r2, [pc, #284]	; (8002bbc <UART_SetConfig+0x32c>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	2264      	movs	r2, #100	; 0x64
 8002aa8:	fb02 f303 	mul.w	r3, r2, r3
 8002aac:	1aeb      	subs	r3, r5, r3
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	3332      	adds	r3, #50	; 0x32
 8002ab2:	4a42      	ldr	r2, [pc, #264]	; (8002bbc <UART_SetConfig+0x32c>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	f003 0207 	and.w	r2, r3, #7
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4422      	add	r2, r4
 8002ac4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002ac6:	e0e7      	b.n	8002c98 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a39      	ldr	r2, [pc, #228]	; (8002bb4 <UART_SetConfig+0x324>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d004      	beq.n	8002adc <UART_SetConfig+0x24c>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a38      	ldr	r2, [pc, #224]	; (8002bb8 <UART_SetConfig+0x328>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d171      	bne.n	8002bc0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002adc:	f7ff fe76 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009a      	lsls	r2, r3, #2
 8002aea:	441a      	add	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	4a31      	ldr	r2, [pc, #196]	; (8002bbc <UART_SetConfig+0x32c>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	011c      	lsls	r4, r3, #4
 8002b00:	f7ff fe64 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009a      	lsls	r2, r3, #2
 8002b0e:	441a      	add	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b1a:	f7ff fe57 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	009a      	lsls	r2, r3, #2
 8002b28:	441a      	add	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b34:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <UART_SetConfig+0x32c>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2264      	movs	r2, #100	; 0x64
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	1aeb      	subs	r3, r5, r3
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	3332      	adds	r3, #50	; 0x32
 8002b48:	4a1c      	ldr	r2, [pc, #112]	; (8002bbc <UART_SetConfig+0x32c>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b54:	441c      	add	r4, r3
 8002b56:	f7ff fe39 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009a      	lsls	r2, r3, #2
 8002b64:	441a      	add	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b70:	f7ff fe2c 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009a      	lsls	r2, r3, #2
 8002b7e:	441a      	add	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <UART_SetConfig+0x32c>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	2264      	movs	r2, #100	; 0x64
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	1aeb      	subs	r3, r5, r3
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	3332      	adds	r3, #50	; 0x32
 8002b9e:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <UART_SetConfig+0x32c>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	f003 020f 	and.w	r2, r3, #15
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4422      	add	r2, r4
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	e071      	b.n	8002c98 <UART_SetConfig+0x408>
 8002bb4:	40011000 	.word	0x40011000
 8002bb8:	40011400 	.word	0x40011400
 8002bbc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bc0:	f7ff fdf0 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	009a      	lsls	r2, r3, #2
 8002bce:	441a      	add	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bda:	4a31      	ldr	r2, [pc, #196]	; (8002ca0 <UART_SetConfig+0x410>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	011c      	lsls	r4, r3, #4
 8002be4:	f7ff fdde 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	009a      	lsls	r2, r3, #2
 8002bf2:	441a      	add	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	fbb2 f5f3 	udiv	r5, r2, r3
 8002bfe:	f7ff fdd1 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8002c02:	4602      	mov	r2, r0
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009a      	lsls	r2, r3, #2
 8002c0c:	441a      	add	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <UART_SetConfig+0x410>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2264      	movs	r2, #100	; 0x64
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	1aeb      	subs	r3, r5, r3
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	3332      	adds	r3, #50	; 0x32
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <UART_SetConfig+0x410>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c38:	441c      	add	r4, r3
 8002c3a:	f7ff fdb3 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	009a      	lsls	r2, r3, #2
 8002c48:	441a      	add	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c54:	f7ff fda6 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009a      	lsls	r2, r3, #2
 8002c62:	441a      	add	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <UART_SetConfig+0x410>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	2264      	movs	r2, #100	; 0x64
 8002c78:	fb02 f303 	mul.w	r3, r2, r3
 8002c7c:	1aeb      	subs	r3, r5, r3
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	3332      	adds	r3, #50	; 0x32
 8002c82:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <UART_SetConfig+0x410>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	f003 020f 	and.w	r2, r3, #15
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4422      	add	r2, r4
 8002c94:	609a      	str	r2, [r3, #8]
}
 8002c96:	e7ff      	b.n	8002c98 <UART_SetConfig+0x408>
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca0:	51eb851f 	.word	0x51eb851f

08002ca4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	f107 001c 	add.w	r0, r7, #28
 8002cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d122      	bne.n	8002d02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d105      	bne.n	8002cf6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa5c 	bl	80031b4 <USB_CoreReset>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	e01a      	b.n	8002d38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fa50 	bl	80031b4 <USB_CoreReset>
 8002d14:	4603      	mov	r3, r0
 8002d16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	639a      	str	r2, [r3, #56]	; 0x38
 8002d2a:	e005      	b.n	8002d38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10b      	bne.n	8002d56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f043 0206 	orr.w	r2, r3, #6
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f043 0220 	orr.w	r2, r3, #32
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d62:	b004      	add	sp, #16
 8002d64:	4770      	bx	lr

08002d66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f023 0201 	bic.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d106      	bne.n	8002db4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	e00b      	b.n	8002dcc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	e001      	b.n	8002dcc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e003      	b.n	8002dd4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002dcc:	2032      	movs	r0, #50	; 0x32
 8002dce:	f7fd fc69 	bl	80006a4 <HAL_Delay>

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ddc:	b084      	sub	sp, #16
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	e009      	b.n	8002e10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	3340      	adds	r3, #64	; 0x40
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	2200      	movs	r2, #0
 8002e08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	2b0e      	cmp	r3, #14
 8002e14:	d9f2      	bls.n	8002dfc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d112      	bne.n	8002e42 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	639a      	str	r2, [r3, #56]	; 0x38
 8002e40:	e00b      	b.n	8002e5a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002e60:	461a      	mov	r2, r3
 8002e62:	2300      	movs	r3, #0
 8002e64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e74:	461a      	mov	r2, r3
 8002e76:	680b      	ldr	r3, [r1, #0]
 8002e78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d10c      	bne.n	8002e9a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d104      	bne.n	8002e90 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e86:	2100      	movs	r1, #0
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f961 	bl	8003150 <USB_SetDevSpeed>
 8002e8e:	e008      	b.n	8002ea2 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e90:	2101      	movs	r1, #1
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f95c 	bl	8003150 <USB_SetDevSpeed>
 8002e98:	e003      	b.n	8002ea2 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e9a:	2103      	movs	r1, #3
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f957 	bl	8003150 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002ea2:	2110      	movs	r1, #16
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f90b 	bl	80030c0 <USB_FlushTxFifo>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f929 	bl	800310c <USB_FlushRxFifo>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2300      	movs	r3, #0
 8002ece:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2300      	movs	r3, #0
 8002eda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	e043      	b.n	8002f76 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f04:	d118      	bne.n	8002f38 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10a      	bne.n	8002f22 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e013      	b.n	8002f4a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e008      	b.n	8002f4a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f44:	461a      	mov	r2, r3
 8002f46:	2300      	movs	r3, #0
 8002f48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f56:	461a      	mov	r2, r3
 8002f58:	2300      	movs	r3, #0
 8002f5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	3301      	adds	r3, #1
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d3b7      	bcc.n	8002eee <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	e043      	b.n	800300c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f9a:	d118      	bne.n	8002fce <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e013      	b.n	8002fe0 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	e008      	b.n	8002fe0 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2300      	movs	r3, #0
 8002fde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fec:	461a      	mov	r2, r3
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffe:	461a      	mov	r2, r3
 8003000:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003004:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	3301      	adds	r3, #1
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	429a      	cmp	r2, r3
 8003012:	d3b7      	bcc.n	8002f84 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003026:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	2b01      	cmp	r3, #1
 800302c:	d111      	bne.n	8003052 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003034:	461a      	mov	r2, r3
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <USB_DevInit+0x2dc>)
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	f043 0303 	orr.w	r3, r3, #3
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800305e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	2b00      	cmp	r3, #0
 8003064:	d105      	bne.n	8003072 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f043 0210 	orr.w	r2, r3, #16
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <USB_DevInit+0x2e0>)
 8003078:	4313      	orrs	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800307e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f043 0208 	orr.w	r2, r3, #8
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003092:	2b01      	cmp	r3, #1
 8003094:	d107      	bne.n	80030a6 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030b2:	b004      	add	sp, #16
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	00800100 	.word	0x00800100
 80030bc:	803c3800 	.word	0x803c3800

080030c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	019b      	lsls	r3, r3, #6
 80030d2:	f043 0220 	orr.w	r2, r3, #32
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3301      	adds	r3, #1
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a09      	ldr	r2, [pc, #36]	; (8003108 <USB_FlushTxFifo+0x48>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e006      	b.n	80030fa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d0f0      	beq.n	80030da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	00030d40 	.word	0x00030d40

0800310c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2210      	movs	r2, #16
 800311c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3301      	adds	r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <USB_FlushRxFifo+0x40>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e006      	b.n	800313e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b10      	cmp	r3, #16
 800313a:	d0f0      	beq.n	800311e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	00030d40 	.word	0x00030d40

08003150 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	68f9      	ldr	r1, [r7, #12]
 800316c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003170:	4313      	orrs	r3, r2
 8003172:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80031a2:	2003      	movs	r0, #3
 80031a4:	f7fd fa7e 	bl	80006a4 <HAL_Delay>

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3301      	adds	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a13      	ldr	r2, [pc, #76]	; (8003218 <USB_CoreReset+0x64>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e01b      	b.n	800320a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	daf2      	bge.n	80031c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f043 0201 	orr.w	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3301      	adds	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4a09      	ldr	r2, [pc, #36]	; (8003218 <USB_CoreReset+0x64>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e006      	b.n	800320a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d0f0      	beq.n	80031ea <USB_CoreReset+0x36>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	00030d40 	.word	0x00030d40

0800321c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <fs_open+0x16>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <fs_open+0x1c>
     return ERR_ARG;
 8003232:	f06f 030f 	mvn.w	r3, #15
 8003236:	e028      	b.n	800328a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003238:	4b16      	ldr	r3, [pc, #88]	; (8003294 <fs_open+0x78>)
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e020      	b.n	8003280 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4619      	mov	r1, r3
 8003244:	6838      	ldr	r0, [r7, #0]
 8003246:	f7fc ffd3 	bl	80001f0 <strcmp>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d114      	bne.n	800327a <fs_open+0x5e>
      file->data = (const char *)f->data;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	7c1a      	ldrb	r2, [r3, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e007      	b.n	800328a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1db      	bne.n	800323e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8003286:	f06f 0305 	mvn.w	r3, #5
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	08014fd4 	.word	0x08014fd4

08003298 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	1ad3      	subs	r3, r2, r3
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state*
http_ssi_state_alloc(void)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80032d0:	20dc      	movs	r0, #220	; 0xdc
 80032d2:	f001 fc81 	bl	8004bd8 <mem_malloc>
 80032d6:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80032de:	22dc      	movs	r2, #220	; 0xdc
 80032e0:	2100      	movs	r1, #0
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f00d fe7a 	bl	8010fdc <memset>
  }
  return ret;
 80032e8:	687b      	ldr	r3, [r7, #4]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f001 fb2b 	bl	800495c <mem_free>
  }
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8003316:	2230      	movs	r2, #48	; 0x30
 8003318:	2100      	movs	r1, #0
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f00d fe5e 	bl	8010fdc <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800332e:	2030      	movs	r0, #48	; 0x30
 8003330:	f001 fc52 	bl	8004bd8 <mem_malloc>
 8003334:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <http_state_alloc+0x1a>
    http_state_init(ret);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff ffe6 	bl	800330e <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8003342:	687b      	ldr	r3, [r7, #4]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff99 	bl	8003298 <fs_close>
    hs->handle = NULL;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ffba 	bl	80032f2 <http_ssi_state_free>
    hs->ssi = NULL;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <http_state_eof+0x50>
    pbuf_free(hs->req);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4618      	mov	r0, r3
 8003392:	f002 fafd 	bl	8005990 <pbuf_free>
    hs->req = NULL;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <http_state_free+0x1a>
    http_state_eof(hs);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ffca 	bl	800334c <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f001 facf 	bl	800495c <mem_free>
  }
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d106      	bne.n	80033ea <http_write+0x22>
 80033dc:	4b2c      	ldr	r3, [pc, #176]	; (8003490 <http_write+0xc8>)
 80033de:	f44f 7204 	mov.w	r2, #528	; 0x210
 80033e2:	492c      	ldr	r1, [pc, #176]	; (8003494 <http_write+0xcc>)
 80033e4:	482c      	ldr	r0, [pc, #176]	; (8003498 <http_write+0xd0>)
 80033e6:	f00d fe01 	bl	8010fec <iprintf>
  len = *length;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80033f0:	8afb      	ldrh	r3, [r7, #22]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <http_write+0x32>
    return ERR_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e045      	b.n	8003486 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003400:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8003402:	8aba      	ldrh	r2, [r7, #20]
 8003404:	8afb      	ldrh	r3, [r7, #22]
 8003406:	429a      	cmp	r2, r3
 8003408:	d201      	bcs.n	800340e <http_write+0x46>
    len = max_len;
 800340a:	8abb      	ldrh	r3, [r7, #20]
 800340c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 8003416:	8afa      	ldrh	r2, [r7, #22]
 8003418:	8abb      	ldrh	r3, [r7, #20]
 800341a:	429a      	cmp	r2, r3
 800341c:	d901      	bls.n	8003422 <http_write+0x5a>
    len = max_len;
 800341e:	8abb      	ldrh	r3, [r7, #20]
 8003420:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	8afa      	ldrh	r2, [r7, #22]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f006 fd8b 	bl	8009f44 <tcp_write>
 800342e:	4603      	mov	r3, r0
 8003430:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8003432:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343a:	d10f      	bne.n	800345c <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 800344c:	2b08      	cmp	r3, #8
 800344e:	d902      	bls.n	8003456 <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 8003450:	2301      	movs	r3, #1
 8003452:	82fb      	strh	r3, [r7, #22]
 8003454:	e002      	b.n	800345c <http_write+0x94>
      } else {
        len /= 2;
 8003456:	8afb      	ldrh	r3, [r7, #22]
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800345c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d102      	bne.n	800346c <http_write+0xa4>
 8003466:	8afb      	ldrh	r3, [r7, #22]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d8da      	bhi.n	8003422 <http_write+0x5a>

  if (err == ERR_OK) {
 800346c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d103      	bne.n	800347c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8afa      	ldrh	r2, [r7, #22]
 8003478:	801a      	strh	r2, [r3, #0]
 800347a:	e002      	b.n	8003482 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 8003482:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	08011ef0 	.word	0x08011ef0
 8003494:	08011f28 	.word	0x08011f28
 8003498:	08011f38 	.word	0x08011f38

0800349c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	4613      	mov	r3, r2
 80034a8:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 80034aa:	2100      	movs	r1, #0
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f003 ff07 	bl	80072c0 <tcp_arg>
  tcp_recv(pcb, NULL);
 80034b2:	2100      	movs	r1, #0
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f003 ff15 	bl	80072e4 <tcp_recv>
  tcp_err(pcb, NULL);
 80034ba:	2100      	movs	r1, #0
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f003 ff53 	bl	8007368 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 80034c2:	2200      	movs	r2, #0
 80034c4:	2100      	movs	r1, #0
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f003 ff88 	bl	80073dc <tcp_poll>
  tcp_sent(pcb, NULL);
 80034cc:	2100      	movs	r1, #0
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f003 ff2a 	bl	8007328 <tcp_sent>
  if (hs != NULL) {
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 80034da:	68b8      	ldr	r0, [r7, #8]
 80034dc:	f7ff ff62 	bl	80033a4 <http_state_free>
  }

  if (abort_conn) {
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d004      	beq.n	80034f0 <http_close_or_abort_conn+0x54>
    tcp_abort(pcb);
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f002 ff54 	bl	8006394 <tcp_abort>
    return ERR_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e00f      	b.n	8003510 <http_close_or_abort_conn+0x74>
  }
  err = tcp_close(pcb);
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f002 fe85 	bl	8006200 <tcp_close>
 80034f6:	4603      	mov	r3, r0
 80034f8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80034fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d004      	beq.n	800350c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003502:	2204      	movs	r2, #4
 8003504:	4904      	ldr	r1, [pc, #16]	; (8003518 <http_close_or_abort_conn+0x7c>)
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f003 ff68 	bl	80073dc <tcp_poll>
  }
  return err;
 800350c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	080043c3 	.word	0x080043c3

0800351c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	6839      	ldr	r1, [r7, #0]
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffb6 	bl	800349c <http_close_or_abort_conn>
 8003530:	4603      	mov	r3, r0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003544:	6839      	ldr	r1, [r7, #0]
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ffe8 	bl	800351c <http_close_conn>
  }
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <get_tag_insert+0x1c>
 8003562:	4b51      	ldr	r3, [pc, #324]	; (80036a8 <get_tag_insert+0x154>)
 8003564:	f240 22fb 	movw	r2, #763	; 0x2fb
 8003568:	4950      	ldr	r1, [pc, #320]	; (80036ac <get_tag_insert+0x158>)
 800356a:	4851      	ldr	r0, [pc, #324]	; (80036b0 <get_tag_insert+0x15c>)
 800356c:	f00d fd3e 	bl	8010fec <iprintf>
  ssi = hs->ssi;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <get_tag_insert+0x36>
 800357c:	4b4a      	ldr	r3, [pc, #296]	; (80036a8 <get_tag_insert+0x154>)
 800357e:	f240 22fd 	movw	r2, #765	; 0x2fd
 8003582:	494c      	ldr	r1, [pc, #304]	; (80036b4 <get_tag_insert+0x160>)
 8003584:	484a      	ldr	r0, [pc, #296]	; (80036b0 <get_tag_insert+0x15c>)
 8003586:	f00d fd31 	bl	8010fec <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if(g_pfnSSIHandler
 800358a:	4b4b      	ldr	r3, [pc, #300]	; (80036b8 <get_tag_insert+0x164>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d02e      	beq.n	80035f0 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
     && g_ppcTags && g_iNumTags
 8003592:	4b4a      	ldr	r3, [pc, #296]	; (80036bc <get_tag_insert+0x168>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d02a      	beq.n	80035f0 <get_tag_insert+0x9c>
 800359a:	4b49      	ldr	r3, [pc, #292]	; (80036c0 <get_tag_insert+0x16c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d026      	beq.n	80035f0 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for(tag = 0; tag < g_iNumTags; tag++) {
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e01e      	b.n	80035e6 <get_tag_insert+0x92>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f103 0011 	add.w	r0, r3, #17
 80035ae:	4b43      	ldr	r3, [pc, #268]	; (80036bc <get_tag_insert+0x168>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7fc fe18 	bl	80001f0 <strcmp>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10c      	bne.n	80035e0 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 80035c6:	4b3c      	ldr	r3, [pc, #240]	; (80036b8 <get_tag_insert+0x164>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	f102 011a 	add.w	r1, r2, #26
 80035d0:	22c0      	movs	r2, #192	; 0xc0
 80035d2:	6978      	ldr	r0, [r7, #20]
 80035d4:	4798      	blx	r3
 80035d6:	4603      	mov	r3, r0
 80035d8:	461a      	mov	r2, r3
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	81da      	strh	r2, [r3, #14]
           );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 80035de:	e060      	b.n	80036a2 <get_tag_insert+0x14e>
    for(tag = 0; tag < g_iNumTags; tag++) {
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	3301      	adds	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <get_tag_insert+0x16c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	dbdb      	blt.n	80035a8 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	3311      	adds	r3, #17
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fc fe05 	bl	8000204 <strlen>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2ba6      	cmp	r3, #166	; 0xa6
 80035fe:	d818      	bhi.n	8003632 <get_tag_insert+0xde>
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	3311      	adds	r3, #17
 8003604:	4618      	mov	r0, r3
 8003606:	f7fc fdfd 	bl	8000204 <strlen>
 800360a:	4603      	mov	r3, r0
 800360c:	2b09      	cmp	r3, #9
 800360e:	d810      	bhi.n	8003632 <get_tag_insert+0xde>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	3311      	adds	r3, #17
 8003614:	4618      	mov	r0, r3
 8003616:	f7fc fdf5 	bl	8000204 <strlen>
 800361a:	4603      	mov	r3, r0
 800361c:	2ba6      	cmp	r3, #166	; 0xa6
 800361e:	d806      	bhi.n	800362e <get_tag_insert+0xda>
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	3311      	adds	r3, #17
 8003624:	4618      	mov	r0, r3
 8003626:	f7fc fded 	bl	8000204 <strlen>
 800362a:	4603      	mov	r3, r0
 800362c:	e002      	b.n	8003634 <get_tag_insert+0xe0>
 800362e:	23a7      	movs	r3, #167	; 0xa7
 8003630:	e000      	b.n	8003634 <get_tag_insert+0xe0>
 8003632:	2309      	movs	r3, #9
 8003634:	60fb      	str	r3, [r7, #12]
    LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	331a      	adds	r3, #26
 800363a:	2212      	movs	r2, #18
 800363c:	4921      	ldr	r1, [pc, #132]	; (80036c4 <get_tag_insert+0x170>)
 800363e:	4618      	mov	r0, r3
 8003640:	f00d fcc1 	bl	8010fc6 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	3311      	adds	r3, #17
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4619      	mov	r1, r3
 8003652:	f00d fcb8 	bl	8010fc6 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3312      	adds	r3, #18
 800365a:	3318      	adds	r3, #24
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4413      	add	r3, r2
 8003660:	3302      	adds	r3, #2
 8003662:	2207      	movs	r2, #7
 8003664:	4918      	ldr	r1, [pc, #96]	; (80036c8 <get_tag_insert+0x174>)
 8003666:	4618      	mov	r0, r3
 8003668:	f00d fcad 	bl	8010fc6 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3319      	adds	r3, #25
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4413      	add	r3, r2
 8003674:	2200      	movs	r2, #0
 8003676:	769a      	strb	r2, [r3, #26]

  len = strlen(ssi->tag_insert);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	331a      	adds	r3, #26
 800367c:	4618      	mov	r0, r3
 800367e:	f7fc fdc1 	bl	8000204 <strlen>
 8003682:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d306      	bcc.n	800369a <get_tag_insert+0x146>
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <get_tag_insert+0x154>)
 800368e:	f240 3236 	movw	r2, #822	; 0x336
 8003692:	490e      	ldr	r1, [pc, #56]	; (80036cc <get_tag_insert+0x178>)
 8003694:	4806      	ldr	r0, [pc, #24]	; (80036b0 <get_tag_insert+0x15c>)
 8003696:	f00d fca9 	bl	8010fec <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	b29a      	uxth	r2, r3
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	81da      	strh	r2, [r3, #14]
}
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	08011ef0 	.word	0x08011ef0
 80036ac:	08011f60 	.word	0x08011f60
 80036b0:	08011f38 	.word	0x08011f38
 80036b4:	08011f6c 	.word	0x08011f6c
 80036b8:	20000668 	.word	0x20000668
 80036bc:	20000670 	.word	0x20000670
 80036c0:	2000066c 	.word	0x2000066c
 80036c4:	08011f78 	.word	0x08011f78
 80036c8:	08011f8c 	.word	0x08011f8c
 80036cc:	08011f94 	.word	0x08011f94

080036d0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d105      	bne.n	80036ee <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 80036e2:	6839      	ldr	r1, [r7, #0]
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff28 	bl	800353a <http_eof>
    return 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e016      	b.n	800371c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fdda 	bl	80032ac <fs_bytes_left>
 80036f8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	dc05      	bgt.n	800370c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003700:	6839      	ldr	r1, [r7, #0]
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ff19 	bl	800353a <http_eof>
    return 0;
 8003708:	2300      	movs	r3, #0
 800370a:	e007      	b.n	800371c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <http_check_eof+0x54>)
 800370e:	f240 4283 	movw	r2, #1155	; 0x483
 8003712:	4905      	ldr	r1, [pc, #20]	; (8003728 <http_check_eof+0x58>)
 8003714:	4805      	ldr	r0, [pc, #20]	; (800372c <http_check_eof+0x5c>)
 8003716:	f00d fc69 	bl	8010fec <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800371a:	2301      	movs	r3, #1
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	08011ef0 	.word	0x08011ef0
 8003728:	08011fa4 	.word	0x08011fa4
 800372c:	08011f38 	.word	0x08011f38

08003730 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003746:	4293      	cmp	r3, r2
 8003748:	d803      	bhi.n	8003752 <http_send_data_nonssi+0x22>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	b29b      	uxth	r3, r3
 8003750:	e001      	b.n	8003756 <http_send_data_nonssi+0x26>
 8003752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003756:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	6999      	ldr	r1, [r3, #24]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf14      	ite	ne
 8003764:	2301      	movne	r3, #1
 8003766:	2300      	moveq	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f107 020c 	add.w	r2, r7, #12
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff fe2a 	bl	80033c8 <http_write>
 8003774:	4603      	mov	r3, r0
 8003776:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8003778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10d      	bne.n	800379c <http_send_data_nonssi+0x6c>
    data_to_send = 1;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	89ba      	ldrh	r2, [r7, #12]
 800378a:	441a      	add	r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	89ba      	ldrh	r2, [r7, #12]
 8003796:	1a9a      	subs	r2, r3, r2
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	75bb      	strb	r3, [r7, #22]

  struct http_ssi_state *ssi = hs->ssi;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <http_send_data_ssi+0x2c>
 80037c6:	4b98      	ldr	r3, [pc, #608]	; (8003a28 <http_send_data_ssi+0x280>)
 80037c8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80037cc:	4997      	ldr	r1, [pc, #604]	; (8003a2c <http_send_data_ssi+0x284>)
 80037ce:	4898      	ldr	r0, [pc, #608]	; (8003a30 <http_send_data_ssi+0x288>)
 80037d0:	f00d fc0c 	bl	8010fec <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = tcp_sndbuf(pcb);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80037da:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if(ssi->parsed > hs->file) {
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	f240 824f 	bls.w	8003c88 <http_send_data_ssi+0x4e0>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80037fa:	4293      	cmp	r3, r2
 80037fc:	dc07      	bgt.n	800380e <http_send_data_ssi+0x66>
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	b29b      	uxth	r3, r3
 800380c:	e001      	b.n	8003812 <http_send_data_ssi+0x6a>
 800380e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003812:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6999      	ldr	r1, [r3, #24]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf14      	ite	ne
 8003820:	2301      	movne	r3, #1
 8003822:	2300      	moveq	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f107 020e 	add.w	r2, r7, #14
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff fdcc 	bl	80033c8 <http_write>
 8003830:	4603      	mov	r3, r0
 8003832:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8003834:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10d      	bne.n	8003858 <http_send_data_ssi+0xb0>
      data_to_send = 1;
 800383c:	2301      	movs	r3, #1
 800383e:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	89fa      	ldrh	r2, [r7, #14]
 8003846:	441a      	add	r2, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	89fa      	ldrh	r2, [r7, #14]
 8003852:	1a9a      	subs	r2, r3, r2
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if(tcp_sndbuf(pcb) == 0) {
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 8212 	bne.w	8003c88 <http_send_data_ssi+0x4e0>
      return data_to_send;
 8003864:	7dbb      	ldrb	r3, [r7, #22]
 8003866:	e25b      	b.n	8003d20 <http_send_data_ssi+0x578>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while((ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8003868:	89fb      	ldrh	r3, [r7, #14]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <http_send_data_ssi+0xca>
      return data_to_send;
 800386e:	7dbb      	ldrb	r3, [r7, #22]
 8003870:	e256      	b.n	8003d20 <http_send_data_ssi+0x578>
    }
    switch(ssi->tag_state) {
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8003878:	2b04      	cmp	r3, #4
 800387a:	f200 8204 	bhi.w	8003c86 <http_send_data_ssi+0x4de>
 800387e:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <http_send_data_ssi+0xdc>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	08003899 	.word	0x08003899
 8003888:	080038cb 	.word	0x080038cb
 800388c:	08003923 	.word	0x08003923
 8003890:	08003a5f 	.word	0x08003a5f
 8003894:	08003b9d 	.word	0x08003b9d
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	781a      	ldrb	r2, [r3, #0]
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <http_send_data_ssi+0x28c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d106      	bne.n	80038b4 <http_send_data_ssi+0x10c>
          /* We found what could be the lead-in for a new tag so change
           * state appropriately. */
          ssi->tag_state = TAG_LEADIN;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
          ssi->tag_index = 1;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2201      	movs	r2, #1
 80038b2:	819a      	strh	r2, [r3, #12]
          ssi->tag_started = ssi->parsed;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	1e5a      	subs	r2, r3, #1
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	601a      	str	r2, [r3, #0]
        break;
 80038c8:	e1de      	b.n	8003c88 <http_send_data_ssi+0x4e0>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	899b      	ldrh	r3, [r3, #12]
 80038ce:	2b05      	cmp	r3, #5
 80038d0:	d107      	bne.n	80038e2 <http_send_data_ssi+0x13a>
          ssi->tag_index = 0;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2200      	movs	r2, #0
 80038d6:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 80038e0:	e1d2      	b.n	8003c88 <http_send_data_ssi+0x4e0>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	781a      	ldrb	r2, [r3, #0]
 80038e8:	4952      	ldr	r1, [pc, #328]	; (8003a34 <http_send_data_ssi+0x28c>)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	899b      	ldrh	r3, [r3, #12]
 80038ee:	440b      	add	r3, r1
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d106      	bne.n	8003904 <http_send_data_ssi+0x15c>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	899b      	ldrh	r3, [r3, #12]
 80038fa:	3301      	adds	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	819a      	strh	r2, [r3, #12]
 8003902:	e003      	b.n	800390c <http_send_data_ssi+0x164>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	1e5a      	subs	r2, r3, #1
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	601a      	str	r2, [r3, #0]
        }
        break;
 8003920:	e1b2      	b.n	8003c88 <http_send_data_ssi+0x4e0>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	899b      	ldrh	r3, [r3, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d11e      	bne.n	8003968 <http_send_data_ssi+0x1c0>
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b20      	cmp	r3, #32
 8003932:	d00e      	beq.n	8003952 <http_send_data_ssi+0x1aa>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800393a:	2b09      	cmp	r3, #9
 800393c:	d009      	beq.n	8003952 <http_send_data_ssi+0x1aa>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b0a      	cmp	r3, #10
 8003946:	d004      	beq.n	8003952 <http_send_data_ssi+0x1aa>
           (*ssi->parsed == '\r'))) {
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800394e:	2b0d      	cmp	r3, #13
 8003950:	d10a      	bne.n	8003968 <http_send_data_ssi+0x1c0>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	1e5a      	subs	r2, r3, #1
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	601a      	str	r2, [r3, #0]
          break;
 8003966:	e18f      	b.n	8003c88 <http_send_data_ssi+0x4e0>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	4b32      	ldr	r3, [pc, #200]	; (8003a38 <http_send_data_ssi+0x290>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d013      	beq.n	800399e <http_send_data_ssi+0x1f6>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	781b      	ldrb	r3, [r3, #0]
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800397c:	2b20      	cmp	r3, #32
 800397e:	d00e      	beq.n	800399e <http_send_data_ssi+0x1f6>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b09      	cmp	r3, #9
 8003988:	d009      	beq.n	800399e <http_send_data_ssi+0x1f6>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8003990:	2b0a      	cmp	r3, #10
 8003992:	d004      	beq.n	800399e <http_send_data_ssi+0x1f6>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b0d      	cmp	r3, #13
 800399c:	d132      	bne.n	8003a04 <http_send_data_ssi+0x25c>

          if(ssi->tag_index == 0) {
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	899b      	ldrh	r3, [r3, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d104      	bne.n	80039b0 <http_send_data_ssi+0x208>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
          if(ssi->tag_index == 0) {
 80039ae:	e04b      	b.n	8003a48 <http_send_data_ssi+0x2a0>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2203      	movs	r2, #3
 80039b4:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	899b      	ldrh	r3, [r3, #12]
 80039bc:	2bff      	cmp	r3, #255	; 0xff
 80039be:	d906      	bls.n	80039ce <http_send_data_ssi+0x226>
 80039c0:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <http_send_data_ssi+0x280>)
 80039c2:	f240 521b 	movw	r2, #1307	; 0x51b
 80039c6:	491d      	ldr	r1, [pc, #116]	; (8003a3c <http_send_data_ssi+0x294>)
 80039c8:	4819      	ldr	r0, [pc, #100]	; (8003a30 <http_send_data_ssi+0x288>)
 80039ca:	f00d fb0f 	bl	8010fec <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	899b      	ldrh	r3, [r3, #12]
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	741a      	strb	r2, [r3, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	899b      	ldrh	r3, [r3, #12]
 80039dc:	461a      	mov	r2, r3
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	2200      	movs	r2, #0
 80039e4:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <http_send_data_ssi+0x290>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d103      	bne.n	80039fc <http_send_data_ssi+0x254>
              ssi->tag_index = 1;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	2201      	movs	r2, #1
 80039f8:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 80039fa:	e025      	b.n	8003a48 <http_send_data_ssi+0x2a0>
            } else {
              ssi->tag_index = 0;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	2200      	movs	r2, #0
 8003a00:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 8003a02:	e021      	b.n	8003a48 <http_send_data_ssi+0x2a0>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	899b      	ldrh	r3, [r3, #12]
 8003a08:	2b07      	cmp	r3, #7
 8003a0a:	d819      	bhi.n	8003a40 <http_send_data_ssi+0x298>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	899b      	ldrh	r3, [r3, #12]
 8003a14:	1c59      	adds	r1, r3, #1
 8003a16:	b288      	uxth	r0, r1
 8003a18:	6939      	ldr	r1, [r7, #16]
 8003a1a:	8188      	strh	r0, [r1, #12]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	7812      	ldrb	r2, [r2, #0]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	440b      	add	r3, r1
 8003a24:	745a      	strb	r2, [r3, #17]
 8003a26:	e00f      	b.n	8003a48 <http_send_data_ssi+0x2a0>
 8003a28:	08011ef0 	.word	0x08011ef0
 8003a2c:	08011f6c 	.word	0x08011f6c
 8003a30:	08011f38 	.word	0x08011f38
 8003a34:	08011ee4 	.word	0x08011ee4
 8003a38:	08011eec 	.word	0x08011eec
 8003a3c:	08011fdc 	.word	0x08011fdc
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	1e5a      	subs	r2, r3, #1
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	601a      	str	r2, [r3, #0]

        break;
 8003a5c:	e114      	b.n	8003c88 <http_send_data_ssi+0x4e0>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	899b      	ldrh	r3, [r3, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d11e      	bne.n	8003aa4 <http_send_data_ssi+0x2fc>
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d00e      	beq.n	8003a8e <http_send_data_ssi+0x2e6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8003a76:	2b09      	cmp	r3, #9
 8003a78:	d009      	beq.n	8003a8e <http_send_data_ssi+0x2e6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b0a      	cmp	r3, #10
 8003a82:	d004      	beq.n	8003a8e <http_send_data_ssi+0x2e6>
           (*ssi->parsed == '\r'))) {
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003a8a:	2b0d      	cmp	r3, #13
 8003a8c:	d10a      	bne.n	8003aa4 <http_send_data_ssi+0x2fc>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	1e5a      	subs	r2, r3, #1
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	601a      	str	r2, [r3, #0]
          break;
 8003aa2:	e0f1      	b.n	8003c88 <http_send_data_ssi+0x4e0>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	499f      	ldr	r1, [pc, #636]	; (8003d28 <http_send_data_ssi+0x580>)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	899b      	ldrh	r3, [r3, #12]
 8003ab0:	440b      	add	r3, r1
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d162      	bne.n	8003b7e <http_send_data_ssi+0x3d6>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	1e5a      	subs	r2, r3, #1
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	601a      	str	r2, [r3, #0]

          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	899b      	ldrh	r3, [r3, #12]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d14d      	bne.n	8003b70 <http_send_data_ssi+0x3c8>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8003ad4:	6838      	ldr	r0, [r7, #0]
 8003ad6:	f7ff fd3d 	bl	8003554 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	2200      	movs	r2, #0
 8003ade:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
            ssi->tag_end = ssi->parsed;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	f240 80c5 	bls.w	8003c88 <http_send_data_ssi+0x4e0>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	461a      	mov	r2, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	dc07      	bgt.n	8003b22 <http_send_data_ssi+0x37a>
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	461a      	mov	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	e001      	b.n	8003b26 <http_send_data_ssi+0x37e>
 8003b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b26:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	6999      	ldr	r1, [r3, #24]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f107 020e 	add.w	r2, r7, #14
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff fc42 	bl	80033c8 <http_write>
 8003b44:	4603      	mov	r3, r0
 8003b46:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8003b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f040 809b 	bne.w	8003c88 <http_send_data_ssi+0x4e0>
                data_to_send = 1;
 8003b52:	2301      	movs	r3, #1
 8003b54:	75bb      	strb	r3, [r7, #22]
                if(ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += ssi->tag_end - ssi->tag_started;
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	89fa      	ldrh	r2, [r7, #14]
 8003b5c:	441a      	add	r2, r3
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	89fa      	ldrh	r2, [r7, #14]
 8003b68:	1a9a      	subs	r2, r3, r2
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8003b6e:	e08b      	b.n	8003c88 <http_send_data_ssi+0x4e0>
              }
            }
          } else {
            ssi->tag_index++;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	899b      	ldrh	r3, [r3, #12]
 8003b74:	3301      	adds	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	819a      	strh	r2, [r3, #12]
 8003b7c:	e084      	b.n	8003c88 <http_send_data_ssi+0x4e0>
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	1e5a      	subs	r2, r3, #1
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
        }
        break;
 8003b9a:	e075      	b.n	8003c88 <http_send_data_ssi+0x4e0>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if(ssi->tag_end > hs->file) {
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d93d      	bls.n	8003c24 <http_send_data_ssi+0x47c>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	461a      	mov	r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	dc07      	bgt.n	8003bcc <http_send_data_ssi+0x424>
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	e001      	b.n	8003bd0 <http_send_data_ssi+0x428>
 8003bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bd0:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8003bd2:	89fb      	ldrh	r3, [r7, #14]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d010      	beq.n	8003bfa <http_send_data_ssi+0x452>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	6999      	ldr	r1, [r3, #24]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f107 020e 	add.w	r2, r7, #14
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff fbea 	bl	80033c8 <http_write>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	75fb      	strb	r3, [r7, #23]
 8003bf8:	e001      	b.n	8003bfe <http_send_data_ssi+0x456>
          } else {
            err = ERR_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8003bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d140      	bne.n	8003c88 <http_send_data_ssi+0x4e0>
            data_to_send = 1;
 8003c06:	2301      	movs	r3, #1
 8003c08:	75bb      	strb	r3, [r7, #22]
            if(ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += ssi->tag_end - ssi->tag_started;
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	89fa      	ldrh	r2, [r7, #14]
 8003c10:	441a      	add	r2, r3
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	89fa      	ldrh	r2, [r7, #14]
 8003c1c:	1a9a      	subs	r2, r3, r2
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
 8003c22:	e031      	b.n	8003c88 <http_send_data_ssi+0x4e0>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if(ssi->tag_index < ssi->tag_insert_len) {
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	899a      	ldrh	r2, [r3, #12]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	89db      	ldrh	r3, [r3, #14]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d222      	bcs.n	8003c76 <http_send_data_ssi+0x4ce>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	89da      	ldrh	r2, [r3, #14]
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	899b      	ldrh	r3, [r3, #12]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	899b      	ldrh	r3, [r3, #12]
 8003c42:	3318      	adds	r3, #24
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4413      	add	r3, r2
 8003c48:	1c99      	adds	r1, r3, #2
 8003c4a:	f107 020e 	add.w	r2, r7, #14
 8003c4e:	2301      	movs	r3, #1
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff fbb9 	bl	80033c8 <http_write>
 8003c56:	4603      	mov	r3, r0
 8003c58:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8003c5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d112      	bne.n	8003c88 <http_send_data_ssi+0x4e0>
              data_to_send = 1;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	899a      	ldrh	r2, [r3, #12]
 8003c6a:	89fb      	ldrh	r3, [r7, #14]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	819a      	strh	r2, [r3, #12]
 8003c74:	e008      	b.n	8003c88 <http_send_data_ssi+0x4e0>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8003c84:	e000      	b.n	8003c88 <http_send_data_ssi+0x4e0>
        default:
          break;
 8003c86:	bf00      	nop
  while((ssi->parse_left) && (err == ERR_OK)) {
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d004      	beq.n	8003c9a <http_send_data_ssi+0x4f2>
 8003c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f43f ade7 	beq.w	8003868 <http_send_data_ssi+0xc0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d03c      	beq.n	8003d1e <http_send_data_ssi+0x576>
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d936      	bls.n	8003d1e <http_send_data_ssi+0x576>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	dc07      	bgt.n	8003cd4 <http_send_data_ssi+0x52c>
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	e001      	b.n	8003cd8 <http_send_data_ssi+0x530>
 8003cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cd8:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6999      	ldr	r1, [r3, #24]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	bf14      	ite	ne
 8003ce6:	2301      	movne	r3, #1
 8003ce8:	2300      	moveq	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f107 020e 	add.w	r2, r7, #14
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fb69 	bl	80033c8 <http_write>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8003cfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <http_send_data_ssi+0x576>
      data_to_send = 1;
 8003d02:	2301      	movs	r3, #1
 8003d04:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	89fa      	ldrh	r2, [r7, #14]
 8003d0c:	441a      	add	r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	89fa      	ldrh	r2, [r7, #14]
 8003d18:	1a9a      	subs	r2, r3, r2
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8003d1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	08011eec 	.word	0x08011eec

08003d2c <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <http_send+0x18>
    return 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e030      	b.n	8003da6 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d108      	bne.n	8003d5e <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8003d4c:	6839      	ldr	r1, [r7, #0]
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff fcbe 	bl	80036d0 <http_check_eof>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <http_send+0x32>
      return 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e023      	b.n	8003da6 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if(hs->ssi) {
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d006      	beq.n	8003d74 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 8003d66:	6839      	ldr	r1, [r7, #0]
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff fd1d 	bl	80037a8 <http_send_data_ssi>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	73fb      	strb	r3, [r7, #15]
 8003d72:	e005      	b.n	8003d80 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff fcda 	bl	8003730 <http_send_data_nonssi>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10d      	bne.n	8003da4 <http_send+0x78>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fa8d 	bl	80032ac <fs_bytes_left>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	dc05      	bgt.n	8003da4 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003d98:	6839      	ldr	r1, [r7, #0]
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fbcd 	bl	800353a <http_eof>
    return 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e000      	b.n	8003da6 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <http_get_404_file+0x80>)
 8003dbe:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4610      	mov	r0, r2
 8003dca:	f7ff fa27 	bl	800321c <fs_open>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8003dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d024      	beq.n	8003e24 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	4a15      	ldr	r2, [pc, #84]	; (8003e34 <http_get_404_file+0x84>)
 8003dde:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f7ff fa17 	bl	800321c <fs_open>
 8003dee:	4603      	mov	r3, r0
 8003df0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8003df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d014      	beq.n	8003e24 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	4a0e      	ldr	r2, [pc, #56]	; (8003e38 <http_get_404_file+0x88>)
 8003dfe:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f7ff fa07 	bl	800321c <fs_open>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8003e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
        return NULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e000      	b.n	8003e26 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8003e24:	687b      	ldr	r3, [r7, #4]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	08011ff4 	.word	0x08011ff4
 8003e34:	08012000 	.word	0x08012000
 8003e38:	0801200c 	.word	0x0801200c

08003e3c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08e      	sub	sp, #56	; 0x38
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <http_parse_request+0x24>
 8003e52:	4b65      	ldr	r3, [pc, #404]	; (8003fe8 <http_parse_request+0x1ac>)
 8003e54:	f240 727e 	movw	r2, #1918	; 0x77e
 8003e58:	4964      	ldr	r1, [pc, #400]	; (8003fec <http_parse_request+0x1b0>)
 8003e5a:	4865      	ldr	r0, [pc, #404]	; (8003ff0 <http_parse_request+0x1b4>)
 8003e5c:	f00d f8c6 	bl	8010fec <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <http_parse_request+0x38>
 8003e66:	4b60      	ldr	r3, [pc, #384]	; (8003fe8 <http_parse_request+0x1ac>)
 8003e68:	f240 727f 	movw	r2, #1919	; 0x77f
 8003e6c:	4961      	ldr	r1, [pc, #388]	; (8003ff4 <http_parse_request+0x1b8>)
 8003e6e:	4860      	ldr	r0, [pc, #384]	; (8003ff0 <http_parse_request+0x1b4>)
 8003e70:	f00d f8bc 	bl	8010fec <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d103      	bne.n	8003e84 <http_parse_request+0x48>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8003e84:	f06f 0307 	mvn.w	r3, #7
 8003e88:	e0aa      	b.n	8003fe0 <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e96:	621a      	str	r2, [r3, #32]
 8003e98:	e005      	b.n	8003ea6 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 fe43 	bl	8005b2c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8003ea6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ea8:	f001 fe1e 	bl	8005ae8 <pbuf_ref>

  if (hs->req->next != NULL) {
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d012      	beq.n	8003edc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	891b      	ldrh	r3, [r3, #8]
 8003ebc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	bf28      	it	cs
 8003ec4:	4613      	movcs	r3, r2
 8003ec6:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	6a18      	ldr	r0, [r3, #32]
 8003ecc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003ece:	2300      	movs	r3, #0
 8003ed0:	4949      	ldr	r1, [pc, #292]	; (8003ff8 <http_parse_request+0x1bc>)
 8003ed2:	f001 ff5d 	bl	8005d90 <pbuf_copy_partial>
    data = httpd_req_buf;
 8003ed6:	4b48      	ldr	r3, [pc, #288]	; (8003ff8 <http_parse_request+0x1bc>)
 8003ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eda:	e005      	b.n	8003ee8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	895b      	ldrh	r3, [r3, #10]
 8003ee6:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8003ee8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d963      	bls.n	8003fb6 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8003eee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4942      	ldr	r1, [pc, #264]	; (8003ffc <http_parse_request+0x1c0>)
 8003ef4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ef6:	f000 fbdc 	bl	80046b2 <lwip_strnstr>
 8003efa:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d059      	beq.n	8003fb6 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8003f06:	2204      	movs	r2, #4
 8003f08:	493d      	ldr	r1, [pc, #244]	; (8004000 <http_parse_request+0x1c4>)
 8003f0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f0c:	f00d f8c7 	bl	801109e <strncmp>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d117      	bne.n	8003f46 <http_parse_request+0x10a>
        sp1 = data + 3;
 8003f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f18:	3303      	adds	r3, #3
 8003f1a:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	461a      	mov	r2, r3
 8003f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3301      	adds	r3, #1
 8003f32:	8b7a      	ldrh	r2, [r7, #26]
 8003f34:	4933      	ldr	r1, [pc, #204]	; (8004004 <http_parse_request+0x1c8>)
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fbbb 	bl	80046b2 <lwip_strnstr>
 8003f3c:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d111      	bne.n	8003f68 <http_parse_request+0x12c>
 8003f44:	e006      	b.n	8003f54 <http_parse_request+0x118>
        data[4] = 0;
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	3304      	adds	r3, #4
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8003f4e:	f06f 030f 	mvn.w	r3, #15
 8003f52:	e045      	b.n	8003fe0 <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	3301      	adds	r3, #1
 8003f58:	8b7a      	ldrh	r2, [r7, #26]
 8003f5a:	4928      	ldr	r1, [pc, #160]	; (8003ffc <http_parse_request+0x1c0>)
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fba8 	bl	80046b2 <lwip_strnstr>
 8003f62:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8003f64:	2301      	movs	r3, #1
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	3201      	adds	r2, #1
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01e      	beq.n	8003fb6 <http_parse_request+0x17a>
 8003f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d91a      	bls.n	8003fb6 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8003f80:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003f82:	461a      	mov	r2, r3
 8003f84:	4920      	ldr	r1, [pc, #128]	; (8004008 <http_parse_request+0x1cc>)
 8003f86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f88:	f000 fb93 	bl	80046b2 <lwip_strnstr>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d011      	beq.n	8003fb6 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3301      	adds	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8003f9e:	8b3b      	ldrh	r3, [r7, #24]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8003fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003faa:	6979      	ldr	r1, [r7, #20]
 8003fac:	68b8      	ldr	r0, [r7, #8]
 8003fae:	f000 f82d 	bl	800400c <http_find_file>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	e014      	b.n	8003fe0 <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f001 fd7c 	bl	8005ab8 <pbuf_clen>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	891b      	ldrh	r3, [r3, #8]
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d205      	bcs.n	8003fdc <http_parse_request+0x1a0>
 8003fd0:	8a7b      	ldrh	r3, [r7, #18]
 8003fd2:	2b05      	cmp	r3, #5
 8003fd4:	d802      	bhi.n	8003fdc <http_parse_request+0x1a0>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8003fd6:	f06f 0304 	mvn.w	r3, #4
 8003fda:	e001      	b.n	8003fe0 <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8003fdc:	f06f 030f 	mvn.w	r3, #15
  }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3738      	adds	r7, #56	; 0x38
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	08011ef0 	.word	0x08011ef0
 8003fec:	08012018 	.word	0x08012018
 8003ff0:	08011f38 	.word	0x08011f38
 8003ff4:	08011f60 	.word	0x08011f60
 8003ff8:	20000098 	.word	0x20000098
 8003ffc:	08012024 	.word	0x08012024
 8004000:	08012028 	.word	0x08012028
 8004004:	08012030 	.word	0x08012030
 8004008:	08012034 	.word	0x08012034

0800400c <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b094      	sub	sp, #80	; 0x50
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	643b      	str	r3, [r7, #64]	; 0x40
  char *params = NULL;
 800401c:	2300      	movs	r3, #0
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4618      	mov	r0, r3
 800402a:	f7fc f8eb 	bl	8000204 <strlen>
 800402e:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	2b00      	cmp	r3, #0
 8004034:	d06c      	beq.n	8004110 <http_find_file+0x104>
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	3b01      	subs	r3, #1
 800403c:	4413      	add	r3, r2
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b2f      	cmp	r3, #47	; 0x2f
 8004042:	d165      	bne.n	8004110 <http_find_file+0x104>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004044:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8004046:	4a78      	ldr	r2, [pc, #480]	; (8004228 <http_find_file+0x21c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d102      	bne.n	8004052 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	2b01      	cmp	r3, #1
 8004050:	d15e      	bne.n	8004110 <http_find_file+0x104>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	3b01      	subs	r3, #1
 8004056:	2b3f      	cmp	r3, #63	; 0x3f
 8004058:	bf28      	it	cs
 800405a:	233f      	movcs	r3, #63	; 0x3f
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004068:	4619      	mov	r1, r3
 800406a:	486f      	ldr	r0, [pc, #444]	; (8004228 <http_find_file+0x21c>)
 800406c:	f00c ffab 	bl	8010fc6 <memcpy>
      http_uri_buf[copy_len] = 0;
 8004070:	4a6d      	ldr	r2, [pc, #436]	; (8004228 <http_find_file+0x21c>)
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	4413      	add	r3, r2
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800407a:	2300      	movs	r3, #0
 800407c:	647b      	str	r3, [r7, #68]	; 0x44
 800407e:	e044      	b.n	800410a <http_find_file+0xfe>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	2b00      	cmp	r3, #0
 8004084:	d022      	beq.n	80040cc <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800408c:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d018      	beq.n	80040c6 <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 8004094:	4a65      	ldr	r2, [pc, #404]	; (800422c <http_find_file+0x220>)
 8004096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004098:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800409c:	4618      	mov	r0, r3
 800409e:	f7fc f8b1 	bl	8000204 <strlen>
 80040a2:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	4293      	cmp	r3, r2
 80040aa:	bf28      	it	cs
 80040ac:	4613      	movcs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	4a5d      	ldr	r2, [pc, #372]	; (8004228 <http_find_file+0x21c>)
 80040b4:	1898      	adds	r0, r3, r2
 80040b6:	4a5d      	ldr	r2, [pc, #372]	; (800422c <http_find_file+0x220>)
 80040b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4619      	mov	r1, r3
 80040c2:	f00c ff80 	bl	8010fc6 <memcpy>
        }
        file_name = http_uri_buf;
 80040c6:	4b58      	ldr	r3, [pc, #352]	; (8004228 <http_find_file+0x21c>)
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ca:	e004      	b.n	80040d6 <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 80040cc:	4a57      	ldr	r2, [pc, #348]	; (800422c <http_find_file+0x220>)
 80040ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff f89e 	bl	800321c <fs_open>
 80040e0:	4603      	mov	r3, r0
 80040e2:	75fb      	strb	r3, [r7, #23]
      if(err == ERR_OK) {
 80040e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <http_find_file+0xf8>
        uri = file_name;
 80040ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ee:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	643b      	str	r3, [r7, #64]	; 0x40
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
 80040f4:	4a4d      	ldr	r2, [pc, #308]	; (800422c <http_find_file+0x220>)
 80040f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4413      	add	r3, r2
 80040fc:	791b      	ldrb	r3, [r3, #4]
 80040fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* LWIP_HTTPD_SSI */
        break;
 8004102:	e005      	b.n	8004110 <http_find_file+0x104>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004106:	3301      	adds	r3, #1
 8004108:	647b      	str	r3, [r7, #68]	; 0x44
 800410a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800410c:	2b04      	cmp	r3, #4
 800410e:	d9b7      	bls.n	8004080 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8004110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d16d      	bne.n	80041f2 <http_find_file+0x1e6>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	213f      	movs	r1, #63	; 0x3f
 800411a:	4618      	mov	r0, r3
 800411c:	f00c ffb2 	bl	8011084 <strchr>
 8004120:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (params != NULL) {
 8004122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <http_find_file+0x128>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8004128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
      params++;
 800412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004130:	3301      	adds	r3, #1
 8004132:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff f86e 	bl	800321c <fs_open>
 8004140:	4603      	mov	r3, r0
 8004142:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8004144:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <http_find_file+0x146>
       file = &hs->file_handle;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	643b      	str	r3, [r7, #64]	; 0x40
 8004150:	e006      	b.n	8004160 <http_find_file+0x154>
    } else {
      file = http_get_404_file(hs, &uri);
 8004152:	f107 0308 	add.w	r3, r7, #8
 8004156:	4619      	mov	r1, r3
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff fe29 	bl	8003db0 <http_get_404_file>
 800415e:	6438      	str	r0, [r7, #64]	; 0x40
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8004160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d045      	beq.n	80041f2 <http_find_file+0x1e6>
      /* See if we have been asked for an shtml file and, if so,
         enable tag checking. */
      const char* ext = NULL, *sub;
 8004166:	2300      	movs	r3, #0
 8004168:	633b      	str	r3, [r7, #48]	; 0x30
      char* param = (char*)strstr(uri, "?");
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	213f      	movs	r1, #63	; 0x3f
 800416e:	4618      	mov	r0, r3
 8004170:	f00c ff88 	bl	8011084 <strchr>
 8004174:	6138      	str	r0, [r7, #16]
      if (param != NULL) {
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <http_find_file+0x176>
         /* separate uri from parameters for now, set back later */
         *param = 0;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
      }
      sub = uri;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
      ext = uri;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	633b      	str	r3, [r7, #48]	; 0x30
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800418a:	212e      	movs	r1, #46	; 0x2e
 800418c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800418e:	f00c ff79 	bl	8011084 <strchr>
 8004192:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004194:	e009      	b.n	80041aa <http_find_file+0x19e>
      {
         ext = sub;
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	633b      	str	r3, [r7, #48]	; 0x30
         sub++;
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	3301      	adds	r3, #1
 800419e:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 80041a0:	212e      	movs	r1, #46	; 0x2e
 80041a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041a4:	f00c ff6e 	bl	8011084 <strchr>
 80041a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f2      	bne.n	8004196 <http_find_file+0x18a>
      }
      tag_check = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80041b6:	2300      	movs	r3, #0
 80041b8:	647b      	str	r3, [r7, #68]	; 0x44
 80041ba:	e011      	b.n	80041e0 <http_find_file+0x1d4>
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80041bc:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <http_find_file+0x224>)
 80041be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c4:	4619      	mov	r1, r3
 80041c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041c8:	f000 faa9 	bl	800471e <lwip_stricmp>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <http_find_file+0x1ce>
          tag_check = 1;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          break;
 80041d8:	e005      	b.n	80041e6 <http_find_file+0x1da>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80041da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041dc:	3301      	adds	r3, #1
 80041de:	647b      	str	r3, [r7, #68]	; 0x44
 80041e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d9ea      	bls.n	80041bc <http_find_file+0x1b0>
        }
      }
      if (param != NULL) {
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <http_find_file+0x1e6>
         *param = '?';
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	223f      	movs	r2, #63	; 0x3f
 80041f0:	701a      	strb	r2, [r3, #0]
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80041f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <http_find_file+0x1fa>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80041f8:	f107 0308 	add.w	r3, r7, #8
 80041fc:	4619      	mov	r1, r3
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff fdd6 	bl	8003db0 <http_get_404_file>
 8004204:	6438      	str	r0, [r7, #64]	; 0x40
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f80b 	bl	8004234 <http_init_file>
 800421e:	4603      	mov	r3, r0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3748      	adds	r7, #72	; 0x48
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20000498 	.word	0x20000498
 800422c:	08014ff8 	.word	0x08014ff8
 8004230:	08014fe8 	.word	0x08014fe8

08004234 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d073      	beq.n	8004330 <http_init_file+0xfc>
    /* file opened, initialise struct http_state */
#if LWIP_HTTPD_SSI
    if (tag_check) {
 8004248:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01c      	beq.n	800428a <http_init_file+0x56>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8004250:	f7ff f83b 	bl	80032ca <http_ssi_state_alloc>
 8004254:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d016      	beq.n	800428a <http_init_file+0x56>
        ssi->tag_index = 0;
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2200      	movs	r2, #0
 8004260:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
        ssi->parsed = file->data;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	461a      	mov	r2, r3
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	da06      	bge.n	80042ae <http_init_file+0x7a>
 80042a0:	4b2c      	ldr	r3, [pc, #176]	; (8004354 <http_init_file+0x120>)
 80042a2:	f640 02cf 	movw	r2, #2255	; 0x8cf
 80042a6:	492c      	ldr	r1, [pc, #176]	; (8004358 <http_init_file+0x124>)
 80042a8:	482c      	ldr	r0, [pc, #176]	; (800435c <http_init_file+0x128>)
 80042aa:	f00c fe9f 	bl	8010fec <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	461a      	mov	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	7c1b      	ldrb	r3, [r3, #16]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <http_init_file+0xa8>
 80042ce:	4b21      	ldr	r3, [pc, #132]	; (8004354 <http_init_file+0x120>)
 80042d0:	f640 02df 	movw	r2, #2271	; 0x8df
 80042d4:	4922      	ldr	r1, [pc, #136]	; (8004360 <http_init_file+0x12c>)
 80042d6:	4821      	ldr	r0, [pc, #132]	; (800435c <http_init_file+0x128>)
 80042d8:	f00c fe88 	bl	8010fec <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d033      	beq.n	800434a <http_init_file+0x116>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	7c1b      	ldrb	r3, [r3, #16]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d02c      	beq.n	800434a <http_init_file+0x116>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6998      	ldr	r0, [r3, #24]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	461a      	mov	r2, r3
 80042fa:	491a      	ldr	r1, [pc, #104]	; (8004364 <http_init_file+0x130>)
 80042fc:	f000 f9d9 	bl	80046b2 <lwip_strnstr>
 8004300:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d020      	beq.n	800434a <http_init_file+0x116>
        size_t diff = file_start + 4 - hs->file;
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	3304      	adds	r3, #4
 800430c:	461a      	mov	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	441a      	add	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	1ad2      	subs	r2, r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	625a      	str	r2, [r3, #36]	; 0x24
 800432e:	e00c      	b.n	800434a <http_init_file+0x116>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	08011ef0 	.word	0x08011ef0
 8004358:	0801203c 	.word	0x0801203c
 800435c:	08011f38 	.word	0x08011f38
 8004360:	0801205c 	.word	0x0801205c
 8004364:	08012034 	.word	0x08012034

08004368 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <http_err+0x1c>
    http_state_free(hs);
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f7ff f810 	bl	80033a4 <http_state_free>
  }
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	4613      	mov	r3, r2
 8004398:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <http_sent+0x1c>
    return ERR_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	e008      	b.n	80043ba <http_sent+0x2e>
  }

  hs->retries = 0;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 80043b0:	6979      	ldr	r1, [r7, #20]
 80043b2:	68b8      	ldr	r0, [r7, #8]
 80043b4:	f7ff fcba 	bl	8003d2c <http_send>

  return ERR_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d107      	bne.n	80043e6 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80043d6:	2100      	movs	r1, #0
 80043d8:	6838      	ldr	r0, [r7, #0]
 80043da:	f7ff f89f 	bl	800351c <http_close_conn>
 80043de:	4603      	mov	r3, r0
 80043e0:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	e024      	b.n	8004430 <http_poll+0x6e>
  } else {
    hs->retries++;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ec:	3301      	adds	r3, #1
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d105      	bne.n	800440c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8004400:	68f9      	ldr	r1, [r7, #12]
 8004402:	6838      	ldr	r0, [r7, #0]
 8004404:	f7ff f88a 	bl	800351c <http_close_conn>
      return ERR_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	e011      	b.n	8004430 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00d      	beq.n	800442e <http_poll+0x6c>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 800441a:	68f9      	ldr	r1, [r7, #12]
 800441c:	6838      	ldr	r0, [r7, #0]
 800441e:	f7ff fc85 	bl	8003d2c <http_send>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 8004428:	6838      	ldr	r0, [r7, #0]
 800442a:	f006 fa3d 	bl	800a8a8 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800444a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <http_recv+0x26>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <http_recv+0x26>
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d111      	bne.n	8004482 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	891b      	ldrh	r3, [r3, #8]
 8004468:	4619      	mov	r1, r3
 800446a:	68b8      	ldr	r0, [r7, #8]
 800446c:	f002 f938 	bl	80066e0 <tcp_recved>
      pbuf_free(p);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f001 fa8d 	bl	8005990 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8004476:	6979      	ldr	r1, [r7, #20]
 8004478:	68b8      	ldr	r0, [r7, #8]
 800447a:	f7ff f84f 	bl	800351c <http_close_conn>
    return ERR_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e055      	b.n	800452e <http_recv+0xf6>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	891b      	ldrh	r3, [r3, #8]
 8004486:	4619      	mov	r1, r3
 8004488:	68b8      	ldr	r0, [r7, #8]
 800448a:	f002 f929 	bl	80066e0 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d147      	bne.n	8004526 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	6979      	ldr	r1, [r7, #20]
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff fcce 	bl	8003e3c <http_parse_request>
 80044a0:	4603      	mov	r3, r0
 80044a2:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80044a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d015      	beq.n	80044d8 <http_recv+0xa0>
 80044ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80044b0:	f113 0f05 	cmn.w	r3, #5
 80044b4:	d010      	beq.n	80044d8 <http_recv+0xa0>
 80044b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80044ba:	f113 0f10 	cmn.w	r3, #16
 80044be:	d00b      	beq.n	80044d8 <http_recv+0xa0>
 80044c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80044c4:	f113 0f08 	cmn.w	r3, #8
 80044c8:	d006      	beq.n	80044d8 <http_recv+0xa0>
 80044ca:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <http_recv+0x100>)
 80044cc:	f640 12b5 	movw	r2, #2485	; 0x9b5
 80044d0:	491a      	ldr	r1, [pc, #104]	; (800453c <http_recv+0x104>)
 80044d2:	481b      	ldr	r0, [pc, #108]	; (8004540 <http_recv+0x108>)
 80044d4:	f00c fd8a 	bl	8010fec <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80044d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80044dc:	f113 0f05 	cmn.w	r3, #5
 80044e0:	d00b      	beq.n	80044fa <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <http_recv+0xc2>
          pbuf_free(hs->req);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 fa4e 	bl	8005990 <pbuf_free>
          hs->req = NULL;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2200      	movs	r2, #0
 80044f8:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f001 fa48 	bl	8005990 <pbuf_free>
      if (parsed == ERR_OK) {
 8004500:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d104      	bne.n	8004512 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 8004508:	6979      	ldr	r1, [r7, #20]
 800450a:	68b8      	ldr	r0, [r7, #8]
 800450c:	f7ff fc0e 	bl	8003d2c <http_send>
 8004510:	e00c      	b.n	800452c <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8004512:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004516:	f113 0f10 	cmn.w	r3, #16
 800451a:	d107      	bne.n	800452c <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800451c:	6979      	ldr	r1, [r7, #20]
 800451e:	68b8      	ldr	r0, [r7, #8]
 8004520:	f7fe fffc 	bl	800351c <http_close_conn>
 8004524:	e002      	b.n	800452c <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f001 fa32 	bl	8005990 <pbuf_free>
    }
  }
  return ERR_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	08011ef0 	.word	0x08011ef0
 800453c:	08012088 	.word	0x08012088
 8004540:	08011f38 	.word	0x08011f38

08004544 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	4613      	mov	r3, r2
 8004550:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8004552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <http_accept+0x1c>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d102      	bne.n	8004566 <http_accept+0x22>
    return ERR_VAL;
 8004560:	f06f 0305 	mvn.w	r3, #5
 8004564:	e025      	b.n	80045b2 <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004566:	2101      	movs	r1, #1
 8004568:	68b8      	ldr	r0, [r7, #8]
 800456a:	f002 fd10 	bl	8006f8e <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800456e:	f7fe fedb 	bl	8003328 <http_state_alloc>
 8004572:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d102      	bne.n	8004580 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	e018      	b.n	80045b2 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 8004586:	6979      	ldr	r1, [r7, #20]
 8004588:	68b8      	ldr	r0, [r7, #8]
 800458a:	f002 fe99 	bl	80072c0 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800458e:	490b      	ldr	r1, [pc, #44]	; (80045bc <http_accept+0x78>)
 8004590:	68b8      	ldr	r0, [r7, #8]
 8004592:	f002 fea7 	bl	80072e4 <tcp_recv>
  tcp_err(pcb, http_err);
 8004596:	490a      	ldr	r1, [pc, #40]	; (80045c0 <http_accept+0x7c>)
 8004598:	68b8      	ldr	r0, [r7, #8]
 800459a:	f002 fee5 	bl	8007368 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800459e:	2204      	movs	r2, #4
 80045a0:	4908      	ldr	r1, [pc, #32]	; (80045c4 <http_accept+0x80>)
 80045a2:	68b8      	ldr	r0, [r7, #8]
 80045a4:	f002 ff1a 	bl	80073dc <tcp_poll>
  tcp_sent(pcb, http_sent);
 80045a8:	4907      	ldr	r1, [pc, #28]	; (80045c8 <http_accept+0x84>)
 80045aa:	68b8      	ldr	r0, [r7, #8]
 80045ac:	f002 febc 	bl	8007328 <tcp_sent>

  return ERR_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	08004439 	.word	0x08004439
 80045c0:	08004369 	.word	0x08004369
 80045c4:	080043c3 	.word	0x080043c3
 80045c8:	0800438d 	.word	0x0800438d

080045cc <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 80045d2:	202e      	movs	r0, #46	; 0x2e
 80045d4:	f002 fe66 	bl	80072a4 <tcp_new_ip_type>
 80045d8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d106      	bne.n	80045ee <httpd_init+0x22>
 80045e0:	4b19      	ldr	r3, [pc, #100]	; (8004648 <httpd_init+0x7c>)
 80045e2:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 80045e6:	4919      	ldr	r1, [pc, #100]	; (800464c <httpd_init+0x80>)
 80045e8:	4819      	ldr	r0, [pc, #100]	; (8004650 <httpd_init+0x84>)
 80045ea:	f00c fcff 	bl	8010fec <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 80045ee:	2101      	movs	r1, #1
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f002 fccc 	bl	8006f8e <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 80045f6:	2250      	movs	r2, #80	; 0x50
 80045f8:	4916      	ldr	r1, [pc, #88]	; (8004654 <httpd_init+0x88>)
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f001 fed6 	bl	80063ac <tcp_bind>
 8004600:	4603      	mov	r3, r0
 8004602:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8004604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d006      	beq.n	800461a <httpd_init+0x4e>
 800460c:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <httpd_init+0x7c>)
 800460e:	f640 2215 	movw	r2, #2581	; 0xa15
 8004612:	4911      	ldr	r1, [pc, #68]	; (8004658 <httpd_init+0x8c>)
 8004614:	480e      	ldr	r0, [pc, #56]	; (8004650 <httpd_init+0x84>)
 8004616:	f00c fce9 	bl	8010fec <iprintf>
  pcb = tcp_listen(pcb);
 800461a:	21ff      	movs	r1, #255	; 0xff
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f001 ff67 	bl	80064f0 <tcp_listen_with_backlog>
 8004622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <httpd_init+0x6c>
 800462a:	4b07      	ldr	r3, [pc, #28]	; (8004648 <httpd_init+0x7c>)
 800462c:	f640 2217 	movw	r2, #2583	; 0xa17
 8004630:	490a      	ldr	r1, [pc, #40]	; (800465c <httpd_init+0x90>)
 8004632:	4807      	ldr	r0, [pc, #28]	; (8004650 <httpd_init+0x84>)
 8004634:	f00c fcda 	bl	8010fec <iprintf>
  tcp_accept(pcb, http_accept);
 8004638:	4909      	ldr	r1, [pc, #36]	; (8004660 <httpd_init+0x94>)
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f002 feb6 	bl	80073ac <tcp_accept>
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	08011ef0 	.word	0x08011ef0
 800464c:	080120b4 	.word	0x080120b4
 8004650:	08011f38 	.word	0x08011f38
 8004654:	08015100 	.word	0x08015100
 8004658:	080120d0 	.word	0x080120d0
 800465c:	080120ec 	.word	0x080120ec
 8004660:	08004545 	.word	0x08004545

08004664 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800466e:	88fb      	ldrh	r3, [r7, #6]
 8004670:	ba5b      	rev16	r3, r3
 8004672:	b29b      	uxth	r3, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	061a      	lsls	r2, r3, #24
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	0e1b      	lsrs	r3, r3, #24
 80046a4:	4313      	orrs	r3, r2
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b086      	sub	sp, #24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 80046be:	68b8      	ldr	r0, [r7, #8]
 80046c0:	f7fb fda0 	bl	8000204 <strlen>
 80046c4:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	e022      	b.n	8004716 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e012      	b.n	80046fc <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	781a      	ldrb	r2, [r3, #0]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d109      	bne.n	80046f6 <lwip_strnstr+0x44>
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	6978      	ldr	r0, [r7, #20]
 80046e8:	f00c fcd9 	bl	801109e <strncmp>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	e00f      	b.n	8004716 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	3301      	adds	r3, #1
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <lwip_strnstr+0x62>
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	441a      	add	r2, r3
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	440b      	add	r3, r1
 8004710:	429a      	cmp	r2, r3
 8004712:	d9e0      	bls.n	80046d6 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	607a      	str	r2, [r7, #4]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	603a      	str	r2, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	7bbb      	ldrb	r3, [r7, #14]
 8004740:	429a      	cmp	r2, r3
 8004742:	d016      	beq.n	8004772 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	f043 0320 	orr.w	r3, r3, #32
 800474a:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800474c:	7b7b      	ldrb	r3, [r7, #13]
 800474e:	2b60      	cmp	r3, #96	; 0x60
 8004750:	d90c      	bls.n	800476c <lwip_stricmp+0x4e>
 8004752:	7b7b      	ldrb	r3, [r7, #13]
 8004754:	2b7a      	cmp	r3, #122	; 0x7a
 8004756:	d809      	bhi.n	800476c <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8004758:	7bbb      	ldrb	r3, [r7, #14]
 800475a:	f043 0320 	orr.w	r3, r3, #32
 800475e:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8004760:	7b7a      	ldrb	r2, [r7, #13]
 8004762:	7b3b      	ldrb	r3, [r7, #12]
 8004764:	429a      	cmp	r2, r3
 8004766:	d003      	beq.n	8004770 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8004768:	2301      	movs	r3, #1
 800476a:	e006      	b.n	800477a <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800476c:	2301      	movs	r3, #1
 800476e:	e004      	b.n	800477a <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8004770:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1d7      	bne.n	8004728 <lwip_stricmp+0xa>
  return 0;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004790:	f000 f8a6 	bl	80048e0 <mem_init>
  memp_init();
 8004794:	f000 fb3a 	bl	8004e0c <memp_init>
  pbuf_init();
  netif_init();
 8004798:	f000 fbf2 	bl	8004f80 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800479c:	f006 feb2 	bl	800b504 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80047a0:	f001 fb70 	bl	8005e84 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80047a4:	f006 fd90 	bl	800b2c8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80047a8:	bf00      	nop
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80047b8:	4b40      	ldr	r3, [pc, #256]	; (80048bc <plug_holes+0x10c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d206      	bcs.n	80047d0 <plug_holes+0x20>
 80047c2:	4b3f      	ldr	r3, [pc, #252]	; (80048c0 <plug_holes+0x110>)
 80047c4:	f240 125d 	movw	r2, #349	; 0x15d
 80047c8:	493e      	ldr	r1, [pc, #248]	; (80048c4 <plug_holes+0x114>)
 80047ca:	483f      	ldr	r0, [pc, #252]	; (80048c8 <plug_holes+0x118>)
 80047cc:	f00c fc0e 	bl	8010fec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80047d0:	4b3e      	ldr	r3, [pc, #248]	; (80048cc <plug_holes+0x11c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d306      	bcc.n	80047e8 <plug_holes+0x38>
 80047da:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <plug_holes+0x110>)
 80047dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80047e0:	493b      	ldr	r1, [pc, #236]	; (80048d0 <plug_holes+0x120>)
 80047e2:	4839      	ldr	r0, [pc, #228]	; (80048c8 <plug_holes+0x118>)
 80047e4:	f00c fc02 	bl	8010fec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	791b      	ldrb	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d006      	beq.n	80047fe <plug_holes+0x4e>
 80047f0:	4b33      	ldr	r3, [pc, #204]	; (80048c0 <plug_holes+0x110>)
 80047f2:	f240 125f 	movw	r2, #351	; 0x15f
 80047f6:	4937      	ldr	r1, [pc, #220]	; (80048d4 <plug_holes+0x124>)
 80047f8:	4833      	ldr	r0, [pc, #204]	; (80048c8 <plug_holes+0x118>)
 80047fa:	f00c fbf7 	bl	8010fec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004806:	d906      	bls.n	8004816 <plug_holes+0x66>
 8004808:	4b2d      	ldr	r3, [pc, #180]	; (80048c0 <plug_holes+0x110>)
 800480a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800480e:	4932      	ldr	r1, [pc, #200]	; (80048d8 <plug_holes+0x128>)
 8004810:	482d      	ldr	r0, [pc, #180]	; (80048c8 <plug_holes+0x118>)
 8004812:	f00c fbeb 	bl	8010fec <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8004816:	4b29      	ldr	r3, [pc, #164]	; (80048bc <plug_holes+0x10c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	8812      	ldrh	r2, [r2, #0]
 800481e:	4413      	add	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	429a      	cmp	r2, r3
 8004828:	d01f      	beq.n	800486a <plug_holes+0xba>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	791b      	ldrb	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d11b      	bne.n	800486a <plug_holes+0xba>
 8004832:	4b26      	ldr	r3, [pc, #152]	; (80048cc <plug_holes+0x11c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	429a      	cmp	r2, r3
 800483a:	d016      	beq.n	800486a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <plug_holes+0x12c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	429a      	cmp	r2, r3
 8004844:	d102      	bne.n	800484c <plug_holes+0x9c>
      lfree = mem;
 8004846:	4a25      	ldr	r2, [pc, #148]	; (80048dc <plug_holes+0x12c>)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	881a      	ldrh	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a19      	ldr	r2, [pc, #100]	; (80048bc <plug_holes+0x10c>)
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	1a99      	subs	r1, r3, r2
 800485c:	4b17      	ldr	r3, [pc, #92]	; (80048bc <plug_holes+0x10c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	8812      	ldrh	r2, [r2, #0]
 8004864:	4413      	add	r3, r2
 8004866:	b28a      	uxth	r2, r1
 8004868:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800486a:	4b14      	ldr	r3, [pc, #80]	; (80048bc <plug_holes+0x10c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	8852      	ldrh	r2, [r2, #2]
 8004872:	4413      	add	r3, r2
 8004874:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d01a      	beq.n	80048b4 <plug_holes+0x104>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	791b      	ldrb	r3, [r3, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d116      	bne.n	80048b4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <plug_holes+0x12c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d102      	bne.n	8004896 <plug_holes+0xe6>
      lfree = pmem;
 8004890:	4a12      	ldr	r2, [pc, #72]	; (80048dc <plug_holes+0x12c>)
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	881a      	ldrh	r2, [r3, #0]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4a06      	ldr	r2, [pc, #24]	; (80048bc <plug_holes+0x10c>)
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	1a99      	subs	r1, r3, r2
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <plug_holes+0x10c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	8812      	ldrh	r2, [r2, #0]
 80048ae:	4413      	add	r3, r2
 80048b0:	b28a      	uxth	r2, r1
 80048b2:	805a      	strh	r2, [r3, #2]
  }
}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	200004d8 	.word	0x200004d8
 80048c0:	0801214c 	.word	0x0801214c
 80048c4:	0801217c 	.word	0x0801217c
 80048c8:	08012194 	.word	0x08012194
 80048cc:	200004dc 	.word	0x200004dc
 80048d0:	080121bc 	.word	0x080121bc
 80048d4:	080121d8 	.word	0x080121d8
 80048d8:	080121f4 	.word	0x080121f4
 80048dc:	200004e0 	.word	0x200004e0

080048e0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80048e6:	4b19      	ldr	r3, [pc, #100]	; (800494c <mem_init+0x6c>)
 80048e8:	3303      	adds	r3, #3
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	461a      	mov	r2, r3
 80048f0:	4b17      	ldr	r3, [pc, #92]	; (8004950 <mem_init+0x70>)
 80048f2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80048f4:	4b16      	ldr	r3, [pc, #88]	; (8004950 <mem_init+0x70>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004900:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800490e:	4b10      	ldr	r3, [pc, #64]	; (8004950 <mem_init+0x70>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8004916:	4a0f      	ldr	r2, [pc, #60]	; (8004954 <mem_init+0x74>)
 8004918:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800491a:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <mem_init+0x74>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2201      	movs	r2, #1
 8004920:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <mem_init+0x74>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800492a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <mem_init+0x74>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004934:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <mem_init+0x70>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a07      	ldr	r2, [pc, #28]	; (8004958 <mem_init+0x78>)
 800493c:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	2000068c 	.word	0x2000068c
 8004950:	200004d8 	.word	0x200004d8
 8004954:	200004dc 	.word	0x200004dc
 8004958:	200004e0 	.word	0x200004e0

0800495c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d043      	beq.n	80049f2 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d006      	beq.n	8004982 <mem_free+0x26>
 8004974:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <mem_free+0xa4>)
 8004976:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800497a:	4922      	ldr	r1, [pc, #136]	; (8004a04 <mem_free+0xa8>)
 800497c:	4822      	ldr	r0, [pc, #136]	; (8004a08 <mem_free+0xac>)
 800497e:	f00c fb35 	bl	8010fec <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004982:	4b22      	ldr	r3, [pc, #136]	; (8004a0c <mem_free+0xb0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	d304      	bcc.n	8004996 <mem_free+0x3a>
 800498c:	4b20      	ldr	r3, [pc, #128]	; (8004a10 <mem_free+0xb4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	429a      	cmp	r2, r3
 8004994:	d306      	bcc.n	80049a4 <mem_free+0x48>
 8004996:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <mem_free+0xa4>)
 8004998:	f240 12af 	movw	r2, #431	; 0x1af
 800499c:	491d      	ldr	r1, [pc, #116]	; (8004a14 <mem_free+0xb8>)
 800499e:	481a      	ldr	r0, [pc, #104]	; (8004a08 <mem_free+0xac>)
 80049a0:	f00c fb24 	bl	8010fec <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <mem_free+0xb0>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d323      	bcc.n	80049f6 <mem_free+0x9a>
 80049ae:	4b18      	ldr	r3, [pc, #96]	; (8004a10 <mem_free+0xb4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d21e      	bcs.n	80049f6 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3b08      	subs	r3, #8
 80049bc:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	791b      	ldrb	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <mem_free+0x78>
 80049c6:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <mem_free+0xa4>)
 80049c8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80049cc:	4912      	ldr	r1, [pc, #72]	; (8004a18 <mem_free+0xbc>)
 80049ce:	480e      	ldr	r0, [pc, #56]	; (8004a08 <mem_free+0xac>)
 80049d0:	f00c fb0c 	bl	8010fec <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <mem_free+0xc0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d202      	bcs.n	80049ea <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80049e4:	4a0d      	ldr	r2, [pc, #52]	; (8004a1c <mem_free+0xc0>)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f7ff fee0 	bl	80047b0 <plug_holes>
 80049f0:	e002      	b.n	80049f8 <mem_free+0x9c>
    return;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <mem_free+0x9c>
    return;
 80049f6:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	0801214c 	.word	0x0801214c
 8004a04:	08012220 	.word	0x08012220
 8004a08:	08012194 	.word	0x08012194
 8004a0c:	200004d8 	.word	0x200004d8
 8004a10:	200004dc 	.word	0x200004dc
 8004a14:	08012244 	.word	0x08012244
 8004a18:	0801225c 	.word	0x0801225c
 8004a1c:	200004e0 	.word	0x200004e0

08004a20 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8004a2c:	887b      	ldrh	r3, [r7, #2]
 8004a2e:	3303      	adds	r3, #3
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8004a38:	887b      	ldrh	r3, [r7, #2]
 8004a3a:	2b0b      	cmp	r3, #11
 8004a3c:	d801      	bhi.n	8004a42 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004a3e:	230c      	movs	r3, #12
 8004a40:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8004a42:	887b      	ldrh	r3, [r7, #2]
 8004a44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a48:	d901      	bls.n	8004a4e <mem_trim+0x2e>
    return NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e0b1      	b.n	8004bb2 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004a4e:	4b5b      	ldr	r3, [pc, #364]	; (8004bbc <mem_trim+0x19c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d304      	bcc.n	8004a62 <mem_trim+0x42>
 8004a58:	4b59      	ldr	r3, [pc, #356]	; (8004bc0 <mem_trim+0x1a0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d306      	bcc.n	8004a70 <mem_trim+0x50>
 8004a62:	4b58      	ldr	r3, [pc, #352]	; (8004bc4 <mem_trim+0x1a4>)
 8004a64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a68:	4957      	ldr	r1, [pc, #348]	; (8004bc8 <mem_trim+0x1a8>)
 8004a6a:	4858      	ldr	r0, [pc, #352]	; (8004bcc <mem_trim+0x1ac>)
 8004a6c:	f00c fabe 	bl	8010fec <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004a70:	4b52      	ldr	r3, [pc, #328]	; (8004bbc <mem_trim+0x19c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d304      	bcc.n	8004a84 <mem_trim+0x64>
 8004a7a:	4b51      	ldr	r3, [pc, #324]	; (8004bc0 <mem_trim+0x1a0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d301      	bcc.n	8004a88 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	e094      	b.n	8004bb2 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3b08      	subs	r3, #8
 8004a8c:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	4a4a      	ldr	r2, [pc, #296]	; (8004bbc <mem_trim+0x19c>)
 8004a92:	6812      	ldr	r2, [r2, #0]
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	881a      	ldrh	r2, [r3, #0]
 8004a9c:	8a7b      	ldrh	r3, [r7, #18]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b08      	subs	r3, #8
 8004aa4:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004aa6:	887a      	ldrh	r2, [r7, #2]
 8004aa8:	8a3b      	ldrh	r3, [r7, #16]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d906      	bls.n	8004abc <mem_trim+0x9c>
 8004aae:	4b45      	ldr	r3, [pc, #276]	; (8004bc4 <mem_trim+0x1a4>)
 8004ab0:	f240 2206 	movw	r2, #518	; 0x206
 8004ab4:	4946      	ldr	r1, [pc, #280]	; (8004bd0 <mem_trim+0x1b0>)
 8004ab6:	4845      	ldr	r0, [pc, #276]	; (8004bcc <mem_trim+0x1ac>)
 8004ab8:	f00c fa98 	bl	8010fec <iprintf>
  if (newsize > size) {
 8004abc:	887a      	ldrh	r2, [r7, #2]
 8004abe:	8a3b      	ldrh	r3, [r7, #16]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d901      	bls.n	8004ac8 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e074      	b.n	8004bb2 <mem_trim+0x192>
  }
  if (newsize == size) {
 8004ac8:	887a      	ldrh	r2, [r7, #2]
 8004aca:	8a3b      	ldrh	r3, [r7, #16]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d101      	bne.n	8004ad4 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	e06e      	b.n	8004bb2 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8004ad4:	4b39      	ldr	r3, [pc, #228]	; (8004bbc <mem_trim+0x19c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	8812      	ldrh	r2, [r2, #0]
 8004adc:	4413      	add	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	791b      	ldrb	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d131      	bne.n	8004b4c <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004aee:	8a7a      	ldrh	r2, [r7, #18]
 8004af0:	887b      	ldrh	r3, [r7, #2]
 8004af2:	4413      	add	r3, r2
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3308      	adds	r3, #8
 8004af8:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8004afa:	4b36      	ldr	r3, [pc, #216]	; (8004bd4 <mem_trim+0x1b4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d105      	bne.n	8004b10 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8004b04:	4b2d      	ldr	r3, [pc, #180]	; (8004bbc <mem_trim+0x19c>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	897b      	ldrh	r3, [r7, #10]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	4a31      	ldr	r2, [pc, #196]	; (8004bd4 <mem_trim+0x1b4>)
 8004b0e:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004b10:	4b2a      	ldr	r3, [pc, #168]	; (8004bbc <mem_trim+0x19c>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	897b      	ldrh	r3, [r7, #10]
 8004b16:	4413      	add	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	893a      	ldrh	r2, [r7, #8]
 8004b24:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8a7a      	ldrh	r2, [r7, #18]
 8004b2a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	897a      	ldrh	r2, [r7, #10]
 8004b30:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b3a:	d039      	beq.n	8004bb0 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004b3c:	4b1f      	ldr	r3, [pc, #124]	; (8004bbc <mem_trim+0x19c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	8812      	ldrh	r2, [r2, #0]
 8004b44:	4413      	add	r3, r2
 8004b46:	897a      	ldrh	r2, [r7, #10]
 8004b48:	805a      	strh	r2, [r3, #2]
 8004b4a:	e031      	b.n	8004bb0 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004b4c:	887b      	ldrh	r3, [r7, #2]
 8004b4e:	f103 0214 	add.w	r2, r3, #20
 8004b52:	8a3b      	ldrh	r3, [r7, #16]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d82b      	bhi.n	8004bb0 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004b58:	8a7a      	ldrh	r2, [r7, #18]
 8004b5a:	887b      	ldrh	r3, [r7, #2]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3308      	adds	r3, #8
 8004b62:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004b64:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <mem_trim+0x19c>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	897b      	ldrh	r3, [r7, #10]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8004b6e:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <mem_trim+0x1b4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d202      	bcs.n	8004b7e <mem_trim+0x15e>
      lfree = mem2;
 8004b78:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <mem_trim+0x1b4>)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	881a      	ldrh	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8a7a      	ldrh	r2, [r7, #18]
 8004b90:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	897a      	ldrh	r2, [r7, #10]
 8004b96:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ba0:	d006      	beq.n	8004bb0 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <mem_trim+0x19c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	8812      	ldrh	r2, [r2, #0]
 8004baa:	4413      	add	r3, r2
 8004bac:	897a      	ldrh	r2, [r7, #10]
 8004bae:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004bb0:	687b      	ldr	r3, [r7, #4]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	200004d8 	.word	0x200004d8
 8004bc0:	200004dc 	.word	0x200004dc
 8004bc4:	0801214c 	.word	0x0801214c
 8004bc8:	08012270 	.word	0x08012270
 8004bcc:	08012194 	.word	0x08012194
 8004bd0:	08012288 	.word	0x08012288
 8004bd4:	200004e0 	.word	0x200004e0

08004bd8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <mem_malloc+0x14>
    return NULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e0c8      	b.n	8004d7e <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	3303      	adds	r3, #3
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8004bf8:	88fb      	ldrh	r3, [r7, #6]
 8004bfa:	2b0b      	cmp	r3, #11
 8004bfc:	d801      	bhi.n	8004c02 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004bfe:	230c      	movs	r3, #12
 8004c00:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c08:	d901      	bls.n	8004c0e <mem_malloc+0x36>
    return NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e0b7      	b.n	8004d7e <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004c0e:	4b5e      	ldr	r3, [pc, #376]	; (8004d88 <mem_malloc+0x1b0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	4b5d      	ldr	r3, [pc, #372]	; (8004d8c <mem_malloc+0x1b4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	83fb      	strh	r3, [r7, #30]
 8004c1c:	e0a7      	b.n	8004d6e <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8004c1e:	4b5b      	ldr	r3, [pc, #364]	; (8004d8c <mem_malloc+0x1b4>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	8bfb      	ldrh	r3, [r7, #30]
 8004c24:	4413      	add	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	791b      	ldrb	r3, [r3, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f040 8098 	bne.w	8004d62 <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	8bfb      	ldrh	r3, [r7, #30]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f1a3 0208 	sub.w	r2, r3, #8
 8004c40:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8004c42:	429a      	cmp	r2, r3
 8004c44:	f0c0 808d 	bcc.w	8004d62 <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	8bfb      	ldrh	r3, [r7, #30]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f1a3 0208 	sub.w	r2, r3, #8
 8004c56:	88fb      	ldrh	r3, [r7, #6]
 8004c58:	3314      	adds	r3, #20
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d327      	bcc.n	8004cae <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004c5e:	8bfa      	ldrh	r2, [r7, #30]
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	4413      	add	r3, r2
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3308      	adds	r3, #8
 8004c68:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004c6a:	4b48      	ldr	r3, [pc, #288]	; (8004d8c <mem_malloc+0x1b4>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	8a7b      	ldrh	r3, [r7, #18]
 8004c70:	4413      	add	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	881a      	ldrh	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8bfa      	ldrh	r2, [r7, #30]
 8004c86:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	8a7a      	ldrh	r2, [r7, #18]
 8004c8c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2201      	movs	r2, #1
 8004c92:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c9c:	d00a      	beq.n	8004cb4 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004c9e:	4b3b      	ldr	r3, [pc, #236]	; (8004d8c <mem_malloc+0x1b4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	8812      	ldrh	r2, [r2, #0]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	8a7a      	ldrh	r2, [r7, #18]
 8004caa:	805a      	strh	r2, [r3, #2]
 8004cac:	e002      	b.n	8004cb4 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004cb4:	4b34      	ldr	r3, [pc, #208]	; (8004d88 <mem_malloc+0x1b0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d127      	bne.n	8004d0e <mem_malloc+0x136>
          struct mem *cur = lfree;
 8004cbe:	4b32      	ldr	r3, [pc, #200]	; (8004d88 <mem_malloc+0x1b0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004cc4:	e005      	b.n	8004cd2 <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8004cc6:	4b31      	ldr	r3, [pc, #196]	; (8004d8c <mem_malloc+0x1b4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	8812      	ldrh	r2, [r2, #0]
 8004cce:	4413      	add	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	791b      	ldrb	r3, [r3, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d004      	beq.n	8004ce4 <mem_malloc+0x10c>
 8004cda:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <mem_malloc+0x1b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d1f0      	bne.n	8004cc6 <mem_malloc+0xee>
          }
          lfree = cur;
 8004ce4:	4a28      	ldr	r2, [pc, #160]	; (8004d88 <mem_malloc+0x1b0>)
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004cea:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <mem_malloc+0x1b0>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <mem_malloc+0x1b8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d00b      	beq.n	8004d0e <mem_malloc+0x136>
 8004cf6:	4b24      	ldr	r3, [pc, #144]	; (8004d88 <mem_malloc+0x1b0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	791b      	ldrb	r3, [r3, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d006      	beq.n	8004d0e <mem_malloc+0x136>
 8004d00:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <mem_malloc+0x1bc>)
 8004d02:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004d06:	4924      	ldr	r1, [pc, #144]	; (8004d98 <mem_malloc+0x1c0>)
 8004d08:	4824      	ldr	r0, [pc, #144]	; (8004d9c <mem_malloc+0x1c4>)
 8004d0a:	f00c f96f 	bl	8010fec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4413      	add	r3, r2
 8004d14:	3308      	adds	r3, #8
 8004d16:	4a1e      	ldr	r2, [pc, #120]	; (8004d90 <mem_malloc+0x1b8>)
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d906      	bls.n	8004d2c <mem_malloc+0x154>
 8004d1e:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <mem_malloc+0x1bc>)
 8004d20:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8004d24:	491e      	ldr	r1, [pc, #120]	; (8004da0 <mem_malloc+0x1c8>)
 8004d26:	481d      	ldr	r0, [pc, #116]	; (8004d9c <mem_malloc+0x1c4>)
 8004d28:	f00c f960 	bl	8010fec <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d006      	beq.n	8004d44 <mem_malloc+0x16c>
 8004d36:	4b17      	ldr	r3, [pc, #92]	; (8004d94 <mem_malloc+0x1bc>)
 8004d38:	f240 22d6 	movw	r2, #726	; 0x2d6
 8004d3c:	4919      	ldr	r1, [pc, #100]	; (8004da4 <mem_malloc+0x1cc>)
 8004d3e:	4817      	ldr	r0, [pc, #92]	; (8004d9c <mem_malloc+0x1c4>)
 8004d40:	f00c f954 	bl	8010fec <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d006      	beq.n	8004d5c <mem_malloc+0x184>
 8004d4e:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <mem_malloc+0x1bc>)
 8004d50:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8004d54:	4914      	ldr	r1, [pc, #80]	; (8004da8 <mem_malloc+0x1d0>)
 8004d56:	4811      	ldr	r0, [pc, #68]	; (8004d9c <mem_malloc+0x1c4>)
 8004d58:	f00c f948 	bl	8010fec <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	3308      	adds	r3, #8
 8004d60:	e00d      	b.n	8004d7e <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8004d62:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <mem_malloc+0x1b4>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	8bfb      	ldrh	r3, [r7, #30]
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004d6e:	8bfa      	ldrh	r2, [r7, #30]
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004d76:	429a      	cmp	r2, r3
 8004d78:	f4ff af51 	bcc.w	8004c1e <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3720      	adds	r7, #32
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	200004e0 	.word	0x200004e0
 8004d8c:	200004d8 	.word	0x200004d8
 8004d90:	200004dc 	.word	0x200004dc
 8004d94:	0801214c 	.word	0x0801214c
 8004d98:	080122a8 	.word	0x080122a8
 8004d9c:	08012194 	.word	0x08012194
 8004da0:	080122c4 	.word	0x080122c4
 8004da4:	080122f4 	.word	0x080122f4
 8004da8:	08012324 	.word	0x08012324

08004dac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	3303      	adds	r3, #3
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	e011      	b.n	8004df2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4413      	add	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3301      	adds	r3, #1
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	885b      	ldrh	r3, [r3, #2]
 8004df6:	461a      	mov	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	dbe7      	blt.n	8004dce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004e12:	2300      	movs	r3, #0
 8004e14:	80fb      	strh	r3, [r7, #6]
 8004e16:	e009      	b.n	8004e2c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	4a08      	ldr	r2, [pc, #32]	; (8004e3c <memp_init+0x30>)
 8004e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff ffc3 	bl	8004dac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	80fb      	strh	r3, [r7, #6]
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d9f2      	bls.n	8004e18 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	0801508c 	.word	0x0801508c

08004e40 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d012      	beq.n	8004e7c <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d006      	beq.n	8004e78 <do_memp_malloc_pool+0x38>
 8004e6a:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <do_memp_malloc_pool+0x48>)
 8004e6c:	f240 1249 	movw	r2, #329	; 0x149
 8004e70:	4906      	ldr	r1, [pc, #24]	; (8004e8c <do_memp_malloc_pool+0x4c>)
 8004e72:	4807      	ldr	r0, [pc, #28]	; (8004e90 <do_memp_malloc_pool+0x50>)
 8004e74:	f00c f8ba 	bl	8010fec <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	e000      	b.n	8004e7e <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	08012348 	.word	0x08012348
 8004e8c:	08012378 	.word	0x08012378
 8004e90:	0801239c 	.word	0x0801239c

08004e94 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d908      	bls.n	8004eb6 <memp_malloc+0x22>
 8004ea4:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <memp_malloc+0x3c>)
 8004ea6:	f240 1287 	movw	r2, #391	; 0x187
 8004eaa:	490a      	ldr	r1, [pc, #40]	; (8004ed4 <memp_malloc+0x40>)
 8004eac:	480a      	ldr	r0, [pc, #40]	; (8004ed8 <memp_malloc+0x44>)
 8004eae:	f00c f89d 	bl	8010fec <iprintf>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e008      	b.n	8004ec8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	4a08      	ldr	r2, [pc, #32]	; (8004edc <memp_malloc+0x48>)
 8004eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff ffbe 	bl	8004e40 <do_memp_malloc_pool>
 8004ec4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	08012348 	.word	0x08012348
 8004ed4:	080123d8 	.word	0x080123d8
 8004ed8:	0801239c 	.word	0x0801239c
 8004edc:	0801508c 	.word	0x0801508c

08004ee0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d006      	beq.n	8004f02 <do_memp_free_pool+0x22>
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <do_memp_free_pool+0x40>)
 8004ef6:	f240 129d 	movw	r2, #413	; 0x19d
 8004efa:	490a      	ldr	r1, [pc, #40]	; (8004f24 <do_memp_free_pool+0x44>)
 8004efc:	480a      	ldr	r0, [pc, #40]	; (8004f28 <do_memp_free_pool+0x48>)
 8004efe:	f00c f875 	bl	8010fec <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	08012348 	.word	0x08012348
 8004f24:	080123f8 	.word	0x080123f8
 8004f28:	0801239c 	.word	0x0801239c

08004f2c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	6039      	str	r1, [r7, #0]
 8004f36:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d907      	bls.n	8004f4e <memp_free+0x22>
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <memp_free+0x44>)
 8004f40:	f240 12db 	movw	r2, #475	; 0x1db
 8004f44:	490b      	ldr	r1, [pc, #44]	; (8004f74 <memp_free+0x48>)
 8004f46:	480c      	ldr	r0, [pc, #48]	; (8004f78 <memp_free+0x4c>)
 8004f48:	f00c f850 	bl	8010fec <iprintf>
 8004f4c:	e00c      	b.n	8004f68 <memp_free+0x3c>

  if (mem == NULL) {
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <memp_free+0x50>)
 8004f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5c:	6839      	ldr	r1, [r7, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff ffbe 	bl	8004ee0 <do_memp_free_pool>
 8004f64:	e000      	b.n	8004f68 <memp_free+0x3c>
    return;
 8004f66:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	08012348 	.word	0x08012348
 8004f74:	08012418 	.word	0x08012418
 8004f78:	0801239c 	.word	0x0801239c
 8004f7c:	0801508c 	.word	0x0801508c

08004f80 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004f84:	bf00      	nop
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <netif_add+0x20>
 8004fa4:	4b23      	ldr	r3, [pc, #140]	; (8005034 <netif_add+0xa4>)
 8004fa6:	22fb      	movs	r2, #251	; 0xfb
 8004fa8:	4923      	ldr	r1, [pc, #140]	; (8005038 <netif_add+0xa8>)
 8004faa:	4824      	ldr	r0, [pc, #144]	; (800503c <netif_add+0xac>)
 8004fac:	f00c f81e 	bl	8010fec <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3320      	adds	r3, #32
 8004fce:	2204      	movs	r2, #4
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f00c f802 	bl	8010fdc <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2203      	movs	r2, #3
 8004fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8004fe6:	4b16      	ldr	r3, [pc, #88]	; (8005040 <netif_add+0xb0>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	b2d1      	uxtb	r1, r2
 8004fee:	4a14      	ldr	r2, [pc, #80]	; (8005040 <netif_add+0xb0>)
 8004ff0:	7011      	strb	r1, [r2, #0]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a3a      	ldr	r2, [r7, #32]
 8004ffc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f81f 	bl	8005048 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	4798      	blx	r3
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <netif_add+0x8a>
    return NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	e007      	b.n	800502a <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <netif_add+0xb4>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005022:	4a08      	ldr	r2, [pc, #32]	; (8005044 <netif_add+0xb4>)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8005028:	68fb      	ldr	r3, [r7, #12]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	08012434 	.word	0x08012434
 8005038:	08012468 	.word	0x08012468
 800503c:	08012480 	.word	0x08012480
 8005040:	20000508 	.word	0x20000508
 8005044:	20003bb4 	.word	0x20003bb4

08005048 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <netif_set_addr+0x1c>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10c      	bne.n	800507e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f81a 	bl	80050a0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f862 	bl	8005138 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 f84a 	bl	8005110 <netif_set_gw>
 800507c:	e00b      	b.n	8005096 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f859 	bl	8005138 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8005086:	6839      	ldr	r1, [r7, #0]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f841 	bl	8005110 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f805 	bl	80050a0 <netif_set_ipaddr>
  }
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <netif_set_ipaddr+0x18>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e002      	b.n	80050be <netif_set_ipaddr+0x1e>
 80050b8:	4b14      	ldr	r3, [pc, #80]	; (800510c <netif_set_ipaddr+0x6c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3304      	adds	r3, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d01c      	beq.n	8005104 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3304      	adds	r3, #4
 80050ce:	f107 020c 	add.w	r2, r7, #12
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f002 fac1 	bl	800765c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3304      	adds	r3, #4
 80050de:	f107 020c 	add.w	r2, r7, #12
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f006 fd69 	bl	800bbbc <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <netif_set_ipaddr+0x56>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	e000      	b.n	80050f8 <netif_set_ipaddr+0x58>
 80050f6:	2300      	movs	r3, #0
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80050fc:	2101      	movs	r1, #1
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f861 	bl	80051c6 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8005104:	bf00      	nop
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	08015100 	.word	0x08015100

08005110 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <netif_set_gw+0x16>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	e000      	b.n	8005128 <netif_set_gw+0x18>
 8005126:	2300      	movs	r3, #0
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <netif_set_netmask+0x16>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	e000      	b.n	8005150 <netif_set_netmask+0x18>
 800514e:	2300      	movs	r3, #0
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005168:	4a04      	ldr	r2, [pc, #16]	; (800517c <netif_set_default+0x1c>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20003bb8 	.word	0x20003bb8

08005180 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d113      	bne.n	80051be <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80051b6:	2103      	movs	r1, #3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f804 	bl	80051c6 <netif_issue_reports>
    }
  }
}
 80051be:	bf00      	nop
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	460b      	mov	r3, r1
 80051d0:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d011      	beq.n	8005200 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00c      	beq.n	8005200 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d005      	beq.n	8005200 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3304      	adds	r3, #4
 80051f8:	4619      	mov	r1, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f009 facc 	bl	800e798 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8005200:	bf00      	nop
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d012      	beq.n	8005244 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	b2da      	uxtb	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f008 fe6c 	bl	800df1c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005252:	4b0e      	ldr	r3, [pc, #56]	; (800528c <pbuf_free_ooseq+0x40>)
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005258:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <pbuf_free_ooseq+0x44>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	607b      	str	r3, [r7, #4]
 800525e:	e00f      	b.n	8005280 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005264:	2b00      	cmp	r3, #0
 8005266:	d008      	beq.n	800527a <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526c:	4618      	mov	r0, r3
 800526e:	f001 fe62 	bl	8006f36 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8005278:	e005      	b.n	8005286 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	607b      	str	r3, [r7, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1ec      	bne.n	8005260 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20003bbc 	.word	0x20003bbc
 8005290:	20003bc4 	.word	0x20003bc4

08005294 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005298:	4b03      	ldr	r3, [pc, #12]	; (80052a8 <pbuf_pool_is_empty+0x14>)
 800529a:	2201      	movs	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800529e:	bf00      	nop
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	20003bbc 	.word	0x20003bbc

080052ac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	71fb      	strb	r3, [r7, #7]
 80052b6:	460b      	mov	r3, r1
 80052b8:	80bb      	strh	r3, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d81c      	bhi.n	80052fe <pbuf_alloc+0x52>
 80052c4:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <pbuf_alloc+0x20>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	080052e1 	.word	0x080052e1
 80052d0:	080052e7 	.word	0x080052e7
 80052d4:	080052ed 	.word	0x080052ed
 80052d8:	080052f3 	.word	0x080052f3
 80052dc:	080052f9 	.word	0x080052f9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80052e0:	2336      	movs	r3, #54	; 0x36
 80052e2:	82fb      	strh	r3, [r7, #22]
    break;
 80052e4:	e014      	b.n	8005310 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80052e6:	2322      	movs	r3, #34	; 0x22
 80052e8:	82fb      	strh	r3, [r7, #22]
    break;
 80052ea:	e011      	b.n	8005310 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80052ec:	230e      	movs	r3, #14
 80052ee:	82fb      	strh	r3, [r7, #22]
    break;
 80052f0:	e00e      	b.n	8005310 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80052f2:	2300      	movs	r3, #0
 80052f4:	82fb      	strh	r3, [r7, #22]
    break;
 80052f6:	e00b      	b.n	8005310 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	82fb      	strh	r3, [r7, #22]
    break;
 80052fc:	e008      	b.n	8005310 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80052fe:	4ba5      	ldr	r3, [pc, #660]	; (8005594 <pbuf_alloc+0x2e8>)
 8005300:	f44f 728b 	mov.w	r2, #278	; 0x116
 8005304:	49a4      	ldr	r1, [pc, #656]	; (8005598 <pbuf_alloc+0x2ec>)
 8005306:	48a5      	ldr	r0, [pc, #660]	; (800559c <pbuf_alloc+0x2f0>)
 8005308:	f00b fe70 	bl	8010fec <iprintf>
    return NULL;
 800530c:	2300      	movs	r3, #0
 800530e:	e15d      	b.n	80055cc <pbuf_alloc+0x320>
  }

  switch (type) {
 8005310:	79bb      	ldrb	r3, [r7, #6]
 8005312:	2b03      	cmp	r3, #3
 8005314:	f200 8134 	bhi.w	8005580 <pbuf_alloc+0x2d4>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <pbuf_alloc+0x74>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	080054c1 	.word	0x080054c1
 8005324:	0800554d 	.word	0x0800554d
 8005328:	0800554d 	.word	0x0800554d
 800532c:	08005331 	.word	0x08005331
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005330:	2008      	movs	r0, #8
 8005332:	f7ff fdaf 	bl	8004e94 <memp_malloc>
 8005336:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d103      	bne.n	8005346 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800533e:	f7ff ffa9 	bl	8005294 <pbuf_pool_is_empty>
      return NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	e142      	b.n	80055cc <pbuf_alloc+0x320>
    }
    p->type = type;
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	79ba      	ldrb	r2, [r7, #6]
 800534a:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8005352:	8afb      	ldrh	r3, [r7, #22]
 8005354:	3310      	adds	r3, #16
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	3303      	adds	r3, #3
 800535c:	f023 0303 	bic.w	r3, r3, #3
 8005360:	461a      	mov	r2, r3
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d006      	beq.n	8005380 <pbuf_alloc+0xd4>
 8005372:	4b88      	ldr	r3, [pc, #544]	; (8005594 <pbuf_alloc+0x2e8>)
 8005374:	f240 1229 	movw	r2, #297	; 0x129
 8005378:	4989      	ldr	r1, [pc, #548]	; (80055a0 <pbuf_alloc+0x2f4>)
 800537a:	4888      	ldr	r0, [pc, #544]	; (800559c <pbuf_alloc+0x2f0>)
 800537c:	f00b fe36 	bl	8010fec <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	88ba      	ldrh	r2, [r7, #4]
 8005384:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005386:	8afb      	ldrh	r3, [r7, #22]
 8005388:	3303      	adds	r3, #3
 800538a:	f023 0303 	bic.w	r3, r3, #3
 800538e:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8005392:	88bb      	ldrh	r3, [r7, #4]
 8005394:	4293      	cmp	r3, r2
 8005396:	bf28      	it	cs
 8005398:	4613      	movcs	r3, r2
 800539a:	b29a      	uxth	r2, r3
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	8952      	ldrh	r2, [r2, #10]
 80053a8:	441a      	add	r2, r3
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d906      	bls.n	80053c2 <pbuf_alloc+0x116>
 80053b4:	4b77      	ldr	r3, [pc, #476]	; (8005594 <pbuf_alloc+0x2e8>)
 80053b6:	f44f 7298 	mov.w	r2, #304	; 0x130
 80053ba:	497a      	ldr	r1, [pc, #488]	; (80055a4 <pbuf_alloc+0x2f8>)
 80053bc:	4877      	ldr	r0, [pc, #476]	; (800559c <pbuf_alloc+0x2f0>)
 80053be:	f00b fe15 	bl	8010fec <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80053c2:	8afb      	ldrh	r3, [r7, #22]
 80053c4:	3303      	adds	r3, #3
 80053c6:	f023 0303 	bic.w	r3, r3, #3
 80053ca:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80053ce:	d106      	bne.n	80053de <pbuf_alloc+0x132>
 80053d0:	4b70      	ldr	r3, [pc, #448]	; (8005594 <pbuf_alloc+0x2e8>)
 80053d2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80053d6:	4974      	ldr	r1, [pc, #464]	; (80055a8 <pbuf_alloc+0x2fc>)
 80053d8:	4870      	ldr	r0, [pc, #448]	; (800559c <pbuf_alloc+0x2f0>)
 80053da:	f00b fe07 	bl	8010fec <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	2201      	movs	r2, #1
 80053e2:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80053e8:	88bb      	ldrh	r3, [r7, #4]
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	8952      	ldrh	r2, [r2, #10]
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80053f2:	e061      	b.n	80054b8 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80053f4:	2008      	movs	r0, #8
 80053f6:	f7ff fd4d 	bl	8004e94 <memp_malloc>
 80053fa:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8005402:	f7ff ff47 	bl	8005294 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8005406:	69f8      	ldr	r0, [r7, #28]
 8005408:	f000 fac2 	bl	8005990 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800540c:	2300      	movs	r3, #0
 800540e:	e0dd      	b.n	80055cc <pbuf_alloc+0x320>
      }
      q->type = type;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	79ba      	ldrb	r2, [r7, #6]
 8005414:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800542e:	4293      	cmp	r3, r2
 8005430:	dd06      	ble.n	8005440 <pbuf_alloc+0x194>
 8005432:	4b58      	ldr	r3, [pc, #352]	; (8005594 <pbuf_alloc+0x2e8>)
 8005434:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8005438:	495c      	ldr	r1, [pc, #368]	; (80055ac <pbuf_alloc+0x300>)
 800543a:	4858      	ldr	r0, [pc, #352]	; (800559c <pbuf_alloc+0x2f0>)
 800543c:	f00b fdd6 	bl	8010fec <iprintf>
      q->tot_len = (u16_t)rem_len;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005450:	bf28      	it	cs
 8005452:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f103 0210 	add.w	r2, r3, #16
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d006      	beq.n	8005480 <pbuf_alloc+0x1d4>
 8005472:	4b48      	ldr	r3, [pc, #288]	; (8005594 <pbuf_alloc+0x2e8>)
 8005474:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8005478:	494d      	ldr	r1, [pc, #308]	; (80055b0 <pbuf_alloc+0x304>)
 800547a:	4848      	ldr	r0, [pc, #288]	; (800559c <pbuf_alloc+0x2f0>)
 800547c:	f00b fdb6 	bl	8010fec <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	8952      	ldrh	r2, [r2, #10]
 8005488:	441a      	add	r2, r3
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005490:	429a      	cmp	r2, r3
 8005492:	d906      	bls.n	80054a2 <pbuf_alloc+0x1f6>
 8005494:	4b3f      	ldr	r3, [pc, #252]	; (8005594 <pbuf_alloc+0x2e8>)
 8005496:	f240 1255 	movw	r2, #341	; 0x155
 800549a:	4942      	ldr	r1, [pc, #264]	; (80055a4 <pbuf_alloc+0x2f8>)
 800549c:	483f      	ldr	r0, [pc, #252]	; (800559c <pbuf_alloc+0x2f0>)
 800549e:	f00b fda5 	bl	8010fec <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	895b      	ldrh	r3, [r3, #10]
 80054ac:	461a      	mov	r2, r3
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1a9b      	subs	r3, r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	dc9a      	bgt.n	80053f4 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80054be:	e07e      	b.n	80055be <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80054c0:	8afb      	ldrh	r3, [r7, #22]
 80054c2:	3313      	adds	r3, #19
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	f023 0303 	bic.w	r3, r3, #3
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	88bb      	ldrh	r3, [r7, #4]
 80054ce:	3303      	adds	r3, #3
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	f023 0303 	bic.w	r3, r3, #3
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	4413      	add	r3, r2
 80054da:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80054dc:	897a      	ldrh	r2, [r7, #10]
 80054de:	88bb      	ldrh	r3, [r7, #4]
 80054e0:	3303      	adds	r3, #3
 80054e2:	f023 0303 	bic.w	r3, r3, #3
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d201      	bcs.n	80054ee <pbuf_alloc+0x242>
        return NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e06e      	b.n	80055cc <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 80054ee:	897b      	ldrh	r3, [r7, #10]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff fb71 	bl	8004bd8 <mem_malloc>
 80054f6:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <pbuf_alloc+0x256>
      return NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	e064      	b.n	80055cc <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005502:	8afb      	ldrh	r3, [r7, #22]
 8005504:	3310      	adds	r3, #16
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	3303      	adds	r3, #3
 800550c:	f023 0303 	bic.w	r3, r3, #3
 8005510:	461a      	mov	r2, r3
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	88ba      	ldrh	r2, [r7, #4]
 800551a:	811a      	strh	r2, [r3, #8]
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	891a      	ldrh	r2, [r3, #8]
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
    p->type = type;
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	79ba      	ldrb	r2, [r7, #6]
 800552e:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d03f      	beq.n	80055bc <pbuf_alloc+0x310>
 800553c:	4b15      	ldr	r3, [pc, #84]	; (8005594 <pbuf_alloc+0x2e8>)
 800553e:	f240 1277 	movw	r2, #375	; 0x177
 8005542:	491c      	ldr	r1, [pc, #112]	; (80055b4 <pbuf_alloc+0x308>)
 8005544:	4815      	ldr	r0, [pc, #84]	; (800559c <pbuf_alloc+0x2f0>)
 8005546:	f00b fd51 	bl	8010fec <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800554a:	e037      	b.n	80055bc <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800554c:	2007      	movs	r0, #7
 800554e:	f7ff fca1 	bl	8004e94 <memp_malloc>
 8005552:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800555a:	2300      	movs	r3, #0
 800555c:	e036      	b.n	80055cc <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	2200      	movs	r2, #0
 8005562:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	88ba      	ldrh	r2, [r7, #4]
 8005568:	811a      	strh	r2, [r3, #8]
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	891a      	ldrh	r2, [r3, #8]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
    p->type = type;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	79ba      	ldrb	r2, [r7, #6]
 800557c:	731a      	strb	r2, [r3, #12]
    break;
 800557e:	e01e      	b.n	80055be <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <pbuf_alloc+0x2e8>)
 8005582:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8005586:	490c      	ldr	r1, [pc, #48]	; (80055b8 <pbuf_alloc+0x30c>)
 8005588:	4804      	ldr	r0, [pc, #16]	; (800559c <pbuf_alloc+0x2f0>)
 800558a:	f00b fd2f 	bl	8010fec <iprintf>
    return NULL;
 800558e:	2300      	movs	r3, #0
 8005590:	e01c      	b.n	80055cc <pbuf_alloc+0x320>
 8005592:	bf00      	nop
 8005594:	080124a8 	.word	0x080124a8
 8005598:	080124d8 	.word	0x080124d8
 800559c:	080124f4 	.word	0x080124f4
 80055a0:	0801251c 	.word	0x0801251c
 80055a4:	0801254c 	.word	0x0801254c
 80055a8:	08012580 	.word	0x08012580
 80055ac:	080125b4 	.word	0x080125b4
 80055b0:	080125c8 	.word	0x080125c8
 80055b4:	080125f8 	.word	0x080125f8
 80055b8:	08012624 	.word	0x08012624
    break;
 80055bc:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	2201      	movs	r2, #1
 80055c2:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2200      	movs	r2, #0
 80055c8:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80055ca:	69fb      	ldr	r3, [r7, #28]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4603      	mov	r3, r0
 80055de:	71fb      	strb	r3, [r7, #7]
 80055e0:	460b      	mov	r3, r1
 80055e2:	80bb      	strh	r3, [r7, #4]
 80055e4:	4613      	mov	r3, r2
 80055e6:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d81b      	bhi.n	8005626 <pbuf_alloced_custom+0x52>
 80055ee:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <pbuf_alloced_custom+0x20>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	08005609 	.word	0x08005609
 80055f8:	0800560f 	.word	0x0800560f
 80055fc:	08005615 	.word	0x08005615
 8005600:	0800561b 	.word	0x0800561b
 8005604:	08005621 	.word	0x08005621
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005608:	2336      	movs	r3, #54	; 0x36
 800560a:	81fb      	strh	r3, [r7, #14]
    break;
 800560c:	e014      	b.n	8005638 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800560e:	2322      	movs	r3, #34	; 0x22
 8005610:	81fb      	strh	r3, [r7, #14]
    break;
 8005612:	e011      	b.n	8005638 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8005614:	230e      	movs	r3, #14
 8005616:	81fb      	strh	r3, [r7, #14]
    break;
 8005618:	e00e      	b.n	8005638 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800561a:	2300      	movs	r3, #0
 800561c:	81fb      	strh	r3, [r7, #14]
    break;
 800561e:	e00b      	b.n	8005638 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	81fb      	strh	r3, [r7, #14]
    break;
 8005624:	e008      	b.n	8005638 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8005626:	4b1d      	ldr	r3, [pc, #116]	; (800569c <pbuf_alloced_custom+0xc8>)
 8005628:	f240 12c5 	movw	r2, #453	; 0x1c5
 800562c:	491c      	ldr	r1, [pc, #112]	; (80056a0 <pbuf_alloced_custom+0xcc>)
 800562e:	481d      	ldr	r0, [pc, #116]	; (80056a4 <pbuf_alloced_custom+0xd0>)
 8005630:	f00b fcdc 	bl	8010fec <iprintf>
    return NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	e02d      	b.n	8005694 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005638:	89fb      	ldrh	r3, [r7, #14]
 800563a:	3303      	adds	r3, #3
 800563c:	f023 0203 	bic.w	r2, r3, #3
 8005640:	88bb      	ldrh	r3, [r7, #4]
 8005642:	441a      	add	r2, r3
 8005644:	8bbb      	ldrh	r3, [r7, #28]
 8005646:	429a      	cmp	r2, r3
 8005648:	d901      	bls.n	800564e <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	e022      	b.n	8005694 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800565a:	89fb      	ldrh	r3, [r7, #14]
 800565c:	3303      	adds	r3, #3
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	441a      	add	r2, r3
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	605a      	str	r2, [r3, #4]
 800566a:	e002      	b.n	8005672 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2200      	movs	r2, #0
 8005670:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2202      	movs	r2, #2
 8005676:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	88ba      	ldrh	r2, [r7, #4]
 800567c:	811a      	strh	r2, [r3, #8]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	891a      	ldrh	r2, [r3, #8]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	79ba      	ldrb	r2, [r7, #6]
 800568a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2201      	movs	r2, #1
 8005690:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8005692:	683b      	ldr	r3, [r7, #0]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	080124a8 	.word	0x080124a8
 80056a0:	08012640 	.word	0x08012640
 80056a4:	080124f4 	.word	0x080124f4

080056a8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <pbuf_realloc+0x20>
 80056ba:	4b4b      	ldr	r3, [pc, #300]	; (80057e8 <pbuf_realloc+0x140>)
 80056bc:	f240 12f3 	movw	r2, #499	; 0x1f3
 80056c0:	494a      	ldr	r1, [pc, #296]	; (80057ec <pbuf_realloc+0x144>)
 80056c2:	484b      	ldr	r0, [pc, #300]	; (80057f0 <pbuf_realloc+0x148>)
 80056c4:	f00b fc92 	bl	8010fec <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	7b1b      	ldrb	r3, [r3, #12]
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d012      	beq.n	80056f6 <pbuf_realloc+0x4e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	7b1b      	ldrb	r3, [r3, #12]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d00e      	beq.n	80056f6 <pbuf_realloc+0x4e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	7b1b      	ldrb	r3, [r3, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <pbuf_realloc+0x4e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	7b1b      	ldrb	r3, [r3, #12]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d006      	beq.n	80056f6 <pbuf_realloc+0x4e>
 80056e8:	4b3f      	ldr	r3, [pc, #252]	; (80057e8 <pbuf_realloc+0x140>)
 80056ea:	f240 12f7 	movw	r2, #503	; 0x1f7
 80056ee:	4941      	ldr	r1, [pc, #260]	; (80057f4 <pbuf_realloc+0x14c>)
 80056f0:	483f      	ldr	r0, [pc, #252]	; (80057f0 <pbuf_realloc+0x148>)
 80056f2:	f00b fc7b 	bl	8010fec <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	891b      	ldrh	r3, [r3, #8]
 80056fa:	887a      	ldrh	r2, [r7, #2]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d26f      	bcs.n	80057e0 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8005700:	887b      	ldrh	r3, [r7, #2]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	8912      	ldrh	r2, [r2, #8]
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800570a:	887b      	ldrh	r3, [r7, #2]
 800570c:	827b      	strh	r3, [r7, #18]
  q = p;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005712:	e025      	b.n	8005760 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	895b      	ldrh	r3, [r3, #10]
 8005718:	8a7a      	ldrh	r2, [r7, #18]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005724:	4293      	cmp	r3, r2
 8005726:	dd06      	ble.n	8005736 <pbuf_realloc+0x8e>
 8005728:	4b2f      	ldr	r3, [pc, #188]	; (80057e8 <pbuf_realloc+0x140>)
 800572a:	f240 220b 	movw	r2, #523	; 0x20b
 800572e:	4932      	ldr	r1, [pc, #200]	; (80057f8 <pbuf_realloc+0x150>)
 8005730:	482f      	ldr	r0, [pc, #188]	; (80057f0 <pbuf_realloc+0x148>)
 8005732:	f00b fc5b 	bl	8010fec <iprintf>
    q->tot_len += (u16_t)grow;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	891a      	ldrh	r2, [r3, #8]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	b29b      	uxth	r3, r3
 800573e:	4413      	add	r3, r2
 8005740:	b29a      	uxth	r2, r3
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <pbuf_realloc+0xb8>
 8005752:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <pbuf_realloc+0x140>)
 8005754:	f240 220f 	movw	r2, #527	; 0x20f
 8005758:	4928      	ldr	r1, [pc, #160]	; (80057fc <pbuf_realloc+0x154>)
 800575a:	4825      	ldr	r0, [pc, #148]	; (80057f0 <pbuf_realloc+0x148>)
 800575c:	f00b fc46 	bl	8010fec <iprintf>
  while (rem_len > q->len) {
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	895b      	ldrh	r3, [r3, #10]
 8005764:	8a7a      	ldrh	r2, [r7, #18]
 8005766:	429a      	cmp	r2, r3
 8005768:	d8d4      	bhi.n	8005714 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	7b1b      	ldrb	r3, [r3, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d122      	bne.n	80057b8 <pbuf_realloc+0x110>
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	895b      	ldrh	r3, [r3, #10]
 8005776:	8a7a      	ldrh	r2, [r7, #18]
 8005778:	429a      	cmp	r2, r3
 800577a:	d01d      	beq.n	80057b8 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	7b5b      	ldrb	r3, [r3, #13]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d117      	bne.n	80057b8 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	461a      	mov	r2, r3
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	b29a      	uxth	r2, r3
 8005794:	8a7b      	ldrh	r3, [r7, #18]
 8005796:	4413      	add	r3, r2
 8005798:	b29b      	uxth	r3, r3
 800579a:	4619      	mov	r1, r3
 800579c:	6978      	ldr	r0, [r7, #20]
 800579e:	f7ff f93f 	bl	8004a20 <mem_trim>
 80057a2:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <pbuf_realloc+0x110>
 80057aa:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <pbuf_realloc+0x140>)
 80057ac:	f240 221d 	movw	r2, #541	; 0x21d
 80057b0:	4913      	ldr	r1, [pc, #76]	; (8005800 <pbuf_realloc+0x158>)
 80057b2:	480f      	ldr	r0, [pc, #60]	; (80057f0 <pbuf_realloc+0x148>)
 80057b4:	f00b fc1a 	bl	8010fec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	8a7a      	ldrh	r2, [r7, #18]
 80057bc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	895a      	ldrh	r2, [r3, #10]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f8dc 	bl	8005990 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	e000      	b.n	80057e2 <pbuf_realloc+0x13a>
    return;
 80057e0:	bf00      	nop

}
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	080124a8 	.word	0x080124a8
 80057ec:	08012664 	.word	0x08012664
 80057f0:	080124f4 	.word	0x080124f4
 80057f4:	0801267c 	.word	0x0801267c
 80057f8:	08012698 	.word	0x08012698
 80057fc:	080126ac 	.word	0x080126ac
 8005800:	080126c4 	.word	0x080126c4

08005804 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	807b      	strh	r3, [r7, #2]
 8005810:	4613      	mov	r3, r2
 8005812:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <pbuf_header_impl+0x24>
 800581a:	4b46      	ldr	r3, [pc, #280]	; (8005934 <pbuf_header_impl+0x130>)
 800581c:	f240 223f 	movw	r2, #575	; 0x23f
 8005820:	4945      	ldr	r1, [pc, #276]	; (8005938 <pbuf_header_impl+0x134>)
 8005822:	4846      	ldr	r0, [pc, #280]	; (800593c <pbuf_header_impl+0x138>)
 8005824:	f00b fbe2 	bl	8010fec <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8005828:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <pbuf_header_impl+0x32>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <pbuf_header_impl+0x36>
    return 0;
 8005836:	2300      	movs	r3, #0
 8005838:	e078      	b.n	800592c <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800583a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800583e:	2b00      	cmp	r3, #0
 8005840:	da10      	bge.n	8005864 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8005842:	887b      	ldrh	r3, [r7, #2]
 8005844:	425b      	negs	r3, r3
 8005846:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	895b      	ldrh	r3, [r3, #10]
 800584c:	89fa      	ldrh	r2, [r7, #14]
 800584e:	429a      	cmp	r2, r3
 8005850:	d90a      	bls.n	8005868 <pbuf_header_impl+0x64>
 8005852:	4b38      	ldr	r3, [pc, #224]	; (8005934 <pbuf_header_impl+0x130>)
 8005854:	f240 2247 	movw	r2, #583	; 0x247
 8005858:	4939      	ldr	r1, [pc, #228]	; (8005940 <pbuf_header_impl+0x13c>)
 800585a:	4838      	ldr	r0, [pc, #224]	; (800593c <pbuf_header_impl+0x138>)
 800585c:	f00b fbc6 	bl	8010fec <iprintf>
 8005860:	2301      	movs	r3, #1
 8005862:	e063      	b.n	800592c <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8005864:	887b      	ldrh	r3, [r7, #2]
 8005866:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	7b1b      	ldrb	r3, [r3, #12]
 800586c:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8005874:	89bb      	ldrh	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <pbuf_header_impl+0x7c>
 800587a:	89bb      	ldrh	r3, [r7, #12]
 800587c:	2b03      	cmp	r3, #3
 800587e:	d112      	bne.n	80058a6 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005888:	425b      	negs	r3, r3
 800588a:	441a      	add	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3310      	adds	r3, #16
 8005898:	429a      	cmp	r2, r3
 800589a:	d238      	bcs.n	800590e <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e042      	b.n	800592c <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80058a6:	89bb      	ldrh	r3, [r7, #12]
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d002      	beq.n	80058b2 <pbuf_header_impl+0xae>
 80058ac:	89bb      	ldrh	r3, [r7, #12]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d124      	bne.n	80058fc <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80058b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	da0d      	bge.n	80058d6 <pbuf_header_impl+0xd2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	895b      	ldrh	r3, [r3, #10]
 80058be:	89fa      	ldrh	r2, [r7, #14]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d808      	bhi.n	80058d6 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058cc:	425b      	negs	r3, r3
 80058ce:	441a      	add	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	605a      	str	r2, [r3, #4]
 80058d4:	e011      	b.n	80058fa <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 80058d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	dd0b      	ble.n	80058f6 <pbuf_header_impl+0xf2>
 80058de:	787b      	ldrb	r3, [r7, #1]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058ec:	425b      	negs	r3, r3
 80058ee:	441a      	add	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	605a      	str	r2, [r3, #4]
 80058f4:	e001      	b.n	80058fa <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e018      	b.n	800592c <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80058fa:	e008      	b.n	800590e <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 80058fc:	4b0d      	ldr	r3, [pc, #52]	; (8005934 <pbuf_header_impl+0x130>)
 80058fe:	f240 2277 	movw	r2, #631	; 0x277
 8005902:	4910      	ldr	r1, [pc, #64]	; (8005944 <pbuf_header_impl+0x140>)
 8005904:	480d      	ldr	r0, [pc, #52]	; (800593c <pbuf_header_impl+0x138>)
 8005906:	f00b fb71 	bl	8010fec <iprintf>
    return 1;
 800590a:	2301      	movs	r3, #1
 800590c:	e00e      	b.n	800592c <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	895a      	ldrh	r2, [r3, #10]
 8005912:	887b      	ldrh	r3, [r7, #2]
 8005914:	4413      	add	r3, r2
 8005916:	b29a      	uxth	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	891a      	ldrh	r2, [r3, #8]
 8005920:	887b      	ldrh	r3, [r7, #2]
 8005922:	4413      	add	r3, r2
 8005924:	b29a      	uxth	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	080124a8 	.word	0x080124a8
 8005938:	080126e0 	.word	0x080126e0
 800593c:	080124f4 	.word	0x080124f4
 8005940:	080126ec 	.word	0x080126ec
 8005944:	0801270c 	.word	0x0801270c

08005948 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8005954:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005958:	2200      	movs	r2, #0
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ff51 	bl	8005804 <pbuf_header_impl>
 8005962:	4603      	mov	r3, r0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8005978:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800597c:	2201      	movs	r2, #1
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7ff ff3f 	bl	8005804 <pbuf_header_impl>
 8005986:	4603      	mov	r3, r0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <pbuf_free+0x22>
 80059a4:	4b3e      	ldr	r3, [pc, #248]	; (8005aa0 <pbuf_free+0x110>)
 80059a6:	f240 22d2 	movw	r2, #722	; 0x2d2
 80059aa:	493e      	ldr	r1, [pc, #248]	; (8005aa4 <pbuf_free+0x114>)
 80059ac:	483e      	ldr	r0, [pc, #248]	; (8005aa8 <pbuf_free+0x118>)
 80059ae:	f00b fb1d 	bl	8010fec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e070      	b.n	8005a98 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	7b1b      	ldrb	r3, [r3, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d012      	beq.n	80059e4 <pbuf_free+0x54>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	7b1b      	ldrb	r3, [r3, #12]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d00e      	beq.n	80059e4 <pbuf_free+0x54>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	7b1b      	ldrb	r3, [r3, #12]
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d00a      	beq.n	80059e4 <pbuf_free+0x54>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	7b1b      	ldrb	r3, [r3, #12]
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d006      	beq.n	80059e4 <pbuf_free+0x54>
 80059d6:	4b32      	ldr	r3, [pc, #200]	; (8005aa0 <pbuf_free+0x110>)
 80059d8:	f240 22de 	movw	r2, #734	; 0x2de
 80059dc:	4933      	ldr	r1, [pc, #204]	; (8005aac <pbuf_free+0x11c>)
 80059de:	4832      	ldr	r0, [pc, #200]	; (8005aa8 <pbuf_free+0x118>)
 80059e0:	f00b fb04 	bl	8010fec <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80059e8:	e052      	b.n	8005a90 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	89db      	ldrh	r3, [r3, #14]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <pbuf_free+0x70>
 80059f2:	4b2b      	ldr	r3, [pc, #172]	; (8005aa0 <pbuf_free+0x110>)
 80059f4:	f240 22eb 	movw	r2, #747	; 0x2eb
 80059f8:	492d      	ldr	r1, [pc, #180]	; (8005ab0 <pbuf_free+0x120>)
 80059fa:	482b      	ldr	r0, [pc, #172]	; (8005aa8 <pbuf_free+0x118>)
 80059fc:	f00b faf6 	bl	8010fec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	89db      	ldrh	r3, [r3, #14]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	81da      	strh	r2, [r3, #14]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	89db      	ldrh	r3, [r3, #14]
 8005a10:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005a12:	8abb      	ldrh	r3, [r7, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d139      	bne.n	8005a8c <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	7b1b      	ldrb	r3, [r3, #12]
 8005a22:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	7b5b      	ldrb	r3, [r3, #13]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d011      	beq.n	8005a54 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <pbuf_free+0xba>
 8005a3c:	4b18      	ldr	r3, [pc, #96]	; (8005aa0 <pbuf_free+0x110>)
 8005a3e:	f240 22f9 	movw	r2, #761	; 0x2f9
 8005a42:	491c      	ldr	r1, [pc, #112]	; (8005ab4 <pbuf_free+0x124>)
 8005a44:	4818      	ldr	r0, [pc, #96]	; (8005aa8 <pbuf_free+0x118>)
 8005a46:	f00b fad1 	bl	8010fec <iprintf>
        pc->custom_free_function(p);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	4798      	blx	r3
 8005a52:	e015      	b.n	8005a80 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8005a54:	89fb      	ldrh	r3, [r7, #14]
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d104      	bne.n	8005a64 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	2008      	movs	r0, #8
 8005a5e:	f7ff fa65 	bl	8004f2c <memp_free>
 8005a62:	e00d      	b.n	8005a80 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005a64:	89fb      	ldrh	r3, [r7, #14]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d002      	beq.n	8005a70 <pbuf_free+0xe0>
 8005a6a:	89fb      	ldrh	r3, [r7, #14]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d104      	bne.n	8005a7a <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	2007      	movs	r0, #7
 8005a74:	f7ff fa5a 	bl	8004f2c <memp_free>
 8005a78:	e002      	b.n	8005a80 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fe ff6e 	bl	800495c <mem_free>
        }
      }
      count++;
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
 8005a82:	3301      	adds	r3, #1
 8005a84:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	607b      	str	r3, [r7, #4]
 8005a8a:	e001      	b.n	8005a90 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1a9      	bne.n	80059ea <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	080124a8 	.word	0x080124a8
 8005aa4:	080126e0 	.word	0x080126e0
 8005aa8:	080124f4 	.word	0x080124f4
 8005aac:	0801271c 	.word	0x0801271c
 8005ab0:	08012734 	.word	0x08012734
 8005ab4:	0801274c 	.word	0x0801274c

08005ab8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005ac4:	e005      	b.n	8005ad2 <pbuf_clen+0x1a>
    ++len;
 8005ac6:	89fb      	ldrh	r3, [r7, #14]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1f6      	bne.n	8005ac6 <pbuf_clen+0xe>
  }
  return len;
 8005ad8:	89fb      	ldrh	r3, [r7, #14]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d010      	beq.n	8005b18 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	89db      	ldrh	r3, [r3, #14]
 8005afa:	3301      	adds	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	89db      	ldrh	r3, [r3, #14]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <pbuf_ref+0x30>
 8005b0a:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <pbuf_ref+0x38>)
 8005b0c:	f240 3239 	movw	r2, #825	; 0x339
 8005b10:	4904      	ldr	r1, [pc, #16]	; (8005b24 <pbuf_ref+0x3c>)
 8005b12:	4805      	ldr	r0, [pc, #20]	; (8005b28 <pbuf_ref+0x40>)
 8005b14:	f00b fa6a 	bl	8010fec <iprintf>
  }
}
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	080124a8 	.word	0x080124a8
 8005b24:	08012770 	.word	0x08012770
 8005b28:	080124f4 	.word	0x080124f4

08005b2c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <pbuf_cat+0x16>
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d107      	bne.n	8005b52 <pbuf_cat+0x26>
 8005b42:	4b20      	ldr	r3, [pc, #128]	; (8005bc4 <pbuf_cat+0x98>)
 8005b44:	f240 324d 	movw	r2, #845	; 0x34d
 8005b48:	491f      	ldr	r1, [pc, #124]	; (8005bc8 <pbuf_cat+0x9c>)
 8005b4a:	4820      	ldr	r0, [pc, #128]	; (8005bcc <pbuf_cat+0xa0>)
 8005b4c:	f00b fa4e 	bl	8010fec <iprintf>
 8005b50:	e034      	b.n	8005bbc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	e00a      	b.n	8005b6e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	891a      	ldrh	r2, [r3, #8]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	891b      	ldrh	r3, [r3, #8]
 8005b60:	4413      	add	r3, r2
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f0      	bne.n	8005b58 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	891a      	ldrh	r2, [r3, #8]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	895b      	ldrh	r3, [r3, #10]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d006      	beq.n	8005b90 <pbuf_cat+0x64>
 8005b82:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <pbuf_cat+0x98>)
 8005b84:	f240 3255 	movw	r2, #853	; 0x355
 8005b88:	4911      	ldr	r1, [pc, #68]	; (8005bd0 <pbuf_cat+0xa4>)
 8005b8a:	4810      	ldr	r0, [pc, #64]	; (8005bcc <pbuf_cat+0xa0>)
 8005b8c:	f00b fa2e 	bl	8010fec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d006      	beq.n	8005ba6 <pbuf_cat+0x7a>
 8005b98:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <pbuf_cat+0x98>)
 8005b9a:	f240 3256 	movw	r2, #854	; 0x356
 8005b9e:	490d      	ldr	r1, [pc, #52]	; (8005bd4 <pbuf_cat+0xa8>)
 8005ba0:	480a      	ldr	r0, [pc, #40]	; (8005bcc <pbuf_cat+0xa0>)
 8005ba2:	f00b fa23 	bl	8010fec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	891a      	ldrh	r2, [r3, #8]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	891b      	ldrh	r3, [r3, #8]
 8005bae:	4413      	add	r3, r2
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	080124a8 	.word	0x080124a8
 8005bc8:	08012784 	.word	0x08012784
 8005bcc:	080124f4 	.word	0x080124f4
 8005bd0:	080127bc 	.word	0x080127bc
 8005bd4:	080127ec 	.word	0x080127ec

08005bd8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005be2:	6839      	ldr	r1, [r7, #0]
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7ff ffa1 	bl	8005b2c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005bea:	6838      	ldr	r0, [r7, #0]
 8005bec:	f7ff ff7c 	bl	8005ae8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8005c02:	2300      	movs	r3, #0
 8005c04:	81fb      	strh	r3, [r7, #14]
 8005c06:	2300      	movs	r3, #0
 8005c08:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <pbuf_copy+0x2a>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <pbuf_copy+0x2a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	891a      	ldrh	r2, [r3, #8]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	891b      	ldrh	r3, [r3, #8]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d209      	bcs.n	8005c36 <pbuf_copy+0x3e>
 8005c22:	4b54      	ldr	r3, [pc, #336]	; (8005d74 <pbuf_copy+0x17c>)
 8005c24:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005c28:	4953      	ldr	r1, [pc, #332]	; (8005d78 <pbuf_copy+0x180>)
 8005c2a:	4854      	ldr	r0, [pc, #336]	; (8005d7c <pbuf_copy+0x184>)
 8005c2c:	f00b f9de 	bl	8010fec <iprintf>
 8005c30:	f06f 030f 	mvn.w	r3, #15
 8005c34:	e099      	b.n	8005d6a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	895b      	ldrh	r3, [r3, #10]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	89fb      	ldrh	r3, [r7, #14]
 8005c3e:	1ad2      	subs	r2, r2, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	895b      	ldrh	r3, [r3, #10]
 8005c44:	4619      	mov	r1, r3
 8005c46:	89bb      	ldrh	r3, [r7, #12]
 8005c48:	1acb      	subs	r3, r1, r3
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	db05      	blt.n	8005c5a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	895a      	ldrh	r2, [r3, #10]
 8005c52:	89bb      	ldrh	r3, [r7, #12]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	817b      	strh	r3, [r7, #10]
 8005c58:	e004      	b.n	8005c64 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	895a      	ldrh	r2, [r3, #10]
 8005c5e:	89fb      	ldrh	r3, [r7, #14]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	89fb      	ldrh	r3, [r7, #14]
 8005c6a:	18d0      	adds	r0, r2, r3
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	89bb      	ldrh	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	897a      	ldrh	r2, [r7, #10]
 8005c76:	4619      	mov	r1, r3
 8005c78:	f00b f9a5 	bl	8010fc6 <memcpy>
    offset_to += len;
 8005c7c:	89fa      	ldrh	r2, [r7, #14]
 8005c7e:	897b      	ldrh	r3, [r7, #10]
 8005c80:	4413      	add	r3, r2
 8005c82:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8005c84:	89ba      	ldrh	r2, [r7, #12]
 8005c86:	897b      	ldrh	r3, [r7, #10]
 8005c88:	4413      	add	r3, r2
 8005c8a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	895b      	ldrh	r3, [r3, #10]
 8005c90:	89fa      	ldrh	r2, [r7, #14]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d906      	bls.n	8005ca4 <pbuf_copy+0xac>
 8005c96:	4b37      	ldr	r3, [pc, #220]	; (8005d74 <pbuf_copy+0x17c>)
 8005c98:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005c9c:	4938      	ldr	r1, [pc, #224]	; (8005d80 <pbuf_copy+0x188>)
 8005c9e:	4837      	ldr	r0, [pc, #220]	; (8005d7c <pbuf_copy+0x184>)
 8005ca0:	f00b f9a4 	bl	8010fec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	895b      	ldrh	r3, [r3, #10]
 8005ca8:	89ba      	ldrh	r2, [r7, #12]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d906      	bls.n	8005cbc <pbuf_copy+0xc4>
 8005cae:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <pbuf_copy+0x17c>)
 8005cb0:	f240 32ce 	movw	r2, #974	; 0x3ce
 8005cb4:	4933      	ldr	r1, [pc, #204]	; (8005d84 <pbuf_copy+0x18c>)
 8005cb6:	4831      	ldr	r0, [pc, #196]	; (8005d7c <pbuf_copy+0x184>)
 8005cb8:	f00b f998 	bl	8010fec <iprintf>
    if (offset_from >= p_from->len) {
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	895b      	ldrh	r3, [r3, #10]
 8005cc0:	89ba      	ldrh	r2, [r7, #12]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d304      	bcc.n	8005cd0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	895b      	ldrh	r3, [r3, #10]
 8005cd4:	89fa      	ldrh	r2, [r7, #14]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d114      	bne.n	8005d04 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10c      	bne.n	8005d04 <pbuf_copy+0x10c>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d009      	beq.n	8005d04 <pbuf_copy+0x10c>
 8005cf0:	4b20      	ldr	r3, [pc, #128]	; (8005d74 <pbuf_copy+0x17c>)
 8005cf2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005cf6:	4924      	ldr	r1, [pc, #144]	; (8005d88 <pbuf_copy+0x190>)
 8005cf8:	4820      	ldr	r0, [pc, #128]	; (8005d7c <pbuf_copy+0x184>)
 8005cfa:	f00b f977 	bl	8010fec <iprintf>
 8005cfe:	f06f 030f 	mvn.w	r3, #15
 8005d02:	e032      	b.n	8005d6a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d013      	beq.n	8005d32 <pbuf_copy+0x13a>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	895a      	ldrh	r2, [r3, #10]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	891b      	ldrh	r3, [r3, #8]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d10d      	bne.n	8005d32 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d009      	beq.n	8005d32 <pbuf_copy+0x13a>
 8005d1e:	4b15      	ldr	r3, [pc, #84]	; (8005d74 <pbuf_copy+0x17c>)
 8005d20:	f240 32de 	movw	r2, #990	; 0x3de
 8005d24:	4919      	ldr	r1, [pc, #100]	; (8005d8c <pbuf_copy+0x194>)
 8005d26:	4815      	ldr	r0, [pc, #84]	; (8005d7c <pbuf_copy+0x184>)
 8005d28:	f00b f960 	bl	8010fec <iprintf>
 8005d2c:	f06f 0305 	mvn.w	r3, #5
 8005d30:	e01b      	b.n	8005d6a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d013      	beq.n	8005d60 <pbuf_copy+0x168>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	895a      	ldrh	r2, [r3, #10]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	891b      	ldrh	r3, [r3, #8]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d10d      	bne.n	8005d60 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d009      	beq.n	8005d60 <pbuf_copy+0x168>
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <pbuf_copy+0x17c>)
 8005d4e:	f240 32e3 	movw	r2, #995	; 0x3e3
 8005d52:	490e      	ldr	r1, [pc, #56]	; (8005d8c <pbuf_copy+0x194>)
 8005d54:	4809      	ldr	r0, [pc, #36]	; (8005d7c <pbuf_copy+0x184>)
 8005d56:	f00b f949 	bl	8010fec <iprintf>
 8005d5a:	f06f 0305 	mvn.w	r3, #5
 8005d5e:	e004      	b.n	8005d6a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f47f af67 	bne.w	8005c36 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	080124a8 	.word	0x080124a8
 8005d78:	08012838 	.word	0x08012838
 8005d7c:	080124f4 	.word	0x080124f4
 8005d80:	08012868 	.word	0x08012868
 8005d84:	08012880 	.word	0x08012880
 8005d88:	0801289c 	.word	0x0801289c
 8005d8c:	080128ac 	.word	0x080128ac

08005d90 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	460b      	mov	r3, r1
 8005da0:	80fb      	strh	r3, [r7, #6]
 8005da2:	4613      	mov	r3, r2
 8005da4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d108      	bne.n	8005dc2 <pbuf_copy_partial+0x32>
 8005db0:	4b30      	ldr	r3, [pc, #192]	; (8005e74 <pbuf_copy_partial+0xe4>)
 8005db2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005db6:	4930      	ldr	r1, [pc, #192]	; (8005e78 <pbuf_copy_partial+0xe8>)
 8005db8:	4830      	ldr	r0, [pc, #192]	; (8005e7c <pbuf_copy_partial+0xec>)
 8005dba:	f00b f917 	bl	8010fec <iprintf>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e054      	b.n	8005e6c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d108      	bne.n	8005dda <pbuf_copy_partial+0x4a>
 8005dc8:	4b2a      	ldr	r3, [pc, #168]	; (8005e74 <pbuf_copy_partial+0xe4>)
 8005dca:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005dce:	492c      	ldr	r1, [pc, #176]	; (8005e80 <pbuf_copy_partial+0xf0>)
 8005dd0:	482a      	ldr	r0, [pc, #168]	; (8005e7c <pbuf_copy_partial+0xec>)
 8005dd2:	f00b f90b 	bl	8010fec <iprintf>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e048      	b.n	8005e6c <pbuf_copy_partial+0xdc>

  left = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <pbuf_copy_partial+0x5a>
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <pbuf_copy_partial+0x5e>
    return 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	e03e      	b.n	8005e6c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	e034      	b.n	8005e5e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8005df4:	88bb      	ldrh	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <pbuf_copy_partial+0x80>
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	895b      	ldrh	r3, [r3, #10]
 8005dfe:	88ba      	ldrh	r2, [r7, #4]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d305      	bcc.n	8005e10 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	895b      	ldrh	r3, [r3, #10]
 8005e08:	88ba      	ldrh	r2, [r7, #4]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	80bb      	strh	r3, [r7, #4]
 8005e0e:	e023      	b.n	8005e58 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	895a      	ldrh	r2, [r3, #10]
 8005e14:	88bb      	ldrh	r3, [r7, #4]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005e1a:	8b3a      	ldrh	r2, [r7, #24]
 8005e1c:	88fb      	ldrh	r3, [r7, #6]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d901      	bls.n	8005e26 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005e26:	8b7b      	ldrh	r3, [r7, #26]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	18d0      	adds	r0, r2, r3
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	88bb      	ldrh	r3, [r7, #4]
 8005e32:	4413      	add	r3, r2
 8005e34:	8b3a      	ldrh	r2, [r7, #24]
 8005e36:	4619      	mov	r1, r3
 8005e38:	f00b f8c5 	bl	8010fc6 <memcpy>
      copied_total += buf_copy_len;
 8005e3c:	8afa      	ldrh	r2, [r7, #22]
 8005e3e:	8b3b      	ldrh	r3, [r7, #24]
 8005e40:	4413      	add	r3, r2
 8005e42:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8005e44:	8b7a      	ldrh	r2, [r7, #26]
 8005e46:	8b3b      	ldrh	r3, [r7, #24]
 8005e48:	4413      	add	r3, r2
 8005e4a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8005e4c:	88fa      	ldrh	r2, [r7, #6]
 8005e4e:	8b3b      	ldrh	r3, [r7, #24]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	61fb      	str	r3, [r7, #28]
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <pbuf_copy_partial+0xda>
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1c4      	bne.n	8005df4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8005e6a:	8afb      	ldrh	r3, [r7, #22]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3720      	adds	r7, #32
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	080124a8 	.word	0x080124a8
 8005e78:	080128d8 	.word	0x080128d8
 8005e7c:	080124f4 	.word	0x080124f4
 8005e80:	080128f8 	.word	0x080128f8

08005e84 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005e88:	bf00      	nop
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
	...

08005e94 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005e98:	f000 ff80 	bl	8006d9c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005e9c:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <tcp_tmr+0x28>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <tcp_tmr+0x28>)
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <tcp_tmr+0x28>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005eb4:	f000 fcb2 	bl	800681c <tcp_slowtmr>
  }
}
 8005eb8:	bf00      	nop
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20000509 	.word	0x20000509

08005ec0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e00a      	b.n	8005ee6 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d102      	bne.n	8005ee0 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1f1      	bne.n	8005ed0 <tcp_remove_listener+0x10>
      }
   }
}
 8005eec:	bf00      	nop
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d105      	bne.n	8005f12 <tcp_listen_closed+0x1a>
 8005f06:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <tcp_listen_closed+0x5c>)
 8005f08:	22c0      	movs	r2, #192	; 0xc0
 8005f0a:	4913      	ldr	r1, [pc, #76]	; (8005f58 <tcp_listen_closed+0x60>)
 8005f0c:	4813      	ldr	r0, [pc, #76]	; (8005f5c <tcp_listen_closed+0x64>)
 8005f0e:	f00b f86d 	bl	8010fec <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	7d1b      	ldrb	r3, [r3, #20]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d005      	beq.n	8005f26 <tcp_listen_closed+0x2e>
 8005f1a:	4b0e      	ldr	r3, [pc, #56]	; (8005f54 <tcp_listen_closed+0x5c>)
 8005f1c:	22c1      	movs	r2, #193	; 0xc1
 8005f1e:	4910      	ldr	r1, [pc, #64]	; (8005f60 <tcp_listen_closed+0x68>)
 8005f20:	480e      	ldr	r0, [pc, #56]	; (8005f5c <tcp_listen_closed+0x64>)
 8005f22:	f00b f863 	bl	8010fec <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005f26:	2301      	movs	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e00b      	b.n	8005f44 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005f2c:	4a0d      	ldr	r2, [pc, #52]	; (8005f64 <tcp_listen_closed+0x6c>)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff ffc1 	bl	8005ec0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3301      	adds	r3, #1
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d9f0      	bls.n	8005f2c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005f4a:	bf00      	nop
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	08012a2c 	.word	0x08012a2c
 8005f58:	08012a5c 	.word	0x08012a5c
 8005f5c:	08012a68 	.word	0x08012a68
 8005f60:	08012a90 	.word	0x08012a90
 8005f64:	080150c8 	.word	0x080150c8

08005f68 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005f68:	b5b0      	push	{r4, r5, r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d075      	beq.n	8006066 <tcp_close_shutdown+0xfe>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	7d1b      	ldrb	r3, [r3, #20]
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d003      	beq.n	8005f8a <tcp_close_shutdown+0x22>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	7d1b      	ldrb	r3, [r3, #20]
 8005f86:	2b07      	cmp	r3, #7
 8005f88:	d16d      	bne.n	8006066 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d104      	bne.n	8005f9c <tcp_close_shutdown+0x34>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005f9a:	d064      	beq.n	8006066 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	7e9b      	ldrb	r3, [r3, #26]
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d106      	bne.n	8005fb6 <tcp_close_shutdown+0x4e>
 8005fa8:	4b59      	ldr	r3, [pc, #356]	; (8006110 <tcp_close_shutdown+0x1a8>)
 8005faa:	f240 120f 	movw	r2, #271	; 0x10f
 8005fae:	4959      	ldr	r1, [pc, #356]	; (8006114 <tcp_close_shutdown+0x1ac>)
 8005fb0:	4859      	ldr	r0, [pc, #356]	; (8006118 <tcp_close_shutdown+0x1b0>)
 8005fb2:	f00b f81b 	bl	8010fec <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005fbe:	687c      	ldr	r4, [r7, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	1d1d      	adds	r5, r3, #4
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	8adb      	ldrh	r3, [r3, #22]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	8b12      	ldrh	r2, [r2, #24]
 8005fcc:	9201      	str	r2, [sp, #4]
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	4622      	mov	r2, r4
 8005fd4:	f004 fef2 	bl	800adbc <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 fa23 	bl	8007424 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005fde:	4b4f      	ldr	r3, [pc, #316]	; (800611c <tcp_close_shutdown+0x1b4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d105      	bne.n	8005ff4 <tcp_close_shutdown+0x8c>
 8005fe8:	4b4c      	ldr	r3, [pc, #304]	; (800611c <tcp_close_shutdown+0x1b4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	4a4b      	ldr	r2, [pc, #300]	; (800611c <tcp_close_shutdown+0x1b4>)
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	e013      	b.n	800601c <tcp_close_shutdown+0xb4>
 8005ff4:	4b49      	ldr	r3, [pc, #292]	; (800611c <tcp_close_shutdown+0x1b4>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	e00c      	b.n	8006016 <tcp_close_shutdown+0xae>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	429a      	cmp	r2, r3
 8006004:	d104      	bne.n	8006010 <tcp_close_shutdown+0xa8>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	60da      	str	r2, [r3, #12]
 800600e:	e005      	b.n	800601c <tcp_close_shutdown+0xb4>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1ef      	bne.n	8005ffc <tcp_close_shutdown+0x94>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	60da      	str	r2, [r3, #12]
 8006022:	4b3f      	ldr	r3, [pc, #252]	; (8006120 <tcp_close_shutdown+0x1b8>)
 8006024:	2201      	movs	r2, #1
 8006026:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	7d1b      	ldrb	r3, [r3, #20]
 800602c:	2b04      	cmp	r3, #4
 800602e:	d10c      	bne.n	800604a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	220a      	movs	r2, #10
 8006034:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006036:	4b3b      	ldr	r3, [pc, #236]	; (8006124 <tcp_close_shutdown+0x1bc>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60da      	str	r2, [r3, #12]
 800603e:	4a39      	ldr	r2, [pc, #228]	; (8006124 <tcp_close_shutdown+0x1bc>)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	f005 f90a 	bl	800b25c <tcp_timer_needed>
 8006048:	e00b      	b.n	8006062 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800604a:	4b37      	ldr	r3, [pc, #220]	; (8006128 <tcp_close_shutdown+0x1c0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	429a      	cmp	r2, r3
 8006052:	d102      	bne.n	800605a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8006054:	f003 fd4a 	bl	8009aec <tcp_trigger_input_pcb_close>
 8006058:	e003      	b.n	8006062 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	2001      	movs	r0, #1
 800605e:	f7fe ff65 	bl	8004f2c <memp_free>
        }
      }
      return ERR_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	e050      	b.n	8006108 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	7d1b      	ldrb	r3, [r3, #20]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d02e      	beq.n	80060cc <tcp_close_shutdown+0x164>
 800606e:	2b02      	cmp	r3, #2
 8006070:	d038      	beq.n	80060e4 <tcp_close_shutdown+0x17c>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d142      	bne.n	80060fc <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	8adb      	ldrh	r3, [r3, #22]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d021      	beq.n	80060c2 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800607e:	4b2b      	ldr	r3, [pc, #172]	; (800612c <tcp_close_shutdown+0x1c4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	429a      	cmp	r2, r3
 8006086:	d105      	bne.n	8006094 <tcp_close_shutdown+0x12c>
 8006088:	4b28      	ldr	r3, [pc, #160]	; (800612c <tcp_close_shutdown+0x1c4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	4a27      	ldr	r2, [pc, #156]	; (800612c <tcp_close_shutdown+0x1c4>)
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	e013      	b.n	80060bc <tcp_close_shutdown+0x154>
 8006094:	4b25      	ldr	r3, [pc, #148]	; (800612c <tcp_close_shutdown+0x1c4>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	e00c      	b.n	80060b6 <tcp_close_shutdown+0x14e>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d104      	bne.n	80060b0 <tcp_close_shutdown+0x148>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	60da      	str	r2, [r3, #12]
 80060ae:	e005      	b.n	80060bc <tcp_close_shutdown+0x154>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1ef      	bne.n	800609c <tcp_close_shutdown+0x134>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	2001      	movs	r0, #1
 80060c6:	f7fe ff31 	bl	8004f2c <memp_free>
    break;
 80060ca:	e01c      	b.n	8006106 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff ff13 	bl	8005ef8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	4816      	ldr	r0, [pc, #88]	; (8006130 <tcp_close_shutdown+0x1c8>)
 80060d6:	f001 f9e7 	bl	80074a8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	2002      	movs	r0, #2
 80060de:	f7fe ff25 	bl	8004f2c <memp_free>
    break;
 80060e2:	e010      	b.n	8006106 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	480d      	ldr	r0, [pc, #52]	; (800611c <tcp_close_shutdown+0x1b4>)
 80060e8:	f001 f9de 	bl	80074a8 <tcp_pcb_remove>
 80060ec:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <tcp_close_shutdown+0x1b8>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	2001      	movs	r0, #1
 80060f6:	f7fe ff19 	bl	8004f2c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80060fa:	e004      	b.n	8006106 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f819 	bl	8006134 <tcp_close_shutdown_fin>
 8006102:	4603      	mov	r3, r0
 8006104:	e000      	b.n	8006108 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bdb0      	pop	{r4, r5, r7, pc}
 8006110:	08012a2c 	.word	0x08012a2c
 8006114:	08012aa8 	.word	0x08012aa8
 8006118:	08012a68 	.word	0x08012a68
 800611c:	20003bc4 	.word	0x20003bc4
 8006120:	20003bc0 	.word	0x20003bc0
 8006124:	20003bd4 	.word	0x20003bd4
 8006128:	20003bd8 	.word	0x20003bd8
 800612c:	20003bd0 	.word	0x20003bd0
 8006130:	20003bcc 	.word	0x20003bcc

08006134 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <tcp_close_shutdown_fin+0x1c>
 8006142:	4b2c      	ldr	r3, [pc, #176]	; (80061f4 <tcp_close_shutdown_fin+0xc0>)
 8006144:	f240 124d 	movw	r2, #333	; 0x14d
 8006148:	492b      	ldr	r1, [pc, #172]	; (80061f8 <tcp_close_shutdown_fin+0xc4>)
 800614a:	482c      	ldr	r0, [pc, #176]	; (80061fc <tcp_close_shutdown_fin+0xc8>)
 800614c:	f00a ff4e 	bl	8010fec <iprintf>

  switch (pcb->state) {
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	7d1b      	ldrb	r3, [r3, #20]
 8006154:	2b04      	cmp	r3, #4
 8006156:	d010      	beq.n	800617a <tcp_close_shutdown_fin+0x46>
 8006158:	2b07      	cmp	r3, #7
 800615a:	d01b      	beq.n	8006194 <tcp_close_shutdown_fin+0x60>
 800615c:	2b03      	cmp	r3, #3
 800615e:	d126      	bne.n	80061ae <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f003 fd4f 	bl	8009c04 <tcp_send_fin>
 8006166:	4603      	mov	r3, r0
 8006168:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800616a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d11f      	bne.n	80061b2 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2205      	movs	r2, #5
 8006176:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006178:	e01b      	b.n	80061b2 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f003 fd42 	bl	8009c04 <tcp_send_fin>
 8006180:	4603      	mov	r3, r0
 8006182:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d114      	bne.n	80061b6 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2205      	movs	r2, #5
 8006190:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006192:	e010      	b.n	80061b6 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f003 fd35 	bl	8009c04 <tcp_send_fin>
 800619a:	4603      	mov	r3, r0
 800619c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800619e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d109      	bne.n	80061ba <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2209      	movs	r2, #9
 80061aa:	751a      	strb	r2, [r3, #20]
    }
    break;
 80061ac:	e005      	b.n	80061ba <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e01c      	b.n	80061ec <tcp_close_shutdown_fin+0xb8>
    break;
 80061b2:	bf00      	nop
 80061b4:	e002      	b.n	80061bc <tcp_close_shutdown_fin+0x88>
    break;
 80061b6:	bf00      	nop
 80061b8:	e000      	b.n	80061bc <tcp_close_shutdown_fin+0x88>
    break;
 80061ba:	bf00      	nop
  }

  if (err == ERR_OK) {
 80061bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d103      	bne.n	80061cc <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f004 fb6f 	bl	800a8a8 <tcp_output>
 80061ca:	e00d      	b.n	80061e8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 80061cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d4:	d108      	bne.n	80061e8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	7e9b      	ldrb	r3, [r3, #26]
 80061da:	f043 0308 	orr.w	r3, r3, #8
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	e001      	b.n	80061ec <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80061e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	08012a2c 	.word	0x08012a2c
 80061f8:	08012a5c 	.word	0x08012a5c
 80061fc:	08012a68 	.word	0x08012a68

08006200 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	7d1b      	ldrb	r3, [r3, #20]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d006      	beq.n	800621e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	7e9b      	ldrb	r3, [r3, #26]
 8006214:	f043 0310 	orr.w	r3, r3, #16
 8006218:	b2da      	uxtb	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800621e:	2101      	movs	r1, #1
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff fea1 	bl	8005f68 <tcp_close_shutdown>
 8006226:	4603      	mov	r3, r0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08c      	sub	sp, #48	; 0x30
 8006234:	af02      	add	r7, sp, #8
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	7d1b      	ldrb	r3, [r3, #20]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d106      	bne.n	8006250 <tcp_abandon+0x20>
 8006242:	4b4d      	ldr	r3, [pc, #308]	; (8006378 <tcp_abandon+0x148>)
 8006244:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006248:	494c      	ldr	r1, [pc, #304]	; (800637c <tcp_abandon+0x14c>)
 800624a:	484d      	ldr	r0, [pc, #308]	; (8006380 <tcp_abandon+0x150>)
 800624c:	f00a fece 	bl	8010fec <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	7d1b      	ldrb	r3, [r3, #20]
 8006254:	2b0a      	cmp	r3, #10
 8006256:	d108      	bne.n	800626a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	484a      	ldr	r0, [pc, #296]	; (8006384 <tcp_abandon+0x154>)
 800625c:	f001 f924 	bl	80074a8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006260:	6879      	ldr	r1, [r7, #4]
 8006262:	2001      	movs	r0, #1
 8006264:	f7fe fe62 	bl	8004f2c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8006268:	e081      	b.n	800636e <tcp_abandon+0x13e>
    int send_rst = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006276:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006284:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	7d1b      	ldrb	r3, [r3, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d126      	bne.n	80062e2 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8adb      	ldrh	r3, [r3, #22]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d02e      	beq.n	80062fa <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800629c:	4b3a      	ldr	r3, [pc, #232]	; (8006388 <tcp_abandon+0x158>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d105      	bne.n	80062b2 <tcp_abandon+0x82>
 80062a6:	4b38      	ldr	r3, [pc, #224]	; (8006388 <tcp_abandon+0x158>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	4a36      	ldr	r2, [pc, #216]	; (8006388 <tcp_abandon+0x158>)
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	e013      	b.n	80062da <tcp_abandon+0xaa>
 80062b2:	4b35      	ldr	r3, [pc, #212]	; (8006388 <tcp_abandon+0x158>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	61fb      	str	r3, [r7, #28]
 80062b8:	e00c      	b.n	80062d4 <tcp_abandon+0xa4>
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d104      	bne.n	80062ce <tcp_abandon+0x9e>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	60da      	str	r2, [r3, #12]
 80062cc:	e005      	b.n	80062da <tcp_abandon+0xaa>
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1ef      	bne.n	80062ba <tcp_abandon+0x8a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	60da      	str	r2, [r3, #12]
 80062e0:	e00b      	b.n	80062fa <tcp_abandon+0xca>
      send_rst = reset;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	8adb      	ldrh	r3, [r3, #22]
 80062ea:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4827      	ldr	r0, [pc, #156]	; (800638c <tcp_abandon+0x15c>)
 80062f0:	f001 f8da 	bl	80074a8 <tcp_pcb_remove>
 80062f4:	4b26      	ldr	r3, [pc, #152]	; (8006390 <tcp_abandon+0x160>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d004      	beq.n	800630c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fe15 	bl	8006f36 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006310:	2b00      	cmp	r3, #0
 8006312:	d004      	beq.n	800631e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006318:	4618      	mov	r0, r3
 800631a:	f000 fe0c 	bl	8006f36 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	2b00      	cmp	r3, #0
 8006324:	d004      	beq.n	8006330 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fe03 	bl	8006f36 <tcp_segs_free>
    if (send_rst) {
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00c      	beq.n	8006350 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	1d19      	adds	r1, r3, #4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8b1b      	ldrh	r3, [r3, #24]
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	460b      	mov	r3, r1
 8006348:	6979      	ldr	r1, [r7, #20]
 800634a:	69b8      	ldr	r0, [r7, #24]
 800634c:	f004 fd36 	bl	800adbc <tcp_rst>
    last_state = pcb->state;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	7d1b      	ldrb	r3, [r3, #20]
 8006354:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	2001      	movs	r0, #1
 800635a:	f7fe fde7 	bl	8004f2c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d004      	beq.n	800636e <tcp_abandon+0x13e>
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f06f 010c 	mvn.w	r1, #12
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	4798      	blx	r3
}
 800636e:	bf00      	nop
 8006370:	3728      	adds	r7, #40	; 0x28
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	08012a2c 	.word	0x08012a2c
 800637c:	08012ac4 	.word	0x08012ac4
 8006380:	08012a68 	.word	0x08012a68
 8006384:	20003bd4 	.word	0x20003bd4
 8006388:	20003bd0 	.word	0x20003bd0
 800638c:	20003bc4 	.word	0x20003bc4
 8006390:	20003bc0 	.word	0x20003bc0

08006394 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800639c:	2101      	movs	r1, #1
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff ff46 	bl	8006230 <tcp_abandon>
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80063ba:	2304      	movs	r3, #4
 80063bc:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80063c4:	4b3c      	ldr	r3, [pc, #240]	; (80064b8 <tcp_bind+0x10c>)
 80063c6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <tcp_bind+0x28>
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d102      	bne.n	80063da <tcp_bind+0x2e>
    return ERR_VAL;
 80063d4:	f06f 0305 	mvn.w	r3, #5
 80063d8:	e06a      	b.n	80064b0 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	7d1b      	ldrb	r3, [r3, #20]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <tcp_bind+0x4a>
 80063e2:	4b36      	ldr	r3, [pc, #216]	; (80064bc <tcp_bind+0x110>)
 80063e4:	f44f 7211 	mov.w	r2, #580	; 0x244
 80063e8:	4935      	ldr	r1, [pc, #212]	; (80064c0 <tcp_bind+0x114>)
 80063ea:	4836      	ldr	r0, [pc, #216]	; (80064c4 <tcp_bind+0x118>)
 80063ec:	f00a fdfe 	bl	8010fec <iprintf>
 80063f0:	f06f 0305 	mvn.w	r3, #5
 80063f4:	e05c      	b.n	80064b0 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d109      	bne.n	8006410 <tcp_bind+0x64>
    port = tcp_new_port();
 80063fc:	f000 f9ca 	bl	8006794 <tcp_new_port>
 8006400:	4603      	mov	r3, r0
 8006402:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006404:	88fb      	ldrh	r3, [r7, #6]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d135      	bne.n	8006476 <tcp_bind+0xca>
      return ERR_BUF;
 800640a:	f06f 0301 	mvn.w	r3, #1
 800640e:	e04f      	b.n	80064b0 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006410:	2300      	movs	r3, #0
 8006412:	61fb      	str	r3, [r7, #28]
 8006414:	e02b      	b.n	800646e <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006416:	4a2c      	ldr	r2, [pc, #176]	; (80064c8 <tcp_bind+0x11c>)
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	e01e      	b.n	8006462 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	8adb      	ldrh	r3, [r3, #22]
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	429a      	cmp	r2, r3
 800642c:	d116      	bne.n	800645c <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800642e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006430:	2b00      	cmp	r3, #0
 8006432:	d010      	beq.n	8006456 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00c      	beq.n	8006456 <tcp_bind+0xaa>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006452:	429a      	cmp	r2, r3
 8006454:	d102      	bne.n	800645c <tcp_bind+0xb0>
              return ERR_USE;
 8006456:	f06f 0307 	mvn.w	r3, #7
 800645a:	e029      	b.n	80064b0 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1dd      	bne.n	8006424 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	3301      	adds	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	429a      	cmp	r2, r3
 8006474:	dbcf      	blt.n	8006416 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00c      	beq.n	8006496 <tcp_bind+0xea>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <tcp_bind+0xe4>
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	e000      	b.n	8006492 <tcp_bind+0xe6>
 8006490:	2300      	movs	r3, #0
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	88fa      	ldrh	r2, [r7, #6]
 800649a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800649c:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <tcp_bind+0x120>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	60da      	str	r2, [r3, #12]
 80064a4:	4a09      	ldr	r2, [pc, #36]	; (80064cc <tcp_bind+0x120>)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	f004 fed7 	bl	800b25c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3720      	adds	r7, #32
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	08015100 	.word	0x08015100
 80064bc:	08012a2c 	.word	0x08012a2c
 80064c0:	08012af8 	.word	0x08012af8
 80064c4:	08012a68 	.word	0x08012a68
 80064c8:	080150c8 	.word	0x080150c8
 80064cc:	20003bd0 	.word	0x20003bd0

080064d0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 80064de:	68b8      	ldr	r0, [r7, #8]
 80064e0:	f7ff ff58 	bl	8006394 <tcp_abort>

  return ERR_ABRT;
 80064e4:	f06f 030c 	mvn.w	r3, #12
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	2200      	movs	r2, #0
 8006500:	4619      	mov	r1, r3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f806 	bl	8006514 <tcp_listen_with_backlog_and_err>
 8006508:	4603      	mov	r3, r0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	460b      	mov	r3, r1
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	7d1b      	ldrb	r3, [r3, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <tcp_listen_with_backlog_and_err+0x2e>
 800652e:	4b3f      	ldr	r3, [pc, #252]	; (800662c <tcp_listen_with_backlog_and_err+0x118>)
 8006530:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8006534:	493e      	ldr	r1, [pc, #248]	; (8006630 <tcp_listen_with_backlog_and_err+0x11c>)
 8006536:	483f      	ldr	r0, [pc, #252]	; (8006634 <tcp_listen_with_backlog_and_err+0x120>)
 8006538:	f00a fd58 	bl	8010fec <iprintf>
 800653c:	23f1      	movs	r3, #241	; 0xf1
 800653e:	76fb      	strb	r3, [r7, #27]
 8006540:	e069      	b.n	8006616 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	7d1b      	ldrb	r3, [r3, #20]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d104      	bne.n	8006554 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800654e:	23f7      	movs	r3, #247	; 0xf7
 8006550:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006552:	e060      	b.n	8006616 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8006554:	2002      	movs	r0, #2
 8006556:	f7fe fc9d 	bl	8004e94 <memp_malloc>
 800655a:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d102      	bne.n	8006568 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8006562:	23ff      	movs	r3, #255	; 0xff
 8006564:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006566:	e056      	b.n	8006616 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8ada      	ldrh	r2, [r3, #22]
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	2201      	movs	r2, #1
 800657c:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	7d5a      	ldrb	r2, [r3, #21]
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	7a1a      	ldrb	r2, [r3, #8]
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	7a9a      	ldrb	r2, [r3, #10]
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	7a5a      	ldrb	r2, [r3, #9]
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8adb      	ldrh	r3, [r3, #22]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d021      	beq.n	80065f2 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80065ae:	4b22      	ldr	r3, [pc, #136]	; (8006638 <tcp_listen_with_backlog_and_err+0x124>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d105      	bne.n	80065c4 <tcp_listen_with_backlog_and_err+0xb0>
 80065b8:	4b1f      	ldr	r3, [pc, #124]	; (8006638 <tcp_listen_with_backlog_and_err+0x124>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	4a1e      	ldr	r2, [pc, #120]	; (8006638 <tcp_listen_with_backlog_and_err+0x124>)
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	e013      	b.n	80065ec <tcp_listen_with_backlog_and_err+0xd8>
 80065c4:	4b1c      	ldr	r3, [pc, #112]	; (8006638 <tcp_listen_with_backlog_and_err+0x124>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	e00c      	b.n	80065e6 <tcp_listen_with_backlog_and_err+0xd2>
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d104      	bne.n	80065e0 <tcp_listen_with_backlog_and_err+0xcc>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	60da      	str	r2, [r3, #12]
 80065de:	e005      	b.n	80065ec <tcp_listen_with_backlog_and_err+0xd8>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1ef      	bne.n	80065cc <tcp_listen_with_backlog_and_err+0xb8>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 80065f2:	68f9      	ldr	r1, [r7, #12]
 80065f4:	2001      	movs	r0, #1
 80065f6:	f7fe fc99 	bl	8004f2c <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	4a0f      	ldr	r2, [pc, #60]	; (800663c <tcp_listen_with_backlog_and_err+0x128>)
 80065fe:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006600:	4b0f      	ldr	r3, [pc, #60]	; (8006640 <tcp_listen_with_backlog_and_err+0x12c>)
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	60da      	str	r2, [r3, #12]
 8006608:	4a0d      	ldr	r2, [pc, #52]	; (8006640 <tcp_listen_with_backlog_and_err+0x12c>)
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	f004 fe25 	bl	800b25c <tcp_timer_needed>
  res = ERR_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	7efa      	ldrb	r2, [r7, #27]
 8006620:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8006622:	69fb      	ldr	r3, [r7, #28]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3720      	adds	r7, #32
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	08012a2c 	.word	0x08012a2c
 8006630:	08012b20 	.word	0x08012b20
 8006634:	08012a68 	.word	0x08012a68
 8006638:	20003bd0 	.word	0x20003bd0
 800663c:	080064d1 	.word	0x080064d1
 8006640:	20003bcc 	.word	0x20003bcc

08006644 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006654:	4413      	add	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006660:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006664:	bf28      	it	cs
 8006666:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800666a:	b292      	uxth	r2, r2
 800666c:	4413      	add	r3, r2
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	db08      	blt.n	8006688 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	e020      	b.n	80066ca <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	dd03      	ble.n	800669e <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800669c:	e014      	b.n	80066c8 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b0:	d306      	bcc.n	80066c0 <tcp_update_rcv_ann_wnd+0x7c>
 80066b2:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <tcp_update_rcv_ann_wnd+0x90>)
 80066b4:	f44f 7242 	mov.w	r2, #776	; 0x308
 80066b8:	4907      	ldr	r1, [pc, #28]	; (80066d8 <tcp_update_rcv_ann_wnd+0x94>)
 80066ba:	4808      	ldr	r0, [pc, #32]	; (80066dc <tcp_update_rcv_ann_wnd+0x98>)
 80066bc:	f00a fc96 	bl	8010fec <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80066c8:	2300      	movs	r3, #0
  }
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	08012a2c 	.word	0x08012a2c
 80066d8:	08012b44 	.word	0x08012b44
 80066dc:	08012a68 	.word	0x08012a68

080066e0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	7d1b      	ldrb	r3, [r3, #20]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d106      	bne.n	8006702 <tcp_recved+0x22>
 80066f4:	4b23      	ldr	r3, [pc, #140]	; (8006784 <tcp_recved+0xa4>)
 80066f6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80066fa:	4923      	ldr	r1, [pc, #140]	; (8006788 <tcp_recved+0xa8>)
 80066fc:	4823      	ldr	r0, [pc, #140]	; (800678c <tcp_recved+0xac>)
 80066fe:	f00a fc75 	bl	8010fec <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006706:	887b      	ldrh	r3, [r7, #2]
 8006708:	4413      	add	r3, r2
 800670a:	b29a      	uxth	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006714:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006718:	d904      	bls.n	8006724 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006720:	851a      	strh	r2, [r3, #40]	; 0x28
 8006722:	e017      	b.n	8006754 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006728:	2b00      	cmp	r3, #0
 800672a:	d113      	bne.n	8006754 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	7d1b      	ldrb	r3, [r3, #20]
 8006730:	2b07      	cmp	r3, #7
 8006732:	d003      	beq.n	800673c <tcp_recved+0x5c>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	7d1b      	ldrb	r3, [r3, #20]
 8006738:	2b09      	cmp	r3, #9
 800673a:	d104      	bne.n	8006746 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006742:	851a      	strh	r2, [r3, #40]	; 0x28
 8006744:	e006      	b.n	8006754 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8006746:	4b0f      	ldr	r3, [pc, #60]	; (8006784 <tcp_recved+0xa4>)
 8006748:	f240 322d 	movw	r2, #813	; 0x32d
 800674c:	4910      	ldr	r1, [pc, #64]	; (8006790 <tcp_recved+0xb0>)
 800674e:	480f      	ldr	r0, [pc, #60]	; (800678c <tcp_recved+0xac>)
 8006750:	f00a fc4c 	bl	8010fec <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff ff75 	bl	8006644 <tcp_update_rcv_ann_wnd>
 800675a:	4603      	mov	r3, r0
 800675c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006764:	db09      	blt.n	800677a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	7e9b      	ldrb	r3, [r3, #26]
 800676a:	f043 0302 	orr.w	r3, r3, #2
 800676e:	b2da      	uxtb	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f004 f897 	bl	800a8a8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800677a:	bf00      	nop
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	08012a2c 	.word	0x08012a2c
 8006788:	08012b60 	.word	0x08012b60
 800678c:	08012a68 	.word	0x08012a68
 8006790:	08012b88 	.word	0x08012b88

08006794 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800679e:	4b1d      	ldr	r3, [pc, #116]	; (8006814 <tcp_new_port+0x80>)
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	b291      	uxth	r1, r2
 80067a6:	4a1b      	ldr	r2, [pc, #108]	; (8006814 <tcp_new_port+0x80>)
 80067a8:	8011      	strh	r1, [r2, #0]
 80067aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d103      	bne.n	80067ba <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80067b2:	4b18      	ldr	r3, [pc, #96]	; (8006814 <tcp_new_port+0x80>)
 80067b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80067b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80067ba:	2300      	movs	r3, #0
 80067bc:	71fb      	strb	r3, [r7, #7]
 80067be:	e01e      	b.n	80067fe <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	4a15      	ldr	r2, [pc, #84]	; (8006818 <tcp_new_port+0x84>)
 80067c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	e011      	b.n	80067f2 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	8ada      	ldrh	r2, [r3, #22]
 80067d2:	4b10      	ldr	r3, [pc, #64]	; (8006814 <tcp_new_port+0x80>)
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d108      	bne.n	80067ec <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80067da:	88bb      	ldrh	r3, [r7, #4]
 80067dc:	3301      	adds	r3, #1
 80067de:	80bb      	strh	r3, [r7, #4]
 80067e0:	88bb      	ldrh	r3, [r7, #4]
 80067e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067e6:	d3da      	bcc.n	800679e <tcp_new_port+0xa>
          return 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	e00d      	b.n	8006808 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	603b      	str	r3, [r7, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1ea      	bne.n	80067ce <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80067f8:	79fb      	ldrb	r3, [r7, #7]
 80067fa:	3301      	adds	r3, #1
 80067fc:	71fb      	strb	r3, [r7, #7]
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d9dd      	bls.n	80067c0 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006804:	4b03      	ldr	r3, [pc, #12]	; (8006814 <tcp_new_port+0x80>)
 8006806:	881b      	ldrh	r3, [r3, #0]
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	20000006 	.word	0x20000006
 8006818:	080150c8 	.word	0x080150c8

0800681c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800681c:	b5b0      	push	{r4, r5, r7, lr}
 800681e:	b08c      	sub	sp, #48	; 0x30
 8006820:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8006826:	4b97      	ldr	r3, [pc, #604]	; (8006a84 <tcp_slowtmr+0x268>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3301      	adds	r3, #1
 800682c:	4a95      	ldr	r2, [pc, #596]	; (8006a84 <tcp_slowtmr+0x268>)
 800682e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006830:	4b95      	ldr	r3, [pc, #596]	; (8006a88 <tcp_slowtmr+0x26c>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	3301      	adds	r3, #1
 8006836:	b2da      	uxtb	r2, r3
 8006838:	4b93      	ldr	r3, [pc, #588]	; (8006a88 <tcp_slowtmr+0x26c>)
 800683a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800683c:	2300      	movs	r3, #0
 800683e:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8006840:	4b92      	ldr	r3, [pc, #584]	; (8006a8c <tcp_slowtmr+0x270>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006846:	e227      	b.n	8006c98 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	7d1b      	ldrb	r3, [r3, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d106      	bne.n	800685e <tcp_slowtmr+0x42>
 8006850:	4b8f      	ldr	r3, [pc, #572]	; (8006a90 <tcp_slowtmr+0x274>)
 8006852:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8006856:	498f      	ldr	r1, [pc, #572]	; (8006a94 <tcp_slowtmr+0x278>)
 8006858:	488f      	ldr	r0, [pc, #572]	; (8006a98 <tcp_slowtmr+0x27c>)
 800685a:	f00a fbc7 	bl	8010fec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	7d1b      	ldrb	r3, [r3, #20]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d106      	bne.n	8006874 <tcp_slowtmr+0x58>
 8006866:	4b8a      	ldr	r3, [pc, #552]	; (8006a90 <tcp_slowtmr+0x274>)
 8006868:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800686c:	498b      	ldr	r1, [pc, #556]	; (8006a9c <tcp_slowtmr+0x280>)
 800686e:	488a      	ldr	r0, [pc, #552]	; (8006a98 <tcp_slowtmr+0x27c>)
 8006870:	f00a fbbc 	bl	8010fec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	7d1b      	ldrb	r3, [r3, #20]
 8006878:	2b0a      	cmp	r3, #10
 800687a:	d106      	bne.n	800688a <tcp_slowtmr+0x6e>
 800687c:	4b84      	ldr	r3, [pc, #528]	; (8006a90 <tcp_slowtmr+0x274>)
 800687e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8006882:	4987      	ldr	r1, [pc, #540]	; (8006aa0 <tcp_slowtmr+0x284>)
 8006884:	4884      	ldr	r0, [pc, #528]	; (8006a98 <tcp_slowtmr+0x27c>)
 8006886:	f00a fbb1 	bl	8010fec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	7f5a      	ldrb	r2, [r3, #29]
 800688e:	4b7e      	ldr	r3, [pc, #504]	; (8006a88 <tcp_slowtmr+0x26c>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	d103      	bne.n	800689e <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800689c:	e1fc      	b.n	8006c98 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800689e:	4b7a      	ldr	r3, [pc, #488]	; (8006a88 <tcp_slowtmr+0x26c>)
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	7d1b      	ldrb	r3, [r3, #20]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d108      	bne.n	80068c8 <tcp_slowtmr+0xac>
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068bc:	2b05      	cmp	r3, #5
 80068be:	d903      	bls.n	80068c8 <tcp_slowtmr+0xac>
      ++pcb_remove;
 80068c0:	7ffb      	ldrb	r3, [r7, #31]
 80068c2:	3301      	adds	r3, #1
 80068c4:	77fb      	strb	r3, [r7, #31]
 80068c6:	e0a2      	b.n	8006a0e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068ce:	2b0b      	cmp	r3, #11
 80068d0:	d903      	bls.n	80068da <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80068d2:	7ffb      	ldrb	r3, [r7, #31]
 80068d4:	3301      	adds	r3, #1
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e099      	b.n	8006a0e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d032      	beq.n	800694a <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80068ea:	3b01      	subs	r3, #1
 80068ec:	4a6d      	ldr	r2, [pc, #436]	; (8006aa4 <tcp_slowtmr+0x288>)
 80068ee:	5cd3      	ldrb	r3, [r2, r3]
 80068f0:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80068f8:	7cfa      	ldrb	r2, [r7, #19]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d907      	bls.n	800690e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006904:	3301      	adds	r3, #1
 8006906:	b2da      	uxtb	r2, r3
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8006914:	7cfa      	ldrb	r2, [r7, #19]
 8006916:	429a      	cmp	r2, r3
 8006918:	d879      	bhi.n	8006a0e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800691a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800691c:	f004 fbde 	bl	800b0dc <tcp_zero_window_probe>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d173      	bne.n	8006a0e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8006934:	2b06      	cmp	r3, #6
 8006936:	d86a      	bhi.n	8006a0e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800693e:	3301      	adds	r3, #1
 8006940:	b2da      	uxtb	r2, r3
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8006948:	e061      	b.n	8006a0e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006950:	2b00      	cmp	r3, #0
 8006952:	db08      	blt.n	8006966 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800695a:	b29b      	uxth	r3, r3
 800695c:	3301      	adds	r3, #1
 800695e:	b29b      	uxth	r3, r3
 8006960:	b21a      	sxth	r2, r3
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d04f      	beq.n	8006a0e <tcp_slowtmr+0x1f2>
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800697a:	429a      	cmp	r2, r3
 800697c:	db47      	blt.n	8006a0e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	7d1b      	ldrb	r3, [r3, #20]
 8006982:	2b02      	cmp	r3, #2
 8006984:	d018      	beq.n	80069b8 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800698c:	2b0c      	cmp	r3, #12
 800698e:	bf28      	it	cs
 8006990:	230c      	movcs	r3, #12
 8006992:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800699a:	10db      	asrs	r3, r3, #3
 800699c:	b21b      	sxth	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80069a6:	4413      	add	r3, r2
 80069a8:	7dfa      	ldrb	r2, [r7, #23]
 80069aa:	493f      	ldr	r1, [pc, #252]	; (8006aa8 <tcp_slowtmr+0x28c>)
 80069ac:	5c8a      	ldrb	r2, [r1, r2]
 80069ae:	4093      	lsls	r3, r2
 80069b0:	b21a      	sxth	r2, r3
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	2200      	movs	r2, #0
 80069bc:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80069ca:	4293      	cmp	r3, r2
 80069cc:	bf28      	it	cs
 80069ce:	4613      	movcs	r3, r2
 80069d0:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80069d2:	8abb      	ldrh	r3, [r7, #20]
 80069d4:	085b      	lsrs	r3, r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d206      	bcs.n	80069fe <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8006a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a0a:	f004 fa4d 	bl	800aea8 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	7d1b      	ldrb	r3, [r3, #20]
 8006a12:	2b06      	cmp	r3, #6
 8006a14:	d10f      	bne.n	8006a36 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	7e9b      	ldrb	r3, [r3, #26]
 8006a1a:	f003 0310 	and.w	r3, r3, #16
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d009      	beq.n	8006a36 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006a22:	4b18      	ldr	r3, [pc, #96]	; (8006a84 <tcp_slowtmr+0x268>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b28      	cmp	r3, #40	; 0x28
 8006a2e:	d902      	bls.n	8006a36 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006a30:	7ffb      	ldrb	r3, [r7, #31]
 8006a32:	3301      	adds	r3, #1
 8006a34:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	7a1b      	ldrb	r3, [r3, #8]
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d05d      	beq.n	8006afe <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d003      	beq.n	8006a52 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8006a4e:	2b07      	cmp	r3, #7
 8006a50:	d155      	bne.n	8006afe <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006a52:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <tcp_slowtmr+0x268>)
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a62:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006a66:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006a6a:	4910      	ldr	r1, [pc, #64]	; (8006aac <tcp_slowtmr+0x290>)
 8006a6c:	fba1 1303 	umull	r1, r3, r1, r3
 8006a70:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d91c      	bls.n	8006ab0 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006a76:	7ffb      	ldrb	r3, [r7, #31]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8006a7c:	7fbb      	ldrb	r3, [r7, #30]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	77bb      	strb	r3, [r7, #30]
 8006a82:	e03c      	b.n	8006afe <tcp_slowtmr+0x2e2>
 8006a84:	20003bc8 	.word	0x20003bc8
 8006a88:	2000050a 	.word	0x2000050a
 8006a8c:	20003bc4 	.word	0x20003bc4
 8006a90:	08012a2c 	.word	0x08012a2c
 8006a94:	08012bdc 	.word	0x08012bdc
 8006a98:	08012a68 	.word	0x08012a68
 8006a9c:	08012c08 	.word	0x08012c08
 8006aa0:	08012c34 	.word	0x08012c34
 8006aa4:	080150c0 	.word	0x080150c0
 8006aa8:	080150b0 	.word	0x080150b0
 8006aac:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006ab0:	4b97      	ldr	r3, [pc, #604]	; (8006d10 <tcp_slowtmr+0x4f4>)
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	4b92      	ldr	r3, [pc, #584]	; (8006d14 <tcp_slowtmr+0x4f8>)
 8006aca:	fb03 f300 	mul.w	r3, r3, r0
 8006ace:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8006ad0:	4991      	ldr	r1, [pc, #580]	; (8006d18 <tcp_slowtmr+0x4fc>)
 8006ad2:	fba1 1303 	umull	r1, r3, r1, r3
 8006ad6:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d910      	bls.n	8006afe <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8006adc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ade:	f004 fac0 	bl	800b062 <tcp_keepalive>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8006ae6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d107      	bne.n	8006afe <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8006af4:	3301      	adds	r3, #1
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d016      	beq.n	8006b34 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8006b06:	4b82      	ldr	r3, [pc, #520]	; (8006d10 <tcp_slowtmr+0x4f4>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006b16:	4619      	mov	r1, r3
 8006b18:	460b      	mov	r3, r1
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	440b      	add	r3, r1
 8006b1e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d307      	bcc.n	8006b34 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fa04 	bl	8006f36 <tcp_segs_free>
      pcb->ooseq = NULL;
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	2200      	movs	r2, #0
 8006b32:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	7d1b      	ldrb	r3, [r3, #20]
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d109      	bne.n	8006b50 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b3c:	4b74      	ldr	r3, [pc, #464]	; (8006d10 <tcp_slowtmr+0x4f4>)
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b28      	cmp	r3, #40	; 0x28
 8006b48:	d902      	bls.n	8006b50 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006b4a:	7ffb      	ldrb	r3, [r7, #31]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	7d1b      	ldrb	r3, [r3, #20]
 8006b54:	2b09      	cmp	r3, #9
 8006b56:	d109      	bne.n	8006b6c <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006b58:	4b6d      	ldr	r3, [pc, #436]	; (8006d10 <tcp_slowtmr+0x4f4>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2bf0      	cmp	r3, #240	; 0xf0
 8006b64:	d902      	bls.n	8006b6c <tcp_slowtmr+0x350>
        ++pcb_remove;
 8006b66:	7ffb      	ldrb	r3, [r7, #31]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006b6c:	7ffb      	ldrb	r3, [r7, #31]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d05d      	beq.n	8006c2e <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b78:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006b7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b7c:	f000 fc52 	bl	8007424 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d010      	beq.n	8006ba8 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006b86:	4b65      	ldr	r3, [pc, #404]	; (8006d1c <tcp_slowtmr+0x500>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d106      	bne.n	8006b9e <tcp_slowtmr+0x382>
 8006b90:	4b63      	ldr	r3, [pc, #396]	; (8006d20 <tcp_slowtmr+0x504>)
 8006b92:	f240 4289 	movw	r2, #1161	; 0x489
 8006b96:	4963      	ldr	r1, [pc, #396]	; (8006d24 <tcp_slowtmr+0x508>)
 8006b98:	4863      	ldr	r0, [pc, #396]	; (8006d28 <tcp_slowtmr+0x50c>)
 8006b9a:	f00a fa27 	bl	8010fec <iprintf>
        prev->next = pcb->next;
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	e00f      	b.n	8006bc8 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006ba8:	4b5c      	ldr	r3, [pc, #368]	; (8006d1c <tcp_slowtmr+0x500>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d006      	beq.n	8006bc0 <tcp_slowtmr+0x3a4>
 8006bb2:	4b5b      	ldr	r3, [pc, #364]	; (8006d20 <tcp_slowtmr+0x504>)
 8006bb4:	f240 428d 	movw	r2, #1165	; 0x48d
 8006bb8:	495c      	ldr	r1, [pc, #368]	; (8006d2c <tcp_slowtmr+0x510>)
 8006bba:	485b      	ldr	r0, [pc, #364]	; (8006d28 <tcp_slowtmr+0x50c>)
 8006bbc:	f00a fa16 	bl	8010fec <iprintf>
        tcp_active_pcbs = pcb->next;
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	4a55      	ldr	r2, [pc, #340]	; (8006d1c <tcp_slowtmr+0x500>)
 8006bc6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006bc8:	7fbb      	ldrb	r3, [r7, #30]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d010      	beq.n	8006bf0 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006bd6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	1d1d      	adds	r5, r3, #4
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	8adb      	ldrh	r3, [r3, #22]
 8006be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be2:	8b12      	ldrh	r2, [r2, #24]
 8006be4:	9201      	str	r2, [sp, #4]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	462b      	mov	r3, r5
 8006bea:	4622      	mov	r2, r4
 8006bec:	f004 f8e6 	bl	800adbc <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	7d1b      	ldrb	r3, [r3, #20]
 8006bfa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	2001      	movs	r0, #1
 8006c0a:	f7fe f98f 	bl	8004f2c <memp_free>

      tcp_active_pcbs_changed = 0;
 8006c0e:	4b48      	ldr	r3, [pc, #288]	; (8006d30 <tcp_slowtmr+0x514>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d004      	beq.n	8006c24 <tcp_slowtmr+0x408>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f06f 010c 	mvn.w	r1, #12
 8006c20:	68b8      	ldr	r0, [r7, #8]
 8006c22:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006c24:	4b42      	ldr	r3, [pc, #264]	; (8006d30 <tcp_slowtmr+0x514>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d035      	beq.n	8006c98 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8006c2c:	e606      	b.n	800683c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	7edb      	ldrb	r3, [r3, #27]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	7eda      	ldrb	r2, [r3, #27]
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	7f1b      	ldrb	r3, [r3, #28]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d323      	bcc.n	8006c98 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	2200      	movs	r2, #0
 8006c54:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006c56:	4b36      	ldr	r3, [pc, #216]	; (8006d30 <tcp_slowtmr+0x514>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <tcp_slowtmr+0x460>
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6c:	6a3a      	ldr	r2, [r7, #32]
 8006c6e:	6912      	ldr	r2, [r2, #16]
 8006c70:	6a39      	ldr	r1, [r7, #32]
 8006c72:	4610      	mov	r0, r2
 8006c74:	4798      	blx	r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	777b      	strb	r3, [r7, #29]
 8006c7a:	e001      	b.n	8006c80 <tcp_slowtmr+0x464>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8006c80:	4b2b      	ldr	r3, [pc, #172]	; (8006d30 <tcp_slowtmr+0x514>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d000      	beq.n	8006c8a <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8006c88:	e5d8      	b.n	800683c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006c8a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d102      	bne.n	8006c98 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8006c92:	6a38      	ldr	r0, [r7, #32]
 8006c94:	f003 fe08 	bl	800a8a8 <tcp_output>
  while (pcb != NULL) {
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f47f add4 	bne.w	8006848 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8006ca4:	4b23      	ldr	r3, [pc, #140]	; (8006d34 <tcp_slowtmr+0x518>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8006caa:	e068      	b.n	8006d7e <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	7d1b      	ldrb	r3, [r3, #20]
 8006cb0:	2b0a      	cmp	r3, #10
 8006cb2:	d006      	beq.n	8006cc2 <tcp_slowtmr+0x4a6>
 8006cb4:	4b1a      	ldr	r3, [pc, #104]	; (8006d20 <tcp_slowtmr+0x504>)
 8006cb6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006cba:	491f      	ldr	r1, [pc, #124]	; (8006d38 <tcp_slowtmr+0x51c>)
 8006cbc:	481a      	ldr	r0, [pc, #104]	; (8006d28 <tcp_slowtmr+0x50c>)
 8006cbe:	f00a f995 	bl	8010fec <iprintf>
    pcb_remove = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006cc6:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <tcp_slowtmr+0x4f4>)
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2bf0      	cmp	r3, #240	; 0xf0
 8006cd2:	d902      	bls.n	8006cda <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8006cd4:	7ffb      	ldrb	r3, [r7, #31]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006cda:	7ffb      	ldrb	r3, [r7, #31]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d049      	beq.n	8006d74 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ce2:	f000 fb9f 	bl	8007424 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d029      	beq.n	8006d40 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006cec:	4b11      	ldr	r3, [pc, #68]	; (8006d34 <tcp_slowtmr+0x518>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d106      	bne.n	8006d04 <tcp_slowtmr+0x4e8>
 8006cf6:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <tcp_slowtmr+0x504>)
 8006cf8:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006cfc:	490f      	ldr	r1, [pc, #60]	; (8006d3c <tcp_slowtmr+0x520>)
 8006cfe:	480a      	ldr	r0, [pc, #40]	; (8006d28 <tcp_slowtmr+0x50c>)
 8006d00:	f00a f974 	bl	8010fec <iprintf>
        prev->next = pcb->next;
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	60da      	str	r2, [r3, #12]
 8006d0c:	e028      	b.n	8006d60 <tcp_slowtmr+0x544>
 8006d0e:	bf00      	nop
 8006d10:	20003bc8 	.word	0x20003bc8
 8006d14:	000124f8 	.word	0x000124f8
 8006d18:	10624dd3 	.word	0x10624dd3
 8006d1c:	20003bc4 	.word	0x20003bc4
 8006d20:	08012a2c 	.word	0x08012a2c
 8006d24:	08012c64 	.word	0x08012c64
 8006d28:	08012a68 	.word	0x08012a68
 8006d2c:	08012c90 	.word	0x08012c90
 8006d30:	20003bc0 	.word	0x20003bc0
 8006d34:	20003bd4 	.word	0x20003bd4
 8006d38:	08012cbc 	.word	0x08012cbc
 8006d3c:	08012cec 	.word	0x08012cec
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006d40:	4b12      	ldr	r3, [pc, #72]	; (8006d8c <tcp_slowtmr+0x570>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d006      	beq.n	8006d58 <tcp_slowtmr+0x53c>
 8006d4a:	4b11      	ldr	r3, [pc, #68]	; (8006d90 <tcp_slowtmr+0x574>)
 8006d4c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8006d50:	4910      	ldr	r1, [pc, #64]	; (8006d94 <tcp_slowtmr+0x578>)
 8006d52:	4811      	ldr	r0, [pc, #68]	; (8006d98 <tcp_slowtmr+0x57c>)
 8006d54:	f00a f94a 	bl	8010fec <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	4a0b      	ldr	r2, [pc, #44]	; (8006d8c <tcp_slowtmr+0x570>)
 8006d5e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006d6a:	69b9      	ldr	r1, [r7, #24]
 8006d6c:	2001      	movs	r0, #1
 8006d6e:	f7fe f8dd 	bl	8004f2c <memp_free>
 8006d72:	e004      	b.n	8006d7e <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d193      	bne.n	8006cac <tcp_slowtmr+0x490>
    }
  }
}
 8006d84:	bf00      	nop
 8006d86:	3728      	adds	r7, #40	; 0x28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d8c:	20003bd4 	.word	0x20003bd4
 8006d90:	08012a2c 	.word	0x08012a2c
 8006d94:	08012d14 	.word	0x08012d14
 8006d98:	08012a68 	.word	0x08012a68

08006d9c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006da2:	4b2d      	ldr	r3, [pc, #180]	; (8006e58 <tcp_fasttmr+0xbc>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	3301      	adds	r3, #1
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	4b2b      	ldr	r3, [pc, #172]	; (8006e58 <tcp_fasttmr+0xbc>)
 8006dac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006dae:	4b2b      	ldr	r3, [pc, #172]	; (8006e5c <tcp_fasttmr+0xc0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006db4:	e048      	b.n	8006e48 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	7f5a      	ldrb	r2, [r3, #29]
 8006dba:	4b27      	ldr	r3, [pc, #156]	; (8006e58 <tcp_fasttmr+0xbc>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d03f      	beq.n	8006e42 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006dc2:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <tcp_fasttmr+0xbc>)
 8006dc4:	781a      	ldrb	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	7e9b      	ldrb	r3, [r3, #26]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d010      	beq.n	8006df8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	7e9b      	ldrb	r3, [r3, #26]
 8006dda:	f043 0302 	orr.w	r3, r3, #2
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f003 fd5f 	bl	800a8a8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	7e9b      	ldrb	r3, [r3, #26]
 8006dee:	f023 0303 	bic.w	r3, r3, #3
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	7e9b      	ldrb	r3, [r3, #26]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d009      	beq.n	8006e18 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	7e9b      	ldrb	r3, [r3, #26]
 8006e08:	f023 0308 	bic.w	r3, r3, #8
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff f98e 	bl	8006134 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006e26:	4b0e      	ldr	r3, [pc, #56]	; (8006e60 <tcp_fasttmr+0xc4>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f819 	bl	8006e64 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006e32:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <tcp_fasttmr+0xc4>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d000      	beq.n	8006e3c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006e3a:	e7b8      	b.n	8006dae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	607b      	str	r3, [r7, #4]
 8006e40:	e002      	b.n	8006e48 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1b3      	bne.n	8006db6 <tcp_fasttmr+0x1a>
    }
  }
}
 8006e4e:	bf00      	nop
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	2000050a 	.word	0x2000050a
 8006e5c:	20003bc4 	.word	0x20003bc4
 8006e60:	20003bc0 	.word	0x20003bc0

08006e64 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006e64:	b590      	push	{r4, r7, lr}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e70:	7b5b      	ldrb	r3, [r3, #13]
 8006e72:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e78:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00b      	beq.n	8006ea2 <tcp_process_refused_data+0x3e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6918      	ldr	r0, [r3, #16]
 8006e94:	2300      	movs	r3, #0
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	47a0      	blx	r4
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73fb      	strb	r3, [r7, #15]
 8006ea0:	e007      	b.n	8006eb2 <tcp_process_refused_data+0x4e>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	f000 f89b 	bl	8006fe4 <tcp_recv_null>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d12a      	bne.n	8006f10 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d033      	beq.n	8006f2c <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006ecc:	d005      	beq.n	8006eda <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <tcp_process_refused_data+0x98>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6918      	ldr	r0, [r3, #16]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	47a0      	blx	r4
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	73fb      	strb	r3, [r7, #15]
 8006efa:	e001      	b.n	8006f00 <tcp_process_refused_data+0x9c>
 8006efc:	2300      	movs	r3, #0
 8006efe:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f04:	f113 0f0d 	cmn.w	r3, #13
 8006f08:	d110      	bne.n	8006f2c <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8006f0a:	f06f 030c 	mvn.w	r3, #12
 8006f0e:	e00e      	b.n	8006f2e <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8006f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f14:	f113 0f0d 	cmn.w	r3, #13
 8006f18:	d102      	bne.n	8006f20 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006f1a:	f06f 030c 	mvn.w	r3, #12
 8006f1e:	e006      	b.n	8006f2e <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8006f26:	f06f 0304 	mvn.w	r3, #4
 8006f2a:	e000      	b.n	8006f2e <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd90      	pop	{r4, r7, pc}

08006f36 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006f3e:	e007      	b.n	8006f50 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f809 	bl	8006f5e <tcp_seg_free>
    seg = next;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1f4      	bne.n	8006f40 <tcp_segs_free+0xa>
  }
}
 8006f56:	bf00      	nop
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00c      	beq.n	8006f86 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d004      	beq.n	8006f7e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe fd09 	bl	8005990 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006f7e:	6879      	ldr	r1, [r7, #4]
 8006f80:	2003      	movs	r0, #3
 8006f82:	f7fd ffd3 	bl	8004f2c <memp_free>
  }
}
 8006f86:	bf00      	nop
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	460b      	mov	r3, r1
 8006f98:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	755a      	strb	r2, [r3, #21]
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006fb4:	2003      	movs	r0, #3
 8006fb6:	f7fd ff6d 	bl	8004e94 <memp_malloc>
 8006fba:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <tcp_seg_copy+0x1a>
    return NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e00a      	b.n	8006fdc <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006fc6:	2210      	movs	r2, #16
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f009 fffb 	bl	8010fc6 <memcpy>
  pbuf_ref(cseg->p);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe fd87 	bl	8005ae8 <pbuf_ref>
  return cseg;
 8006fda:	68fb      	ldr	r3, [r7, #12]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d009      	beq.n	800700c <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	891b      	ldrh	r3, [r3, #8]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	68b8      	ldr	r0, [r7, #8]
 8007000:	f7ff fb6e 	bl	80066e0 <tcp_recved>
    pbuf_free(p);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7fe fcc3 	bl	8005990 <pbuf_free>
 800700a:	e008      	b.n	800701e <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800700c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8007014:	68b8      	ldr	r0, [r7, #8]
 8007016:	f7ff f8f3 	bl	8006200 <tcp_close>
 800701a:	4603      	mov	r3, r0
 800701c:	e000      	b.n	8007020 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007036:	2b00      	cmp	r3, #0
 8007038:	db01      	blt.n	800703e <tcp_kill_prio+0x16>
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	e000      	b.n	8007040 <tcp_kill_prio+0x18>
 800703e:	237f      	movs	r3, #127	; 0x7f
 8007040:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007046:	2300      	movs	r3, #0
 8007048:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800704a:	4b16      	ldr	r3, [pc, #88]	; (80070a4 <tcp_kill_prio+0x7c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	e01a      	b.n	8007088 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	7d5b      	ldrb	r3, [r3, #21]
 8007056:	7afa      	ldrb	r2, [r7, #11]
 8007058:	429a      	cmp	r2, r3
 800705a:	d312      	bcc.n	8007082 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800705c:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <tcp_kill_prio+0x80>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	429a      	cmp	r2, r3
 800706a:	d80a      	bhi.n	8007082 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800706c:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <tcp_kill_prio+0x80>)
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	7d5b      	ldrb	r3, [r3, #21]
 8007080:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e1      	bne.n	8007052 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007094:	6938      	ldr	r0, [r7, #16]
 8007096:	f7ff f97d 	bl	8006394 <tcp_abort>
  }
}
 800709a:	bf00      	nop
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20003bc4 	.word	0x20003bc4
 80070a8:	20003bc8 	.word	0x20003bc8

080070ac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80070b6:	79fb      	ldrb	r3, [r7, #7]
 80070b8:	2b08      	cmp	r3, #8
 80070ba:	d009      	beq.n	80070d0 <tcp_kill_state+0x24>
 80070bc:	79fb      	ldrb	r3, [r7, #7]
 80070be:	2b09      	cmp	r3, #9
 80070c0:	d006      	beq.n	80070d0 <tcp_kill_state+0x24>
 80070c2:	4b1a      	ldr	r3, [pc, #104]	; (800712c <tcp_kill_state+0x80>)
 80070c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80070c8:	4919      	ldr	r1, [pc, #100]	; (8007130 <tcp_kill_state+0x84>)
 80070ca:	481a      	ldr	r0, [pc, #104]	; (8007134 <tcp_kill_state+0x88>)
 80070cc:	f009 ff8e 	bl	8010fec <iprintf>

  inactivity = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80070d4:	2300      	movs	r3, #0
 80070d6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80070d8:	4b17      	ldr	r3, [pc, #92]	; (8007138 <tcp_kill_state+0x8c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	e017      	b.n	8007110 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	7d1b      	ldrb	r3, [r3, #20]
 80070e4:	79fa      	ldrb	r2, [r7, #7]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d10f      	bne.n	800710a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80070ea:	4b14      	ldr	r3, [pc, #80]	; (800713c <tcp_kill_state+0x90>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d807      	bhi.n	800710a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80070fa:	4b10      	ldr	r3, [pc, #64]	; (800713c <tcp_kill_state+0x90>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e4      	bne.n	80070e0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800711c:	2100      	movs	r1, #0
 800711e:	6938      	ldr	r0, [r7, #16]
 8007120:	f7ff f886 	bl	8006230 <tcp_abandon>
  }
}
 8007124:	bf00      	nop
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	08012a2c 	.word	0x08012a2c
 8007130:	08012d3c 	.word	0x08012d3c
 8007134:	08012a68 	.word	0x08012a68
 8007138:	20003bc4 	.word	0x20003bc4
 800713c:	20003bc8 	.word	0x20003bc8

08007140 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800714a:	2300      	movs	r3, #0
 800714c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800714e:	4b12      	ldr	r3, [pc, #72]	; (8007198 <tcp_kill_timewait+0x58>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	e012      	b.n	800717c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007156:	4b11      	ldr	r3, [pc, #68]	; (800719c <tcp_kill_timewait+0x5c>)
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	429a      	cmp	r2, r3
 8007164:	d807      	bhi.n	8007176 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007166:	4b0d      	ldr	r3, [pc, #52]	; (800719c <tcp_kill_timewait+0x5c>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e9      	bne.n	8007156 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007188:	68b8      	ldr	r0, [r7, #8]
 800718a:	f7ff f903 	bl	8006394 <tcp_abort>
  }
}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20003bd4 	.word	0x20003bd4
 800719c:	20003bc8 	.word	0x20003bc8

080071a0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80071aa:	2001      	movs	r0, #1
 80071ac:	f7fd fe72 	bl	8004e94 <memp_malloc>
 80071b0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d124      	bne.n	8007202 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80071b8:	f7ff ffc2 	bl	8007140 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80071bc:	2001      	movs	r0, #1
 80071be:	f7fd fe69 	bl	8004e94 <memp_malloc>
 80071c2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d11b      	bne.n	8007202 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80071ca:	2009      	movs	r0, #9
 80071cc:	f7ff ff6e 	bl	80070ac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80071d0:	2001      	movs	r0, #1
 80071d2:	f7fd fe5f 	bl	8004e94 <memp_malloc>
 80071d6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d111      	bne.n	8007202 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80071de:	2008      	movs	r0, #8
 80071e0:	f7ff ff64 	bl	80070ac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80071e4:	2001      	movs	r0, #1
 80071e6:	f7fd fe55 	bl	8004e94 <memp_malloc>
 80071ea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d107      	bne.n	8007202 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff ff17 	bl	8007028 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80071fa:	2001      	movs	r0, #1
 80071fc:	f7fd fe4a 	bl	8004e94 <memp_malloc>
 8007200:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d03f      	beq.n	8007288 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007208:	2298      	movs	r2, #152	; 0x98
 800720a:	2100      	movs	r1, #0
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f009 fee5 	bl	8010fdc <memset>
    pcb->prio = prio;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	79fa      	ldrb	r2, [r7, #7]
 8007216:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800721e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007228:	855a      	strh	r2, [r3, #42]	; 0x2a
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	22ff      	movs	r2, #255	; 0xff
 8007236:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800723e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2206      	movs	r2, #6
 8007244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2206      	movs	r2, #6
 800724c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007254:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800725e:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <tcp_alloc+0xf4>)
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007266:	4b0c      	ldr	r3, [pc, #48]	; (8007298 <tcp_alloc+0xf8>)
 8007268:	781a      	ldrb	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007274:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4a08      	ldr	r2, [pc, #32]	; (800729c <tcp_alloc+0xfc>)
 800727c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4a07      	ldr	r2, [pc, #28]	; (80072a0 <tcp_alloc+0x100>)
 8007284:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007288:	68fb      	ldr	r3, [r7, #12]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20003bc8 	.word	0x20003bc8
 8007298:	2000050a 	.word	0x2000050a
 800729c:	08006fe5 	.word	0x08006fe5
 80072a0:	006ddd00 	.word	0x006ddd00

080072a4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80072ae:	2040      	movs	r0, #64	; 0x40
 80072b0:	f7ff ff76 	bl	80071a0 <tcp_alloc>
 80072b4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80072b6:	68fb      	ldr	r3, [r7, #12]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	611a      	str	r2, [r3, #16]
  }
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
	...

080072e4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00e      	beq.n	8007312 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	7d1b      	ldrb	r3, [r3, #20]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d106      	bne.n	800730a <tcp_recv+0x26>
 80072fc:	4b07      	ldr	r3, [pc, #28]	; (800731c <tcp_recv+0x38>)
 80072fe:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8007302:	4907      	ldr	r1, [pc, #28]	; (8007320 <tcp_recv+0x3c>)
 8007304:	4807      	ldr	r0, [pc, #28]	; (8007324 <tcp_recv+0x40>)
 8007306:	f009 fe71 	bl	8010fec <iprintf>
    pcb->recv = recv;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	08012a2c 	.word	0x08012a2c
 8007320:	08012d4c 	.word	0x08012d4c
 8007324:	08012a68 	.word	0x08012a68

08007328 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00d      	beq.n	8007354 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	7d1b      	ldrb	r3, [r3, #20]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d106      	bne.n	800734e <tcp_sent+0x26>
 8007340:	4b06      	ldr	r3, [pc, #24]	; (800735c <tcp_sent+0x34>)
 8007342:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8007346:	4906      	ldr	r1, [pc, #24]	; (8007360 <tcp_sent+0x38>)
 8007348:	4806      	ldr	r0, [pc, #24]	; (8007364 <tcp_sent+0x3c>)
 800734a:	f009 fe4f 	bl	8010fec <iprintf>
    pcb->sent = sent;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8007354:	bf00      	nop
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	08012a2c 	.word	0x08012a2c
 8007360:	08012d74 	.word	0x08012d74
 8007364:	08012a68 	.word	0x08012a68

08007368 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00e      	beq.n	8007396 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	7d1b      	ldrb	r3, [r3, #20]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d106      	bne.n	800738e <tcp_err+0x26>
 8007380:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <tcp_err+0x38>)
 8007382:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8007386:	4907      	ldr	r1, [pc, #28]	; (80073a4 <tcp_err+0x3c>)
 8007388:	4807      	ldr	r0, [pc, #28]	; (80073a8 <tcp_err+0x40>)
 800738a:	f009 fe2f 	bl	8010fec <iprintf>
    pcb->errf = err;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8007396:	bf00      	nop
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	08012a2c 	.word	0x08012a2c
 80073a4:	08012d9c 	.word	0x08012d9c
 80073a8:	08012a68 	.word	0x08012a68

080073ac <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d008      	beq.n	80073ce <tcp_accept+0x22>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	7d1b      	ldrb	r3, [r3, #20]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d104      	bne.n	80073ce <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	619a      	str	r2, [r3, #24]
  }
}
 80073ce:	bf00      	nop
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
	...

080073dc <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	4613      	mov	r3, r2
 80073e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	7d1b      	ldrb	r3, [r3, #20]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d106      	bne.n	8007400 <tcp_poll+0x24>
 80073f2:	4b09      	ldr	r3, [pc, #36]	; (8007418 <tcp_poll+0x3c>)
 80073f4:	f240 7203 	movw	r2, #1795	; 0x703
 80073f8:	4908      	ldr	r1, [pc, #32]	; (800741c <tcp_poll+0x40>)
 80073fa:	4809      	ldr	r0, [pc, #36]	; (8007420 <tcp_poll+0x44>)
 80073fc:	f009 fdf6 	bl	8010fec <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	79fa      	ldrb	r2, [r7, #7]
 800740c:	771a      	strb	r2, [r3, #28]
}
 800740e:	bf00      	nop
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	08012a2c 	.word	0x08012a2c
 800741c:	08012dc4 	.word	0x08012dc4
 8007420:	08012a68 	.word	0x08012a68

08007424 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	7d1b      	ldrb	r3, [r3, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d034      	beq.n	800749e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007438:	2b0a      	cmp	r3, #10
 800743a:	d030      	beq.n	800749e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8007440:	2b01      	cmp	r3, #1
 8007442:	d02c      	beq.n	800749e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007448:	2b00      	cmp	r3, #0
 800744a:	d007      	beq.n	800745c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007450:	4618      	mov	r0, r3
 8007452:	f7fe fa9d 	bl	8005990 <pbuf_free>
      pcb->refused_data = NULL;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff fd68 	bl	8006f36 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007472:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007478:	4618      	mov	r0, r3
 800747a:	f7ff fd5c 	bl	8006f36 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fd57 	bl	8006f36 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	669a      	str	r2, [r3, #104]	; 0x68
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d105      	bne.n	80074c8 <tcp_pcb_remove+0x20>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	e013      	b.n	80074f0 <tcp_pcb_remove+0x48>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	e00c      	b.n	80074ea <tcp_pcb_remove+0x42>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d104      	bne.n	80074e4 <tcp_pcb_remove+0x3c>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	60da      	str	r2, [r3, #12]
 80074e2:	e005      	b.n	80074f0 <tcp_pcb_remove+0x48>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1ef      	bne.n	80074d0 <tcp_pcb_remove+0x28>
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2200      	movs	r2, #0
 80074f4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80074f6:	6838      	ldr	r0, [r7, #0]
 80074f8:	f7ff ff94 	bl	8007424 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	7d1b      	ldrb	r3, [r3, #20]
 8007500:	2b0a      	cmp	r3, #10
 8007502:	d013      	beq.n	800752c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8007508:	2b01      	cmp	r3, #1
 800750a:	d00f      	beq.n	800752c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	7e9b      	ldrb	r3, [r3, #26]
 8007510:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8007514:	2b00      	cmp	r3, #0
 8007516:	d009      	beq.n	800752c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	7e9b      	ldrb	r3, [r3, #26]
 800751c:	f043 0302 	orr.w	r3, r3, #2
 8007520:	b2da      	uxtb	r2, r3
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007526:	6838      	ldr	r0, [r7, #0]
 8007528:	f003 f9be 	bl	800a8a8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	7d1b      	ldrb	r3, [r3, #20]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d020      	beq.n	8007576 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007538:	2b00      	cmp	r3, #0
 800753a:	d006      	beq.n	800754a <tcp_pcb_remove+0xa2>
 800753c:	4b13      	ldr	r3, [pc, #76]	; (800758c <tcp_pcb_remove+0xe4>)
 800753e:	f240 7253 	movw	r2, #1875	; 0x753
 8007542:	4913      	ldr	r1, [pc, #76]	; (8007590 <tcp_pcb_remove+0xe8>)
 8007544:	4813      	ldr	r0, [pc, #76]	; (8007594 <tcp_pcb_remove+0xec>)
 8007546:	f009 fd51 	bl	8010fec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d006      	beq.n	8007560 <tcp_pcb_remove+0xb8>
 8007552:	4b0e      	ldr	r3, [pc, #56]	; (800758c <tcp_pcb_remove+0xe4>)
 8007554:	f240 7254 	movw	r2, #1876	; 0x754
 8007558:	490f      	ldr	r1, [pc, #60]	; (8007598 <tcp_pcb_remove+0xf0>)
 800755a:	480e      	ldr	r0, [pc, #56]	; (8007594 <tcp_pcb_remove+0xec>)
 800755c:	f009 fd46 	bl	8010fec <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007564:	2b00      	cmp	r3, #0
 8007566:	d006      	beq.n	8007576 <tcp_pcb_remove+0xce>
 8007568:	4b08      	ldr	r3, [pc, #32]	; (800758c <tcp_pcb_remove+0xe4>)
 800756a:	f240 7256 	movw	r2, #1878	; 0x756
 800756e:	490b      	ldr	r1, [pc, #44]	; (800759c <tcp_pcb_remove+0xf4>)
 8007570:	4808      	ldr	r0, [pc, #32]	; (8007594 <tcp_pcb_remove+0xec>)
 8007572:	f009 fd3b 	bl	8010fec <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2200      	movs	r2, #0
 800757a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2200      	movs	r2, #0
 8007580:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	08012a2c 	.word	0x08012a2c
 8007590:	08012de4 	.word	0x08012de4
 8007594:	08012a68 	.word	0x08012a68
 8007598:	08012dfc 	.word	0x08012dfc
 800759c:	08012e18 	.word	0x08012e18

080075a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80075a8:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <tcp_next_iss+0x28>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	4b07      	ldr	r3, [pc, #28]	; (80075cc <tcp_next_iss+0x2c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4413      	add	r3, r2
 80075b2:	4a05      	ldr	r2, [pc, #20]	; (80075c8 <tcp_next_iss+0x28>)
 80075b4:	6013      	str	r3, [r2, #0]
  return iss;
 80075b6:	4b04      	ldr	r3, [pc, #16]	; (80075c8 <tcp_next_iss+0x28>)
 80075b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	20000008 	.word	0x20000008
 80075cc:	20003bc8 	.word	0x20003bc8

080075d0 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80075dc:	6838      	ldr	r0, [r7, #0]
 80075de:	f007 fa7b 	bl	800ead8 <ip4_route>
 80075e2:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	e010      	b.n	8007610 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075f2:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80075f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d008      	beq.n	800760e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80075fc:	897b      	ldrh	r3, [r7, #10]
 80075fe:	3b28      	subs	r3, #40	; 0x28
 8007600:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007602:	893a      	ldrh	r2, [r7, #8]
 8007604:	88fb      	ldrh	r3, [r7, #6]
 8007606:	4293      	cmp	r3, r2
 8007608:	bf28      	it	cs
 800760a:	4613      	movcs	r3, r2
 800760c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800760e:	88fb      	ldrh	r3, [r7, #6]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007626:	e011      	b.n	800764c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d108      	bne.n	8007646 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f7fe feaa 	bl	8006394 <tcp_abort>
      pcb = next;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	e002      	b.n	800764c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1ea      	bne.n	8007628 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8007652:	bf00      	nop
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d02c      	beq.n	80076c6 <tcp_netif_ip_addr_changed+0x6a>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d028      	beq.n	80076c6 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007674:	4b16      	ldr	r3, [pc, #88]	; (80076d0 <tcp_netif_ip_addr_changed+0x74>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff ffcc 	bl	8007618 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007680:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <tcp_netif_ip_addr_changed+0x78>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff ffc6 	bl	8007618 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d019      	beq.n	80076c6 <tcp_netif_ip_addr_changed+0x6a>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d015      	beq.n	80076c6 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800769a:	4b0f      	ldr	r3, [pc, #60]	; (80076d8 <tcp_netif_ip_addr_changed+0x7c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	e00e      	b.n	80076c0 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d103      	bne.n	80076bc <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1ed      	bne.n	80076a2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80076c6:	bf00      	nop
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20003bc4 	.word	0x20003bc4
 80076d4:	20003bd0 	.word	0x20003bd0
 80076d8:	20003bcc 	.word	0x20003bcc

080076dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80076dc:	b590      	push	{r4, r7, lr}
 80076de:	b08b      	sub	sp, #44	; 0x2c
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	4a82      	ldr	r2, [pc, #520]	; (80078f4 <tcp_input+0x218>)
 80076ec:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	895b      	ldrh	r3, [r3, #10]
 80076f2:	2b13      	cmp	r3, #19
 80076f4:	f240 838a 	bls.w	8007e0c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80076f8:	4b7f      	ldr	r3, [pc, #508]	; (80078f8 <tcp_input+0x21c>)
 80076fa:	695a      	ldr	r2, [r3, #20]
 80076fc:	4b7e      	ldr	r3, [pc, #504]	; (80078f8 <tcp_input+0x21c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4619      	mov	r1, r3
 8007702:	4610      	mov	r0, r2
 8007704:	f007 fc80 	bl	800f008 <ip4_addr_isbroadcast_u32>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	f040 8380 	bne.w	8007e10 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007710:	4b79      	ldr	r3, [pc, #484]	; (80078f8 <tcp_input+0x21c>)
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007718:	2be0      	cmp	r3, #224	; 0xe0
 800771a:	f000 8379 	beq.w	8007e10 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800771e:	4b75      	ldr	r3, [pc, #468]	; (80078f4 <tcp_input+0x218>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	899b      	ldrh	r3, [r3, #12]
 8007724:	b29b      	uxth	r3, r3
 8007726:	4618      	mov	r0, r3
 8007728:	f7fc ff9c 	bl	8004664 <lwip_htons>
 800772c:	4603      	mov	r3, r0
 800772e:	0b1b      	lsrs	r3, r3, #12
 8007730:	b29b      	uxth	r3, r3
 8007732:	b2db      	uxtb	r3, r3
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007738:	7cbb      	ldrb	r3, [r7, #18]
 800773a:	2b13      	cmp	r3, #19
 800773c:	f240 8368 	bls.w	8007e10 <tcp_input+0x734>
 8007740:	7cbb      	ldrb	r3, [r7, #18]
 8007742:	b29a      	uxth	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	891b      	ldrh	r3, [r3, #8]
 8007748:	429a      	cmp	r2, r3
 800774a:	f200 8361 	bhi.w	8007e10 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800774e:	7cbb      	ldrb	r3, [r7, #18]
 8007750:	b29b      	uxth	r3, r3
 8007752:	3b14      	subs	r3, #20
 8007754:	b29a      	uxth	r2, r3
 8007756:	4b69      	ldr	r3, [pc, #420]	; (80078fc <tcp_input+0x220>)
 8007758:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800775a:	4b69      	ldr	r3, [pc, #420]	; (8007900 <tcp_input+0x224>)
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	895a      	ldrh	r2, [r3, #10]
 8007764:	7cbb      	ldrb	r3, [r7, #18]
 8007766:	b29b      	uxth	r3, r3
 8007768:	429a      	cmp	r2, r3
 800776a:	d30d      	bcc.n	8007788 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800776c:	4b63      	ldr	r3, [pc, #396]	; (80078fc <tcp_input+0x220>)
 800776e:	881a      	ldrh	r2, [r3, #0]
 8007770:	4b64      	ldr	r3, [pc, #400]	; (8007904 <tcp_input+0x228>)
 8007772:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007774:	7cbb      	ldrb	r3, [r7, #18]
 8007776:	b29b      	uxth	r3, r3
 8007778:	425b      	negs	r3, r3
 800777a:	b29b      	uxth	r3, r3
 800777c:	b21b      	sxth	r3, r3
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7fe f8e1 	bl	8005948 <pbuf_header>
 8007786:	e055      	b.n	8007834 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <tcp_input+0xc0>
 8007790:	4b5d      	ldr	r3, [pc, #372]	; (8007908 <tcp_input+0x22c>)
 8007792:	22b2      	movs	r2, #178	; 0xb2
 8007794:	495d      	ldr	r1, [pc, #372]	; (800790c <tcp_input+0x230>)
 8007796:	485e      	ldr	r0, [pc, #376]	; (8007910 <tcp_input+0x234>)
 8007798:	f009 fc28 	bl	8010fec <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800779c:	f06f 0113 	mvn.w	r1, #19
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fe f8d1 	bl	8005948 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	895a      	ldrh	r2, [r3, #10]
 80077aa:	4b56      	ldr	r3, [pc, #344]	; (8007904 <tcp_input+0x228>)
 80077ac:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80077ae:	4b53      	ldr	r3, [pc, #332]	; (80078fc <tcp_input+0x220>)
 80077b0:	881a      	ldrh	r2, [r3, #0]
 80077b2:	4b54      	ldr	r3, [pc, #336]	; (8007904 <tcp_input+0x228>)
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80077ba:	4b52      	ldr	r3, [pc, #328]	; (8007904 <tcp_input+0x228>)
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	425b      	negs	r3, r3
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	b21b      	sxth	r3, r3
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fe f8be 	bl	8005948 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	895b      	ldrh	r3, [r3, #10]
 80077d2:	8a3a      	ldrh	r2, [r7, #16]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	f200 831d 	bhi.w	8007e14 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	4a47      	ldr	r2, [pc, #284]	; (8007900 <tcp_input+0x224>)
 80077e2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	8a3b      	ldrh	r3, [r7, #16]
 80077ea:	425b      	negs	r3, r3
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	b21b      	sxth	r3, r3
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f7fe f8a8 	bl	8005948 <pbuf_header>
    p->tot_len -= opt2len;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	891a      	ldrh	r2, [r3, #8]
 80077fc:	8a3b      	ldrh	r3, [r7, #16]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	b29a      	uxth	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	895b      	ldrh	r3, [r3, #10]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <tcp_input+0x13e>
 800780e:	4b3e      	ldr	r3, [pc, #248]	; (8007908 <tcp_input+0x22c>)
 8007810:	22cf      	movs	r2, #207	; 0xcf
 8007812:	4940      	ldr	r1, [pc, #256]	; (8007914 <tcp_input+0x238>)
 8007814:	483e      	ldr	r0, [pc, #248]	; (8007910 <tcp_input+0x234>)
 8007816:	f009 fbe9 	bl	8010fec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	891a      	ldrh	r2, [r3, #8]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	891b      	ldrh	r3, [r3, #8]
 8007824:	429a      	cmp	r2, r3
 8007826:	d005      	beq.n	8007834 <tcp_input+0x158>
 8007828:	4b37      	ldr	r3, [pc, #220]	; (8007908 <tcp_input+0x22c>)
 800782a:	22d0      	movs	r2, #208	; 0xd0
 800782c:	493a      	ldr	r1, [pc, #232]	; (8007918 <tcp_input+0x23c>)
 800782e:	4838      	ldr	r0, [pc, #224]	; (8007910 <tcp_input+0x234>)
 8007830:	f009 fbdc 	bl	8010fec <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007834:	4b2f      	ldr	r3, [pc, #188]	; (80078f4 <tcp_input+0x218>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	b29a      	uxth	r2, r3
 800783c:	4b2d      	ldr	r3, [pc, #180]	; (80078f4 <tcp_input+0x218>)
 800783e:	681c      	ldr	r4, [r3, #0]
 8007840:	4610      	mov	r0, r2
 8007842:	f7fc ff0f 	bl	8004664 <lwip_htons>
 8007846:	4603      	mov	r3, r0
 8007848:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800784a:	4b2a      	ldr	r3, [pc, #168]	; (80078f4 <tcp_input+0x218>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	885b      	ldrh	r3, [r3, #2]
 8007850:	b29a      	uxth	r2, r3
 8007852:	4b28      	ldr	r3, [pc, #160]	; (80078f4 <tcp_input+0x218>)
 8007854:	681c      	ldr	r4, [r3, #0]
 8007856:	4610      	mov	r0, r2
 8007858:	f7fc ff04 	bl	8004664 <lwip_htons>
 800785c:	4603      	mov	r3, r0
 800785e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007860:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <tcp_input+0x218>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	4b23      	ldr	r3, [pc, #140]	; (80078f4 <tcp_input+0x218>)
 8007868:	681c      	ldr	r4, [r3, #0]
 800786a:	4610      	mov	r0, r2
 800786c:	f7fc ff08 	bl	8004680 <lwip_htonl>
 8007870:	4603      	mov	r3, r0
 8007872:	6063      	str	r3, [r4, #4]
 8007874:	6863      	ldr	r3, [r4, #4]
 8007876:	4a29      	ldr	r2, [pc, #164]	; (800791c <tcp_input+0x240>)
 8007878:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800787a:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <tcp_input+0x218>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <tcp_input+0x218>)
 8007882:	681c      	ldr	r4, [r3, #0]
 8007884:	4610      	mov	r0, r2
 8007886:	f7fc fefb 	bl	8004680 <lwip_htonl>
 800788a:	4603      	mov	r3, r0
 800788c:	60a3      	str	r3, [r4, #8]
 800788e:	68a3      	ldr	r3, [r4, #8]
 8007890:	4a23      	ldr	r2, [pc, #140]	; (8007920 <tcp_input+0x244>)
 8007892:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007894:	4b17      	ldr	r3, [pc, #92]	; (80078f4 <tcp_input+0x218>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	89db      	ldrh	r3, [r3, #14]
 800789a:	b29a      	uxth	r2, r3
 800789c:	4b15      	ldr	r3, [pc, #84]	; (80078f4 <tcp_input+0x218>)
 800789e:	681c      	ldr	r4, [r3, #0]
 80078a0:	4610      	mov	r0, r2
 80078a2:	f7fc fedf 	bl	8004664 <lwip_htons>
 80078a6:	4603      	mov	r3, r0
 80078a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80078aa:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <tcp_input+0x218>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	899b      	ldrh	r3, [r3, #12]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fc fed6 	bl	8004664 <lwip_htons>
 80078b8:	4603      	mov	r3, r0
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	4b18      	ldr	r3, [pc, #96]	; (8007924 <tcp_input+0x248>)
 80078c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	891a      	ldrh	r2, [r3, #8]
 80078ca:	4b16      	ldr	r3, [pc, #88]	; (8007924 <tcp_input+0x248>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	f003 0303 	and.w	r3, r3, #3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	bf14      	ite	ne
 80078d6:	2301      	movne	r3, #1
 80078d8:	2300      	moveq	r3, #0
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	b29b      	uxth	r3, r3
 80078de:	4413      	add	r3, r2
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	4b11      	ldr	r3, [pc, #68]	; (8007928 <tcp_input+0x24c>)
 80078e4:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80078ea:	4b10      	ldr	r3, [pc, #64]	; (800792c <tcp_input+0x250>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	61fb      	str	r3, [r7, #28]
 80078f0:	e082      	b.n	80079f8 <tcp_input+0x31c>
 80078f2:	bf00      	nop
 80078f4:	2000051c 	.word	0x2000051c
 80078f8:	20000674 	.word	0x20000674
 80078fc:	20000520 	.word	0x20000520
 8007900:	20000524 	.word	0x20000524
 8007904:	20000522 	.word	0x20000522
 8007908:	08012e30 	.word	0x08012e30
 800790c:	08012e64 	.word	0x08012e64
 8007910:	08012e74 	.word	0x08012e74
 8007914:	08012e9c 	.word	0x08012e9c
 8007918:	08012ea8 	.word	0x08012ea8
 800791c:	2000052c 	.word	0x2000052c
 8007920:	20000530 	.word	0x20000530
 8007924:	20000538 	.word	0x20000538
 8007928:	20000536 	.word	0x20000536
 800792c:	20003bc4 	.word	0x20003bc4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	7d1b      	ldrb	r3, [r3, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d105      	bne.n	8007944 <tcp_input+0x268>
 8007938:	4b8f      	ldr	r3, [pc, #572]	; (8007b78 <tcp_input+0x49c>)
 800793a:	22e2      	movs	r2, #226	; 0xe2
 800793c:	498f      	ldr	r1, [pc, #572]	; (8007b7c <tcp_input+0x4a0>)
 800793e:	4890      	ldr	r0, [pc, #576]	; (8007b80 <tcp_input+0x4a4>)
 8007940:	f009 fb54 	bl	8010fec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	7d1b      	ldrb	r3, [r3, #20]
 8007948:	2b0a      	cmp	r3, #10
 800794a:	d105      	bne.n	8007958 <tcp_input+0x27c>
 800794c:	4b8a      	ldr	r3, [pc, #552]	; (8007b78 <tcp_input+0x49c>)
 800794e:	22e3      	movs	r2, #227	; 0xe3
 8007950:	498c      	ldr	r1, [pc, #560]	; (8007b84 <tcp_input+0x4a8>)
 8007952:	488b      	ldr	r0, [pc, #556]	; (8007b80 <tcp_input+0x4a4>)
 8007954:	f009 fb4a 	bl	8010fec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	7d1b      	ldrb	r3, [r3, #20]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d105      	bne.n	800796c <tcp_input+0x290>
 8007960:	4b85      	ldr	r3, [pc, #532]	; (8007b78 <tcp_input+0x49c>)
 8007962:	22e4      	movs	r2, #228	; 0xe4
 8007964:	4988      	ldr	r1, [pc, #544]	; (8007b88 <tcp_input+0x4ac>)
 8007966:	4886      	ldr	r0, [pc, #536]	; (8007b80 <tcp_input+0x4a4>)
 8007968:	f009 fb40 	bl	8010fec <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	8b1a      	ldrh	r2, [r3, #24]
 8007970:	4b86      	ldr	r3, [pc, #536]	; (8007b8c <tcp_input+0x4b0>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	429a      	cmp	r2, r3
 800797a:	d138      	bne.n	80079ee <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	8ada      	ldrh	r2, [r3, #22]
 8007980:	4b82      	ldr	r3, [pc, #520]	; (8007b8c <tcp_input+0x4b0>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	885b      	ldrh	r3, [r3, #2]
 8007986:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007988:	429a      	cmp	r2, r3
 800798a:	d130      	bne.n	80079ee <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	4b7f      	ldr	r3, [pc, #508]	; (8007b90 <tcp_input+0x4b4>)
 8007992:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007994:	429a      	cmp	r2, r3
 8007996:	d12a      	bne.n	80079ee <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	4b7c      	ldr	r3, [pc, #496]	; (8007b90 <tcp_input+0x4b4>)
 800799e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d124      	bne.n	80079ee <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d105      	bne.n	80079ba <tcp_input+0x2de>
 80079ae:	4b72      	ldr	r3, [pc, #456]	; (8007b78 <tcp_input+0x49c>)
 80079b0:	22ec      	movs	r2, #236	; 0xec
 80079b2:	4978      	ldr	r1, [pc, #480]	; (8007b94 <tcp_input+0x4b8>)
 80079b4:	4872      	ldr	r0, [pc, #456]	; (8007b80 <tcp_input+0x4a4>)
 80079b6:	f009 fb19 	bl	8010fec <iprintf>
      if (prev != NULL) {
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00a      	beq.n	80079d6 <tcp_input+0x2fa>
        prev->next = pcb->next;
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80079c8:	4b73      	ldr	r3, [pc, #460]	; (8007b98 <tcp_input+0x4bc>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80079d0:	4a71      	ldr	r2, [pc, #452]	; (8007b98 <tcp_input+0x4bc>)
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d10f      	bne.n	8007a00 <tcp_input+0x324>
 80079e0:	4b65      	ldr	r3, [pc, #404]	; (8007b78 <tcp_input+0x49c>)
 80079e2:	22f4      	movs	r2, #244	; 0xf4
 80079e4:	496d      	ldr	r1, [pc, #436]	; (8007b9c <tcp_input+0x4c0>)
 80079e6:	4866      	ldr	r0, [pc, #408]	; (8007b80 <tcp_input+0x4a4>)
 80079e8:	f009 fb00 	bl	8010fec <iprintf>
      break;
 80079ec:	e008      	b.n	8007a00 <tcp_input+0x324>
    }
    prev = pcb;
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	61fb      	str	r3, [r7, #28]
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d198      	bne.n	8007930 <tcp_input+0x254>
 80079fe:	e000      	b.n	8007a02 <tcp_input+0x326>
      break;
 8007a00:	bf00      	nop
  }

  if (pcb == NULL) {
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d173      	bne.n	8007af0 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a08:	4b65      	ldr	r3, [pc, #404]	; (8007ba0 <tcp_input+0x4c4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	61fb      	str	r3, [r7, #28]
 8007a0e:	e02f      	b.n	8007a70 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	7d1b      	ldrb	r3, [r3, #20]
 8007a14:	2b0a      	cmp	r3, #10
 8007a16:	d005      	beq.n	8007a24 <tcp_input+0x348>
 8007a18:	4b57      	ldr	r3, [pc, #348]	; (8007b78 <tcp_input+0x49c>)
 8007a1a:	22fe      	movs	r2, #254	; 0xfe
 8007a1c:	4961      	ldr	r1, [pc, #388]	; (8007ba4 <tcp_input+0x4c8>)
 8007a1e:	4858      	ldr	r0, [pc, #352]	; (8007b80 <tcp_input+0x4a4>)
 8007a20:	f009 fae4 	bl	8010fec <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	8b1a      	ldrh	r2, [r3, #24]
 8007a28:	4b58      	ldr	r3, [pc, #352]	; (8007b8c <tcp_input+0x4b0>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d11a      	bne.n	8007a6a <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	8ada      	ldrh	r2, [r3, #22]
 8007a38:	4b54      	ldr	r3, [pc, #336]	; (8007b8c <tcp_input+0x4b0>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	885b      	ldrh	r3, [r3, #2]
 8007a3e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d112      	bne.n	8007a6a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	4b51      	ldr	r3, [pc, #324]	; (8007b90 <tcp_input+0x4b4>)
 8007a4a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d10c      	bne.n	8007a6a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	4b4e      	ldr	r3, [pc, #312]	; (8007b90 <tcp_input+0x4b4>)
 8007a56:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d106      	bne.n	8007a6a <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8007a5c:	69f8      	ldr	r0, [r7, #28]
 8007a5e:	f000 fb15 	bl	800808c <tcp_timewait_input>
        pbuf_free(p);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7fd ff94 	bl	8005990 <pbuf_free>
        return;
 8007a68:	e1da      	b.n	8007e20 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	61fb      	str	r3, [r7, #28]
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1cc      	bne.n	8007a10 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007a7a:	4b4b      	ldr	r3, [pc, #300]	; (8007ba8 <tcp_input+0x4cc>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	e019      	b.n	8007ab6 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	8ada      	ldrh	r2, [r3, #22]
 8007a86:	4b41      	ldr	r3, [pc, #260]	; (8007b8c <tcp_input+0x4b0>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	885b      	ldrh	r3, [r3, #2]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d10c      	bne.n	8007aac <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	4b3e      	ldr	r3, [pc, #248]	; (8007b90 <tcp_input+0x4b4>)
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d00f      	beq.n	8007abe <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00d      	beq.n	8007ac0 <tcp_input+0x3e4>
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d009      	beq.n	8007ac0 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e2      	bne.n	8007a82 <tcp_input+0x3a6>
 8007abc:	e000      	b.n	8007ac0 <tcp_input+0x3e4>
            break;
 8007abe:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d014      	beq.n	8007af0 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00a      	beq.n	8007ae2 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007ad4:	4b34      	ldr	r3, [pc, #208]	; (8007ba8 <tcp_input+0x4cc>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007adc:	4a32      	ldr	r2, [pc, #200]	; (8007ba8 <tcp_input+0x4cc>)
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8007ae2:	6978      	ldr	r0, [r7, #20]
 8007ae4:	f000 f9f0 	bl	8007ec8 <tcp_listen_input>
      pbuf_free(p);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7fd ff51 	bl	8005990 <pbuf_free>
      return;
 8007aee:	e197      	b.n	8007e20 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 8164 	beq.w	8007dc0 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007af8:	4b2c      	ldr	r3, [pc, #176]	; (8007bac <tcp_input+0x4d0>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	891a      	ldrh	r2, [r3, #8]
 8007b02:	4b2a      	ldr	r3, [pc, #168]	; (8007bac <tcp_input+0x4d0>)
 8007b04:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007b06:	4a29      	ldr	r2, [pc, #164]	; (8007bac <tcp_input+0x4d0>)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007b0c:	4b1f      	ldr	r3, [pc, #124]	; (8007b8c <tcp_input+0x4b0>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a26      	ldr	r2, [pc, #152]	; (8007bac <tcp_input+0x4d0>)
 8007b12:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007b14:	4b26      	ldr	r3, [pc, #152]	; (8007bb0 <tcp_input+0x4d4>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007b1a:	4b26      	ldr	r3, [pc, #152]	; (8007bb4 <tcp_input+0x4d8>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007b20:	4b25      	ldr	r3, [pc, #148]	; (8007bb8 <tcp_input+0x4dc>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007b26:	4b25      	ldr	r3, [pc, #148]	; (8007bbc <tcp_input+0x4e0>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	f003 0308 	and.w	r3, r3, #8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d006      	beq.n	8007b40 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	7b5b      	ldrb	r3, [r3, #13]
 8007b36:	f043 0301 	orr.w	r3, r3, #1
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d03d      	beq.n	8007bc4 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007b48:	69f8      	ldr	r0, [r7, #28]
 8007b4a:	f7ff f98b 	bl	8006e64 <tcp_process_refused_data>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f113 0f0d 	cmn.w	r3, #13
 8007b54:	d007      	beq.n	8007b66 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d032      	beq.n	8007bc4 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007b5e:	4b18      	ldr	r3, [pc, #96]	; (8007bc0 <tcp_input+0x4e4>)
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d02e      	beq.n	8007bc4 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f040 8108 	bne.w	8007d80 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007b70:	69f8      	ldr	r0, [r7, #28]
 8007b72:	f002 fe3d 	bl	800a7f0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007b76:	e103      	b.n	8007d80 <tcp_input+0x6a4>
 8007b78:	08012e30 	.word	0x08012e30
 8007b7c:	08012ec8 	.word	0x08012ec8
 8007b80:	08012e74 	.word	0x08012e74
 8007b84:	08012ef0 	.word	0x08012ef0
 8007b88:	08012f1c 	.word	0x08012f1c
 8007b8c:	2000051c 	.word	0x2000051c
 8007b90:	20000674 	.word	0x20000674
 8007b94:	08012f44 	.word	0x08012f44
 8007b98:	20003bc4 	.word	0x20003bc4
 8007b9c:	08012f70 	.word	0x08012f70
 8007ba0:	20003bd4 	.word	0x20003bd4
 8007ba4:	08012f9c 	.word	0x08012f9c
 8007ba8:	20003bcc 	.word	0x20003bcc
 8007bac:	2000050c 	.word	0x2000050c
 8007bb0:	2000053c 	.word	0x2000053c
 8007bb4:	20000539 	.word	0x20000539
 8007bb8:	20000534 	.word	0x20000534
 8007bbc:	20000538 	.word	0x20000538
 8007bc0:	20000536 	.word	0x20000536
      }
    }
    tcp_input_pcb = pcb;
 8007bc4:	4a98      	ldr	r2, [pc, #608]	; (8007e28 <tcp_input+0x74c>)
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007bca:	69f8      	ldr	r0, [r7, #28]
 8007bcc:	f000 fac6 	bl	800815c <tcp_process>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007bd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007bd8:	f113 0f0d 	cmn.w	r3, #13
 8007bdc:	f000 80d2 	beq.w	8007d84 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8007be0:	4b92      	ldr	r3, [pc, #584]	; (8007e2c <tcp_input+0x750>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d016      	beq.n	8007c1a <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d008      	beq.n	8007c08 <tcp_input+0x52c>
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bfc:	69fa      	ldr	r2, [r7, #28]
 8007bfe:	6912      	ldr	r2, [r2, #16]
 8007c00:	f06f 010d 	mvn.w	r1, #13
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007c08:	69f9      	ldr	r1, [r7, #28]
 8007c0a:	4889      	ldr	r0, [pc, #548]	; (8007e30 <tcp_input+0x754>)
 8007c0c:	f7ff fc4c 	bl	80074a8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007c10:	69f9      	ldr	r1, [r7, #28]
 8007c12:	2001      	movs	r0, #1
 8007c14:	f7fd f98a 	bl	8004f2c <memp_free>
 8007c18:	e0bf      	b.n	8007d9a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007c1e:	4b85      	ldr	r3, [pc, #532]	; (8007e34 <tcp_input+0x758>)
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d01b      	beq.n	8007c5e <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007c26:	4b83      	ldr	r3, [pc, #524]	; (8007e34 <tcp_input+0x758>)
 8007c28:	881b      	ldrh	r3, [r3, #0]
 8007c2a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d009      	beq.n	8007c48 <tcp_input+0x56c>
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	6910      	ldr	r0, [r2, #16]
 8007c3c:	89fa      	ldrh	r2, [r7, #14]
 8007c3e:	69f9      	ldr	r1, [r7, #28]
 8007c40:	4798      	blx	r3
 8007c42:	4603      	mov	r3, r0
 8007c44:	74fb      	strb	r3, [r7, #19]
 8007c46:	e001      	b.n	8007c4c <tcp_input+0x570>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007c4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c50:	f113 0f0d 	cmn.w	r3, #13
 8007c54:	f000 8098 	beq.w	8007d88 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007c58:	4b76      	ldr	r3, [pc, #472]	; (8007e34 <tcp_input+0x758>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007c5e:	69f8      	ldr	r0, [r7, #28]
 8007c60:	f000 f900 	bl	8007e64 <tcp_input_delayed_close>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f040 8090 	bne.w	8007d8c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007c6c:	4b72      	ldr	r3, [pc, #456]	; (8007e38 <tcp_input+0x75c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d041      	beq.n	8007cf8 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d006      	beq.n	8007c8a <tcp_input+0x5ae>
 8007c7c:	4b6f      	ldr	r3, [pc, #444]	; (8007e3c <tcp_input+0x760>)
 8007c7e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007c82:	496f      	ldr	r1, [pc, #444]	; (8007e40 <tcp_input+0x764>)
 8007c84:	486f      	ldr	r0, [pc, #444]	; (8007e44 <tcp_input+0x768>)
 8007c86:	f009 f9b1 	bl	8010fec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	7e9b      	ldrb	r3, [r3, #26]
 8007c8e:	f003 0310 	and.w	r3, r3, #16
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d008      	beq.n	8007ca8 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007c96:	4b68      	ldr	r3, [pc, #416]	; (8007e38 <tcp_input+0x75c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fd fe78 	bl	8005990 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007ca0:	69f8      	ldr	r0, [r7, #28]
 8007ca2:	f7fe fb77 	bl	8006394 <tcp_abort>
            goto aborted;
 8007ca6:	e078      	b.n	8007d9a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00c      	beq.n	8007ccc <tcp_input+0x5f0>
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	6918      	ldr	r0, [r3, #16]
 8007cbc:	4b5e      	ldr	r3, [pc, #376]	; (8007e38 <tcp_input+0x75c>)
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	69f9      	ldr	r1, [r7, #28]
 8007cc4:	47a0      	blx	r4
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	74fb      	strb	r3, [r7, #19]
 8007cca:	e008      	b.n	8007cde <tcp_input+0x602>
 8007ccc:	4b5a      	ldr	r3, [pc, #360]	; (8007e38 <tcp_input+0x75c>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	69f9      	ldr	r1, [r7, #28]
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	f7ff f985 	bl	8006fe4 <tcp_recv_null>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007cde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ce2:	f113 0f0d 	cmn.w	r3, #13
 8007ce6:	d053      	beq.n	8007d90 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007ce8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007cf0:	4b51      	ldr	r3, [pc, #324]	; (8007e38 <tcp_input+0x75c>)
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007cf8:	4b4c      	ldr	r3, [pc, #304]	; (8007e2c <tcp_input+0x750>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d030      	beq.n	8007d66 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d009      	beq.n	8007d20 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d10:	7b5a      	ldrb	r2, [r3, #13]
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d16:	f042 0220 	orr.w	r2, r2, #32
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	735a      	strb	r2, [r3, #13]
 8007d1e:	e022      	b.n	8007d66 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d24:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007d28:	d005      	beq.n	8007d36 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d2e:	3301      	adds	r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <tcp_input+0x67c>
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	6918      	ldr	r0, [r3, #16]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	69f9      	ldr	r1, [r7, #28]
 8007d50:	47a0      	blx	r4
 8007d52:	4603      	mov	r3, r0
 8007d54:	74fb      	strb	r3, [r7, #19]
 8007d56:	e001      	b.n	8007d5c <tcp_input+0x680>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007d5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d60:	f113 0f0d 	cmn.w	r3, #13
 8007d64:	d016      	beq.n	8007d94 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007d66:	4b30      	ldr	r3, [pc, #192]	; (8007e28 <tcp_input+0x74c>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007d6c:	69f8      	ldr	r0, [r7, #28]
 8007d6e:	f000 f879 	bl	8007e64 <tcp_input_delayed_close>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10f      	bne.n	8007d98 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007d78:	69f8      	ldr	r0, [r7, #28]
 8007d7a:	f002 fd95 	bl	800a8a8 <tcp_output>
 8007d7e:	e00c      	b.n	8007d9a <tcp_input+0x6be>
        goto aborted;
 8007d80:	bf00      	nop
 8007d82:	e00a      	b.n	8007d9a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007d84:	bf00      	nop
 8007d86:	e008      	b.n	8007d9a <tcp_input+0x6be>
              goto aborted;
 8007d88:	bf00      	nop
 8007d8a:	e006      	b.n	8007d9a <tcp_input+0x6be>
          goto aborted;
 8007d8c:	bf00      	nop
 8007d8e:	e004      	b.n	8007d9a <tcp_input+0x6be>
            goto aborted;
 8007d90:	bf00      	nop
 8007d92:	e002      	b.n	8007d9a <tcp_input+0x6be>
              goto aborted;
 8007d94:	bf00      	nop
 8007d96:	e000      	b.n	8007d9a <tcp_input+0x6be>
          goto aborted;
 8007d98:	bf00      	nop
    tcp_input_pcb = NULL;
 8007d9a:	4b23      	ldr	r3, [pc, #140]	; (8007e28 <tcp_input+0x74c>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007da0:	4b25      	ldr	r3, [pc, #148]	; (8007e38 <tcp_input+0x75c>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8007da6:	4b28      	ldr	r3, [pc, #160]	; (8007e48 <tcp_input+0x76c>)
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d037      	beq.n	8007e1e <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8007dae:	4b26      	ldr	r3, [pc, #152]	; (8007e48 <tcp_input+0x76c>)
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fd fdec 	bl	8005990 <pbuf_free>
      inseg.p = NULL;
 8007db8:	4b23      	ldr	r3, [pc, #140]	; (8007e48 <tcp_input+0x76c>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007dbe:	e02e      	b.n	8007e1e <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007dc0:	4b22      	ldr	r3, [pc, #136]	; (8007e4c <tcp_input+0x770>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	899b      	ldrh	r3, [r3, #12]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fc fc4b 	bl	8004664 <lwip_htons>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d115      	bne.n	8007e04 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dd8:	4b1d      	ldr	r3, [pc, #116]	; (8007e50 <tcp_input+0x774>)
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	4b1d      	ldr	r3, [pc, #116]	; (8007e54 <tcp_input+0x778>)
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	461a      	mov	r2, r3
 8007de2:	4b1d      	ldr	r3, [pc, #116]	; (8007e58 <tcp_input+0x77c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007de8:	4b18      	ldr	r3, [pc, #96]	; (8007e4c <tcp_input+0x770>)
 8007dea:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dec:	885b      	ldrh	r3, [r3, #2]
 8007dee:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007df0:	4a16      	ldr	r2, [pc, #88]	; (8007e4c <tcp_input+0x770>)
 8007df2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007df4:	8812      	ldrh	r2, [r2, #0]
 8007df6:	b292      	uxth	r2, r2
 8007df8:	9201      	str	r2, [sp, #4]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	4b17      	ldr	r3, [pc, #92]	; (8007e5c <tcp_input+0x780>)
 8007dfe:	4a18      	ldr	r2, [pc, #96]	; (8007e60 <tcp_input+0x784>)
 8007e00:	f002 ffdc 	bl	800adbc <tcp_rst>
    pbuf_free(p);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7fd fdc3 	bl	8005990 <pbuf_free>
  return;
 8007e0a:	e008      	b.n	8007e1e <tcp_input+0x742>
    goto dropped;
 8007e0c:	bf00      	nop
 8007e0e:	e002      	b.n	8007e16 <tcp_input+0x73a>
dropped:
 8007e10:	bf00      	nop
 8007e12:	e000      	b.n	8007e16 <tcp_input+0x73a>
      goto dropped;
 8007e14:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7fd fdba 	bl	8005990 <pbuf_free>
 8007e1c:	e000      	b.n	8007e20 <tcp_input+0x744>
  return;
 8007e1e:	bf00      	nop
}
 8007e20:	3724      	adds	r7, #36	; 0x24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd90      	pop	{r4, r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20003bd8 	.word	0x20003bd8
 8007e2c:	20000539 	.word	0x20000539
 8007e30:	20003bc4 	.word	0x20003bc4
 8007e34:	20000534 	.word	0x20000534
 8007e38:	2000053c 	.word	0x2000053c
 8007e3c:	08012e30 	.word	0x08012e30
 8007e40:	08012fcc 	.word	0x08012fcc
 8007e44:	08012e74 	.word	0x08012e74
 8007e48:	2000050c 	.word	0x2000050c
 8007e4c:	2000051c 	.word	0x2000051c
 8007e50:	20000530 	.word	0x20000530
 8007e54:	20000536 	.word	0x20000536
 8007e58:	2000052c 	.word	0x2000052c
 8007e5c:	20000684 	.word	0x20000684
 8007e60:	20000688 	.word	0x20000688

08007e64 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8007e6c:	4b14      	ldr	r3, [pc, #80]	; (8007ec0 <tcp_input_delayed_close+0x5c>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	f003 0310 	and.w	r3, r3, #16
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01d      	beq.n	8007eb4 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	7e9b      	ldrb	r3, [r3, #26]
 8007e7c:	f003 0310 	and.w	r3, r3, #16
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10d      	bne.n	8007ea0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d008      	beq.n	8007ea0 <tcp_input_delayed_close+0x3c>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	6912      	ldr	r2, [r2, #16]
 8007e98:	f06f 010e 	mvn.w	r1, #14
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	4808      	ldr	r0, [pc, #32]	; (8007ec4 <tcp_input_delayed_close+0x60>)
 8007ea4:	f7ff fb00 	bl	80074a8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007ea8:	6879      	ldr	r1, [r7, #4]
 8007eaa:	2001      	movs	r0, #1
 8007eac:	f7fd f83e 	bl	8004f2c <memp_free>
    return 1;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e000      	b.n	8007eb6 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20000539 	.word	0x20000539
 8007ec4:	20003bc4 	.word	0x20003bc4

08007ec8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b088      	sub	sp, #32
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007ed0:	4b64      	ldr	r3, [pc, #400]	; (8008064 <tcp_listen_input+0x19c>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f040 80bc 	bne.w	8008056 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007ede:	4b61      	ldr	r3, [pc, #388]	; (8008064 <tcp_listen_input+0x19c>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	f003 0310 	and.w	r3, r3, #16
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d016      	beq.n	8007f18 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007eea:	4b5f      	ldr	r3, [pc, #380]	; (8008068 <tcp_listen_input+0x1a0>)
 8007eec:	6818      	ldr	r0, [r3, #0]
 8007eee:	4b5f      	ldr	r3, [pc, #380]	; (800806c <tcp_listen_input+0x1a4>)
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	4b5e      	ldr	r3, [pc, #376]	; (8008070 <tcp_listen_input+0x1a8>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007efa:	4b5e      	ldr	r3, [pc, #376]	; (8008074 <tcp_listen_input+0x1ac>)
 8007efc:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007efe:	885b      	ldrh	r3, [r3, #2]
 8007f00:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f02:	4a5c      	ldr	r2, [pc, #368]	; (8008074 <tcp_listen_input+0x1ac>)
 8007f04:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f06:	8812      	ldrh	r2, [r2, #0]
 8007f08:	b292      	uxth	r2, r2
 8007f0a:	9201      	str	r2, [sp, #4]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	4b5a      	ldr	r3, [pc, #360]	; (8008078 <tcp_listen_input+0x1b0>)
 8007f10:	4a5a      	ldr	r2, [pc, #360]	; (800807c <tcp_listen_input+0x1b4>)
 8007f12:	f002 ff53 	bl	800adbc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007f16:	e0a0      	b.n	800805a <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8007f18:	4b52      	ldr	r3, [pc, #328]	; (8008064 <tcp_listen_input+0x19c>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 809a 	beq.w	800805a <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	7d5b      	ldrb	r3, [r3, #21]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff f938 	bl	80071a0 <tcp_alloc>
 8007f30:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d111      	bne.n	8007f5c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00a      	beq.n	8007f56 <tcp_listen_input+0x8e>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	6910      	ldr	r0, [r2, #16]
 8007f48:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	4798      	blx	r3
 8007f50:	4603      	mov	r3, r0
 8007f52:	73bb      	strb	r3, [r7, #14]
      return;
 8007f54:	e082      	b.n	800805c <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007f56:	23f0      	movs	r3, #240	; 0xf0
 8007f58:	73bb      	strb	r3, [r7, #14]
      return;
 8007f5a:	e07f      	b.n	800805c <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007f5c:	4b48      	ldr	r3, [pc, #288]	; (8008080 <tcp_listen_input+0x1b8>)
 8007f5e:	695a      	ldr	r2, [r3, #20]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007f64:	4b46      	ldr	r3, [pc, #280]	; (8008080 <tcp_listen_input+0x1b8>)
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	8ada      	ldrh	r2, [r3, #22]
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007f74:	4b3f      	ldr	r3, [pc, #252]	; (8008074 <tcp_listen_input+0x1ac>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	2203      	movs	r2, #3
 8007f84:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007f86:	4b3a      	ldr	r3, [pc, #232]	; (8008070 <tcp_listen_input+0x1a8>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007f98:	6978      	ldr	r0, [r7, #20]
 8007f9a:	f7ff fb01 	bl	80075a0 <tcp_next_iss>
 8007f9e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007fb8:	4b2d      	ldr	r3, [pc, #180]	; (8008070 <tcp_listen_input+0x1a8>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	1e5a      	subs	r2, r3, #1
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	691a      	ldr	r2, [r3, #16]
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7a1b      	ldrb	r3, [r3, #8]
 8007fd4:	f003 030c 	and.w	r3, r3, #12
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007fde:	4b29      	ldr	r3, [pc, #164]	; (8008084 <tcp_listen_input+0x1bc>)
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	60da      	str	r2, [r3, #12]
 8007fe6:	4a27      	ldr	r2, [pc, #156]	; (8008084 <tcp_listen_input+0x1bc>)
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	f003 f936 	bl	800b25c <tcp_timer_needed>
 8007ff0:	4b25      	ldr	r3, [pc, #148]	; (8008088 <tcp_listen_input+0x1c0>)
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007ff6:	6978      	ldr	r0, [r7, #20]
 8007ff8:	f001 fd14 	bl	8009a24 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007ffc:	4b1d      	ldr	r3, [pc, #116]	; (8008074 <tcp_listen_input+0x1ac>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	89db      	ldrh	r3, [r3, #14]
 8008002:	b29a      	uxth	r2, r3
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	3304      	adds	r3, #4
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f7ff fad5 	bl	80075d0 <tcp_eff_send_mss_impl>
 8008026:	4603      	mov	r3, r0
 8008028:	461a      	mov	r2, r3
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800802e:	2112      	movs	r1, #18
 8008030:	6978      	ldr	r0, [r7, #20]
 8008032:	f002 fae1 	bl	800a5f8 <tcp_enqueue_flags>
 8008036:	4603      	mov	r3, r0
 8008038:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800803a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d004      	beq.n	800804c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8008042:	2100      	movs	r1, #0
 8008044:	6978      	ldr	r0, [r7, #20]
 8008046:	f7fe f8f3 	bl	8006230 <tcp_abandon>
      return;
 800804a:	e007      	b.n	800805c <tcp_listen_input+0x194>
    tcp_output(npcb);
 800804c:	6978      	ldr	r0, [r7, #20]
 800804e:	f002 fc2b 	bl	800a8a8 <tcp_output>
  return;
 8008052:	bf00      	nop
 8008054:	e001      	b.n	800805a <tcp_listen_input+0x192>
    return;
 8008056:	bf00      	nop
 8008058:	e000      	b.n	800805c <tcp_listen_input+0x194>
  return;
 800805a:	bf00      	nop
}
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20000538 	.word	0x20000538
 8008068:	20000530 	.word	0x20000530
 800806c:	20000536 	.word	0x20000536
 8008070:	2000052c 	.word	0x2000052c
 8008074:	2000051c 	.word	0x2000051c
 8008078:	20000684 	.word	0x20000684
 800807c:	20000688 	.word	0x20000688
 8008080:	20000674 	.word	0x20000674
 8008084:	20003bc4 	.word	0x20003bc4
 8008088:	20003bc0 	.word	0x20003bc0

0800808c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af02      	add	r7, sp, #8
 8008092:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008094:	4b29      	ldr	r3, [pc, #164]	; (800813c <tcp_timewait_input+0xb0>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d147      	bne.n	8008130 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80080a0:	4b26      	ldr	r3, [pc, #152]	; (800813c <tcp_timewait_input+0xb0>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d027      	beq.n	80080fc <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80080ac:	4b24      	ldr	r3, [pc, #144]	; (8008140 <tcp_timewait_input+0xb4>)
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	db2a      	blt.n	8008110 <tcp_timewait_input+0x84>
 80080ba:	4b21      	ldr	r3, [pc, #132]	; (8008140 <tcp_timewait_input+0xb4>)
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80080c6:	440b      	add	r3, r1
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dc20      	bgt.n	8008110 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80080ce:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <tcp_timewait_input+0xb8>)
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	4b1d      	ldr	r3, [pc, #116]	; (8008148 <tcp_timewait_input+0xbc>)
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	4b19      	ldr	r3, [pc, #100]	; (8008140 <tcp_timewait_input+0xb4>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80080de:	4b1b      	ldr	r3, [pc, #108]	; (800814c <tcp_timewait_input+0xc0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80080e2:	885b      	ldrh	r3, [r3, #2]
 80080e4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80080e6:	4a19      	ldr	r2, [pc, #100]	; (800814c <tcp_timewait_input+0xc0>)
 80080e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80080ea:	8812      	ldrh	r2, [r2, #0]
 80080ec:	b292      	uxth	r2, r2
 80080ee:	9201      	str	r2, [sp, #4]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	4b17      	ldr	r3, [pc, #92]	; (8008150 <tcp_timewait_input+0xc4>)
 80080f4:	4a17      	ldr	r2, [pc, #92]	; (8008154 <tcp_timewait_input+0xc8>)
 80080f6:	f002 fe61 	bl	800adbc <tcp_rst>
      return;
 80080fa:	e01c      	b.n	8008136 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 80080fc:	4b0f      	ldr	r3, [pc, #60]	; (800813c <tcp_timewait_input+0xb0>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008108:	4b13      	ldr	r3, [pc, #76]	; (8008158 <tcp_timewait_input+0xcc>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008110:	4b0d      	ldr	r3, [pc, #52]	; (8008148 <tcp_timewait_input+0xbc>)
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00d      	beq.n	8008134 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	7e9b      	ldrb	r3, [r3, #26]
 800811c:	f043 0302 	orr.w	r3, r3, #2
 8008120:	b2da      	uxtb	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f002 fbbe 	bl	800a8a8 <tcp_output>
  }
  return;
 800812c:	bf00      	nop
 800812e:	e001      	b.n	8008134 <tcp_timewait_input+0xa8>
    return;
 8008130:	bf00      	nop
 8008132:	e000      	b.n	8008136 <tcp_timewait_input+0xaa>
  return;
 8008134:	bf00      	nop
}
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20000538 	.word	0x20000538
 8008140:	2000052c 	.word	0x2000052c
 8008144:	20000530 	.word	0x20000530
 8008148:	20000536 	.word	0x20000536
 800814c:	2000051c 	.word	0x2000051c
 8008150:	20000684 	.word	0x20000684
 8008154:	20000688 	.word	0x20000688
 8008158:	20003bc8 	.word	0x20003bc8

0800815c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b08a      	sub	sp, #40	; 0x28
 8008160:	af02      	add	r7, sp, #8
 8008162:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008164:	2300      	movs	r3, #0
 8008166:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800816c:	4ba4      	ldr	r3, [pc, #656]	; (8008400 <tcp_process+0x2a4>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d04e      	beq.n	8008216 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	7d1b      	ldrb	r3, [r3, #20]
 800817c:	2b02      	cmp	r3, #2
 800817e:	d108      	bne.n	8008192 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008184:	4b9f      	ldr	r3, [pc, #636]	; (8008404 <tcp_process+0x2a8>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	429a      	cmp	r2, r3
 800818a:	d123      	bne.n	80081d4 <tcp_process+0x78>
        acceptable = 1;
 800818c:	2301      	movs	r3, #1
 800818e:	76fb      	strb	r3, [r7, #27]
 8008190:	e020      	b.n	80081d4 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008196:	4b9c      	ldr	r3, [pc, #624]	; (8008408 <tcp_process+0x2ac>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	429a      	cmp	r2, r3
 800819c:	d102      	bne.n	80081a4 <tcp_process+0x48>
        acceptable = 1;
 800819e:	2301      	movs	r3, #1
 80081a0:	76fb      	strb	r3, [r7, #27]
 80081a2:	e017      	b.n	80081d4 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80081a4:	4b98      	ldr	r3, [pc, #608]	; (8008408 <tcp_process+0x2ac>)
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	db10      	blt.n	80081d4 <tcp_process+0x78>
 80081b2:	4b95      	ldr	r3, [pc, #596]	; (8008408 <tcp_process+0x2ac>)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80081be:	440b      	add	r3, r1
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	dc06      	bgt.n	80081d4 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	7e9b      	ldrb	r3, [r3, #26]
 80081ca:	f043 0302 	orr.w	r3, r3, #2
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80081d4:	7efb      	ldrb	r3, [r7, #27]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d01b      	beq.n	8008212 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	7d1b      	ldrb	r3, [r3, #20]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <tcp_process+0x94>
 80081e2:	4b8a      	ldr	r3, [pc, #552]	; (800840c <tcp_process+0x2b0>)
 80081e4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80081e8:	4989      	ldr	r1, [pc, #548]	; (8008410 <tcp_process+0x2b4>)
 80081ea:	488a      	ldr	r0, [pc, #552]	; (8008414 <tcp_process+0x2b8>)
 80081ec:	f008 fefe 	bl	8010fec <iprintf>
      recv_flags |= TF_RESET;
 80081f0:	4b89      	ldr	r3, [pc, #548]	; (8008418 <tcp_process+0x2bc>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	f043 0308 	orr.w	r3, r3, #8
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	4b87      	ldr	r3, [pc, #540]	; (8008418 <tcp_process+0x2bc>)
 80081fc:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	7e9b      	ldrb	r3, [r3, #26]
 8008202:	f023 0301 	bic.w	r3, r3, #1
 8008206:	b2da      	uxtb	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800820c:	f06f 030d 	mvn.w	r3, #13
 8008210:	e34d      	b.n	80088ae <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	e34b      	b.n	80088ae <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008216:	4b7a      	ldr	r3, [pc, #488]	; (8008400 <tcp_process+0x2a4>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	d010      	beq.n	8008244 <tcp_process+0xe8>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	7d1b      	ldrb	r3, [r3, #20]
 8008226:	2b02      	cmp	r3, #2
 8008228:	d00c      	beq.n	8008244 <tcp_process+0xe8>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	7d1b      	ldrb	r3, [r3, #20]
 800822e:	2b03      	cmp	r3, #3
 8008230:	d008      	beq.n	8008244 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	7e9b      	ldrb	r3, [r3, #26]
 8008236:	f043 0302 	orr.w	r3, r3, #2
 800823a:	b2da      	uxtb	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	e334      	b.n	80088ae <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	7e9b      	ldrb	r3, [r3, #26]
 8008248:	f003 0310 	and.w	r3, r3, #16
 800824c:	2b00      	cmp	r3, #0
 800824e:	d103      	bne.n	8008258 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008250:	4b72      	ldr	r3, [pc, #456]	; (800841c <tcp_process+0x2c0>)
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 fbdf 	bl	8009a24 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	7d1b      	ldrb	r3, [r3, #20]
 800826a:	3b02      	subs	r3, #2
 800826c:	2b07      	cmp	r3, #7
 800826e:	f200 830e 	bhi.w	800888e <tcp_process+0x732>
 8008272:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <tcp_process+0x11c>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	08008299 	.word	0x08008299
 800827c:	08008491 	.word	0x08008491
 8008280:	080085e9 	.word	0x080085e9
 8008284:	08008613 	.word	0x08008613
 8008288:	0800873d 	.word	0x0800873d
 800828c:	080085e9 	.word	0x080085e9
 8008290:	080087c9 	.word	0x080087c9
 8008294:	08008859 	.word	0x08008859
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008298:	4b59      	ldr	r3, [pc, #356]	; (8008400 <tcp_process+0x2a4>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	f003 0310 	and.w	r3, r3, #16
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 80cb 	beq.w	800843c <tcp_process+0x2e0>
 80082a6:	4b56      	ldr	r3, [pc, #344]	; (8008400 <tcp_process+0x2a4>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 80c4 	beq.w	800843c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	4b52      	ldr	r3, [pc, #328]	; (8008404 <tcp_process+0x2a8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	f040 80bc 	bne.w	800843c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 80082c4:	4b50      	ldr	r3, [pc, #320]	; (8008408 <tcp_process+0x2ac>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 80082d6:	4b4b      	ldr	r3, [pc, #300]	; (8008404 <tcp_process+0x2a8>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80082de:	4b50      	ldr	r3, [pc, #320]	; (8008420 <tcp_process+0x2c4>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	89db      	ldrh	r3, [r3, #14]
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80082f8:	4b43      	ldr	r3, [pc, #268]	; (8008408 <tcp_process+0x2ac>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	1e5a      	subs	r2, r3, #1
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2204      	movs	r2, #4
 8008306:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3304      	adds	r3, #4
 8008310:	4619      	mov	r1, r3
 8008312:	4610      	mov	r0, r2
 8008314:	f7ff f95c 	bl	80075d0 <tcp_eff_send_mss_impl>
 8008318:	4603      	mov	r3, r0
 800831a:	461a      	mov	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008324:	005b      	lsls	r3, r3, #1
 8008326:	f241 121c 	movw	r2, #4380	; 0x111c
 800832a:	429a      	cmp	r2, r3
 800832c:	bf38      	it	cc
 800832e:	461a      	movcc	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4293      	cmp	r3, r2
 8008338:	bf28      	it	cs
 800833a:	4613      	movcs	r3, r2
 800833c:	b29a      	uxth	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800834a:	2b00      	cmp	r3, #0
 800834c:	d106      	bne.n	800835c <tcp_process+0x200>
 800834e:	4b2f      	ldr	r3, [pc, #188]	; (800840c <tcp_process+0x2b0>)
 8008350:	f240 321a 	movw	r2, #794	; 0x31a
 8008354:	4933      	ldr	r1, [pc, #204]	; (8008424 <tcp_process+0x2c8>)
 8008356:	482f      	ldr	r0, [pc, #188]	; (8008414 <tcp_process+0x2b8>)
 8008358:	f008 fe48 	bl	8010fec <iprintf>
      --pcb->snd_queuelen;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008362:	3b01      	subs	r3, #1
 8008364:	b29a      	uxth	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008370:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d111      	bne.n	800839c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800837c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d106      	bne.n	8008392 <tcp_process+0x236>
 8008384:	4b21      	ldr	r3, [pc, #132]	; (800840c <tcp_process+0x2b0>)
 8008386:	f240 3222 	movw	r2, #802	; 0x322
 800838a:	4927      	ldr	r1, [pc, #156]	; (8008428 <tcp_process+0x2cc>)
 800838c:	4821      	ldr	r0, [pc, #132]	; (8008414 <tcp_process+0x2b8>)
 800838e:	f008 fe2d 	bl	8010fec <iprintf>
        pcb->unsent = rseg->next;
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	669a      	str	r2, [r3, #104]	; 0x68
 800839a:	e003      	b.n	80083a4 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80083a4:	69f8      	ldr	r0, [r7, #28]
 80083a6:	f7fe fdda 	bl	8006f5e <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d104      	bne.n	80083bc <tcp_process+0x260>
        pcb->rtime = -1;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083b8:	861a      	strh	r2, [r3, #48]	; 0x30
 80083ba:	e006      	b.n	80083ca <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00a      	beq.n	80083ea <tcp_process+0x28e>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	6910      	ldr	r0, [r2, #16]
 80083de:	2200      	movs	r2, #0
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	4798      	blx	r3
 80083e4:	4603      	mov	r3, r0
 80083e6:	76bb      	strb	r3, [r7, #26]
 80083e8:	e001      	b.n	80083ee <tcp_process+0x292>
 80083ea:	2300      	movs	r3, #0
 80083ec:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80083ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80083f2:	f113 0f0d 	cmn.w	r3, #13
 80083f6:	d119      	bne.n	800842c <tcp_process+0x2d0>
        return ERR_ABRT;
 80083f8:	f06f 030c 	mvn.w	r3, #12
 80083fc:	e257      	b.n	80088ae <tcp_process+0x752>
 80083fe:	bf00      	nop
 8008400:	20000538 	.word	0x20000538
 8008404:	20000530 	.word	0x20000530
 8008408:	2000052c 	.word	0x2000052c
 800840c:	08012e30 	.word	0x08012e30
 8008410:	08012fe8 	.word	0x08012fe8
 8008414:	08012e74 	.word	0x08012e74
 8008418:	20000539 	.word	0x20000539
 800841c:	20003bc8 	.word	0x20003bc8
 8008420:	2000051c 	.word	0x2000051c
 8008424:	08013008 	.word	0x08013008
 8008428:	08013020 	.word	0x08013020
      }
      tcp_ack_now(pcb);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	7e9b      	ldrb	r3, [r3, #26]
 8008430:	f043 0302 	orr.w	r3, r3, #2
 8008434:	b2da      	uxtb	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800843a:	e22a      	b.n	8008892 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800843c:	4b9f      	ldr	r3, [pc, #636]	; (80086bc <tcp_process+0x560>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	f003 0310 	and.w	r3, r3, #16
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 8224 	beq.w	8008892 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800844a:	4b9d      	ldr	r3, [pc, #628]	; (80086c0 <tcp_process+0x564>)
 800844c:	6818      	ldr	r0, [r3, #0]
 800844e:	4b9d      	ldr	r3, [pc, #628]	; (80086c4 <tcp_process+0x568>)
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	4b9c      	ldr	r3, [pc, #624]	; (80086c8 <tcp_process+0x56c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800845a:	4b9c      	ldr	r3, [pc, #624]	; (80086cc <tcp_process+0x570>)
 800845c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800845e:	885b      	ldrh	r3, [r3, #2]
 8008460:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008462:	4a9a      	ldr	r2, [pc, #616]	; (80086cc <tcp_process+0x570>)
 8008464:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008466:	8812      	ldrh	r2, [r2, #0]
 8008468:	b292      	uxth	r2, r2
 800846a:	9201      	str	r2, [sp, #4]
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	4b98      	ldr	r3, [pc, #608]	; (80086d0 <tcp_process+0x574>)
 8008470:	4a98      	ldr	r2, [pc, #608]	; (80086d4 <tcp_process+0x578>)
 8008472:	f002 fca3 	bl	800adbc <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800847c:	2b05      	cmp	r3, #5
 800847e:	f200 8208 	bhi.w	8008892 <tcp_process+0x736>
        pcb->rtime = 0;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f002 fd0d 	bl	800aea8 <tcp_rexmit_rto>
    break;
 800848e:	e200      	b.n	8008892 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8008490:	4b8a      	ldr	r3, [pc, #552]	; (80086bc <tcp_process+0x560>)
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 8091 	beq.w	80085c0 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800849e:	4b88      	ldr	r3, [pc, #544]	; (80086c0 <tcp_process+0x564>)
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	3b01      	subs	r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	db71      	blt.n	8008592 <tcp_process+0x436>
 80084ae:	4b84      	ldr	r3, [pc, #528]	; (80086c0 <tcp_process+0x564>)
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	dc6a      	bgt.n	8008592 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2204      	movs	r2, #4
 80084c0:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00b      	beq.n	80084e2 <tcp_process+0x386>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d106      	bne.n	80084e2 <tcp_process+0x386>
 80084d4:	4b80      	ldr	r3, [pc, #512]	; (80086d8 <tcp_process+0x57c>)
 80084d6:	f240 3251 	movw	r2, #849	; 0x351
 80084da:	4980      	ldr	r1, [pc, #512]	; (80086dc <tcp_process+0x580>)
 80084dc:	4880      	ldr	r0, [pc, #512]	; (80086e0 <tcp_process+0x584>)
 80084de:	f008 fd85 	bl	8010fec <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d102      	bne.n	80084f0 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80084ea:	23fa      	movs	r3, #250	; 0xfa
 80084ec:	76bb      	strb	r3, [r7, #26]
 80084ee:	e011      	b.n	8008514 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <tcp_process+0x3b4>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6910      	ldr	r0, [r2, #16]
 8008504:	2200      	movs	r2, #0
 8008506:	6879      	ldr	r1, [r7, #4]
 8008508:	4798      	blx	r3
 800850a:	4603      	mov	r3, r0
 800850c:	76bb      	strb	r3, [r7, #26]
 800850e:	e001      	b.n	8008514 <tcp_process+0x3b8>
 8008510:	23f0      	movs	r3, #240	; 0xf0
 8008512:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8008514:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800851c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008520:	f113 0f0d 	cmn.w	r3, #13
 8008524:	d002      	beq.n	800852c <tcp_process+0x3d0>
            tcp_abort(pcb);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7fd ff34 	bl	8006394 <tcp_abort>
          }
          return ERR_ABRT;
 800852c:	f06f 030c 	mvn.w	r3, #12
 8008530:	e1bd      	b.n	80088ae <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fa42 	bl	80089bc <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8008538:	4b6a      	ldr	r3, [pc, #424]	; (80086e4 <tcp_process+0x588>)
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <tcp_process+0x3f0>
          recv_acked--;
 8008540:	4b68      	ldr	r3, [pc, #416]	; (80086e4 <tcp_process+0x588>)
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	3b01      	subs	r3, #1
 8008546:	b29a      	uxth	r2, r3
 8008548:	4b66      	ldr	r3, [pc, #408]	; (80086e4 <tcp_process+0x588>)
 800854a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	f241 121c 	movw	r2, #4380	; 0x111c
 8008556:	429a      	cmp	r2, r3
 8008558:	bf38      	it	cc
 800855a:	461a      	movcc	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4293      	cmp	r3, r2
 8008564:	bf28      	it	cs
 8008566:	4613      	movcs	r3, r2
 8008568:	b29a      	uxth	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8008570:	4b5d      	ldr	r3, [pc, #372]	; (80086e8 <tcp_process+0x58c>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	f003 0320 	and.w	r3, r3, #32
 8008578:	2b00      	cmp	r3, #0
 800857a:	d034      	beq.n	80085e6 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	7e9b      	ldrb	r3, [r3, #26]
 8008580:	f043 0302 	orr.w	r3, r3, #2
 8008584:	b2da      	uxtb	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2207      	movs	r2, #7
 800858e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8008590:	e029      	b.n	80085e6 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008592:	4b4b      	ldr	r3, [pc, #300]	; (80086c0 <tcp_process+0x564>)
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	4b4b      	ldr	r3, [pc, #300]	; (80086c4 <tcp_process+0x568>)
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	4b4a      	ldr	r3, [pc, #296]	; (80086c8 <tcp_process+0x56c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80085a2:	4b4a      	ldr	r3, [pc, #296]	; (80086cc <tcp_process+0x570>)
 80085a4:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80085a6:	885b      	ldrh	r3, [r3, #2]
 80085a8:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80085aa:	4a48      	ldr	r2, [pc, #288]	; (80086cc <tcp_process+0x570>)
 80085ac:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80085ae:	8812      	ldrh	r2, [r2, #0]
 80085b0:	b292      	uxth	r2, r2
 80085b2:	9201      	str	r2, [sp, #4]
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	4b46      	ldr	r3, [pc, #280]	; (80086d0 <tcp_process+0x574>)
 80085b8:	4a46      	ldr	r2, [pc, #280]	; (80086d4 <tcp_process+0x578>)
 80085ba:	f002 fbff 	bl	800adbc <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80085be:	e16a      	b.n	8008896 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80085c0:	4b3e      	ldr	r3, [pc, #248]	; (80086bc <tcp_process+0x560>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	f003 0302 	and.w	r3, r3, #2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8164 	beq.w	8008896 <tcp_process+0x73a>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d2:	1e5a      	subs	r2, r3, #1
 80085d4:	4b3c      	ldr	r3, [pc, #240]	; (80086c8 <tcp_process+0x56c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	429a      	cmp	r2, r3
 80085da:	f040 815c 	bne.w	8008896 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f002 fc98 	bl	800af14 <tcp_rexmit>
    break;
 80085e4:	e157      	b.n	8008896 <tcp_process+0x73a>
 80085e6:	e156      	b.n	8008896 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f9e7 	bl	80089bc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80085ee:	4b3e      	ldr	r3, [pc, #248]	; (80086e8 <tcp_process+0x58c>)
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 814f 	beq.w	800889a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	7e9b      	ldrb	r3, [r3, #26]
 8008600:	f043 0302 	orr.w	r3, r3, #2
 8008604:	b2da      	uxtb	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2207      	movs	r2, #7
 800860e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008610:	e143      	b.n	800889a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f9d2 	bl	80089bc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008618:	4b33      	ldr	r3, [pc, #204]	; (80086e8 <tcp_process+0x58c>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	d074      	beq.n	800870e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008624:	4b25      	ldr	r3, [pc, #148]	; (80086bc <tcp_process+0x560>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f003 0310 	and.w	r3, r3, #16
 800862c:	2b00      	cmp	r3, #0
 800862e:	d063      	beq.n	80086f8 <tcp_process+0x59c>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008634:	4b22      	ldr	r3, [pc, #136]	; (80086c0 <tcp_process+0x564>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	429a      	cmp	r2, r3
 800863a:	d15d      	bne.n	80086f8 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008640:	2b00      	cmp	r3, #0
 8008642:	d159      	bne.n	80086f8 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	7e9b      	ldrb	r3, [r3, #26]
 8008648:	f043 0302 	orr.w	r3, r3, #2
 800864c:	b2da      	uxtb	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7fe fee6 	bl	8007424 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008658:	4b24      	ldr	r3, [pc, #144]	; (80086ec <tcp_process+0x590>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	429a      	cmp	r2, r3
 8008660:	d105      	bne.n	800866e <tcp_process+0x512>
 8008662:	4b22      	ldr	r3, [pc, #136]	; (80086ec <tcp_process+0x590>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	4a20      	ldr	r2, [pc, #128]	; (80086ec <tcp_process+0x590>)
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	e013      	b.n	8008696 <tcp_process+0x53a>
 800866e:	4b1f      	ldr	r3, [pc, #124]	; (80086ec <tcp_process+0x590>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	617b      	str	r3, [r7, #20]
 8008674:	e00c      	b.n	8008690 <tcp_process+0x534>
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	429a      	cmp	r2, r3
 800867e:	d104      	bne.n	800868a <tcp_process+0x52e>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68da      	ldr	r2, [r3, #12]
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	60da      	str	r2, [r3, #12]
 8008688:	e005      	b.n	8008696 <tcp_process+0x53a>
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	617b      	str	r3, [r7, #20]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1ef      	bne.n	8008676 <tcp_process+0x51a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	60da      	str	r2, [r3, #12]
 800869c:	4b14      	ldr	r3, [pc, #80]	; (80086f0 <tcp_process+0x594>)
 800869e:	2201      	movs	r2, #1
 80086a0:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	220a      	movs	r2, #10
 80086a6:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80086a8:	4b12      	ldr	r3, [pc, #72]	; (80086f4 <tcp_process+0x598>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	60da      	str	r2, [r3, #12]
 80086b0:	4a10      	ldr	r2, [pc, #64]	; (80086f4 <tcp_process+0x598>)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	f002 fdd1 	bl	800b25c <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 80086ba:	e0f0      	b.n	800889e <tcp_process+0x742>
 80086bc:	20000538 	.word	0x20000538
 80086c0:	20000530 	.word	0x20000530
 80086c4:	20000536 	.word	0x20000536
 80086c8:	2000052c 	.word	0x2000052c
 80086cc:	2000051c 	.word	0x2000051c
 80086d0:	20000684 	.word	0x20000684
 80086d4:	20000688 	.word	0x20000688
 80086d8:	08012e30 	.word	0x08012e30
 80086dc:	08013034 	.word	0x08013034
 80086e0:	08012e74 	.word	0x08012e74
 80086e4:	20000534 	.word	0x20000534
 80086e8:	20000539 	.word	0x20000539
 80086ec:	20003bc4 	.word	0x20003bc4
 80086f0:	20003bc0 	.word	0x20003bc0
 80086f4:	20003bd4 	.word	0x20003bd4
        tcp_ack_now(pcb);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	7e9b      	ldrb	r3, [r3, #26]
 80086fc:	f043 0302 	orr.w	r3, r3, #2
 8008700:	b2da      	uxtb	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2208      	movs	r2, #8
 800870a:	751a      	strb	r2, [r3, #20]
    break;
 800870c:	e0c7      	b.n	800889e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800870e:	4b6a      	ldr	r3, [pc, #424]	; (80088b8 <tcp_process+0x75c>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	f003 0310 	and.w	r3, r3, #16
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 80c1 	beq.w	800889e <tcp_process+0x742>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008720:	4b66      	ldr	r3, [pc, #408]	; (80088bc <tcp_process+0x760>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	f040 80ba 	bne.w	800889e <tcp_process+0x742>
               pcb->unsent == NULL) {
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800872e:	2b00      	cmp	r3, #0
 8008730:	f040 80b5 	bne.w	800889e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2206      	movs	r2, #6
 8008738:	751a      	strb	r2, [r3, #20]
    break;
 800873a:	e0b0      	b.n	800889e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f93d 	bl	80089bc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008742:	4b5f      	ldr	r3, [pc, #380]	; (80088c0 <tcp_process+0x764>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	f003 0320 	and.w	r3, r3, #32
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 80a9 	beq.w	80088a2 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7e9b      	ldrb	r3, [r3, #26]
 8008754:	f043 0302 	orr.w	r3, r3, #2
 8008758:	b2da      	uxtb	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7fe fe60 	bl	8007424 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008764:	4b57      	ldr	r3, [pc, #348]	; (80088c4 <tcp_process+0x768>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	429a      	cmp	r2, r3
 800876c:	d105      	bne.n	800877a <tcp_process+0x61e>
 800876e:	4b55      	ldr	r3, [pc, #340]	; (80088c4 <tcp_process+0x768>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	4a53      	ldr	r2, [pc, #332]	; (80088c4 <tcp_process+0x768>)
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	e013      	b.n	80087a2 <tcp_process+0x646>
 800877a:	4b52      	ldr	r3, [pc, #328]	; (80088c4 <tcp_process+0x768>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	613b      	str	r3, [r7, #16]
 8008780:	e00c      	b.n	800879c <tcp_process+0x640>
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	429a      	cmp	r2, r3
 800878a:	d104      	bne.n	8008796 <tcp_process+0x63a>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68da      	ldr	r2, [r3, #12]
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	60da      	str	r2, [r3, #12]
 8008794:	e005      	b.n	80087a2 <tcp_process+0x646>
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	613b      	str	r3, [r7, #16]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1ef      	bne.n	8008782 <tcp_process+0x626>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	60da      	str	r2, [r3, #12]
 80087a8:	4b47      	ldr	r3, [pc, #284]	; (80088c8 <tcp_process+0x76c>)
 80087aa:	2201      	movs	r2, #1
 80087ac:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	220a      	movs	r2, #10
 80087b2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80087b4:	4b45      	ldr	r3, [pc, #276]	; (80088cc <tcp_process+0x770>)
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	60da      	str	r2, [r3, #12]
 80087bc:	4a43      	ldr	r2, [pc, #268]	; (80088cc <tcp_process+0x770>)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	f002 fd4b 	bl	800b25c <tcp_timer_needed>
    }
    break;
 80087c6:	e06c      	b.n	80088a2 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f8f7 	bl	80089bc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80087ce:	4b3a      	ldr	r3, [pc, #232]	; (80088b8 <tcp_process+0x75c>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	f003 0310 	and.w	r3, r3, #16
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d065      	beq.n	80088a6 <tcp_process+0x74a>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087de:	4b37      	ldr	r3, [pc, #220]	; (80088bc <tcp_process+0x760>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d15f      	bne.n	80088a6 <tcp_process+0x74a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d15b      	bne.n	80088a6 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7fe fe18 	bl	8007424 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80087f4:	4b33      	ldr	r3, [pc, #204]	; (80088c4 <tcp_process+0x768>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d105      	bne.n	800880a <tcp_process+0x6ae>
 80087fe:	4b31      	ldr	r3, [pc, #196]	; (80088c4 <tcp_process+0x768>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	4a2f      	ldr	r2, [pc, #188]	; (80088c4 <tcp_process+0x768>)
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	e013      	b.n	8008832 <tcp_process+0x6d6>
 800880a:	4b2e      	ldr	r3, [pc, #184]	; (80088c4 <tcp_process+0x768>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	e00c      	b.n	800882c <tcp_process+0x6d0>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	429a      	cmp	r2, r3
 800881a:	d104      	bne.n	8008826 <tcp_process+0x6ca>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	60da      	str	r2, [r3, #12]
 8008824:	e005      	b.n	8008832 <tcp_process+0x6d6>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1ef      	bne.n	8008812 <tcp_process+0x6b6>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	60da      	str	r2, [r3, #12]
 8008838:	4b23      	ldr	r3, [pc, #140]	; (80088c8 <tcp_process+0x76c>)
 800883a:	2201      	movs	r2, #1
 800883c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	220a      	movs	r2, #10
 8008842:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008844:	4b21      	ldr	r3, [pc, #132]	; (80088cc <tcp_process+0x770>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	60da      	str	r2, [r3, #12]
 800884c:	4a1f      	ldr	r2, [pc, #124]	; (80088cc <tcp_process+0x770>)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	f002 fd03 	bl	800b25c <tcp_timer_needed>
    }
    break;
 8008856:	e026      	b.n	80088a6 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f8af 	bl	80089bc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800885e:	4b16      	ldr	r3, [pc, #88]	; (80088b8 <tcp_process+0x75c>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	f003 0310 	and.w	r3, r3, #16
 8008866:	2b00      	cmp	r3, #0
 8008868:	d01f      	beq.n	80088aa <tcp_process+0x74e>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800886e:	4b13      	ldr	r3, [pc, #76]	; (80088bc <tcp_process+0x760>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	d119      	bne.n	80088aa <tcp_process+0x74e>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800887a:	2b00      	cmp	r3, #0
 800887c:	d115      	bne.n	80088aa <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800887e:	4b10      	ldr	r3, [pc, #64]	; (80088c0 <tcp_process+0x764>)
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	f043 0310 	orr.w	r3, r3, #16
 8008886:	b2da      	uxtb	r2, r3
 8008888:	4b0d      	ldr	r3, [pc, #52]	; (80088c0 <tcp_process+0x764>)
 800888a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800888c:	e00d      	b.n	80088aa <tcp_process+0x74e>
  default:
    break;
 800888e:	bf00      	nop
 8008890:	e00c      	b.n	80088ac <tcp_process+0x750>
    break;
 8008892:	bf00      	nop
 8008894:	e00a      	b.n	80088ac <tcp_process+0x750>
    break;
 8008896:	bf00      	nop
 8008898:	e008      	b.n	80088ac <tcp_process+0x750>
    break;
 800889a:	bf00      	nop
 800889c:	e006      	b.n	80088ac <tcp_process+0x750>
    break;
 800889e:	bf00      	nop
 80088a0:	e004      	b.n	80088ac <tcp_process+0x750>
    break;
 80088a2:	bf00      	nop
 80088a4:	e002      	b.n	80088ac <tcp_process+0x750>
    break;
 80088a6:	bf00      	nop
 80088a8:	e000      	b.n	80088ac <tcp_process+0x750>
    break;
 80088aa:	bf00      	nop
  }
  return ERR_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3720      	adds	r7, #32
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20000538 	.word	0x20000538
 80088bc:	20000530 	.word	0x20000530
 80088c0:	20000539 	.word	0x20000539
 80088c4:	20003bc4 	.word	0x20003bc4
 80088c8:	20003bc0 	.word	0x20003bc0
 80088cc:	20003bd4 	.word	0x20003bd4

080088d0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80088d0:	b590      	push	{r4, r7, lr}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	899b      	ldrh	r3, [r3, #12]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fb febe 	bl	8004664 <lwip_htons>
 80088e8:	4603      	mov	r3, r0
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d027      	beq.n	8008942 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80088f2:	6838      	ldr	r0, [r7, #0]
 80088f4:	f7fe fb1f 	bl	8006f36 <tcp_segs_free>
    next = NULL;
 80088f8:	2300      	movs	r3, #0
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	e055      	b.n	80089aa <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	899b      	ldrh	r3, [r3, #12]
 8008904:	b29b      	uxth	r3, r3
 8008906:	4618      	mov	r0, r3
 8008908:	f7fb feac 	bl	8004664 <lwip_htons>
 800890c:	4603      	mov	r3, r0
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00d      	beq.n	8008932 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	899b      	ldrh	r3, [r3, #12]
 800891c:	b29c      	uxth	r4, r3
 800891e:	2001      	movs	r0, #1
 8008920:	f7fb fea0 	bl	8004664 <lwip_htons>
 8008924:	4603      	mov	r3, r0
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	4322      	orrs	r2, r4
 800892e:	b292      	uxth	r2, r2
 8008930:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f7fe fb0e 	bl	8006f5e <tcp_seg_free>
    while (next &&
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00e      	beq.n	8008966 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	891b      	ldrh	r3, [r3, #8]
 800894c:	461a      	mov	r2, r3
 800894e:	4b1a      	ldr	r3, [pc, #104]	; (80089b8 <tcp_oos_insert_segment+0xe8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	441a      	add	r2, r3
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	8909      	ldrh	r1, [r1, #8]
 800895e:	440b      	add	r3, r1
 8008960:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008962:	2b00      	cmp	r3, #0
 8008964:	dacb      	bge.n	80088fe <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d01e      	beq.n	80089aa <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	891b      	ldrh	r3, [r3, #8]
 8008970:	461a      	mov	r2, r3
 8008972:	4b11      	ldr	r3, [pc, #68]	; (80089b8 <tcp_oos_insert_segment+0xe8>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	441a      	add	r2, r3
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008980:	2b00      	cmp	r3, #0
 8008982:	dd12      	ble.n	80089aa <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	b29a      	uxth	r2, r3
 800898c:	4b0a      	ldr	r3, [pc, #40]	; (80089b8 <tcp_oos_insert_segment+0xe8>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	b29b      	uxth	r3, r3
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	b29a      	uxth	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	891b      	ldrh	r3, [r3, #8]
 80089a2:	4619      	mov	r1, r3
 80089a4:	4610      	mov	r0, r2
 80089a6:	f7fc fe7f 	bl	80056a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	601a      	str	r2, [r3, #0]
}
 80089b0:	bf00      	nop
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd90      	pop	{r4, r7, pc}
 80089b8:	2000052c 	.word	0x2000052c

080089bc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80089bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089be:	b08d      	sub	sp, #52	; 0x34
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	7d1b      	ldrb	r3, [r3, #20]
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d806      	bhi.n	80089de <tcp_receive+0x22>
 80089d0:	4ba6      	ldr	r3, [pc, #664]	; (8008c6c <tcp_receive+0x2b0>)
 80089d2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80089d6:	49a6      	ldr	r1, [pc, #664]	; (8008c70 <tcp_receive+0x2b4>)
 80089d8:	48a6      	ldr	r0, [pc, #664]	; (8008c74 <tcp_receive+0x2b8>)
 80089da:	f008 fb07 	bl	8010fec <iprintf>

  if (flags & TCP_ACK) {
 80089de:	4ba6      	ldr	r3, [pc, #664]	; (8008c78 <tcp_receive+0x2bc>)
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	f003 0310 	and.w	r3, r3, #16
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 82bf 	beq.w	8008f6a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089f2:	461a      	mov	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f8:	4413      	add	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a00:	4b9e      	ldr	r3, [pc, #632]	; (8008c7c <tcp_receive+0x2c0>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	db1b      	blt.n	8008a42 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a0e:	4b9b      	ldr	r3, [pc, #620]	; (8008c7c <tcp_receive+0x2c0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d106      	bne.n	8008a24 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a1a:	4b99      	ldr	r3, [pc, #612]	; (8008c80 <tcp_receive+0x2c4>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	db0e      	blt.n	8008a42 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a28:	4b95      	ldr	r3, [pc, #596]	; (8008c80 <tcp_receive+0x2c4>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d141      	bne.n	8008ab4 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008a30:	4b94      	ldr	r3, [pc, #592]	; (8008c84 <tcp_receive+0x2c8>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	89db      	ldrh	r3, [r3, #14]
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d938      	bls.n	8008ab4 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008a42:	4b90      	ldr	r3, [pc, #576]	; (8008c84 <tcp_receive+0x2c8>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	89db      	ldrh	r3, [r3, #14]
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d205      	bcs.n	8008a6c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8008a6c:	4b83      	ldr	r3, [pc, #524]	; (8008c7c <tcp_receive+0x2c0>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8008a74:	4b82      	ldr	r3, [pc, #520]	; (8008c80 <tcp_receive+0x2c4>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10d      	bne.n	8008aa2 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d111      	bne.n	8008ab4 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8008aa0:	e008      	b.n	8008ab4 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008ab4:	4b72      	ldr	r3, [pc, #456]	; (8008c80 <tcp_receive+0x2c4>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	dc53      	bgt.n	8008b6a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8008ac2:	4b71      	ldr	r3, [pc, #452]	; (8008c88 <tcp_receive+0x2cc>)
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d146      	bne.n	8008b58 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8008ad4:	4413      	add	r3, r2
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d13d      	bne.n	8008b58 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	db38      	blt.n	8008b58 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aea:	4b65      	ldr	r3, [pc, #404]	; (8008c80 <tcp_receive+0x2c4>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d132      	bne.n	8008b58 <tcp_receive+0x19c>
              found_dupack = 1;
 8008af2:	2301      	movs	r3, #1
 8008af4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008afc:	2bff      	cmp	r3, #255	; 0xff
 8008afe:	d007      	beq.n	8008b10 <tcp_receive+0x154>
                ++pcb->dupacks;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b06:	3301      	adds	r3, #1
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d916      	bls.n	8008b48 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b24:	4413      	add	r3, r2
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d912      	bls.n	8008b58 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b3c:	4413      	add	r3, r2
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008b46:	e007      	b.n	8008b58 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d102      	bne.n	8008b58 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f002 fa2e 	bl	800afb4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f040 8169 	bne.w	8008e32 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b68:	e163      	b.n	8008e32 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008b6a:	4b45      	ldr	r3, [pc, #276]	; (8008c80 <tcp_receive+0x2c4>)
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	3b01      	subs	r3, #1
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f2c0 8107 	blt.w	8008d8a <tcp_receive+0x3ce>
 8008b7c:	4b40      	ldr	r3, [pc, #256]	; (8008c80 <tcp_receive+0x2c4>)
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f300 80ff 	bgt.w	8008d8a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	7e9b      	ldrb	r3, [r3, #26]
 8008b90:	f003 0304 	and.w	r3, r3, #4
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00c      	beq.n	8008bb2 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	7e9b      	ldrb	r3, [r3, #26]
 8008b9c:	f023 0304 	bic.w	r3, r3, #4
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008bc0:	10db      	asrs	r3, r3, #3
 8008bc2:	b21b      	sxth	r3, r3
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	4413      	add	r3, r2
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	b21a      	sxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008be2:	4b27      	ldr	r3, [pc, #156]	; (8008c80 <tcp_receive+0x2c4>)
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	7d1b      	ldrb	r3, [r3, #20]
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	f240 8094 	bls.w	8008d1c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d216      	bcs.n	8008c32 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c0e:	4413      	add	r3, r2
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d97f      	bls.n	8008d1c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c26:	4413      	add	r3, r2
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008c30:	e074      	b.n	8008d1c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c42:	fb03 f301 	mul.w	r3, r3, r1
 8008c46:	6879      	ldr	r1, [r7, #4]
 8008c48:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8008c4c:	fb93 f3f1 	sdiv	r3, r3, r1
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	4413      	add	r3, r2
 8008c54:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008c5c:	8a7a      	ldrh	r2, [r7, #18]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d95c      	bls.n	8008d1c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	8a7a      	ldrh	r2, [r7, #18]
 8008c66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8008c6a:	e057      	b.n	8008d1c <tcp_receive+0x360>
 8008c6c:	08012e30 	.word	0x08012e30
 8008c70:	08013054 	.word	0x08013054
 8008c74:	08012e74 	.word	0x08012e74
 8008c78:	20000538 	.word	0x20000538
 8008c7c:	2000052c 	.word	0x2000052c
 8008c80:	20000530 	.word	0x20000530
 8008c84:	2000051c 	.word	0x2000051c
 8008c88:	20000536 	.word	0x20000536
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8008ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fc ff06 	bl	8005ab8 <pbuf_clen>
 8008cac:	4603      	mov	r3, r0
 8008cae:	429c      	cmp	r4, r3
 8008cb0:	d206      	bcs.n	8008cc0 <tcp_receive+0x304>
 8008cb2:	4b70      	ldr	r3, [pc, #448]	; (8008e74 <tcp_receive+0x4b8>)
 8008cb4:	f240 429e 	movw	r2, #1182	; 0x49e
 8008cb8:	496f      	ldr	r1, [pc, #444]	; (8008e78 <tcp_receive+0x4bc>)
 8008cba:	4870      	ldr	r0, [pc, #448]	; (8008e7c <tcp_receive+0x4c0>)
 8008cbc:	f008 f996 	bl	8010fec <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fc fef7 	bl	8005ab8 <pbuf_clen>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	461a      	mov	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008cd4:	1a9b      	subs	r3, r3, r2
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8008cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce0:	891a      	ldrh	r2, [r3, #8]
 8008ce2:	4b67      	ldr	r3, [pc, #412]	; (8008e80 <tcp_receive+0x4c4>)
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	4b65      	ldr	r3, [pc, #404]	; (8008e80 <tcp_receive+0x4c4>)
 8008cec:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8008cee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cf0:	f7fe f935 	bl	8006f5e <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00e      	beq.n	8008d1c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10a      	bne.n	8008d1c <tcp_receive+0x360>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d106      	bne.n	8008d1c <tcp_receive+0x360>
 8008d0e:	4b59      	ldr	r3, [pc, #356]	; (8008e74 <tcp_receive+0x4b8>)
 8008d10:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8008d14:	495b      	ldr	r1, [pc, #364]	; (8008e84 <tcp_receive+0x4c8>)
 8008d16:	4859      	ldr	r0, [pc, #356]	; (8008e7c <tcp_receive+0x4c0>)
 8008d18:	f008 f968 	bl	8010fec <iprintf>
      while (pcb->unacked != NULL &&
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d022      	beq.n	8008d6a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fb fca7 	bl	8004680 <lwip_htonl>
 8008d32:	4604      	mov	r4, r0
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d38:	891b      	ldrh	r3, [r3, #8]
 8008d3a:	461d      	mov	r5, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	899b      	ldrh	r3, [r3, #12]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fb fc8c 	bl	8004664 <lwip_htons>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	f003 0303 	and.w	r3, r3, #3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d001      	beq.n	8008d5a <tcp_receive+0x39e>
 8008d56:	2301      	movs	r3, #1
 8008d58:	e000      	b.n	8008d5c <tcp_receive+0x3a0>
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	442b      	add	r3, r5
 8008d5e:	18e2      	adds	r2, r4, r3
 8008d60:	4b49      	ldr	r3, [pc, #292]	; (8008e88 <tcp_receive+0x4cc>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	dd90      	ble.n	8008c8c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d104      	bne.n	8008d7c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d78:	861a      	strh	r2, [r3, #48]	; 0x30
 8008d7a:	e002      	b.n	8008d82 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	76da      	strb	r2, [r3, #27]
 8008d88:	e002      	b.n	8008d90 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f001 fd30 	bl	800a7f0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8008d90:	e04f      	b.n	8008e32 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d103      	bne.n	8008db2 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fc fe7b 	bl	8005ab8 <pbuf_clen>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	429c      	cmp	r4, r3
 8008dc6:	d206      	bcs.n	8008dd6 <tcp_receive+0x41a>
 8008dc8:	4b2a      	ldr	r3, [pc, #168]	; (8008e74 <tcp_receive+0x4b8>)
 8008dca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008dce:	492a      	ldr	r1, [pc, #168]	; (8008e78 <tcp_receive+0x4bc>)
 8008dd0:	482a      	ldr	r0, [pc, #168]	; (8008e7c <tcp_receive+0x4c0>)
 8008dd2:	f008 f90b 	bl	8010fec <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fc fe6c 	bl	8005ab8 <pbuf_clen>
 8008de0:	4603      	mov	r3, r0
 8008de2:	461a      	mov	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8008df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df6:	891a      	ldrh	r2, [r3, #8]
 8008df8:	4b21      	ldr	r3, [pc, #132]	; (8008e80 <tcp_receive+0x4c4>)
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	4b1f      	ldr	r3, [pc, #124]	; (8008e80 <tcp_receive+0x4c4>)
 8008e02:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8008e04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e06:	f7fe f8aa 	bl	8006f5e <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00e      	beq.n	8008e32 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10a      	bne.n	8008e32 <tcp_receive+0x476>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d106      	bne.n	8008e32 <tcp_receive+0x476>
 8008e24:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <tcp_receive+0x4b8>)
 8008e26:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8008e2a:	4916      	ldr	r1, [pc, #88]	; (8008e84 <tcp_receive+0x4c8>)
 8008e2c:	4813      	ldr	r0, [pc, #76]	; (8008e7c <tcp_receive+0x4c0>)
 8008e2e:	f008 f8dd 	bl	8010fec <iprintf>
    while (pcb->unsent != NULL &&
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d036      	beq.n	8008ea8 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008e3a:	4b13      	ldr	r3, [pc, #76]	; (8008e88 <tcp_receive+0x4cc>)
 8008e3c:	681c      	ldr	r4, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fb fc1a 	bl	8004680 <lwip_htonl>
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e52:	891b      	ldrh	r3, [r3, #8]
 8008e54:	461e      	mov	r6, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	899b      	ldrh	r3, [r3, #12]
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fb fbff 	bl	8004664 <lwip_htons>
 8008e66:	4603      	mov	r3, r0
 8008e68:	f003 0303 	and.w	r3, r3, #3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00d      	beq.n	8008e8c <tcp_receive+0x4d0>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e00c      	b.n	8008e8e <tcp_receive+0x4d2>
 8008e74:	08012e30 	.word	0x08012e30
 8008e78:	08013070 	.word	0x08013070
 8008e7c:	08012e74 	.word	0x08012e74
 8008e80:	20000534 	.word	0x20000534
 8008e84:	08013098 	.word	0x08013098
 8008e88:	20000530 	.word	0x20000530
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4433      	add	r3, r6
 8008e90:	442b      	add	r3, r5
 8008e92:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	db07      	blt.n	8008ea8 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008e98:	4b8d      	ldr	r3, [pc, #564]	; (80090d0 <tcp_receive+0x714>)
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f77f af75 	ble.w	8008d92 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008eae:	4b89      	ldr	r3, [pc, #548]	; (80090d4 <tcp_receive+0x718>)
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d052      	beq.n	8008f6a <tcp_receive+0x5ae>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec8:	4b81      	ldr	r3, [pc, #516]	; (80090d0 <tcp_receive+0x714>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	da4b      	bge.n	8008f6a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008ed2:	4b81      	ldr	r3, [pc, #516]	; (80090d8 <tcp_receive+0x71c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8008ee4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008eec:	10db      	asrs	r3, r3, #3
 8008eee:	b21b      	sxth	r3, r3
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f02:	4413      	add	r3, r2
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	b21a      	sxth	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008f0c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	da03      	bge.n	8008f1c <tcp_receive+0x560>
        m = -m;
 8008f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f16:	425b      	negs	r3, r3
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8008f1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f24:	109b      	asrs	r3, r3, #2
 8008f26:	b21b      	sxth	r3, r3
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f3a:	4413      	add	r3, r2
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	b21a      	sxth	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008f4a:	10db      	asrs	r3, r3, #3
 8008f4c:	b21b      	sxth	r3, r3
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	4413      	add	r3, r2
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	b21a      	sxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008f6a:	4b5c      	ldr	r3, [pc, #368]	; (80090dc <tcp_receive+0x720>)
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 84f1 	beq.w	8009956 <tcp_receive+0xf9a>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	7d1b      	ldrb	r3, [r3, #20]
 8008f78:	2b06      	cmp	r3, #6
 8008f7a:	f200 84ec 	bhi.w	8009956 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f82:	4b57      	ldr	r3, [pc, #348]	; (80090e0 <tcp_receive+0x724>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f2c0 80b8 	blt.w	8009100 <tcp_receive+0x744>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f94:	4b51      	ldr	r3, [pc, #324]	; (80090dc <tcp_receive+0x720>)
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4b51      	ldr	r3, [pc, #324]	; (80090e0 <tcp_receive+0x724>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	440b      	add	r3, r1
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f300 80ab 	bgt.w	8009100 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008faa:	4b4e      	ldr	r3, [pc, #312]	; (80090e4 <tcp_receive+0x728>)
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fb4:	4b4a      	ldr	r3, [pc, #296]	; (80090e0 <tcp_receive+0x724>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008fbc:	4b49      	ldr	r3, [pc, #292]	; (80090e4 <tcp_receive+0x728>)
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d106      	bne.n	8008fd2 <tcp_receive+0x616>
 8008fc4:	4b48      	ldr	r3, [pc, #288]	; (80090e8 <tcp_receive+0x72c>)
 8008fc6:	f240 523c 	movw	r2, #1340	; 0x53c
 8008fca:	4948      	ldr	r1, [pc, #288]	; (80090ec <tcp_receive+0x730>)
 8008fcc:	4848      	ldr	r0, [pc, #288]	; (80090f0 <tcp_receive+0x734>)
 8008fce:	f008 f80d 	bl	8010fec <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	dd06      	ble.n	8008fea <tcp_receive+0x62e>
 8008fdc:	4b42      	ldr	r3, [pc, #264]	; (80090e8 <tcp_receive+0x72c>)
 8008fde:	f240 523d 	movw	r2, #1341	; 0x53d
 8008fe2:	4944      	ldr	r1, [pc, #272]	; (80090f4 <tcp_receive+0x738>)
 8008fe4:	4842      	ldr	r0, [pc, #264]	; (80090f0 <tcp_receive+0x734>)
 8008fe6:	f008 f801 	bl	8010fec <iprintf>
      if (inseg.p->len < off) {
 8008fea:	4b3e      	ldr	r3, [pc, #248]	; (80090e4 <tcp_receive+0x728>)
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	895b      	ldrh	r3, [r3, #10]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	dd3e      	ble.n	8009076 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008ff8:	4b3a      	ldr	r3, [pc, #232]	; (80090e4 <tcp_receive+0x728>)
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	891b      	ldrh	r3, [r3, #8]
 8008ffe:	461a      	mov	r2, r3
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	4293      	cmp	r3, r2
 8009004:	dd06      	ble.n	8009014 <tcp_receive+0x658>
 8009006:	4b38      	ldr	r3, [pc, #224]	; (80090e8 <tcp_receive+0x72c>)
 8009008:	f240 523f 	movw	r2, #1343	; 0x53f
 800900c:	493a      	ldr	r1, [pc, #232]	; (80090f8 <tcp_receive+0x73c>)
 800900e:	4838      	ldr	r0, [pc, #224]	; (80090f0 <tcp_receive+0x734>)
 8009010:	f007 ffec 	bl	8010fec <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009014:	4b33      	ldr	r3, [pc, #204]	; (80090e4 <tcp_receive+0x728>)
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	891a      	ldrh	r2, [r3, #8]
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	b29b      	uxth	r3, r3
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8009022:	e00e      	b.n	8009042 <tcp_receive+0x686>
          off -= p->len;
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	895b      	ldrh	r3, [r3, #10]
 8009028:	461a      	mov	r2, r3
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	1a9b      	subs	r3, r3, r2
 800902e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	8a3a      	ldrh	r2, [r7, #16]
 8009034:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	2200      	movs	r2, #0
 800903a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	895b      	ldrh	r3, [r3, #10]
 8009046:	461a      	mov	r2, r3
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	4293      	cmp	r3, r2
 800904c:	dcea      	bgt.n	8009024 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009050:	b29b      	uxth	r3, r3
 8009052:	425b      	negs	r3, r3
 8009054:	b29b      	uxth	r3, r3
 8009056:	b21b      	sxth	r3, r3
 8009058:	4619      	mov	r1, r3
 800905a:	69b8      	ldr	r0, [r7, #24]
 800905c:	f7fc fc74 	bl	8005948 <pbuf_header>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d01c      	beq.n	80090a0 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8009066:	4b20      	ldr	r3, [pc, #128]	; (80090e8 <tcp_receive+0x72c>)
 8009068:	f240 524c 	movw	r2, #1356	; 0x54c
 800906c:	4923      	ldr	r1, [pc, #140]	; (80090fc <tcp_receive+0x740>)
 800906e:	4820      	ldr	r0, [pc, #128]	; (80090f0 <tcp_receive+0x734>)
 8009070:	f007 ffbc 	bl	8010fec <iprintf>
 8009074:	e014      	b.n	80090a0 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8009076:	4b1b      	ldr	r3, [pc, #108]	; (80090e4 <tcp_receive+0x728>)
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907c:	b292      	uxth	r2, r2
 800907e:	4252      	negs	r2, r2
 8009080:	b292      	uxth	r2, r2
 8009082:	b212      	sxth	r2, r2
 8009084:	4611      	mov	r1, r2
 8009086:	4618      	mov	r0, r3
 8009088:	f7fc fc5e 	bl	8005948 <pbuf_header>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d006      	beq.n	80090a0 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8009092:	4b15      	ldr	r3, [pc, #84]	; (80090e8 <tcp_receive+0x72c>)
 8009094:	f240 5251 	movw	r2, #1361	; 0x551
 8009098:	4918      	ldr	r1, [pc, #96]	; (80090fc <tcp_receive+0x740>)
 800909a:	4815      	ldr	r0, [pc, #84]	; (80090f0 <tcp_receive+0x734>)
 800909c:	f007 ffa6 	bl	8010fec <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80090a0:	4b10      	ldr	r3, [pc, #64]	; (80090e4 <tcp_receive+0x728>)
 80090a2:	891a      	ldrh	r2, [r3, #8]
 80090a4:	4b0e      	ldr	r3, [pc, #56]	; (80090e0 <tcp_receive+0x724>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	b299      	uxth	r1, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	1acb      	subs	r3, r1, r3
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	4413      	add	r3, r2
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	4b0a      	ldr	r3, [pc, #40]	; (80090e4 <tcp_receive+0x728>)
 80090ba:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	4a07      	ldr	r2, [pc, #28]	; (80090e0 <tcp_receive+0x724>)
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <tcp_receive+0x728>)
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	4a05      	ldr	r2, [pc, #20]	; (80090e0 <tcp_receive+0x724>)
 80090ca:	6812      	ldr	r2, [r2, #0]
 80090cc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80090ce:	e025      	b.n	800911c <tcp_receive+0x760>
 80090d0:	20000530 	.word	0x20000530
 80090d4:	20000534 	.word	0x20000534
 80090d8:	20003bc8 	.word	0x20003bc8
 80090dc:	20000536 	.word	0x20000536
 80090e0:	2000052c 	.word	0x2000052c
 80090e4:	2000050c 	.word	0x2000050c
 80090e8:	08012e30 	.word	0x08012e30
 80090ec:	080130b8 	.word	0x080130b8
 80090f0:	08012e74 	.word	0x08012e74
 80090f4:	080130c8 	.word	0x080130c8
 80090f8:	080130d8 	.word	0x080130d8
 80090fc:	080130e8 	.word	0x080130e8
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009100:	4b87      	ldr	r3, [pc, #540]	; (8009320 <tcp_receive+0x964>)
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	da06      	bge.n	800911c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	7e9b      	ldrb	r3, [r3, #26]
 8009112:	f043 0302 	orr.w	r3, r3, #2
 8009116:	b2da      	uxtb	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800911c:	4b80      	ldr	r3, [pc, #512]	; (8009320 <tcp_receive+0x964>)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	f2c0 8410 	blt.w	800994c <tcp_receive+0xf90>
 800912c:	4b7c      	ldr	r3, [pc, #496]	; (8009320 <tcp_receive+0x964>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	6879      	ldr	r1, [r7, #4]
 8009136:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009138:	440b      	add	r3, r1
 800913a:	1ad3      	subs	r3, r2, r3
 800913c:	3301      	adds	r3, #1
 800913e:	2b00      	cmp	r3, #0
 8009140:	f300 8404 	bgt.w	800994c <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009148:	4b75      	ldr	r3, [pc, #468]	; (8009320 <tcp_receive+0x964>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	f040 8287 	bne.w	8009660 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009152:	4b74      	ldr	r3, [pc, #464]	; (8009324 <tcp_receive+0x968>)
 8009154:	891c      	ldrh	r4, [r3, #8]
 8009156:	4b73      	ldr	r3, [pc, #460]	; (8009324 <tcp_receive+0x968>)
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	899b      	ldrh	r3, [r3, #12]
 800915c:	b29b      	uxth	r3, r3
 800915e:	4618      	mov	r0, r3
 8009160:	f7fb fa80 	bl	8004664 <lwip_htons>
 8009164:	4603      	mov	r3, r0
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <tcp_receive+0x7b6>
 800916e:	2301      	movs	r3, #1
 8009170:	e000      	b.n	8009174 <tcp_receive+0x7b8>
 8009172:	2300      	movs	r3, #0
 8009174:	4423      	add	r3, r4
 8009176:	b29a      	uxth	r2, r3
 8009178:	4b6b      	ldr	r3, [pc, #428]	; (8009328 <tcp_receive+0x96c>)
 800917a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009180:	4b69      	ldr	r3, [pc, #420]	; (8009328 <tcp_receive+0x96c>)
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	429a      	cmp	r2, r3
 8009186:	d26e      	bcs.n	8009266 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009188:	4b66      	ldr	r3, [pc, #408]	; (8009324 <tcp_receive+0x968>)
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	899b      	ldrh	r3, [r3, #12]
 800918e:	b29b      	uxth	r3, r3
 8009190:	4618      	mov	r0, r3
 8009192:	f7fb fa67 	bl	8004664 <lwip_htons>
 8009196:	4603      	mov	r3, r0
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01b      	beq.n	80091d8 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80091a0:	4b60      	ldr	r3, [pc, #384]	; (8009324 <tcp_receive+0x968>)
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	899b      	ldrh	r3, [r3, #12]
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80091ac:	b29c      	uxth	r4, r3
 80091ae:	4b5d      	ldr	r3, [pc, #372]	; (8009324 <tcp_receive+0x968>)
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	899b      	ldrh	r3, [r3, #12]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fb fa54 	bl	8004664 <lwip_htons>
 80091bc:	4603      	mov	r3, r0
 80091be:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fb fa4d 	bl	8004664 <lwip_htons>
 80091ca:	4603      	mov	r3, r0
 80091cc:	461a      	mov	r2, r3
 80091ce:	4b55      	ldr	r3, [pc, #340]	; (8009324 <tcp_receive+0x968>)
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	4322      	orrs	r2, r4
 80091d4:	b292      	uxth	r2, r2
 80091d6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80091dc:	4b51      	ldr	r3, [pc, #324]	; (8009324 <tcp_receive+0x968>)
 80091de:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80091e0:	4b50      	ldr	r3, [pc, #320]	; (8009324 <tcp_receive+0x968>)
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	899b      	ldrh	r3, [r3, #12]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fb fa3b 	bl	8004664 <lwip_htons>
 80091ee:	4603      	mov	r3, r0
 80091f0:	f003 0302 	and.w	r3, r3, #2
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d005      	beq.n	8009204 <tcp_receive+0x848>
            inseg.len -= 1;
 80091f8:	4b4a      	ldr	r3, [pc, #296]	; (8009324 <tcp_receive+0x968>)
 80091fa:	891b      	ldrh	r3, [r3, #8]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	b29a      	uxth	r2, r3
 8009200:	4b48      	ldr	r3, [pc, #288]	; (8009324 <tcp_receive+0x968>)
 8009202:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009204:	4b47      	ldr	r3, [pc, #284]	; (8009324 <tcp_receive+0x968>)
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	4b46      	ldr	r3, [pc, #280]	; (8009324 <tcp_receive+0x968>)
 800920a:	891b      	ldrh	r3, [r3, #8]
 800920c:	4619      	mov	r1, r3
 800920e:	4610      	mov	r0, r2
 8009210:	f7fc fa4a 	bl	80056a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009214:	4b43      	ldr	r3, [pc, #268]	; (8009324 <tcp_receive+0x968>)
 8009216:	891c      	ldrh	r4, [r3, #8]
 8009218:	4b42      	ldr	r3, [pc, #264]	; (8009324 <tcp_receive+0x968>)
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	899b      	ldrh	r3, [r3, #12]
 800921e:	b29b      	uxth	r3, r3
 8009220:	4618      	mov	r0, r3
 8009222:	f7fb fa1f 	bl	8004664 <lwip_htons>
 8009226:	4603      	mov	r3, r0
 8009228:	f003 0303 	and.w	r3, r3, #3
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <tcp_receive+0x878>
 8009230:	2301      	movs	r3, #1
 8009232:	e000      	b.n	8009236 <tcp_receive+0x87a>
 8009234:	2300      	movs	r3, #0
 8009236:	4423      	add	r3, r4
 8009238:	b29a      	uxth	r2, r3
 800923a:	4b3b      	ldr	r3, [pc, #236]	; (8009328 <tcp_receive+0x96c>)
 800923c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800923e:	4b3a      	ldr	r3, [pc, #232]	; (8009328 <tcp_receive+0x96c>)
 8009240:	881b      	ldrh	r3, [r3, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	4b36      	ldr	r3, [pc, #216]	; (8009320 <tcp_receive+0x964>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	441a      	add	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009252:	440b      	add	r3, r1
 8009254:	429a      	cmp	r2, r3
 8009256:	d006      	beq.n	8009266 <tcp_receive+0x8aa>
 8009258:	4b34      	ldr	r3, [pc, #208]	; (800932c <tcp_receive+0x970>)
 800925a:	f240 527f 	movw	r2, #1407	; 0x57f
 800925e:	4934      	ldr	r1, [pc, #208]	; (8009330 <tcp_receive+0x974>)
 8009260:	4834      	ldr	r0, [pc, #208]	; (8009334 <tcp_receive+0x978>)
 8009262:	f007 fec3 	bl	8010fec <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 80e1 	beq.w	8009432 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009270:	4b2c      	ldr	r3, [pc, #176]	; (8009324 <tcp_receive+0x968>)
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	899b      	ldrh	r3, [r3, #12]
 8009276:	b29b      	uxth	r3, r3
 8009278:	4618      	mov	r0, r3
 800927a:	f7fb f9f3 	bl	8004664 <lwip_htons>
 800927e:	4603      	mov	r3, r0
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b00      	cmp	r3, #0
 8009286:	d010      	beq.n	80092aa <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009288:	e00a      	b.n	80092a0 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800929a:	68b8      	ldr	r0, [r7, #8]
 800929c:	f7fd fe5f 	bl	8006f5e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1f0      	bne.n	800928a <tcp_receive+0x8ce>
 80092a8:	e0c3      	b.n	8009432 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80092b0:	e04f      	b.n	8009352 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80092b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	899b      	ldrh	r3, [r3, #12]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fb f9d2 	bl	8004664 <lwip_htons>
 80092c0:	4603      	mov	r3, r0
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d03b      	beq.n	8009342 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80092ca:	4b16      	ldr	r3, [pc, #88]	; (8009324 <tcp_receive+0x968>)
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	899b      	ldrh	r3, [r3, #12]
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fb f9c6 	bl	8004664 <lwip_htons>
 80092d8:	4603      	mov	r3, r0
 80092da:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d12f      	bne.n	8009342 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80092e2:	4b10      	ldr	r3, [pc, #64]	; (8009324 <tcp_receive+0x968>)
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	899b      	ldrh	r3, [r3, #12]
 80092e8:	b29c      	uxth	r4, r3
 80092ea:	2001      	movs	r0, #1
 80092ec:	f7fb f9ba 	bl	8004664 <lwip_htons>
 80092f0:	4603      	mov	r3, r0
 80092f2:	461a      	mov	r2, r3
 80092f4:	4b0b      	ldr	r3, [pc, #44]	; (8009324 <tcp_receive+0x968>)
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	4322      	orrs	r2, r4
 80092fa:	b292      	uxth	r2, r2
 80092fc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80092fe:	4b09      	ldr	r3, [pc, #36]	; (8009324 <tcp_receive+0x968>)
 8009300:	891c      	ldrh	r4, [r3, #8]
 8009302:	4b08      	ldr	r3, [pc, #32]	; (8009324 <tcp_receive+0x968>)
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	899b      	ldrh	r3, [r3, #12]
 8009308:	b29b      	uxth	r3, r3
 800930a:	4618      	mov	r0, r3
 800930c:	f7fb f9aa 	bl	8004664 <lwip_htons>
 8009310:	4603      	mov	r3, r0
 8009312:	f003 0303 	and.w	r3, r3, #3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00e      	beq.n	8009338 <tcp_receive+0x97c>
 800931a:	2301      	movs	r3, #1
 800931c:	e00d      	b.n	800933a <tcp_receive+0x97e>
 800931e:	bf00      	nop
 8009320:	2000052c 	.word	0x2000052c
 8009324:	2000050c 	.word	0x2000050c
 8009328:	20000536 	.word	0x20000536
 800932c:	08012e30 	.word	0x08012e30
 8009330:	080130fc 	.word	0x080130fc
 8009334:	08012e74 	.word	0x08012e74
 8009338:	2300      	movs	r3, #0
 800933a:	4423      	add	r3, r4
 800933c:	b29a      	uxth	r2, r3
 800933e:	4b95      	ldr	r3, [pc, #596]	; (8009594 <tcp_receive+0xbd8>)
 8009340:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8009342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009344:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8009346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800934c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800934e:	f7fd fe06 	bl	8006f5e <tcp_seg_free>
            while (next &&
 8009352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00e      	beq.n	8009376 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009358:	4b8e      	ldr	r3, [pc, #568]	; (8009594 <tcp_receive+0xbd8>)
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	4b8e      	ldr	r3, [pc, #568]	; (8009598 <tcp_receive+0xbdc>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	441a      	add	r2, r3
 8009364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800936c:	8909      	ldrh	r1, [r1, #8]
 800936e:	440b      	add	r3, r1
 8009370:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009372:	2b00      	cmp	r3, #0
 8009374:	da9d      	bge.n	80092b2 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009378:	2b00      	cmp	r3, #0
 800937a:	d057      	beq.n	800942c <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800937c:	4b85      	ldr	r3, [pc, #532]	; (8009594 <tcp_receive+0xbd8>)
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	461a      	mov	r2, r3
 8009382:	4b85      	ldr	r3, [pc, #532]	; (8009598 <tcp_receive+0xbdc>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	441a      	add	r2, r3
 8009388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009390:	2b00      	cmp	r3, #0
 8009392:	dd4b      	ble.n	800942c <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	b29a      	uxth	r2, r3
 800939c:	4b7e      	ldr	r3, [pc, #504]	; (8009598 <tcp_receive+0xbdc>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	4b7d      	ldr	r3, [pc, #500]	; (800959c <tcp_receive+0xbe0>)
 80093a8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80093aa:	4b7c      	ldr	r3, [pc, #496]	; (800959c <tcp_receive+0xbe0>)
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	899b      	ldrh	r3, [r3, #12]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fb f956 	bl	8004664 <lwip_htons>
 80093b8:	4603      	mov	r3, r0
 80093ba:	f003 0302 	and.w	r3, r3, #2
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d005      	beq.n	80093ce <tcp_receive+0xa12>
                inseg.len -= 1;
 80093c2:	4b76      	ldr	r3, [pc, #472]	; (800959c <tcp_receive+0xbe0>)
 80093c4:	891b      	ldrh	r3, [r3, #8]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	4b74      	ldr	r3, [pc, #464]	; (800959c <tcp_receive+0xbe0>)
 80093cc:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80093ce:	4b73      	ldr	r3, [pc, #460]	; (800959c <tcp_receive+0xbe0>)
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	4b72      	ldr	r3, [pc, #456]	; (800959c <tcp_receive+0xbe0>)
 80093d4:	891b      	ldrh	r3, [r3, #8]
 80093d6:	4619      	mov	r1, r3
 80093d8:	4610      	mov	r0, r2
 80093da:	f7fc f965 	bl	80056a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80093de:	4b6f      	ldr	r3, [pc, #444]	; (800959c <tcp_receive+0xbe0>)
 80093e0:	891c      	ldrh	r4, [r3, #8]
 80093e2:	4b6e      	ldr	r3, [pc, #440]	; (800959c <tcp_receive+0xbe0>)
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	899b      	ldrh	r3, [r3, #12]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fb f93a 	bl	8004664 <lwip_htons>
 80093f0:	4603      	mov	r3, r0
 80093f2:	f003 0303 	and.w	r3, r3, #3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <tcp_receive+0xa42>
 80093fa:	2301      	movs	r3, #1
 80093fc:	e000      	b.n	8009400 <tcp_receive+0xa44>
 80093fe:	2300      	movs	r3, #0
 8009400:	4423      	add	r3, r4
 8009402:	b29a      	uxth	r2, r3
 8009404:	4b63      	ldr	r3, [pc, #396]	; (8009594 <tcp_receive+0xbd8>)
 8009406:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009408:	4b62      	ldr	r3, [pc, #392]	; (8009594 <tcp_receive+0xbd8>)
 800940a:	881b      	ldrh	r3, [r3, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	4b62      	ldr	r3, [pc, #392]	; (8009598 <tcp_receive+0xbdc>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	441a      	add	r2, r3
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	429a      	cmp	r2, r3
 800941c:	d006      	beq.n	800942c <tcp_receive+0xa70>
 800941e:	4b60      	ldr	r3, [pc, #384]	; (80095a0 <tcp_receive+0xbe4>)
 8009420:	f240 52af 	movw	r2, #1455	; 0x5af
 8009424:	495f      	ldr	r1, [pc, #380]	; (80095a4 <tcp_receive+0xbe8>)
 8009426:	4860      	ldr	r0, [pc, #384]	; (80095a8 <tcp_receive+0xbec>)
 8009428:	f007 fde0 	bl	8010fec <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009430:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009432:	4b58      	ldr	r3, [pc, #352]	; (8009594 <tcp_receive+0xbd8>)
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	4b57      	ldr	r3, [pc, #348]	; (8009598 <tcp_receive+0xbdc>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	441a      	add	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009446:	4b53      	ldr	r3, [pc, #332]	; (8009594 <tcp_receive+0xbd8>)
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d206      	bcs.n	800945c <tcp_receive+0xaa0>
 800944e:	4b54      	ldr	r3, [pc, #336]	; (80095a0 <tcp_receive+0xbe4>)
 8009450:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009454:	4955      	ldr	r1, [pc, #340]	; (80095ac <tcp_receive+0xbf0>)
 8009456:	4854      	ldr	r0, [pc, #336]	; (80095a8 <tcp_receive+0xbec>)
 8009458:	f007 fdc8 	bl	8010fec <iprintf>
        pcb->rcv_wnd -= tcplen;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009460:	4b4c      	ldr	r3, [pc, #304]	; (8009594 <tcp_receive+0xbd8>)
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	b29a      	uxth	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7fd f8e9 	bl	8006644 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009472:	4b4a      	ldr	r3, [pc, #296]	; (800959c <tcp_receive+0xbe0>)
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	891b      	ldrh	r3, [r3, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d006      	beq.n	800948a <tcp_receive+0xace>
          recv_data = inseg.p;
 800947c:	4b47      	ldr	r3, [pc, #284]	; (800959c <tcp_receive+0xbe0>)
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	4a4b      	ldr	r2, [pc, #300]	; (80095b0 <tcp_receive+0xbf4>)
 8009482:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009484:	4b45      	ldr	r3, [pc, #276]	; (800959c <tcp_receive+0xbe0>)
 8009486:	2200      	movs	r2, #0
 8009488:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800948a:	4b44      	ldr	r3, [pc, #272]	; (800959c <tcp_receive+0xbe0>)
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	899b      	ldrh	r3, [r3, #12]
 8009490:	b29b      	uxth	r3, r3
 8009492:	4618      	mov	r0, r3
 8009494:	f7fb f8e6 	bl	8004664 <lwip_htons>
 8009498:	4603      	mov	r3, r0
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 80b4 	beq.w	800960c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80094a4:	4b43      	ldr	r3, [pc, #268]	; (80095b4 <tcp_receive+0xbf8>)
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	f043 0320 	orr.w	r3, r3, #32
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	4b41      	ldr	r3, [pc, #260]	; (80095b4 <tcp_receive+0xbf8>)
 80094b0:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80094b2:	e0ab      	b.n	800960c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b8:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	4a35      	ldr	r2, [pc, #212]	; (8009598 <tcp_receive+0xbdc>)
 80094c4:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	891b      	ldrh	r3, [r3, #8]
 80094ca:	461c      	mov	r4, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	899b      	ldrh	r3, [r3, #12]
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fb f8c5 	bl	8004664 <lwip_htons>
 80094da:	4603      	mov	r3, r0
 80094dc:	f003 0303 	and.w	r3, r3, #3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <tcp_receive+0xb2c>
 80094e4:	2301      	movs	r3, #1
 80094e6:	e000      	b.n	80094ea <tcp_receive+0xb2e>
 80094e8:	2300      	movs	r3, #0
 80094ea:	191a      	adds	r2, r3, r4
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	441a      	add	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094fa:	461c      	mov	r4, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	891b      	ldrh	r3, [r3, #8]
 8009500:	461d      	mov	r5, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	899b      	ldrh	r3, [r3, #12]
 8009508:	b29b      	uxth	r3, r3
 800950a:	4618      	mov	r0, r3
 800950c:	f7fb f8aa 	bl	8004664 <lwip_htons>
 8009510:	4603      	mov	r3, r0
 8009512:	f003 0303 	and.w	r3, r3, #3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <tcp_receive+0xb62>
 800951a:	2301      	movs	r3, #1
 800951c:	e000      	b.n	8009520 <tcp_receive+0xb64>
 800951e:	2300      	movs	r3, #0
 8009520:	442b      	add	r3, r5
 8009522:	429c      	cmp	r4, r3
 8009524:	d206      	bcs.n	8009534 <tcp_receive+0xb78>
 8009526:	4b1e      	ldr	r3, [pc, #120]	; (80095a0 <tcp_receive+0xbe4>)
 8009528:	f240 52de 	movw	r2, #1502	; 0x5de
 800952c:	4922      	ldr	r1, [pc, #136]	; (80095b8 <tcp_receive+0xbfc>)
 800952e:	481e      	ldr	r0, [pc, #120]	; (80095a8 <tcp_receive+0xbec>)
 8009530:	f007 fd5c 	bl	8010fec <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	891b      	ldrh	r3, [r3, #8]
 8009538:	461c      	mov	r4, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	899b      	ldrh	r3, [r3, #12]
 8009540:	b29b      	uxth	r3, r3
 8009542:	4618      	mov	r0, r3
 8009544:	f7fb f88e 	bl	8004664 <lwip_htons>
 8009548:	4603      	mov	r3, r0
 800954a:	f003 0303 	and.w	r3, r3, #3
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <tcp_receive+0xb9a>
 8009552:	2301      	movs	r3, #1
 8009554:	e000      	b.n	8009558 <tcp_receive+0xb9c>
 8009556:	2300      	movs	r3, #0
 8009558:	1919      	adds	r1, r3, r4
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800955e:	b28b      	uxth	r3, r1
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	b29a      	uxth	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f7fd f86b 	bl	8006644 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	891b      	ldrh	r3, [r3, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d028      	beq.n	80095ca <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009578:	4b0d      	ldr	r3, [pc, #52]	; (80095b0 <tcp_receive+0xbf4>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d01d      	beq.n	80095bc <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8009580:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <tcp_receive+0xbf4>)
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f7fc face 	bl	8005b2c <pbuf_cat>
 8009590:	e018      	b.n	80095c4 <tcp_receive+0xc08>
 8009592:	bf00      	nop
 8009594:	20000536 	.word	0x20000536
 8009598:	2000052c 	.word	0x2000052c
 800959c:	2000050c 	.word	0x2000050c
 80095a0:	08012e30 	.word	0x08012e30
 80095a4:	08013134 	.word	0x08013134
 80095a8:	08012e74 	.word	0x08012e74
 80095ac:	08013170 	.word	0x08013170
 80095b0:	2000053c 	.word	0x2000053c
 80095b4:	20000539 	.word	0x20000539
 80095b8:	08013190 	.word	0x08013190
            } else {
              recv_data = cseg->p;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	4a71      	ldr	r2, [pc, #452]	; (8009788 <tcp_receive+0xdcc>)
 80095c2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	899b      	ldrh	r3, [r3, #12]
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fb f846 	bl	8004664 <lwip_htons>
 80095d8:	4603      	mov	r3, r0
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00d      	beq.n	80095fe <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80095e2:	4b6a      	ldr	r3, [pc, #424]	; (800978c <tcp_receive+0xdd0>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	f043 0320 	orr.w	r3, r3, #32
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	4b67      	ldr	r3, [pc, #412]	; (800978c <tcp_receive+0xdd0>)
 80095ee:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	7d1b      	ldrb	r3, [r3, #20]
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d102      	bne.n	80095fe <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2207      	movs	r2, #7
 80095fc:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f7fd fca9 	bl	8006f5e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009610:	2b00      	cmp	r3, #0
 8009612:	d008      	beq.n	8009626 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009620:	429a      	cmp	r2, r3
 8009622:	f43f af47 	beq.w	80094b4 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	7e9b      	ldrb	r3, [r3, #26]
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00e      	beq.n	8009650 <tcp_receive+0xc94>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	7e9b      	ldrb	r3, [r3, #26]
 8009636:	f023 0301 	bic.w	r3, r3, #1
 800963a:	b2da      	uxtb	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	769a      	strb	r2, [r3, #26]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	7e9b      	ldrb	r3, [r3, #26]
 8009644:	f043 0302 	orr.w	r3, r3, #2
 8009648:	b2da      	uxtb	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800964e:	e181      	b.n	8009954 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	7e9b      	ldrb	r3, [r3, #26]
 8009654:	f043 0301 	orr.w	r3, r3, #1
 8009658:	b2da      	uxtb	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800965e:	e179      	b.n	8009954 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f001 f8c5 	bl	800a7f0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800966a:	2b00      	cmp	r3, #0
 800966c:	d106      	bne.n	800967c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800966e:	4848      	ldr	r0, [pc, #288]	; (8009790 <tcp_receive+0xdd4>)
 8009670:	f7fd fc9c 	bl	8006fac <tcp_seg_copy>
 8009674:	4602      	mov	r2, r0
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800967a:	e16b      	b.n	8009954 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800967c:	2300      	movs	r3, #0
 800967e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009686:	e150      	b.n	800992a <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8009688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	4b41      	ldr	r3, [pc, #260]	; (8009794 <tcp_receive+0xdd8>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d11d      	bne.n	80096d2 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009696:	4b3e      	ldr	r3, [pc, #248]	; (8009790 <tcp_receive+0xdd4>)
 8009698:	891a      	ldrh	r2, [r3, #8]
 800969a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969c:	891b      	ldrh	r3, [r3, #8]
 800969e:	429a      	cmp	r2, r3
 80096a0:	f240 8148 	bls.w	8009934 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80096a4:	483a      	ldr	r0, [pc, #232]	; (8009790 <tcp_receive+0xdd4>)
 80096a6:	f7fd fc81 	bl	8006fac <tcp_seg_copy>
 80096aa:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 8142 	beq.w	8009938 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d003      	beq.n	80096c2 <tcp_receive+0xd06>
                    prev->next = cseg;
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	601a      	str	r2, [r3, #0]
 80096c0:	e002      	b.n	80096c8 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80096c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f7ff f900 	bl	80088d0 <tcp_oos_insert_segment>
                }
                break;
 80096d0:	e132      	b.n	8009938 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d117      	bne.n	8009708 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80096d8:	4b2e      	ldr	r3, [pc, #184]	; (8009794 <tcp_receive+0xdd8>)
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	da57      	bge.n	8009798 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80096e8:	4829      	ldr	r0, [pc, #164]	; (8009790 <tcp_receive+0xdd4>)
 80096ea:	f7fd fc5f 	bl	8006fac <tcp_seg_copy>
 80096ee:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 8122 	beq.w	800993c <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80096fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f7ff f8e5 	bl	80088d0 <tcp_oos_insert_segment>
                  }
                  break;
 8009706:	e119      	b.n	800993c <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8009708:	4b22      	ldr	r3, [pc, #136]	; (8009794 <tcp_receive+0xdd8>)
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	3b01      	subs	r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	db3e      	blt.n	8009798 <tcp_receive+0xddc>
 800971a:	4b1e      	ldr	r3, [pc, #120]	; (8009794 <tcp_receive+0xdd8>)
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	3301      	adds	r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	dc35      	bgt.n	8009798 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800972c:	4818      	ldr	r0, [pc, #96]	; (8009790 <tcp_receive+0xdd4>)
 800972e:	f7fd fc3d 	bl	8006fac <tcp_seg_copy>
 8009732:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 8102 	beq.w	8009940 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009744:	8912      	ldrh	r2, [r2, #8]
 8009746:	441a      	add	r2, r3
 8009748:	4b12      	ldr	r3, [pc, #72]	; (8009794 <tcp_receive+0xdd8>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	dd12      	ble.n	8009778 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009752:	4b10      	ldr	r3, [pc, #64]	; (8009794 <tcp_receive+0xdd8>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	b29a      	uxth	r2, r3
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	b29b      	uxth	r3, r3
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	b29a      	uxth	r2, r3
 8009764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009766:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	891b      	ldrh	r3, [r3, #8]
 8009770:	4619      	mov	r1, r3
 8009772:	4610      	mov	r0, r2
 8009774:	f7fb ff98 	bl	80056a8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800977e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f7ff f8a5 	bl	80088d0 <tcp_oos_insert_segment>
                  }
                  break;
 8009786:	e0db      	b.n	8009940 <tcp_receive+0xf84>
 8009788:	2000053c 	.word	0x2000053c
 800978c:	20000539 	.word	0x20000539
 8009790:	2000050c 	.word	0x2000050c
 8009794:	2000052c 	.word	0x2000052c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	f040 80bf 	bne.w	8009920 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80097a2:	4b7c      	ldr	r3, [pc, #496]	; (8009994 <tcp_receive+0xfd8>)
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f340 80b6 	ble.w	8009920 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80097b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	899b      	ldrh	r3, [r3, #12]
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fa ff51 	bl	8004664 <lwip_htons>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f040 80bb 	bne.w	8009944 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80097ce:	4872      	ldr	r0, [pc, #456]	; (8009998 <tcp_receive+0xfdc>)
 80097d0:	f7fd fbec 	bl	8006fac <tcp_seg_copy>
 80097d4:	4602      	mov	r2, r0
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80097da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 80b2 	beq.w	8009948 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80097e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097ec:	8912      	ldrh	r2, [r2, #8]
 80097ee:	441a      	add	r2, r3
 80097f0:	4b68      	ldr	r3, [pc, #416]	; (8009994 <tcp_receive+0xfd8>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	1ad3      	subs	r3, r2, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	dd12      	ble.n	8009820 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80097fa:	4b66      	ldr	r3, [pc, #408]	; (8009994 <tcp_receive+0xfd8>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	b29a      	uxth	r2, r3
 8009800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	b29b      	uxth	r3, r3
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	b29a      	uxth	r2, r3
 800980c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009816:	891b      	ldrh	r3, [r3, #8]
 8009818:	4619      	mov	r1, r3
 800981a:	4610      	mov	r0, r2
 800981c:	f7fb ff44 	bl	80056a8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009820:	4b5e      	ldr	r3, [pc, #376]	; (800999c <tcp_receive+0xfe0>)
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	461a      	mov	r2, r3
 8009826:	4b5b      	ldr	r3, [pc, #364]	; (8009994 <tcp_receive+0xfd8>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	441a      	add	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009830:	6879      	ldr	r1, [r7, #4]
 8009832:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009834:	440b      	add	r3, r1
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	f340 8085 	ble.w	8009948 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800983e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	899b      	ldrh	r3, [r3, #12]
 8009846:	b29b      	uxth	r3, r3
 8009848:	4618      	mov	r0, r3
 800984a:	f7fa ff0b 	bl	8004664 <lwip_htons>
 800984e:	4603      	mov	r3, r0
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b00      	cmp	r3, #0
 8009856:	d01e      	beq.n	8009896 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	899b      	ldrh	r3, [r3, #12]
 8009860:	b29b      	uxth	r3, r3
 8009862:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009866:	b29c      	uxth	r4, r3
 8009868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	899b      	ldrh	r3, [r3, #12]
 8009870:	b29b      	uxth	r3, r3
 8009872:	4618      	mov	r0, r3
 8009874:	f7fa fef6 	bl	8004664 <lwip_htons>
 8009878:	4603      	mov	r3, r0
 800987a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800987e:	b29b      	uxth	r3, r3
 8009880:	4618      	mov	r0, r3
 8009882:	f7fa feef 	bl	8004664 <lwip_htons>
 8009886:	4603      	mov	r3, r0
 8009888:	461a      	mov	r2, r3
 800988a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	4322      	orrs	r2, r4
 8009892:	b292      	uxth	r2, r2
 8009894:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989a:	b29a      	uxth	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098a0:	4413      	add	r3, r2
 80098a2:	b299      	uxth	r1, r3
 80098a4:	4b3b      	ldr	r3, [pc, #236]	; (8009994 <tcp_receive+0xfd8>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	1a8a      	subs	r2, r1, r2
 80098b0:	b292      	uxth	r2, r2
 80098b2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80098b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	891b      	ldrh	r3, [r3, #8]
 80098c0:	4619      	mov	r1, r3
 80098c2:	4610      	mov	r0, r2
 80098c4:	f7fb fef0 	bl	80056a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80098c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	891c      	ldrh	r4, [r3, #8]
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	899b      	ldrh	r3, [r3, #12]
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fa fec3 	bl	8004664 <lwip_htons>
 80098de:	4603      	mov	r3, r0
 80098e0:	f003 0303 	and.w	r3, r3, #3
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d001      	beq.n	80098ec <tcp_receive+0xf30>
 80098e8:	2301      	movs	r3, #1
 80098ea:	e000      	b.n	80098ee <tcp_receive+0xf32>
 80098ec:	2300      	movs	r3, #0
 80098ee:	4423      	add	r3, r4
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	4b2a      	ldr	r3, [pc, #168]	; (800999c <tcp_receive+0xfe0>)
 80098f4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80098f6:	4b29      	ldr	r3, [pc, #164]	; (800999c <tcp_receive+0xfe0>)
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	461a      	mov	r2, r3
 80098fc:	4b25      	ldr	r3, [pc, #148]	; (8009994 <tcp_receive+0xfd8>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	441a      	add	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009906:	6879      	ldr	r1, [r7, #4]
 8009908:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800990a:	440b      	add	r3, r1
 800990c:	429a      	cmp	r2, r3
 800990e:	d01b      	beq.n	8009948 <tcp_receive+0xf8c>
 8009910:	4b23      	ldr	r3, [pc, #140]	; (80099a0 <tcp_receive+0xfe4>)
 8009912:	f240 627b 	movw	r2, #1659	; 0x67b
 8009916:	4923      	ldr	r1, [pc, #140]	; (80099a4 <tcp_receive+0xfe8>)
 8009918:	4823      	ldr	r0, [pc, #140]	; (80099a8 <tcp_receive+0xfec>)
 800991a:	f007 fb67 	bl	8010fec <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800991e:	e013      	b.n	8009948 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8009920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009922:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	2b00      	cmp	r3, #0
 800992e:	f47f aeab 	bne.w	8009688 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8009932:	e00f      	b.n	8009954 <tcp_receive+0xf98>
                break;
 8009934:	bf00      	nop
 8009936:	e00d      	b.n	8009954 <tcp_receive+0xf98>
                break;
 8009938:	bf00      	nop
 800993a:	e00b      	b.n	8009954 <tcp_receive+0xf98>
                  break;
 800993c:	bf00      	nop
 800993e:	e009      	b.n	8009954 <tcp_receive+0xf98>
                  break;
 8009940:	bf00      	nop
 8009942:	e007      	b.n	8009954 <tcp_receive+0xf98>
                  break;
 8009944:	bf00      	nop
 8009946:	e005      	b.n	8009954 <tcp_receive+0xf98>
                break;
 8009948:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800994a:	e003      	b.n	8009954 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 ff4f 	bl	800a7f0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009952:	e01a      	b.n	800998a <tcp_receive+0xfce>
 8009954:	e019      	b.n	800998a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009956:	4b0f      	ldr	r3, [pc, #60]	; (8009994 <tcp_receive+0xfd8>)
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	2b00      	cmp	r3, #0
 8009962:	db0a      	blt.n	800997a <tcp_receive+0xfbe>
 8009964:	4b0b      	ldr	r3, [pc, #44]	; (8009994 <tcp_receive+0xfd8>)
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	6879      	ldr	r1, [r7, #4]
 800996e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009970:	440b      	add	r3, r1
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	3301      	adds	r3, #1
 8009976:	2b00      	cmp	r3, #0
 8009978:	dd07      	ble.n	800998a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	7e9b      	ldrb	r3, [r3, #26]
 800997e:	f043 0302 	orr.w	r3, r3, #2
 8009982:	b2da      	uxtb	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8009988:	e7ff      	b.n	800998a <tcp_receive+0xfce>
 800998a:	bf00      	nop
 800998c:	3734      	adds	r7, #52	; 0x34
 800998e:	46bd      	mov	sp, r7
 8009990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009992:	bf00      	nop
 8009994:	2000052c 	.word	0x2000052c
 8009998:	2000050c 	.word	0x2000050c
 800999c:	20000536 	.word	0x20000536
 80099a0:	08012e30 	.word	0x08012e30
 80099a4:	080130fc 	.word	0x080130fc
 80099a8:	08012e74 	.word	0x08012e74

080099ac <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80099b2:	4b18      	ldr	r3, [pc, #96]	; (8009a14 <tcp_getoptbyte+0x68>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d005      	beq.n	80099c6 <tcp_getoptbyte+0x1a>
 80099ba:	4b17      	ldr	r3, [pc, #92]	; (8009a18 <tcp_getoptbyte+0x6c>)
 80099bc:	881a      	ldrh	r2, [r3, #0]
 80099be:	4b17      	ldr	r3, [pc, #92]	; (8009a1c <tcp_getoptbyte+0x70>)
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d20e      	bcs.n	80099e4 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80099c6:	4b16      	ldr	r3, [pc, #88]	; (8009a20 <tcp_getoptbyte+0x74>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3314      	adds	r3, #20
 80099cc:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80099ce:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <tcp_getoptbyte+0x6c>)
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	1c5a      	adds	r2, r3, #1
 80099d4:	b291      	uxth	r1, r2
 80099d6:	4a10      	ldr	r2, [pc, #64]	; (8009a18 <tcp_getoptbyte+0x6c>)
 80099d8:	8011      	strh	r1, [r2, #0]
 80099da:	461a      	mov	r2, r3
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	4413      	add	r3, r2
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	e010      	b.n	8009a06 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80099e4:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <tcp_getoptbyte+0x6c>)
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	b291      	uxth	r1, r2
 80099ec:	4a0a      	ldr	r2, [pc, #40]	; (8009a18 <tcp_getoptbyte+0x6c>)
 80099ee:	8011      	strh	r1, [r2, #0]
 80099f0:	b2da      	uxtb	r2, r3
 80099f2:	4b0a      	ldr	r3, [pc, #40]	; (8009a1c <tcp_getoptbyte+0x70>)
 80099f4:	881b      	ldrh	r3, [r3, #0]
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80099fc:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <tcp_getoptbyte+0x68>)
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	79fb      	ldrb	r3, [r7, #7]
 8009a02:	4413      	add	r3, r2
 8009a04:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	20000524 	.word	0x20000524
 8009a18:	20000528 	.word	0x20000528
 8009a1c:	20000522 	.word	0x20000522
 8009a20:	2000051c 	.word	0x2000051c

08009a24 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009a2c:	4b2d      	ldr	r3, [pc, #180]	; (8009ae4 <tcp_parseopt+0xc0>)
 8009a2e:	881b      	ldrh	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d053      	beq.n	8009adc <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009a34:	4b2c      	ldr	r3, [pc, #176]	; (8009ae8 <tcp_parseopt+0xc4>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	801a      	strh	r2, [r3, #0]
 8009a3a:	e043      	b.n	8009ac4 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8009a3c:	f7ff ffb6 	bl	80099ac <tcp_getoptbyte>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d03c      	beq.n	8009ac4 <tcp_parseopt+0xa0>
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d002      	beq.n	8009a54 <tcp_parseopt+0x30>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d03f      	beq.n	8009ad2 <tcp_parseopt+0xae>
 8009a52:	e026      	b.n	8009aa2 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009a54:	f7ff ffaa 	bl	80099ac <tcp_getoptbyte>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	d13b      	bne.n	8009ad6 <tcp_parseopt+0xb2>
 8009a5e:	4b22      	ldr	r3, [pc, #136]	; (8009ae8 <tcp_parseopt+0xc4>)
 8009a60:	881b      	ldrh	r3, [r3, #0]
 8009a62:	3302      	adds	r3, #2
 8009a64:	4a1f      	ldr	r2, [pc, #124]	; (8009ae4 <tcp_parseopt+0xc0>)
 8009a66:	8812      	ldrh	r2, [r2, #0]
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	dc34      	bgt.n	8009ad6 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8009a6c:	f7ff ff9e 	bl	80099ac <tcp_getoptbyte>
 8009a70:	4603      	mov	r3, r0
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	021b      	lsls	r3, r3, #8
 8009a76:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8009a78:	f7ff ff98 	bl	80099ac <tcp_getoptbyte>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	89bb      	ldrh	r3, [r7, #12]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009a86:	89bb      	ldrh	r3, [r7, #12]
 8009a88:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009a8c:	d804      	bhi.n	8009a98 <tcp_parseopt+0x74>
 8009a8e:	89bb      	ldrh	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <tcp_parseopt+0x74>
 8009a94:	89ba      	ldrh	r2, [r7, #12]
 8009a96:	e001      	b.n	8009a9c <tcp_parseopt+0x78>
 8009a98:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8009aa0:	e010      	b.n	8009ac4 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8009aa2:	f7ff ff83 	bl	80099ac <tcp_getoptbyte>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8009aaa:	7afb      	ldrb	r3, [r7, #11]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d914      	bls.n	8009ada <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8009ab0:	7afb      	ldrb	r3, [r7, #11]
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	4b0c      	ldr	r3, [pc, #48]	; (8009ae8 <tcp_parseopt+0xc4>)
 8009ab6:	881b      	ldrh	r3, [r3, #0]
 8009ab8:	4413      	add	r3, r2
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	3b02      	subs	r3, #2
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	4b09      	ldr	r3, [pc, #36]	; (8009ae8 <tcp_parseopt+0xc4>)
 8009ac2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009ac4:	4b08      	ldr	r3, [pc, #32]	; (8009ae8 <tcp_parseopt+0xc4>)
 8009ac6:	881a      	ldrh	r2, [r3, #0]
 8009ac8:	4b06      	ldr	r3, [pc, #24]	; (8009ae4 <tcp_parseopt+0xc0>)
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d3b5      	bcc.n	8009a3c <tcp_parseopt+0x18>
 8009ad0:	e004      	b.n	8009adc <tcp_parseopt+0xb8>
        return;
 8009ad2:	bf00      	nop
 8009ad4:	e002      	b.n	8009adc <tcp_parseopt+0xb8>
          return;
 8009ad6:	bf00      	nop
 8009ad8:	e000      	b.n	8009adc <tcp_parseopt+0xb8>
          return;
 8009ada:	bf00      	nop
      }
    }
  }
}
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20000520 	.word	0x20000520
 8009ae8:	20000528 	.word	0x20000528

08009aec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009aec:	b480      	push	{r7}
 8009aee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009af0:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <tcp_trigger_input_pcb_close+0x1c>)
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	f043 0310 	orr.w	r3, r3, #16
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	4b03      	ldr	r3, [pc, #12]	; (8009b08 <tcp_trigger_input_pcb_close+0x1c>)
 8009afc:	701a      	strb	r2, [r3, #0]
}
 8009afe:	bf00      	nop
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr
 8009b08:	20000539 	.word	0x20000539

08009b0c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	607b      	str	r3, [r7, #4]
 8009b16:	460b      	mov	r3, r1
 8009b18:	817b      	strh	r3, [r7, #10]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009b1e:	897a      	ldrh	r2, [r7, #10]
 8009b20:	893b      	ldrh	r3, [r7, #8]
 8009b22:	4413      	add	r3, r2
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	3314      	adds	r3, #20
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	2001      	movs	r0, #1
 8009b30:	f7fb fbbc 	bl	80052ac <pbuf_alloc>
 8009b34:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d057      	beq.n	8009bec <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	895b      	ldrh	r3, [r3, #10]
 8009b40:	461a      	mov	r2, r3
 8009b42:	897b      	ldrh	r3, [r7, #10]
 8009b44:	3314      	adds	r3, #20
 8009b46:	429a      	cmp	r2, r3
 8009b48:	da05      	bge.n	8009b56 <tcp_output_alloc_header+0x4a>
 8009b4a:	4b2b      	ldr	r3, [pc, #172]	; (8009bf8 <tcp_output_alloc_header+0xec>)
 8009b4c:	2273      	movs	r2, #115	; 0x73
 8009b4e:	492b      	ldr	r1, [pc, #172]	; (8009bfc <tcp_output_alloc_header+0xf0>)
 8009b50:	482b      	ldr	r0, [pc, #172]	; (8009c00 <tcp_output_alloc_header+0xf4>)
 8009b52:	f007 fa4b 	bl	8010fec <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	8adb      	ldrh	r3, [r3, #22]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fa fd7f 	bl	8004664 <lwip_htons>
 8009b66:	4603      	mov	r3, r0
 8009b68:	461a      	mov	r2, r3
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	8b1b      	ldrh	r3, [r3, #24]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fa fd76 	bl	8004664 <lwip_htons>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fa fd78 	bl	8004680 <lwip_htonl>
 8009b90:	4602      	mov	r2, r0
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8009b96:	897b      	ldrh	r3, [r7, #10]
 8009b98:	089b      	lsrs	r3, r3, #2
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	3305      	adds	r3, #5
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	031b      	lsls	r3, r3, #12
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	f043 0310 	orr.w	r3, r3, #16
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fa fd5a 	bl	8004664 <lwip_htons>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7fa fd51 	bl	8004664 <lwip_htons>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	741a      	strb	r2, [r3, #16]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	749a      	strb	r2, [r3, #18]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009be6:	441a      	add	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8009bec:	697b      	ldr	r3, [r7, #20]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	080131b8 	.word	0x080131b8
 8009bfc:	080131ec 	.word	0x080131ec
 8009c00:	0801321c 	.word	0x0801321c

08009c04 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009c04:	b590      	push	{r4, r7, lr}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d02d      	beq.n	8009c70 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c18:	60fb      	str	r3, [r7, #12]
 8009c1a:	e002      	b.n	8009c22 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1f8      	bne.n	8009c1c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	899b      	ldrh	r3, [r3, #12]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fa fd16 	bl	8004664 <lwip_htons>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f003 0307 	and.w	r3, r3, #7
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d116      	bne.n	8009c70 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	899b      	ldrh	r3, [r3, #12]
 8009c48:	b29c      	uxth	r4, r3
 8009c4a:	2001      	movs	r0, #1
 8009c4c:	f7fa fd0a 	bl	8004664 <lwip_htons>
 8009c50:	4603      	mov	r3, r0
 8009c52:	461a      	mov	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	4322      	orrs	r2, r4
 8009c5a:	b292      	uxth	r2, r2
 8009c5c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	7e9b      	ldrb	r3, [r3, #26]
 8009c62:	f043 0320 	orr.w	r3, r3, #32
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	e004      	b.n	8009c7a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009c70:	2101      	movs	r1, #1
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fcc0 	bl	800a5f8 <tcp_enqueue_flags>
 8009c78:	4603      	mov	r3, r0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd90      	pop	{r4, r7, pc}
	...

08009c84 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8009c84:	b590      	push	{r4, r7, lr}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	603b      	str	r3, [r7, #0]
 8009c90:	4613      	mov	r3, r2
 8009c92:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009c94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009ca2:	2003      	movs	r0, #3
 8009ca4:	f7fb f8f6 	bl	8004e94 <memp_malloc>
 8009ca8:	6138      	str	r0, [r7, #16]
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d104      	bne.n	8009cba <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009cb0:	68b8      	ldr	r0, [r7, #8]
 8009cb2:	f7fb fe6d 	bl	8005990 <pbuf_free>
    return NULL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	e061      	b.n	8009d7e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009cc0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	891a      	ldrh	r2, [r3, #8]
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d205      	bcs.n	8009ce6 <tcp_create_segment+0x62>
 8009cda:	4b2b      	ldr	r3, [pc, #172]	; (8009d88 <tcp_create_segment+0x104>)
 8009cdc:	22ba      	movs	r2, #186	; 0xba
 8009cde:	492b      	ldr	r1, [pc, #172]	; (8009d8c <tcp_create_segment+0x108>)
 8009ce0:	482b      	ldr	r0, [pc, #172]	; (8009d90 <tcp_create_segment+0x10c>)
 8009ce2:	f007 f983 	bl	8010fec <iprintf>
  seg->len = p->tot_len - optlen;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	891a      	ldrh	r2, [r3, #8]
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8009cf6:	2114      	movs	r1, #20
 8009cf8:	68b8      	ldr	r0, [r7, #8]
 8009cfa:	f7fb fe25 	bl	8005948 <pbuf_header>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009d04:	6938      	ldr	r0, [r7, #16]
 8009d06:	f7fd f92a 	bl	8006f5e <tcp_seg_free>
    return NULL;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e037      	b.n	8009d7e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	8ada      	ldrh	r2, [r3, #22]
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	68dc      	ldr	r4, [r3, #12]
 8009d20:	4610      	mov	r0, r2
 8009d22:	f7fa fc9f 	bl	8004664 <lwip_htons>
 8009d26:	4603      	mov	r3, r0
 8009d28:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	8b1a      	ldrh	r2, [r3, #24]
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	68dc      	ldr	r4, [r3, #12]
 8009d32:	4610      	mov	r0, r2
 8009d34:	f7fa fc96 	bl	8004664 <lwip_htons>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	68dc      	ldr	r4, [r3, #12]
 8009d40:	6838      	ldr	r0, [r7, #0]
 8009d42:	f7fa fc9d 	bl	8004680 <lwip_htonl>
 8009d46:	4603      	mov	r3, r0
 8009d48:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	089b      	lsrs	r3, r3, #2
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	3305      	adds	r3, #5
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	031b      	lsls	r3, r3, #12
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	79fb      	ldrb	r3, [r7, #7]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	68dc      	ldr	r4, [r3, #12]
 8009d66:	4610      	mov	r0, r2
 8009d68:	f7fa fc7c 	bl	8004664 <lwip_htons>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	749a      	strb	r2, [r3, #18]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	74da      	strb	r2, [r3, #19]
  return seg;
 8009d7c:	693b      	ldr	r3, [r7, #16]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	371c      	adds	r7, #28
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd90      	pop	{r4, r7, pc}
 8009d86:	bf00      	nop
 8009d88:	080131b8 	.word	0x080131b8
 8009d8c:	08013244 	.word	0x08013244
 8009d90:	0801321c 	.word	0x0801321c

08009d94 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	607b      	str	r3, [r7, #4]
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73fb      	strb	r3, [r7, #15]
 8009da0:	460b      	mov	r3, r1
 8009da2:	81bb      	strh	r3, [r7, #12]
 8009da4:	4613      	mov	r3, r2
 8009da6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009da8:	89bb      	ldrh	r3, [r7, #12]
 8009daa:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009dac:	89ba      	ldrh	r2, [r7, #12]
 8009dae:	897b      	ldrh	r3, [r7, #10]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d221      	bcs.n	8009df8 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009db4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009db8:	f003 0302 	and.w	r3, r3, #2
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d111      	bne.n	8009de4 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8009dc0:	6a3b      	ldr	r3, [r7, #32]
 8009dc2:	7e9b      	ldrb	r3, [r3, #26]
 8009dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d115      	bne.n	8009df8 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8009dcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d007      	beq.n	8009de4 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d103      	bne.n	8009de4 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d009      	beq.n	8009df8 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009de4:	89bb      	ldrh	r3, [r7, #12]
 8009de6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8009dea:	f023 0203 	bic.w	r2, r3, #3
 8009dee:	897b      	ldrh	r3, [r7, #10]
 8009df0:	4293      	cmp	r3, r2
 8009df2:	bf28      	it	cs
 8009df4:	4613      	movcs	r3, r2
 8009df6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009df8:	8af9      	ldrh	r1, [r7, #22]
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fb fa54 	bl	80052ac <pbuf_alloc>
 8009e04:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	e019      	b.n	8009e44 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d006      	beq.n	8009e26 <tcp_pbuf_prealloc+0x92>
 8009e18:	4b0c      	ldr	r3, [pc, #48]	; (8009e4c <tcp_pbuf_prealloc+0xb8>)
 8009e1a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8009e1e:	490c      	ldr	r1, [pc, #48]	; (8009e50 <tcp_pbuf_prealloc+0xbc>)
 8009e20:	480c      	ldr	r0, [pc, #48]	; (8009e54 <tcp_pbuf_prealloc+0xc0>)
 8009e22:	f007 f8e3 	bl	8010fec <iprintf>
  *oversize = p->len - length;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	895a      	ldrh	r2, [r3, #10]
 8009e2a:	89bb      	ldrh	r3, [r7, #12]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	89ba      	ldrh	r2, [r7, #12]
 8009e38:	811a      	strh	r2, [r3, #8]
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	891a      	ldrh	r2, [r3, #8]
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	815a      	strh	r2, [r3, #10]
  return p;
 8009e42:	693b      	ldr	r3, [r7, #16]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	080131b8 	.word	0x080131b8
 8009e50:	0801325c 	.word	0x0801325c
 8009e54:	0801321c 	.word	0x0801321c

08009e58 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	460b      	mov	r3, r1
 8009e62:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	7d1b      	ldrb	r3, [r3, #20]
 8009e68:	2b04      	cmp	r3, #4
 8009e6a:	d00e      	beq.n	8009e8a <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009e70:	2b07      	cmp	r3, #7
 8009e72:	d00a      	beq.n	8009e8a <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d006      	beq.n	8009e8a <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8009e80:	2b03      	cmp	r3, #3
 8009e82:	d002      	beq.n	8009e8a <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8009e84:	f06f 030a 	mvn.w	r3, #10
 8009e88:	e04f      	b.n	8009f2a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8009e8a:	887b      	ldrh	r3, [r7, #2]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d101      	bne.n	8009e94 <tcp_write_checks+0x3c>
    return ERR_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	e04a      	b.n	8009f2a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e9a:	887a      	ldrh	r2, [r7, #2]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d909      	bls.n	8009eb4 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7e9b      	ldrb	r3, [r3, #26]
 8009ea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009eae:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb2:	e03a      	b.n	8009f2a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009eba:	2b08      	cmp	r3, #8
 8009ebc:	d806      	bhi.n	8009ecc <tcp_write_checks+0x74>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ec4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d909      	bls.n	8009ee0 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	7e9b      	ldrb	r3, [r3, #26]
 8009ed0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009eda:	f04f 33ff 	mov.w	r3, #4294967295
 8009ede:	e024      	b.n	8009f2a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00f      	beq.n	8009f0a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d11a      	bne.n	8009f28 <tcp_write_checks+0xd0>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d116      	bne.n	8009f28 <tcp_write_checks+0xd0>
 8009efa:	4b0e      	ldr	r3, [pc, #56]	; (8009f34 <tcp_write_checks+0xdc>)
 8009efc:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8009f00:	490d      	ldr	r1, [pc, #52]	; (8009f38 <tcp_write_checks+0xe0>)
 8009f02:	480e      	ldr	r0, [pc, #56]	; (8009f3c <tcp_write_checks+0xe4>)
 8009f04:	f007 f872 	bl	8010fec <iprintf>
 8009f08:	e00e      	b.n	8009f28 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d103      	bne.n	8009f1a <tcp_write_checks+0xc2>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d006      	beq.n	8009f28 <tcp_write_checks+0xd0>
 8009f1a:	4b06      	ldr	r3, [pc, #24]	; (8009f34 <tcp_write_checks+0xdc>)
 8009f1c:	f240 1259 	movw	r2, #345	; 0x159
 8009f20:	4907      	ldr	r1, [pc, #28]	; (8009f40 <tcp_write_checks+0xe8>)
 8009f22:	4806      	ldr	r0, [pc, #24]	; (8009f3c <tcp_write_checks+0xe4>)
 8009f24:	f007 f862 	bl	8010fec <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	080131b8 	.word	0x080131b8
 8009f38:	08013270 	.word	0x08013270
 8009f3c:	0801321c 	.word	0x0801321c
 8009f40:	080132ac 	.word	0x080132ac

08009f44 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8009f44:	b590      	push	{r4, r7, lr}
 8009f46:	b09b      	sub	sp, #108	; 0x6c
 8009f48:	af04      	add	r7, sp, #16
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	4611      	mov	r1, r2
 8009f50:	461a      	mov	r2, r3
 8009f52:	460b      	mov	r3, r1
 8009f54:	80fb      	strh	r3, [r7, #6]
 8009f56:	4613      	mov	r3, r2
 8009f58:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	653b      	str	r3, [r7, #80]	; 0x50
 8009f62:	2300      	movs	r3, #0
 8009f64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f66:	2300      	movs	r3, #0
 8009f68:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f92:	085b      	lsrs	r3, r3, #1
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	bf28      	it	cs
 8009f9e:	4613      	movcs	r3, r2
 8009fa0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8009fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d102      	bne.n	8009fae <tcp_write+0x6a>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009fac:	e000      	b.n	8009fb0 <tcp_write+0x6c>
 8009fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fb0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d109      	bne.n	8009fcc <tcp_write+0x88>
 8009fb8:	4b92      	ldr	r3, [pc, #584]	; (800a204 <tcp_write+0x2c0>)
 8009fba:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8009fbe:	4992      	ldr	r1, [pc, #584]	; (800a208 <tcp_write+0x2c4>)
 8009fc0:	4892      	ldr	r0, [pc, #584]	; (800a20c <tcp_write+0x2c8>)
 8009fc2:	f007 f813 	bl	8010fec <iprintf>
 8009fc6:	f06f 030f 	mvn.w	r3, #15
 8009fca:	e30a      	b.n	800a5e2 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8009fcc:	88fb      	ldrh	r3, [r7, #6]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff ff41 	bl	8009e58 <tcp_write_checks>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8009fdc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <tcp_write+0xa6>
    return err;
 8009fe4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009fe8:	e2fb      	b.n	800a5e2 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ff0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 80f5 	beq.w	800a1e8 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a002:	653b      	str	r3, [r7, #80]	; 0x50
 800a004:	e002      	b.n	800a00c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800a006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1f8      	bne.n	800a006 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800a014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a016:	7a9b      	ldrb	r3, [r3, #10]
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	f003 0304 	and.w	r3, r3, #4
 800a020:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a022:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a026:	891b      	ldrh	r3, [r3, #8]
 800a028:	4619      	mov	r1, r3
 800a02a:	8c3b      	ldrh	r3, [r7, #32]
 800a02c:	440b      	add	r3, r1
 800a02e:	429a      	cmp	r2, r3
 800a030:	da06      	bge.n	800a040 <tcp_write+0xfc>
 800a032:	4b74      	ldr	r3, [pc, #464]	; (800a204 <tcp_write+0x2c0>)
 800a034:	f240 12c7 	movw	r2, #455	; 0x1c7
 800a038:	4975      	ldr	r1, [pc, #468]	; (800a210 <tcp_write+0x2cc>)
 800a03a:	4874      	ldr	r0, [pc, #464]	; (800a20c <tcp_write+0x2c8>)
 800a03c:	f006 ffd6 	bl	8010fec <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a042:	891a      	ldrh	r2, [r3, #8]
 800a044:	8c3b      	ldrh	r3, [r7, #32]
 800a046:	4413      	add	r3, r2
 800a048:	b29b      	uxth	r3, r3
 800a04a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a056:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800a058:	8a7b      	ldrh	r3, [r7, #18]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d027      	beq.n	800a0ae <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a05e:	8a7b      	ldrh	r3, [r7, #18]
 800a060:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a062:	429a      	cmp	r2, r3
 800a064:	d206      	bcs.n	800a074 <tcp_write+0x130>
 800a066:	4b67      	ldr	r3, [pc, #412]	; (800a204 <tcp_write+0x2c0>)
 800a068:	f240 12d9 	movw	r2, #473	; 0x1d9
 800a06c:	4969      	ldr	r1, [pc, #420]	; (800a214 <tcp_write+0x2d0>)
 800a06e:	4867      	ldr	r0, [pc, #412]	; (800a20c <tcp_write+0x2c8>)
 800a070:	f006 ffbc 	bl	8010fec <iprintf>
      seg = last_unsent;
 800a074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a076:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a078:	8a7b      	ldrh	r3, [r7, #18]
 800a07a:	88fa      	ldrh	r2, [r7, #6]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d901      	bls.n	800a084 <tcp_write+0x140>
 800a080:	8a7b      	ldrh	r3, [r7, #18]
 800a082:	e000      	b.n	800a086 <tcp_write+0x142>
 800a084:	88fb      	ldrh	r3, [r7, #6]
 800a086:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a088:	4293      	cmp	r3, r2
 800a08a:	bfa8      	it	ge
 800a08c:	4613      	movge	r3, r2
 800a08e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800a090:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a094:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a096:	4413      	add	r3, r2
 800a098:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800a09c:	8a7a      	ldrh	r2, [r7, #18]
 800a09e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800a0a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a0a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a0ae:	8a7b      	ldrh	r3, [r7, #18]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00b      	beq.n	800a0cc <tcp_write+0x188>
 800a0b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a0b8:	88fb      	ldrh	r3, [r7, #6]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d006      	beq.n	800a0cc <tcp_write+0x188>
 800a0be:	4b51      	ldr	r3, [pc, #324]	; (800a204 <tcp_write+0x2c0>)
 800a0c0:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a0c4:	4954      	ldr	r1, [pc, #336]	; (800a218 <tcp_write+0x2d4>)
 800a0c6:	4851      	ldr	r0, [pc, #324]	; (800a20c <tcp_write+0x2c8>)
 800a0c8:	f006 ff90 	bl	8010fec <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a0cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a0d0:	88fb      	ldrh	r3, [r7, #6]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	f080 8168 	bcs.w	800a3a8 <tcp_write+0x464>
 800a0d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 8164 	beq.w	800a3a8 <tcp_write+0x464>
 800a0e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0e2:	891b      	ldrh	r3, [r3, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 815f 	beq.w	800a3a8 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a0ea:	88fa      	ldrh	r2, [r7, #6]
 800a0ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a0f0:	1ad2      	subs	r2, r2, r3
 800a0f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	bfa8      	it	ge
 800a0f8:	4613      	movge	r3, r2
 800a0fa:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800a0fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0fe:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a100:	797b      	ldrb	r3, [r7, #5]
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	2b00      	cmp	r3, #0
 800a108:	d027      	beq.n	800a15a <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a10a:	f107 0012 	add.w	r0, r7, #18
 800a10e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a110:	8bf9      	ldrh	r1, [r7, #30]
 800a112:	2301      	movs	r3, #1
 800a114:	9302      	str	r3, [sp, #8]
 800a116:	797b      	ldrb	r3, [r7, #5]
 800a118:	9301      	str	r3, [sp, #4]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	4603      	mov	r3, r0
 800a120:	2004      	movs	r0, #4
 800a122:	f7ff fe37 	bl	8009d94 <tcp_pbuf_prealloc>
 800a126:	6578      	str	r0, [r7, #84]	; 0x54
 800a128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f000 8227 	beq.w	800a57e <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a132:	6858      	ldr	r0, [r3, #4]
 800a134:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	4413      	add	r3, r2
 800a13c:	8bfa      	ldrh	r2, [r7, #30]
 800a13e:	4619      	mov	r1, r3
 800a140:	f006 ff41 	bl	8010fc6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800a144:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a146:	f7fb fcb7 	bl	8005ab8 <pbuf_clen>
 800a14a:	4603      	mov	r3, r0
 800a14c:	461a      	mov	r2, r3
 800a14e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a152:	4413      	add	r3, r2
 800a154:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a158:	e03f      	b.n	800a1da <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a15a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	637b      	str	r3, [r7, #52]	; 0x34
 800a160:	e002      	b.n	800a168 <tcp_write+0x224>
 800a162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	637b      	str	r3, [r7, #52]	; 0x34
 800a168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1f8      	bne.n	800a162 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a172:	7b1b      	ldrb	r3, [r3, #12]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d115      	bne.n	800a1a4 <tcp_write+0x260>
 800a178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a17e:	8952      	ldrh	r2, [r2, #10]
 800a180:	4413      	add	r3, r2
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	429a      	cmp	r2, r3
 800a186:	d10d      	bne.n	800a1a4 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a188:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d006      	beq.n	800a19e <tcp_write+0x25a>
 800a190:	4b1c      	ldr	r3, [pc, #112]	; (800a204 <tcp_write+0x2c0>)
 800a192:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800a196:	4921      	ldr	r1, [pc, #132]	; (800a21c <tcp_write+0x2d8>)
 800a198:	481c      	ldr	r0, [pc, #112]	; (800a20c <tcp_write+0x2c8>)
 800a19a:	f006 ff27 	bl	8010fec <iprintf>
          extendlen = seglen;
 800a19e:	8bfb      	ldrh	r3, [r7, #30]
 800a1a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a1a2:	e01a      	b.n	800a1da <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a1a4:	8bfb      	ldrh	r3, [r7, #30]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	2004      	movs	r0, #4
 800a1ac:	f7fb f87e 	bl	80052ac <pbuf_alloc>
 800a1b0:	6578      	str	r0, [r7, #84]	; 0x54
 800a1b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 81e4 	beq.w	800a582 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800a1ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	441a      	add	r2, r3
 800a1c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1c4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a1c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a1c8:	f7fb fc76 	bl	8005ab8 <pbuf_clen>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a1d4:	4413      	add	r3, r2
 800a1d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a1da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a1de:	8bfb      	ldrh	r3, [r7, #30]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a1e6:	e0df      	b.n	800a3a8 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f000 80da 	beq.w	800a3a8 <tcp_write+0x464>
 800a1f4:	4b03      	ldr	r3, [pc, #12]	; (800a204 <tcp_write+0x2c0>)
 800a1f6:	f240 2225 	movw	r2, #549	; 0x225
 800a1fa:	4909      	ldr	r1, [pc, #36]	; (800a220 <tcp_write+0x2dc>)
 800a1fc:	4803      	ldr	r0, [pc, #12]	; (800a20c <tcp_write+0x2c8>)
 800a1fe:	f006 fef5 	bl	8010fec <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a202:	e0d1      	b.n	800a3a8 <tcp_write+0x464>
 800a204:	080131b8 	.word	0x080131b8
 800a208:	080132e0 	.word	0x080132e0
 800a20c:	0801321c 	.word	0x0801321c
 800a210:	08013314 	.word	0x08013314
 800a214:	0801332c 	.word	0x0801332c
 800a218:	0801334c 	.word	0x0801334c
 800a21c:	0801336c 	.word	0x0801336c
 800a220:	08013398 	.word	0x08013398
    struct pbuf *p;
    u16_t left = len - pos;
 800a224:	88fa      	ldrh	r2, [r7, #6]
 800a226:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a22e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a232:	b29b      	uxth	r3, r3
 800a234:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a23a:	8b7a      	ldrh	r2, [r7, #26]
 800a23c:	8bbb      	ldrh	r3, [r7, #28]
 800a23e:	4293      	cmp	r3, r2
 800a240:	bf28      	it	cs
 800a242:	4613      	movcs	r3, r2
 800a244:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a246:	797b      	ldrb	r3, [r7, #5]
 800a248:	f003 0301 	and.w	r3, r3, #1
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d036      	beq.n	800a2be <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a254:	b29a      	uxth	r2, r3
 800a256:	8b3b      	ldrh	r3, [r7, #24]
 800a258:	4413      	add	r3, r2
 800a25a:	b299      	uxth	r1, r3
 800a25c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a25e:	2b00      	cmp	r3, #0
 800a260:	bf0c      	ite	eq
 800a262:	2301      	moveq	r3, #1
 800a264:	2300      	movne	r3, #0
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f107 0012 	add.w	r0, r7, #18
 800a26c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a26e:	9302      	str	r3, [sp, #8]
 800a270:	797b      	ldrb	r3, [r7, #5]
 800a272:	9301      	str	r3, [sp, #4]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	4603      	mov	r3, r0
 800a27a:	2000      	movs	r0, #0
 800a27c:	f7ff fd8a 	bl	8009d94 <tcp_pbuf_prealloc>
 800a280:	6338      	str	r0, [r7, #48]	; 0x30
 800a282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 817e 	beq.w	800a586 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28c:	895b      	ldrh	r3, [r3, #10]
 800a28e:	8b3a      	ldrh	r2, [r7, #24]
 800a290:	429a      	cmp	r2, r3
 800a292:	d906      	bls.n	800a2a2 <tcp_write+0x35e>
 800a294:	4b8f      	ldr	r3, [pc, #572]	; (800a4d4 <tcp_write+0x590>)
 800a296:	f240 2241 	movw	r2, #577	; 0x241
 800a29a:	498f      	ldr	r1, [pc, #572]	; (800a4d8 <tcp_write+0x594>)
 800a29c:	488f      	ldr	r0, [pc, #572]	; (800a4dc <tcp_write+0x598>)
 800a29e:	f006 fea5 	bl	8010fec <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	685a      	ldr	r2, [r3, #4]
 800a2a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2aa:	18d0      	adds	r0, r2, r3
 800a2ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	8b3a      	ldrh	r2, [r7, #24]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	f006 fe85 	bl	8010fc6 <memcpy>
 800a2bc:	e02e      	b.n	800a31c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a2be:	8a7b      	ldrh	r3, [r7, #18]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d006      	beq.n	800a2d2 <tcp_write+0x38e>
 800a2c4:	4b83      	ldr	r3, [pc, #524]	; (800a4d4 <tcp_write+0x590>)
 800a2c6:	f240 224b 	movw	r2, #587	; 0x24b
 800a2ca:	4985      	ldr	r1, [pc, #532]	; (800a4e0 <tcp_write+0x59c>)
 800a2cc:	4883      	ldr	r0, [pc, #524]	; (800a4dc <tcp_write+0x598>)
 800a2ce:	f006 fe8d 	bl	8010fec <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a2d2:	8b3b      	ldrh	r3, [r7, #24]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	2000      	movs	r0, #0
 800a2da:	f7fa ffe7 	bl	80052ac <pbuf_alloc>
 800a2de:	6178      	str	r0, [r7, #20]
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 8151 	beq.w	800a58a <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800a2e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	441a      	add	r2, r3
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	2000      	movs	r0, #0
 800a300:	f7fa ffd4 	bl	80052ac <pbuf_alloc>
 800a304:	6338      	str	r0, [r7, #48]	; 0x30
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d103      	bne.n	800a314 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a30c:	6978      	ldr	r0, [r7, #20]
 800a30e:	f7fb fb3f 	bl	8005990 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a312:	e13d      	b.n	800a590 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a314:	6979      	ldr	r1, [r7, #20]
 800a316:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a318:	f7fb fc08 	bl	8005b2c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a31c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a31e:	f7fb fbcb 	bl	8005ab8 <pbuf_clen>
 800a322:	4603      	mov	r3, r0
 800a324:	461a      	mov	r2, r3
 800a326:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a32a:	4413      	add	r3, r2
 800a32c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a330:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a334:	2b09      	cmp	r3, #9
 800a336:	d805      	bhi.n	800a344 <tcp_write+0x400>
 800a338:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a33c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a340:	4293      	cmp	r3, r2
 800a342:	d903      	bls.n	800a34c <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a346:	f7fb fb23 	bl	8005990 <pbuf_free>
      goto memerr;
 800a34a:	e121      	b.n	800a590 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a350:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a354:	441a      	add	r2, r3
 800a356:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	4613      	mov	r3, r2
 800a35e:	2200      	movs	r2, #0
 800a360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f7ff fc8e 	bl	8009c84 <tcp_create_segment>
 800a368:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f000 810e 	beq.w	800a58e <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a374:	2b00      	cmp	r3, #0
 800a376:	d102      	bne.n	800a37e <tcp_write+0x43a>
      queue = seg;
 800a378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a37a:	647b      	str	r3, [r7, #68]	; 0x44
 800a37c:	e00c      	b.n	800a398 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a37e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a380:	2b00      	cmp	r3, #0
 800a382:	d106      	bne.n	800a392 <tcp_write+0x44e>
 800a384:	4b53      	ldr	r3, [pc, #332]	; (800a4d4 <tcp_write+0x590>)
 800a386:	f240 2285 	movw	r2, #645	; 0x285
 800a38a:	4956      	ldr	r1, [pc, #344]	; (800a4e4 <tcp_write+0x5a0>)
 800a38c:	4853      	ldr	r0, [pc, #332]	; (800a4dc <tcp_write+0x598>)
 800a38e:	f006 fe2d 	bl	8010fec <iprintf>
      prev_seg->next = seg;
 800a392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a396:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a39a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a39c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a3a0:	8b3b      	ldrh	r3, [r7, #24]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800a3a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a3ac:	88fb      	ldrh	r3, [r7, #6]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	f4ff af38 	bcc.w	800a224 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a3b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d02c      	beq.n	800a414 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3c0:	e01e      	b.n	800a400 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	891a      	ldrh	r2, [r3, #8]
 800a3c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a3c8:	4413      	add	r3, r2
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ce:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d110      	bne.n	800a3fa <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3de:	8952      	ldrh	r2, [r2, #10]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a3e4:	68b9      	ldr	r1, [r7, #8]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f006 fded 	bl	8010fc6 <memcpy>
        p->len += oversize_used;
 800a3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ee:	895a      	ldrh	r2, [r3, #10]
 800a3f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a3f2:	4413      	add	r3, r2
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f8:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1dd      	bne.n	800a3c2 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800a406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a408:	891a      	ldrh	r2, [r3, #8]
 800a40a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a40c:	4413      	add	r3, r2
 800a40e:	b29a      	uxth	r2, r3
 800a410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a412:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a414:	8a7a      	ldrh	r2, [r7, #18]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a41c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d018      	beq.n	800a454 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a424:	2b00      	cmp	r3, #0
 800a426:	d106      	bne.n	800a436 <tcp_write+0x4f2>
 800a428:	4b2a      	ldr	r3, [pc, #168]	; (800a4d4 <tcp_write+0x590>)
 800a42a:	f240 22bb 	movw	r2, #699	; 0x2bb
 800a42e:	492e      	ldr	r1, [pc, #184]	; (800a4e8 <tcp_write+0x5a4>)
 800a430:	482a      	ldr	r0, [pc, #168]	; (800a4dc <tcp_write+0x598>)
 800a432:	f006 fddb 	bl	8010fec <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fb fb75 	bl	8005b2c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a444:	891a      	ldrh	r2, [r3, #8]
 800a446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a448:	891b      	ldrh	r3, [r3, #8]
 800a44a:	4413      	add	r3, r2
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a450:	811a      	strh	r2, [r3, #8]
 800a452:	e037      	b.n	800a4c4 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800a454:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a456:	2b00      	cmp	r3, #0
 800a458:	d034      	beq.n	800a4c4 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a45a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d003      	beq.n	800a468 <tcp_write+0x524>
 800a460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d106      	bne.n	800a476 <tcp_write+0x532>
 800a468:	4b1a      	ldr	r3, [pc, #104]	; (800a4d4 <tcp_write+0x590>)
 800a46a:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a46e:	491f      	ldr	r1, [pc, #124]	; (800a4ec <tcp_write+0x5a8>)
 800a470:	481a      	ldr	r0, [pc, #104]	; (800a4dc <tcp_write+0x598>)
 800a472:	f006 fdbb 	bl	8010fec <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a47c:	e009      	b.n	800a492 <tcp_write+0x54e>
      p->tot_len += extendlen;
 800a47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a480:	891a      	ldrh	r2, [r3, #8]
 800a482:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a484:	4413      	add	r3, r2
 800a486:	b29a      	uxth	r2, r3
 800a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	62bb      	str	r3, [r7, #40]	; 0x28
 800a492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1f1      	bne.n	800a47e <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	891a      	ldrh	r2, [r3, #8]
 800a49e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a4a0:	4413      	add	r3, r2
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a6:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4aa:	895a      	ldrh	r2, [r3, #10]
 800a4ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a4ae:	4413      	add	r3, r2
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b4:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a4b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4b8:	891a      	ldrh	r2, [r3, #8]
 800a4ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a4bc:	4413      	add	r3, r2
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4c2:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d112      	bne.n	800a4f0 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4ce:	669a      	str	r2, [r3, #104]	; 0x68
 800a4d0:	e011      	b.n	800a4f6 <tcp_write+0x5b2>
 800a4d2:	bf00      	nop
 800a4d4:	080131b8 	.word	0x080131b8
 800a4d8:	080133c8 	.word	0x080133c8
 800a4dc:	0801321c 	.word	0x0801321c
 800a4e0:	08013408 	.word	0x08013408
 800a4e4:	08013418 	.word	0x08013418
 800a4e8:	0801342c 	.word	0x0801342c
 800a4ec:	08013464 	.word	0x08013464
  } else {
    last_unsent->next = queue;
 800a4f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4f4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a4fa:	88fb      	ldrh	r3, [r7, #6]
 800a4fc:	441a      	add	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a508:	88fb      	ldrh	r3, [r7, #6]
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a51a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00e      	beq.n	800a546 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10a      	bne.n	800a546 <tcp_write+0x602>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a534:	2b00      	cmp	r3, #0
 800a536:	d106      	bne.n	800a546 <tcp_write+0x602>
 800a538:	4b2c      	ldr	r3, [pc, #176]	; (800a5ec <tcp_write+0x6a8>)
 800a53a:	f240 22ed 	movw	r2, #749	; 0x2ed
 800a53e:	492c      	ldr	r1, [pc, #176]	; (800a5f0 <tcp_write+0x6ac>)
 800a540:	482c      	ldr	r0, [pc, #176]	; (800a5f4 <tcp_write+0x6b0>)
 800a542:	f006 fd53 	bl	8010fec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800a546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d016      	beq.n	800a57a <tcp_write+0x636>
 800a54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d012      	beq.n	800a57a <tcp_write+0x636>
 800a554:	797b      	ldrb	r3, [r7, #5]
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10d      	bne.n	800a57a <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a55e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	899b      	ldrh	r3, [r3, #12]
 800a564:	b29c      	uxth	r4, r3
 800a566:	2008      	movs	r0, #8
 800a568:	f7fa f87c 	bl	8004664 <lwip_htons>
 800a56c:	4603      	mov	r3, r0
 800a56e:	461a      	mov	r2, r3
 800a570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	4322      	orrs	r2, r4
 800a576:	b292      	uxth	r2, r2
 800a578:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	e031      	b.n	800a5e2 <tcp_write+0x69e>
          goto memerr;
 800a57e:	bf00      	nop
 800a580:	e006      	b.n	800a590 <tcp_write+0x64c>
            goto memerr;
 800a582:	bf00      	nop
 800a584:	e004      	b.n	800a590 <tcp_write+0x64c>
        goto memerr;
 800a586:	bf00      	nop
 800a588:	e002      	b.n	800a590 <tcp_write+0x64c>
        goto memerr;
 800a58a:	bf00      	nop
 800a58c:	e000      	b.n	800a590 <tcp_write+0x64c>
      goto memerr;
 800a58e:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	7e9b      	ldrb	r3, [r3, #26]
 800a594:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a59e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <tcp_write+0x666>
    pbuf_free(concat_p);
 800a5a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a5a6:	f7fb f9f3 	bl	8005990 <pbuf_free>
  }
  if (queue != NULL) {
 800a5aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <tcp_write+0x672>
    tcp_segs_free(queue);
 800a5b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a5b2:	f7fc fcc0 	bl	8006f36 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00e      	beq.n	800a5de <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10a      	bne.n	800a5de <tcp_write+0x69a>
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d106      	bne.n	800a5de <tcp_write+0x69a>
 800a5d0:	4b06      	ldr	r3, [pc, #24]	; (800a5ec <tcp_write+0x6a8>)
 800a5d2:	f240 3202 	movw	r2, #770	; 0x302
 800a5d6:	4906      	ldr	r1, [pc, #24]	; (800a5f0 <tcp_write+0x6ac>)
 800a5d8:	4806      	ldr	r0, [pc, #24]	; (800a5f4 <tcp_write+0x6b0>)
 800a5da:	f006 fd07 	bl	8010fec <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a5de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	375c      	adds	r7, #92	; 0x5c
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd90      	pop	{r4, r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	080131b8 	.word	0x080131b8
 800a5f0:	0801349c 	.word	0x0801349c
 800a5f4:	0801321c 	.word	0x0801321c

0800a5f8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b08a      	sub	sp, #40	; 0x28
 800a5fc:	af02      	add	r7, sp, #8
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	460b      	mov	r3, r1
 800a602:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a60c:	78fb      	ldrb	r3, [r7, #3]
 800a60e:	f003 0303 	and.w	r3, r3, #3
 800a612:	2b00      	cmp	r3, #0
 800a614:	d106      	bne.n	800a624 <tcp_enqueue_flags+0x2c>
 800a616:	4b6f      	ldr	r3, [pc, #444]	; (800a7d4 <tcp_enqueue_flags+0x1dc>)
 800a618:	f240 321b 	movw	r2, #795	; 0x31b
 800a61c:	496e      	ldr	r1, [pc, #440]	; (800a7d8 <tcp_enqueue_flags+0x1e0>)
 800a61e:	486f      	ldr	r0, [pc, #444]	; (800a7dc <tcp_enqueue_flags+0x1e4>)
 800a620:	f006 fce4 	bl	8010fec <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a62a:	2b08      	cmp	r3, #8
 800a62c:	d806      	bhi.n	800a63c <tcp_enqueue_flags+0x44>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a634:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800a638:	4293      	cmp	r3, r2
 800a63a:	d90e      	bls.n	800a65a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800a63c:	78fb      	ldrb	r3, [r7, #3]
 800a63e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a642:	2b00      	cmp	r3, #0
 800a644:	d109      	bne.n	800a65a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	7e9b      	ldrb	r3, [r3, #26]
 800a64a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800a654:	f04f 33ff 	mov.w	r3, #4294967295
 800a658:	e0b7      	b.n	800a7ca <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800a65a:	78fb      	ldrb	r3, [r7, #3]
 800a65c:	f003 0302 	and.w	r3, r3, #2
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800a664:	2301      	movs	r3, #1
 800a666:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a668:	7ffb      	ldrb	r3, [r7, #31]
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	f003 0304 	and.w	r3, r3, #4
 800a672:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	b29b      	uxth	r3, r3
 800a678:	2200      	movs	r2, #0
 800a67a:	4619      	mov	r1, r3
 800a67c:	2000      	movs	r0, #0
 800a67e:	f7fa fe15 	bl	80052ac <pbuf_alloc>
 800a682:	6138      	str	r0, [r7, #16]
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d109      	bne.n	800a69e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	7e9b      	ldrb	r3, [r3, #26]
 800a68e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a692:	b2da      	uxtb	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a698:	f04f 33ff 	mov.w	r3, #4294967295
 800a69c:	e095      	b.n	800a7ca <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	895a      	ldrh	r2, [r3, #10]
 800a6a2:	7dfb      	ldrb	r3, [r7, #23]
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d206      	bcs.n	800a6b8 <tcp_enqueue_flags+0xc0>
 800a6aa:	4b4a      	ldr	r3, [pc, #296]	; (800a7d4 <tcp_enqueue_flags+0x1dc>)
 800a6ac:	f240 3241 	movw	r2, #833	; 0x341
 800a6b0:	494b      	ldr	r1, [pc, #300]	; (800a7e0 <tcp_enqueue_flags+0x1e8>)
 800a6b2:	484a      	ldr	r0, [pc, #296]	; (800a7dc <tcp_enqueue_flags+0x1e4>)
 800a6b4:	f006 fc9a 	bl	8010fec <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800a6bc:	78fa      	ldrb	r2, [r7, #3]
 800a6be:	7ffb      	ldrb	r3, [r7, #31]
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	6939      	ldr	r1, [r7, #16]
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7ff fadc 	bl	8009c84 <tcp_create_segment>
 800a6cc:	60f8      	str	r0, [r7, #12]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d109      	bne.n	800a6e8 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7e9b      	ldrb	r3, [r3, #26]
 800a6d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e6:	e070      	b.n	800a7ca <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	f003 0303 	and.w	r3, r3, #3
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d006      	beq.n	800a702 <tcp_enqueue_flags+0x10a>
 800a6f4:	4b37      	ldr	r3, [pc, #220]	; (800a7d4 <tcp_enqueue_flags+0x1dc>)
 800a6f6:	f240 3249 	movw	r2, #841	; 0x349
 800a6fa:	493a      	ldr	r1, [pc, #232]	; (800a7e4 <tcp_enqueue_flags+0x1ec>)
 800a6fc:	4837      	ldr	r0, [pc, #220]	; (800a7dc <tcp_enqueue_flags+0x1e4>)
 800a6fe:	f006 fc75 	bl	8010fec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	891b      	ldrh	r3, [r3, #8]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d006      	beq.n	800a718 <tcp_enqueue_flags+0x120>
 800a70a:	4b32      	ldr	r3, [pc, #200]	; (800a7d4 <tcp_enqueue_flags+0x1dc>)
 800a70c:	f240 324a 	movw	r2, #842	; 0x34a
 800a710:	4935      	ldr	r1, [pc, #212]	; (800a7e8 <tcp_enqueue_flags+0x1f0>)
 800a712:	4832      	ldr	r0, [pc, #200]	; (800a7dc <tcp_enqueue_flags+0x1e4>)
 800a714:	f006 fc6a 	bl	8010fec <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d103      	bne.n	800a728 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	669a      	str	r2, [r3, #104]	; 0x68
 800a726:	e00d      	b.n	800a744 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a72c:	61bb      	str	r3, [r7, #24]
 800a72e:	e002      	b.n	800a736 <tcp_enqueue_flags+0x13e>
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	61bb      	str	r3, [r7, #24]
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1f8      	bne.n	800a730 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a74c:	78fb      	ldrb	r3, [r7, #3]
 800a74e:	f003 0302 	and.w	r3, r3, #2
 800a752:	2b00      	cmp	r3, #0
 800a754:	d104      	bne.n	800a760 <tcp_enqueue_flags+0x168>
 800a756:	78fb      	ldrb	r3, [r7, #3]
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d004      	beq.n	800a76a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a764:	1c5a      	adds	r2, r3, #1
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a76a:	78fb      	ldrb	r3, [r7, #3]
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	2b00      	cmp	r3, #0
 800a772:	d006      	beq.n	800a782 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	7e9b      	ldrb	r3, [r3, #26]
 800a778:	f043 0320 	orr.w	r3, r3, #32
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	4618      	mov	r0, r3
 800a788:	f7fb f996 	bl	8005ab8 <pbuf_clen>
 800a78c:	4603      	mov	r3, r0
 800a78e:	461a      	mov	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a796:	4413      	add	r3, r2
 800a798:	b29a      	uxth	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00e      	beq.n	800a7c8 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10a      	bne.n	800a7c8 <tcp_enqueue_flags+0x1d0>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d106      	bne.n	800a7c8 <tcp_enqueue_flags+0x1d0>
 800a7ba:	4b06      	ldr	r3, [pc, #24]	; (800a7d4 <tcp_enqueue_flags+0x1dc>)
 800a7bc:	f240 326d 	movw	r2, #877	; 0x36d
 800a7c0:	490a      	ldr	r1, [pc, #40]	; (800a7ec <tcp_enqueue_flags+0x1f4>)
 800a7c2:	4806      	ldr	r0, [pc, #24]	; (800a7dc <tcp_enqueue_flags+0x1e4>)
 800a7c4:	f006 fc12 	bl	8010fec <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3720      	adds	r7, #32
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	080131b8 	.word	0x080131b8
 800a7d8:	080134bc 	.word	0x080134bc
 800a7dc:	0801321c 	.word	0x0801321c
 800a7e0:	08013514 	.word	0x08013514
 800a7e4:	08013550 	.word	0x08013550
 800a7e8:	08013568 	.word	0x08013568
 800a7ec:	08013594 	.word	0x08013594

0800a7f0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a7f0:	b590      	push	{r4, r7, lr}
 800a7f2:	b08b      	sub	sp, #44	; 0x2c
 800a7f4:	af04      	add	r7, sp, #16
 800a7f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a7fc:	7dbb      	ldrb	r3, [r7, #22]
 800a7fe:	b29c      	uxth	r4, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a804:	4618      	mov	r0, r3
 800a806:	f7f9 ff3b 	bl	8004680 <lwip_htonl>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2200      	movs	r2, #0
 800a80e:	4621      	mov	r1, r4
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff f97b 	bl	8009b0c <tcp_output_alloc_header>
 800a816:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d109      	bne.n	800a832 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	7e9b      	ldrb	r3, [r3, #26]
 800a822:	f043 0303 	orr.w	r3, r3, #3
 800a826:	b2da      	uxtb	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a82c:	f06f 0301 	mvn.w	r3, #1
 800a830:	e036      	b.n	800a8a0 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	3304      	adds	r3, #4
 800a836:	4618      	mov	r0, r3
 800a838:	f004 f94e 	bl	800ead8 <ip4_route>
 800a83c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d102      	bne.n	800a84a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800a844:	23fc      	movs	r3, #252	; 0xfc
 800a846:	75fb      	strb	r3, [r7, #23]
 800a848:	e012      	b.n	800a870 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800a84a:	6879      	ldr	r1, [r7, #4]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	1d18      	adds	r0, r3, #4
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	7a9c      	ldrb	r4, [r3, #10]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	7a5b      	ldrb	r3, [r3, #9]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	9202      	str	r2, [sp, #8]
 800a85c:	2206      	movs	r2, #6
 800a85e:	9201      	str	r2, [sp, #4]
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	4623      	mov	r3, r4
 800a864:	4602      	mov	r2, r0
 800a866:	6938      	ldr	r0, [r7, #16]
 800a868:	f004 fafc 	bl	800ee64 <ip4_output_if>
 800a86c:	4603      	mov	r3, r0
 800a86e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a870:	6938      	ldr	r0, [r7, #16]
 800a872:	f7fb f88d 	bl	8005990 <pbuf_free>

  if (err != ERR_OK) {
 800a876:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d007      	beq.n	800a88e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	7e9b      	ldrb	r3, [r3, #26]
 800a882:	f043 0303 	orr.w	r3, r3, #3
 800a886:	b2da      	uxtb	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	769a      	strb	r2, [r3, #26]
 800a88c:	e006      	b.n	800a89c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	7e9b      	ldrb	r3, [r3, #26]
 800a892:	f023 0303 	bic.w	r3, r3, #3
 800a896:	b2da      	uxtb	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800a89c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	371c      	adds	r7, #28
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd90      	pop	{r4, r7, pc}

0800a8a8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a8a8:	b5b0      	push	{r4, r5, r7, lr}
 800a8aa:	b08a      	sub	sp, #40	; 0x28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	7d1b      	ldrb	r3, [r3, #20]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d106      	bne.n	800a8c6 <tcp_output+0x1e>
 800a8b8:	4b9b      	ldr	r3, [pc, #620]	; (800ab28 <tcp_output+0x280>)
 800a8ba:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800a8be:	499b      	ldr	r1, [pc, #620]	; (800ab2c <tcp_output+0x284>)
 800a8c0:	489b      	ldr	r0, [pc, #620]	; (800ab30 <tcp_output+0x288>)
 800a8c2:	f006 fb93 	bl	8010fec <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a8c6:	4b9b      	ldr	r3, [pc, #620]	; (800ab34 <tcp_output+0x28c>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d101      	bne.n	800a8d4 <tcp_output+0x2c>
    return ERR_OK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	e1cf      	b.n	800ac74 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d203      	bcs.n	800a8ec <tcp_output+0x44>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a8ea:	e002      	b.n	800a8f2 <tcp_output+0x4a>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a8f2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8f8:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	7e9b      	ldrb	r3, [r3, #26]
 800a8fe:	f003 0302 	and.w	r3, r3, #2
 800a902:	2b00      	cmp	r3, #0
 800a904:	d017      	beq.n	800a936 <tcp_output+0x8e>
 800a906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d00f      	beq.n	800a92c <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	4618      	mov	r0, r3
 800a914:	f7f9 feb4 	bl	8004680 <lwip_htonl>
 800a918:	4602      	mov	r2, r0
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a922:	8912      	ldrh	r2, [r2, #8]
 800a924:	4413      	add	r3, r2
     (seg == NULL ||
 800a926:	69ba      	ldr	r2, [r7, #24]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d204      	bcs.n	800a936 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff ff5f 	bl	800a7f0 <tcp_send_empty_ack>
 800a932:	4603      	mov	r3, r0
 800a934:	e19e      	b.n	800ac74 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a93a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a93c:	6a3b      	ldr	r3, [r7, #32]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d007      	beq.n	800a952 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800a942:	e002      	b.n	800a94a <tcp_output+0xa2>
 800a944:	6a3b      	ldr	r3, [r7, #32]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	623b      	str	r3, [r7, #32]
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1f8      	bne.n	800a944 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	3304      	adds	r3, #4
 800a956:	4618      	mov	r0, r3
 800a958:	f004 f8be 	bl	800ead8 <ip4_route>
 800a95c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d102      	bne.n	800a96a <tcp_output+0xc2>
    return ERR_RTE;
 800a964:	f06f 0303 	mvn.w	r3, #3
 800a968:	e184      	b.n	800ac74 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d003      	beq.n	800a978 <tcp_output+0xd0>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d111      	bne.n	800a99c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <tcp_output+0xdc>
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	3304      	adds	r3, #4
 800a982:	e000      	b.n	800a986 <tcp_output+0xde>
 800a984:	2300      	movs	r3, #0
 800a986:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d102      	bne.n	800a994 <tcp_output+0xec>
      return ERR_RTE;
 800a98e:	f06f 0303 	mvn.w	r3, #3
 800a992:	e16f      	b.n	800ac74 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800a99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 813e 	beq.w	800ac20 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7f9 fe68 	bl	8004680 <lwip_htonl>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ba:	8912      	ldrh	r2, [r2, #8]
 800a9bc:	4413      	add	r3, r2
  if (seg != NULL &&
 800a9be:	69ba      	ldr	r2, [r7, #24]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	f080 812d 	bcs.w	800ac20 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 8129 	beq.w	800ac20 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	f040 8121 	bne.w	800ac20 <tcp_output+0x378>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f040 811c 	bne.w	800ac20 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f040 812b 	bne.w	800ac4a <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800aa04:	e121      	b.n	800ac4a <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	899b      	ldrh	r3, [r3, #12]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7f9 fe28 	bl	8004664 <lwip_htons>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d006      	beq.n	800aa2c <tcp_output+0x184>
 800aa1e:	4b42      	ldr	r3, [pc, #264]	; (800ab28 <tcp_output+0x280>)
 800aa20:	f240 4246 	movw	r2, #1094	; 0x446
 800aa24:	4944      	ldr	r1, [pc, #272]	; (800ab38 <tcp_output+0x290>)
 800aa26:	4842      	ldr	r0, [pc, #264]	; (800ab30 <tcp_output+0x288>)
 800aa28:	f006 fae0 	bl	8010fec <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d01f      	beq.n	800aa74 <tcp_output+0x1cc>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	7e9b      	ldrb	r3, [r3, #26]
 800aa38:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d119      	bne.n	800aa74 <tcp_output+0x1cc>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00b      	beq.n	800aa60 <tcp_output+0x1b8>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d110      	bne.n	800aa74 <tcp_output+0x1cc>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa56:	891a      	ldrh	r2, [r3, #8]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d209      	bcs.n	800aa74 <tcp_output+0x1cc>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d004      	beq.n	800aa74 <tcp_output+0x1cc>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa70:	2b08      	cmp	r3, #8
 800aa72:	d901      	bls.n	800aa78 <tcp_output+0x1d0>
 800aa74:	2301      	movs	r3, #1
 800aa76:	e000      	b.n	800aa7a <tcp_output+0x1d2>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	7e9b      	ldrb	r3, [r3, #26]
 800aa82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f000 80e1 	beq.w	800ac4e <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	7d1b      	ldrb	r3, [r3, #20]
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d00d      	beq.n	800aab0 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	899b      	ldrh	r3, [r3, #12]
 800aa9a:	b29c      	uxth	r4, r3
 800aa9c:	2010      	movs	r0, #16
 800aa9e:	f7f9 fde1 	bl	8004664 <lwip_htons>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	4322      	orrs	r2, r4
 800aaac:	b292      	uxth	r2, r2
 800aaae:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	6879      	ldr	r1, [r7, #4]
 800aab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aab6:	f000 f8e1 	bl	800ac7c <tcp_output_segment>
 800aaba:	4603      	mov	r3, r0
 800aabc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800aabe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d009      	beq.n	800aada <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	7e9b      	ldrb	r3, [r3, #26]
 800aaca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	769a      	strb	r2, [r3, #26]
      return err;
 800aad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aad8:	e0cc      	b.n	800ac74 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	7d1b      	ldrb	r3, [r3, #20]
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d006      	beq.n	800aaf8 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	7e9b      	ldrb	r3, [r3, #26]
 800aaee:	f023 0303 	bic.w	r3, r3, #3
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7f9 fdbe 	bl	8004680 <lwip_htonl>
 800ab04:	4604      	mov	r4, r0
 800ab06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab08:	891b      	ldrh	r3, [r3, #8]
 800ab0a:	461d      	mov	r5, r3
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	899b      	ldrh	r3, [r3, #12]
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7f9 fda5 	bl	8004664 <lwip_htons>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	f003 0303 	and.w	r3, r3, #3
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00b      	beq.n	800ab3c <tcp_output+0x294>
 800ab24:	2301      	movs	r3, #1
 800ab26:	e00a      	b.n	800ab3e <tcp_output+0x296>
 800ab28:	080131b8 	.word	0x080131b8
 800ab2c:	080135bc 	.word	0x080135bc
 800ab30:	0801321c 	.word	0x0801321c
 800ab34:	20003bd8 	.word	0x20003bd8
 800ab38:	080135e4 	.word	0x080135e4
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	442b      	add	r3, r5
 800ab40:	4423      	add	r3, r4
 800ab42:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	da02      	bge.n	800ab56 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	891b      	ldrh	r3, [r3, #8]
 800ab5a:	461c      	mov	r4, r3
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	899b      	ldrh	r3, [r3, #12]
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7f9 fd7d 	bl	8004664 <lwip_htons>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	f003 0303 	and.w	r3, r3, #3
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <tcp_output+0x2d0>
 800ab74:	2301      	movs	r3, #1
 800ab76:	e000      	b.n	800ab7a <tcp_output+0x2d2>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	4423      	add	r3, r4
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d049      	beq.n	800ac14 <tcp_output+0x36c>
      seg->next = NULL;
 800ab80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab82:	2200      	movs	r2, #0
 800ab84:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d105      	bne.n	800ab9a <tcp_output+0x2f2>
        pcb->unacked = seg;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab92:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800ab94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab96:	623b      	str	r3, [r7, #32]
 800ab98:	e03f      	b.n	800ac1a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7f9 fd6d 	bl	8004680 <lwip_htonl>
 800aba6:	4604      	mov	r4, r0
 800aba8:	6a3b      	ldr	r3, [r7, #32]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	4618      	mov	r0, r3
 800abb0:	f7f9 fd66 	bl	8004680 <lwip_htonl>
 800abb4:	4603      	mov	r3, r0
 800abb6:	1ae3      	subs	r3, r4, r3
 800abb8:	2b00      	cmp	r3, #0
 800abba:	da24      	bge.n	800ac06 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	336c      	adds	r3, #108	; 0x6c
 800abc0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800abc2:	e002      	b.n	800abca <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d011      	beq.n	800abf6 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	4618      	mov	r0, r3
 800abdc:	f7f9 fd50 	bl	8004680 <lwip_htonl>
 800abe0:	4604      	mov	r4, r0
 800abe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	4618      	mov	r0, r3
 800abea:	f7f9 fd49 	bl	8004680 <lwip_htonl>
 800abee:	4603      	mov	r3, r0
 800abf0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	dbe6      	blt.n	800abc4 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfc:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	e009      	b.n	800ac1a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ac06:	6a3b      	ldr	r3, [r7, #32]
 800ac08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac0a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ac0c:	6a3b      	ldr	r3, [r7, #32]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	623b      	str	r3, [r7, #32]
 800ac12:	e002      	b.n	800ac1a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ac14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac16:	f7fc f9a2 	bl	8006f5e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d015      	beq.n	800ac52 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ac26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7f9 fd27 	bl	8004680 <lwip_htonl>
 800ac32:	4602      	mov	r2, r0
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac3c:	8912      	ldrh	r2, [r2, #8]
 800ac3e:	4413      	add	r3, r2
  while (seg != NULL &&
 800ac40:	69ba      	ldr	r2, [r7, #24]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	f4bf aedf 	bcs.w	800aa06 <tcp_output+0x15e>
  }
output_done:
 800ac48:	e003      	b.n	800ac52 <tcp_output+0x3aa>
    goto output_done;
 800ac4a:	bf00      	nop
 800ac4c:	e002      	b.n	800ac54 <tcp_output+0x3ac>
      break;
 800ac4e:	bf00      	nop
 800ac50:	e000      	b.n	800ac54 <tcp_output+0x3ac>
output_done:
 800ac52:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d103      	bne.n	800ac64 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	7e9b      	ldrb	r3, [r3, #26]
 800ac68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac6c:	b2da      	uxtb	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3728      	adds	r7, #40	; 0x28
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bdb0      	pop	{r4, r5, r7, pc}

0800ac7c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ac7c:	b5b0      	push	{r4, r5, r7, lr}
 800ac7e:	b08c      	sub	sp, #48	; 0x30
 800ac80:	af04      	add	r7, sp, #16
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	89db      	ldrh	r3, [r3, #14]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d001      	beq.n	800ac96 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	e08b      	b.n	800adae <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	68dc      	ldr	r4, [r3, #12]
 800ac9e:	4610      	mov	r0, r2
 800aca0:	f7f9 fcee 	bl	8004680 <lwip_htonl>
 800aca4:	4603      	mov	r3, r0
 800aca6:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	68dc      	ldr	r4, [r3, #12]
 800acb0:	4610      	mov	r0, r2
 800acb2:	f7f9 fcd7 	bl	8004664 <lwip_htons>
 800acb6:	4603      	mov	r3, r0
 800acb8:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800acc2:	441a      	add	r2, r3
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	3314      	adds	r3, #20
 800acce:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	7a9b      	ldrb	r3, [r3, #10]
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d014      	beq.n	800ad06 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	3304      	adds	r3, #4
 800ace0:	4619      	mov	r1, r3
 800ace2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ace6:	f7fc fc73 	bl	80075d0 <tcp_eff_send_mss_impl>
 800acea:	4603      	mov	r3, r0
 800acec:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800acee:	8b7b      	ldrh	r3, [r7, #26]
 800acf0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7f9 fcc3 	bl	8004680 <lwip_htonl>
 800acfa:	4602      	mov	r2, r0
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	3304      	adds	r3, #4
 800ad04:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	da02      	bge.n	800ad16 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	2200      	movs	r2, #0
 800ad14:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d10c      	bne.n	800ad38 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800ad1e:	4b26      	ldr	r3, [pc, #152]	; (800adb8 <tcp_output_segment+0x13c>)
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7f9 fca7 	bl	8004680 <lwip_htonl>
 800ad32:	4602      	mov	r2, r0
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	8959      	ldrh	r1, [r3, #10]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	8b3a      	ldrh	r2, [r7, #24]
 800ad54:	1a8a      	subs	r2, r1, r2
 800ad56:	b292      	uxth	r2, r2
 800ad58:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	8919      	ldrh	r1, [r3, #8]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	8b3a      	ldrh	r2, [r7, #24]
 800ad66:	1a8a      	subs	r2, r1, r2
 800ad68:	b292      	uxth	r2, r2
 800ad6a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	68d2      	ldr	r2, [r2, #12]
 800ad74:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	741a      	strb	r2, [r3, #16]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6858      	ldr	r0, [r3, #4]
 800ad86:	68b9      	ldr	r1, [r7, #8]
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	1d1c      	adds	r4, r3, #4
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	7a9d      	ldrb	r5, [r3, #10]
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	7a5b      	ldrb	r3, [r3, #9]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	9202      	str	r2, [sp, #8]
 800ad98:	2206      	movs	r2, #6
 800ad9a:	9201      	str	r2, [sp, #4]
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	462b      	mov	r3, r5
 800ada0:	4622      	mov	r2, r4
 800ada2:	f004 f85f 	bl	800ee64 <ip4_output_if>
 800ada6:	4603      	mov	r3, r0
 800ada8:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800adaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3720      	adds	r7, #32
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bdb0      	pop	{r4, r5, r7, pc}
 800adb6:	bf00      	nop
 800adb8:	20003bc8 	.word	0x20003bc8

0800adbc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b08c      	sub	sp, #48	; 0x30
 800adc0:	af04      	add	r7, sp, #16
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]
 800adc8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800adca:	2200      	movs	r2, #0
 800adcc:	2114      	movs	r1, #20
 800adce:	2001      	movs	r0, #1
 800add0:	f7fa fa6c 	bl	80052ac <pbuf_alloc>
 800add4:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d05b      	beq.n	800ae94 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	895b      	ldrh	r3, [r3, #10]
 800ade0:	2b13      	cmp	r3, #19
 800ade2:	d806      	bhi.n	800adf2 <tcp_rst+0x36>
 800ade4:	4b2d      	ldr	r3, [pc, #180]	; (800ae9c <tcp_rst+0xe0>)
 800ade6:	f240 524d 	movw	r2, #1357	; 0x54d
 800adea:	492d      	ldr	r1, [pc, #180]	; (800aea0 <tcp_rst+0xe4>)
 800adec:	482d      	ldr	r0, [pc, #180]	; (800aea4 <tcp_rst+0xe8>)
 800adee:	f006 f8fd 	bl	8010fec <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800adf8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7f9 fc32 	bl	8004664 <lwip_htons>
 800ae00:	4603      	mov	r3, r0
 800ae02:	461a      	mov	r2, r3
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800ae08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7f9 fc2a 	bl	8004664 <lwip_htons>
 800ae10:	4603      	mov	r3, r0
 800ae12:	461a      	mov	r2, r3
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f7f9 fc31 	bl	8004680 <lwip_htonl>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800ae24:	68b8      	ldr	r0, [r7, #8]
 800ae26:	f7f9 fc2b 	bl	8004680 <lwip_htonl>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800ae30:	f245 0014 	movw	r0, #20500	; 0x5014
 800ae34:	f7f9 fc16 	bl	8004664 <lwip_htons>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f042 0208 	orr.w	r2, r2, #8
 800ae48:	739a      	strb	r2, [r3, #14]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800ae50:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	2200      	movs	r2, #0
 800ae56:	741a      	strb	r2, [r3, #16]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	749a      	strb	r2, [r3, #18]
 800ae62:	2200      	movs	r2, #0
 800ae64:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800ae66:	6838      	ldr	r0, [r7, #0]
 800ae68:	f003 fe36 	bl	800ead8 <ip4_route>
 800ae6c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	9302      	str	r3, [sp, #8]
 800ae78:	2306      	movs	r3, #6
 800ae7a:	9301      	str	r3, [sp, #4]
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	23ff      	movs	r3, #255	; 0xff
 800ae82:	683a      	ldr	r2, [r7, #0]
 800ae84:	6879      	ldr	r1, [r7, #4]
 800ae86:	69f8      	ldr	r0, [r7, #28]
 800ae88:	f003 ffec 	bl	800ee64 <ip4_output_if>
  }
  pbuf_free(p);
 800ae8c:	69f8      	ldr	r0, [r7, #28]
 800ae8e:	f7fa fd7f 	bl	8005990 <pbuf_free>
 800ae92:	e000      	b.n	800ae96 <tcp_rst+0xda>
    return;
 800ae94:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ae96:	3720      	adds	r7, #32
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	080131b8 	.word	0x080131b8
 800aea0:	080131ec 	.word	0x080131ec
 800aea4:	0801321c 	.word	0x0801321c

0800aea8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d029      	beq.n	800af0c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aebc:	60fb      	str	r3, [r7, #12]
 800aebe:	e002      	b.n	800aec6 <tcp_rexmit_rto+0x1e>
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	60fb      	str	r3, [r7, #12]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1f8      	bne.n	800aec0 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aeea:	2bff      	cmp	r3, #255	; 0xff
 800aeec:	d007      	beq.n	800aefe <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aef4:	3301      	adds	r3, #1
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7ff fccf 	bl	800a8a8 <tcp_output>
 800af0a:	e000      	b.n	800af0e <tcp_rexmit_rto+0x66>
    return;
 800af0c:	bf00      	nop
}
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800af14:	b590      	push	{r4, r7, lr}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af20:	2b00      	cmp	r3, #0
 800af22:	d043      	beq.n	800afac <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af28:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	3368      	adds	r3, #104	; 0x68
 800af36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800af38:	e002      	b.n	800af40 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d011      	beq.n	800af6c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	4618      	mov	r0, r3
 800af52:	f7f9 fb95 	bl	8004680 <lwip_htonl>
 800af56:	4604      	mov	r4, r0
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	4618      	mov	r0, r3
 800af60:	f7f9 fb8e 	bl	8004680 <lwip_htonl>
 800af64:	4603      	mov	r3, r0
 800af66:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dbe6      	blt.n	800af3a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d103      	bne.n	800af8a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af90:	2bff      	cmp	r3, #255	; 0xff
 800af92:	d007      	beq.n	800afa4 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af9a:	3301      	adds	r3, #1
 800af9c:	b2da      	uxtb	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	635a      	str	r2, [r3, #52]	; 0x34
 800afaa:	e000      	b.n	800afae <tcp_rexmit+0x9a>
    return;
 800afac:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd90      	pop	{r4, r7, pc}

0800afb4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d04a      	beq.n	800b05a <tcp_rexmit_fast+0xa6>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	7e9b      	ldrb	r3, [r3, #26]
 800afc8:	f003 0304 	and.w	r3, r3, #4
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d144      	bne.n	800b05a <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f7ff ff9f 	bl	800af14 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d207      	bcs.n	800aff6 <tcp_rexmit_fast+0x42>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800afec:	0fda      	lsrs	r2, r3, #31
 800afee:	4413      	add	r3, r2
 800aff0:	105b      	asrs	r3, r3, #1
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	e006      	b.n	800b004 <tcp_rexmit_fast+0x50>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800affc:	0fda      	lsrs	r2, r3, #31
 800affe:	4413      	add	r3, r2
 800b000:	105b      	asrs	r3, r3, #1
 800b002:	b29b      	uxth	r3, r3
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b010:	461a      	mov	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b016:	005b      	lsls	r3, r3, #1
 800b018:	429a      	cmp	r2, r3
 800b01a:	d206      	bcs.n	800b02a <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b020:	005b      	lsls	r3, r3, #1
 800b022:	b29a      	uxth	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b034:	4619      	mov	r1, r3
 800b036:	0049      	lsls	r1, r1, #1
 800b038:	440b      	add	r3, r1
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	4413      	add	r3, r2
 800b03e:	b29a      	uxth	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	7e9b      	ldrb	r3, [r3, #26]
 800b04a:	f043 0304 	orr.w	r3, r3, #4
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800b05a:	bf00      	nop
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b08a      	sub	sp, #40	; 0x28
 800b066:	af04      	add	r7, sp, #16
 800b068:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b06e:	3b01      	subs	r3, #1
 800b070:	4618      	mov	r0, r3
 800b072:	f7f9 fb05 	bl	8004680 <lwip_htonl>
 800b076:	4603      	mov	r3, r0
 800b078:	2200      	movs	r2, #0
 800b07a:	2100      	movs	r1, #0
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7fe fd45 	bl	8009b0c <tcp_output_alloc_header>
 800b082:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d102      	bne.n	800b090 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b08a:	f04f 33ff 	mov.w	r3, #4294967295
 800b08e:	e021      	b.n	800b0d4 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	3304      	adds	r3, #4
 800b094:	4618      	mov	r0, r3
 800b096:	f003 fd1f 	bl	800ead8 <ip4_route>
 800b09a:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d102      	bne.n	800b0a8 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800b0a2:	23fc      	movs	r3, #252	; 0xfc
 800b0a4:	75fb      	strb	r3, [r7, #23]
 800b0a6:	e010      	b.n	800b0ca <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800b0a8:	6879      	ldr	r1, [r7, #4]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	1d1a      	adds	r2, r3, #4
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	7a98      	ldrb	r0, [r3, #10]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	9302      	str	r3, [sp, #8]
 800b0b6:	2306      	movs	r3, #6
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	4603      	mov	r3, r0
 800b0c0:	6938      	ldr	r0, [r7, #16]
 800b0c2:	f003 fecf 	bl	800ee64 <ip4_output_if>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800b0ca:	6938      	ldr	r0, [r7, #16]
 800b0cc:	f7fa fc60 	bl	8005990 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b0d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3718      	adds	r7, #24
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b0dc:	b590      	push	{r4, r7, lr}
 800b0de:	b08f      	sub	sp, #60	; 0x3c
 800b0e0:	af04      	add	r7, sp, #16
 800b0e2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0e8:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d102      	bne.n	800b0f6 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0f4:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	e085      	b.n	800b20c <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b100:	6a3b      	ldr	r3, [r7, #32]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	899b      	ldrh	r3, [r3, #12]
 800b106:	b29b      	uxth	r3, r3
 800b108:	4618      	mov	r0, r3
 800b10a:	f7f9 faab 	bl	8004664 <lwip_htons>
 800b10e:	4603      	mov	r3, r0
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d005      	beq.n	800b124 <tcp_zero_window_probe+0x48>
 800b118:	6a3b      	ldr	r3, [r7, #32]
 800b11a:	891b      	ldrh	r3, [r3, #8]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d101      	bne.n	800b124 <tcp_zero_window_probe+0x48>
 800b120:	2301      	movs	r3, #1
 800b122:	e000      	b.n	800b126 <tcp_zero_window_probe+0x4a>
 800b124:	2300      	movs	r3, #0
 800b126:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b128:	7ffb      	ldrb	r3, [r7, #31]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	bf0c      	ite	eq
 800b12e:	2301      	moveq	r3, #1
 800b130:	2300      	movne	r3, #0
 800b132:	b2db      	uxtb	r3, r3
 800b134:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	8bba      	ldrh	r2, [r7, #28]
 800b13e:	2100      	movs	r1, #0
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7fe fce3 	bl	8009b0c <tcp_output_alloc_header>
 800b146:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d102      	bne.n	800b154 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b14e:	f04f 33ff 	mov.w	r3, #4294967295
 800b152:	e05b      	b.n	800b20c <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b15a:	7ffb      	ldrb	r3, [r7, #31]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00e      	beq.n	800b17e <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	899b      	ldrh	r3, [r3, #12]
 800b164:	b29b      	uxth	r3, r3
 800b166:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b16a:	b29c      	uxth	r4, r3
 800b16c:	2011      	movs	r0, #17
 800b16e:	f7f9 fa79 	bl	8004664 <lwip_htons>
 800b172:	4603      	mov	r3, r0
 800b174:	4323      	orrs	r3, r4
 800b176:	b29a      	uxth	r2, r3
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	819a      	strh	r2, [r3, #12]
 800b17c:	e010      	b.n	800b1a0 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	3314      	adds	r3, #20
 800b184:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b186:	6a3b      	ldr	r3, [r7, #32]
 800b188:	6858      	ldr	r0, [r3, #4]
 800b18a:	6a3b      	ldr	r3, [r7, #32]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	891a      	ldrh	r2, [r3, #8]
 800b190:	6a3b      	ldr	r3, [r7, #32]
 800b192:	891b      	ldrh	r3, [r3, #8]
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	b29b      	uxth	r3, r3
 800b198:	2201      	movs	r2, #1
 800b19a:	6939      	ldr	r1, [r7, #16]
 800b19c:	f7fa fdf8 	bl	8005d90 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7f9 fa6a 	bl	8004680 <lwip_htonl>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	da02      	bge.n	800b1c4 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3304      	adds	r3, #4
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f003 fc85 	bl	800ead8 <ip4_route>
 800b1ce:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d103      	bne.n	800b1de <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800b1d6:	23fc      	movs	r3, #252	; 0xfc
 800b1d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1dc:	e011      	b.n	800b202 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b1de:	6879      	ldr	r1, [r7, #4]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	1d1a      	adds	r2, r3, #4
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	7a98      	ldrb	r0, [r3, #10]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	9302      	str	r3, [sp, #8]
 800b1ec:	2306      	movs	r3, #6
 800b1ee:	9301      	str	r3, [sp, #4]
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	69b8      	ldr	r0, [r7, #24]
 800b1f8:	f003 fe34 	bl	800ee64 <ip4_output_if>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800b202:	69b8      	ldr	r0, [r7, #24]
 800b204:	f7fa fbc4 	bl	8005990 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b208:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	372c      	adds	r7, #44	; 0x2c
 800b210:	46bd      	mov	sp, r7
 800b212:	bd90      	pop	{r4, r7, pc}

0800b214 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b21c:	f7fa fe3a 	bl	8005e94 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b220:	4b0a      	ldr	r3, [pc, #40]	; (800b24c <tcpip_tcp_timer+0x38>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d103      	bne.n	800b230 <tcpip_tcp_timer+0x1c>
 800b228:	4b09      	ldr	r3, [pc, #36]	; (800b250 <tcpip_tcp_timer+0x3c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d005      	beq.n	800b23c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b230:	2200      	movs	r2, #0
 800b232:	4908      	ldr	r1, [pc, #32]	; (800b254 <tcpip_tcp_timer+0x40>)
 800b234:	20fa      	movs	r0, #250	; 0xfa
 800b236:	f000 f86f 	bl	800b318 <sys_timeout>
 800b23a:	e002      	b.n	800b242 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b23c:	4b06      	ldr	r3, [pc, #24]	; (800b258 <tcpip_tcp_timer+0x44>)
 800b23e:	2200      	movs	r2, #0
 800b240:	601a      	str	r2, [r3, #0]
  }
}
 800b242:	bf00      	nop
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	20003bc4 	.word	0x20003bc4
 800b250:	20003bd4 	.word	0x20003bd4
 800b254:	0800b215 	.word	0x0800b215
 800b258:	20000548 	.word	0x20000548

0800b25c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b260:	4b0a      	ldr	r3, [pc, #40]	; (800b28c <tcp_timer_needed+0x30>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10f      	bne.n	800b288 <tcp_timer_needed+0x2c>
 800b268:	4b09      	ldr	r3, [pc, #36]	; (800b290 <tcp_timer_needed+0x34>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d103      	bne.n	800b278 <tcp_timer_needed+0x1c>
 800b270:	4b08      	ldr	r3, [pc, #32]	; (800b294 <tcp_timer_needed+0x38>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d007      	beq.n	800b288 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b278:	4b04      	ldr	r3, [pc, #16]	; (800b28c <tcp_timer_needed+0x30>)
 800b27a:	2201      	movs	r2, #1
 800b27c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b27e:	2200      	movs	r2, #0
 800b280:	4905      	ldr	r1, [pc, #20]	; (800b298 <tcp_timer_needed+0x3c>)
 800b282:	20fa      	movs	r0, #250	; 0xfa
 800b284:	f000 f848 	bl	800b318 <sys_timeout>
  }
}
 800b288:	bf00      	nop
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	20000548 	.word	0x20000548
 800b290:	20003bc4 	.word	0x20003bc4
 800b294:	20003bd4 	.word	0x20003bd4
 800b298:	0800b215 	.word	0x0800b215

0800b29c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	4903      	ldr	r1, [pc, #12]	; (800b2c4 <cyclic_timer+0x28>)
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 f82e 	bl	800b318 <sys_timeout>
}
 800b2bc:	bf00      	nop
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	0800b29d 	.word	0x0800b29d

0800b2c8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	607b      	str	r3, [r7, #4]
 800b2d2:	e00e      	b.n	800b2f2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800b2d4:	4a0d      	ldr	r2, [pc, #52]	; (800b30c <sys_timeouts_init+0x44>)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	00db      	lsls	r3, r3, #3
 800b2e0:	4a0a      	ldr	r2, [pc, #40]	; (800b30c <sys_timeouts_init+0x44>)
 800b2e2:	4413      	add	r3, r2
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	490a      	ldr	r1, [pc, #40]	; (800b310 <sys_timeouts_init+0x48>)
 800b2e8:	f000 f816 	bl	800b318 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	607b      	str	r3, [r7, #4]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2b04      	cmp	r3, #4
 800b2f6:	d9ed      	bls.n	800b2d4 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800b2f8:	f005 f87a 	bl	80103f0 <sys_now>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	4b05      	ldr	r3, [pc, #20]	; (800b314 <sys_timeouts_init+0x4c>)
 800b300:	601a      	str	r2, [r3, #0]
}
 800b302:	bf00      	nop
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	080150d8 	.word	0x080150d8
 800b310:	0800b29d 	.word	0x0800b29d
 800b314:	20000544 	.word	0x20000544

0800b318 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b088      	sub	sp, #32
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b324:	2006      	movs	r0, #6
 800b326:	f7f9 fdb5 	bl	8004e94 <memp_malloc>
 800b32a:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10a      	bne.n	800b348 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2b00      	cmp	r3, #0
 800b336:	f040 8084 	bne.w	800b442 <sys_timeout+0x12a>
 800b33a:	4b44      	ldr	r3, [pc, #272]	; (800b44c <sys_timeout+0x134>)
 800b33c:	22d4      	movs	r2, #212	; 0xd4
 800b33e:	4944      	ldr	r1, [pc, #272]	; (800b450 <sys_timeout+0x138>)
 800b340:	4844      	ldr	r0, [pc, #272]	; (800b454 <sys_timeout+0x13c>)
 800b342:	f005 fe53 	bl	8010fec <iprintf>
    return;
 800b346:	e07c      	b.n	800b442 <sys_timeout+0x12a>
  }

  now = sys_now();
 800b348:	f005 f852 	bl	80103f0 <sys_now>
 800b34c:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800b34e:	4b42      	ldr	r3, [pc, #264]	; (800b458 <sys_timeout+0x140>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d105      	bne.n	800b362 <sys_timeout+0x4a>
    diff = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800b35a:	4a40      	ldr	r2, [pc, #256]	; (800b45c <sys_timeout+0x144>)
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	6013      	str	r3, [r2, #0]
 800b360:	e004      	b.n	800b36c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800b362:	4b3e      	ldr	r3, [pc, #248]	; (800b45c <sys_timeout+0x144>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	1ad3      	subs	r3, r2, r3
 800b36a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	2200      	movs	r2, #0
 800b370:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	441a      	add	r2, r3
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b388:	4b33      	ldr	r3, [pc, #204]	; (800b458 <sys_timeout+0x140>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d103      	bne.n	800b398 <sys_timeout+0x80>
    next_timeout = timeout;
 800b390:	4a31      	ldr	r2, [pc, #196]	; (800b458 <sys_timeout+0x140>)
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	6013      	str	r3, [r2, #0]
    return;
 800b396:	e055      	b.n	800b444 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800b398:	4b2f      	ldr	r3, [pc, #188]	; (800b458 <sys_timeout+0x140>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d20f      	bcs.n	800b3c4 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800b3a4:	4b2c      	ldr	r3, [pc, #176]	; (800b458 <sys_timeout+0x140>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6859      	ldr	r1, [r3, #4]
 800b3aa:	4b2b      	ldr	r3, [pc, #172]	; (800b458 <sys_timeout+0x140>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	1a8a      	subs	r2, r1, r2
 800b3b2:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800b3b4:	4b28      	ldr	r3, [pc, #160]	; (800b458 <sys_timeout+0x140>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b3bc:	4a26      	ldr	r2, [pc, #152]	; (800b458 <sys_timeout+0x140>)
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	6013      	str	r3, [r2, #0]
 800b3c2:	e03f      	b.n	800b444 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b3c4:	4b24      	ldr	r3, [pc, #144]	; (800b458 <sys_timeout+0x140>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	61fb      	str	r3, [r7, #28]
 800b3ca:	e036      	b.n	800b43a <sys_timeout+0x122>
      timeout->time -= t->time;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	685a      	ldr	r2, [r3, #4]
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	1ad2      	subs	r2, r2, r3
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d006      	beq.n	800b3f0 <sys_timeout+0xd8>
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	685a      	ldr	r2, [r3, #4]
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d921      	bls.n	800b434 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d009      	beq.n	800b40c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6859      	ldr	r1, [r3, #4]
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	1a8a      	subs	r2, r1, r2
 800b408:	605a      	str	r2, [r3, #4]
 800b40a:	e00b      	b.n	800b424 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	429a      	cmp	r2, r3
 800b414:	d206      	bcs.n	800b424 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800b416:	4b10      	ldr	r3, [pc, #64]	; (800b458 <sys_timeout+0x140>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	441a      	add	r2, r3
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	601a      	str	r2, [r3, #0]
        break;
 800b432:	e007      	b.n	800b444 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	61fb      	str	r3, [r7, #28]
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1c5      	bne.n	800b3cc <sys_timeout+0xb4>
 800b440:	e000      	b.n	800b444 <sys_timeout+0x12c>
    return;
 800b442:	bf00      	nop
      }
    }
  }
}
 800b444:	3720      	adds	r7, #32
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	080135fc 	.word	0x080135fc
 800b450:	08013630 	.word	0x08013630
 800b454:	08013670 	.word	0x08013670
 800b458:	20000540 	.word	0x20000540
 800b45c:	20000544 	.word	0x20000544

0800b460 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800b466:	4b24      	ldr	r3, [pc, #144]	; (800b4f8 <sys_check_timeouts+0x98>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d040      	beq.n	800b4f0 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800b46e:	f004 ffbf 	bl	80103f0 <sys_now>
 800b472:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800b474:	4b21      	ldr	r3, [pc, #132]	; (800b4fc <sys_check_timeouts+0x9c>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800b47e:	4b20      	ldr	r3, [pc, #128]	; (800b500 <sys_check_timeouts+0xa0>)
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b00      	cmp	r3, #0
 800b486:	d001      	beq.n	800b48c <sys_check_timeouts+0x2c>
 800b488:	f7f9 fee0 	bl	800524c <pbuf_free_ooseq>
      had_one = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800b490:	4b19      	ldr	r3, [pc, #100]	; (800b4f8 <sys_check_timeouts+0x98>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d026      	beq.n	800b4ea <sys_check_timeouts+0x8a>
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d321      	bcc.n	800b4ea <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	4b13      	ldr	r3, [pc, #76]	; (800b4fc <sys_check_timeouts+0x9c>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	4a11      	ldr	r2, [pc, #68]	; (800b4fc <sys_check_timeouts+0x9c>)
 800b4b6:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a0c      	ldr	r2, [pc, #48]	; (800b4f8 <sys_check_timeouts+0x98>)
 800b4c8:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b4d6:	68b9      	ldr	r1, [r7, #8]
 800b4d8:	2006      	movs	r0, #6
 800b4da:	f7f9 fd27 	bl	8004f2c <memp_free>
        if (handler != NULL) {
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6838      	ldr	r0, [r7, #0]
 800b4e8:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800b4ea:	7cfb      	ldrb	r3, [r7, #19]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1c6      	bne.n	800b47e <sys_check_timeouts+0x1e>
  }
}
 800b4f0:	bf00      	nop
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	20000540 	.word	0x20000540
 800b4fc:	20000544 	.word	0x20000544
 800b500:	20003bbc 	.word	0x20003bbc

0800b504 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b504:	b480      	push	{r7}
 800b506:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800b508:	bf00      	nop
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
	...

0800b514 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b51a:	2300      	movs	r3, #0
 800b51c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b51e:	4b17      	ldr	r3, [pc, #92]	; (800b57c <udp_new_port+0x68>)
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	b291      	uxth	r1, r2
 800b526:	4a15      	ldr	r2, [pc, #84]	; (800b57c <udp_new_port+0x68>)
 800b528:	8011      	strh	r1, [r2, #0]
 800b52a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b52e:	4293      	cmp	r3, r2
 800b530:	d103      	bne.n	800b53a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b532:	4b12      	ldr	r3, [pc, #72]	; (800b57c <udp_new_port+0x68>)
 800b534:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b538:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b53a:	4b11      	ldr	r3, [pc, #68]	; (800b580 <udp_new_port+0x6c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	603b      	str	r3, [r7, #0]
 800b540:	e011      	b.n	800b566 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	8a5a      	ldrh	r2, [r3, #18]
 800b546:	4b0d      	ldr	r3, [pc, #52]	; (800b57c <udp_new_port+0x68>)
 800b548:	881b      	ldrh	r3, [r3, #0]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d108      	bne.n	800b560 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b54e:	88fb      	ldrh	r3, [r7, #6]
 800b550:	3301      	adds	r3, #1
 800b552:	80fb      	strh	r3, [r7, #6]
 800b554:	88fb      	ldrh	r3, [r7, #6]
 800b556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b55a:	d3e0      	bcc.n	800b51e <udp_new_port+0xa>
        return 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	e007      	b.n	800b570 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	603b      	str	r3, [r7, #0]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1ea      	bne.n	800b542 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b56c:	4b03      	ldr	r3, [pc, #12]	; (800b57c <udp_new_port+0x68>)
 800b56e:	881b      	ldrh	r3, [r3, #0]
}
 800b570:	4618      	mov	r0, r3
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	2000000c 	.word	0x2000000c
 800b580:	20003bdc 	.word	0x20003bdc

0800b584 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	4613      	mov	r3, r2
 800b590:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b592:	79fb      	ldrb	r3, [r7, #7]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d018      	beq.n	800b5ca <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d013      	beq.n	800b5c6 <udp_input_local_match+0x42>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00f      	beq.n	800b5c6 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b5a6:	4b14      	ldr	r3, [pc, #80]	; (800b5f8 <udp_input_local_match+0x74>)
 800b5a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ae:	d00a      	beq.n	800b5c6 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	4b10      	ldr	r3, [pc, #64]	; (800b5f8 <udp_input_local_match+0x74>)
 800b5b6:	695b      	ldr	r3, [r3, #20]
 800b5b8:	405a      	eors	r2, r3
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	3308      	adds	r3, #8
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d110      	bne.n	800b5e8 <udp_input_local_match+0x64>
          return 1;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e00f      	b.n	800b5ea <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d009      	beq.n	800b5e4 <udp_input_local_match+0x60>
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d005      	beq.n	800b5e4 <udp_input_local_match+0x60>
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	4b06      	ldr	r3, [pc, #24]	; (800b5f8 <udp_input_local_match+0x74>)
 800b5de:	695b      	ldr	r3, [r3, #20]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d101      	bne.n	800b5e8 <udp_input_local_match+0x64>
      return 1;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e000      	b.n	800b5ea <udp_input_local_match+0x66>
    }
  }

  return 0;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3714      	adds	r7, #20
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	20000674 	.word	0x20000674

0800b5fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b5fc:	b590      	push	{r4, r7, lr}
 800b5fe:	b08d      	sub	sp, #52	; 0x34
 800b600:	af02      	add	r7, sp, #8
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	895b      	ldrh	r3, [r3, #10]
 800b60e:	2b07      	cmp	r3, #7
 800b610:	d803      	bhi.n	800b61a <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f7fa f9bc 	bl	8005990 <pbuf_free>
    goto end;
 800b618:	e0c6      	b.n	800b7a8 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b620:	4b63      	ldr	r3, [pc, #396]	; (800b7b0 <udp_input+0x1b4>)
 800b622:	695a      	ldr	r2, [r3, #20]
 800b624:	4b62      	ldr	r3, [pc, #392]	; (800b7b0 <udp_input+0x1b4>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4619      	mov	r1, r3
 800b62a:	4610      	mov	r0, r2
 800b62c:	f003 fcec 	bl	800f008 <ip4_addr_isbroadcast_u32>
 800b630:	4603      	mov	r3, r0
 800b632:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	881b      	ldrh	r3, [r3, #0]
 800b638:	b29b      	uxth	r3, r3
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7f9 f812 	bl	8004664 <lwip_htons>
 800b640:	4603      	mov	r3, r0
 800b642:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	885b      	ldrh	r3, [r3, #2]
 800b648:	b29b      	uxth	r3, r3
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7f9 f80a 	bl	8004664 <lwip_htons>
 800b650:	4603      	mov	r3, r0
 800b652:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b654:	2300      	movs	r3, #0
 800b656:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b658:	2300      	movs	r3, #0
 800b65a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b65c:	2300      	movs	r3, #0
 800b65e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b660:	4b54      	ldr	r3, [pc, #336]	; (800b7b4 <udp_input+0x1b8>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	627b      	str	r3, [r7, #36]	; 0x24
 800b666:	e03b      	b.n	800b6e0 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	8a5b      	ldrh	r3, [r3, #18]
 800b66c:	89fa      	ldrh	r2, [r7, #14]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d131      	bne.n	800b6d6 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b672:	7cfb      	ldrb	r3, [r7, #19]
 800b674:	461a      	mov	r2, r3
 800b676:	6839      	ldr	r1, [r7, #0]
 800b678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b67a:	f7ff ff83 	bl	800b584 <udp_input_local_match>
 800b67e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b680:	2b00      	cmp	r3, #0
 800b682:	d028      	beq.n	800b6d6 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	7c1b      	ldrb	r3, [r3, #16]
 800b688:	f003 0304 	and.w	r3, r3, #4
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d104      	bne.n	800b69a <udp_input+0x9e>
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d101      	bne.n	800b69a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800b696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b698:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	8a9b      	ldrh	r3, [r3, #20]
 800b69e:	8a3a      	ldrh	r2, [r7, #16]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d118      	bne.n	800b6d6 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d005      	beq.n	800b6b8 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	685a      	ldr	r2, [r3, #4]
 800b6b0:	4b3f      	ldr	r3, [pc, #252]	; (800b7b0 <udp_input+0x1b4>)
 800b6b2:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d10e      	bne.n	800b6d6 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b6b8:	6a3b      	ldr	r3, [r7, #32]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d014      	beq.n	800b6e8 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c0:	68da      	ldr	r2, [r3, #12]
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b6c6:	4b3b      	ldr	r3, [pc, #236]	; (800b7b4 <udp_input+0x1b8>)
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6cc:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b6ce:	4a39      	ldr	r2, [pc, #228]	; (800b7b4 <udp_input+0x1b8>)
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b6d4:	e008      	b.n	800b6e8 <udp_input+0xec>
      }
    }

    prev = pcb;
 800b6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d8:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	627b      	str	r3, [r7, #36]	; 0x24
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1c0      	bne.n	800b668 <udp_input+0x6c>
 800b6e6:	e000      	b.n	800b6ea <udp_input+0xee>
        break;
 800b6e8:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d101      	bne.n	800b6f4 <udp_input+0xf8>
    pcb = uncon_pcb;
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <udp_input+0x104>
    for_us = 1;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	76fb      	strb	r3, [r7, #27]
 800b6fe:	e00a      	b.n	800b716 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	3304      	adds	r3, #4
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	4b2a      	ldr	r3, [pc, #168]	; (800b7b0 <udp_input+0x1b4>)
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	bf0c      	ite	eq
 800b70e:	2301      	moveq	r3, #1
 800b710:	2300      	movne	r3, #0
 800b712:	b2db      	uxtb	r3, r3
 800b714:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b716:	7efb      	ldrb	r3, [r7, #27]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d042      	beq.n	800b7a2 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800b71c:	f06f 0107 	mvn.w	r1, #7
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f7fa f911 	bl	8005948 <pbuf_header>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00a      	beq.n	800b742 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800b72c:	4b22      	ldr	r3, [pc, #136]	; (800b7b8 <udp_input+0x1bc>)
 800b72e:	f240 1255 	movw	r2, #341	; 0x155
 800b732:	4922      	ldr	r1, [pc, #136]	; (800b7bc <udp_input+0x1c0>)
 800b734:	4822      	ldr	r0, [pc, #136]	; (800b7c0 <udp_input+0x1c4>)
 800b736:	f005 fc59 	bl	8010fec <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f7fa f928 	bl	8005990 <pbuf_free>
      goto end;
 800b740:	e032      	b.n	800b7a8 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800b742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b744:	2b00      	cmp	r3, #0
 800b746:	d012      	beq.n	800b76e <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	699b      	ldr	r3, [r3, #24]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00a      	beq.n	800b766 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	699c      	ldr	r4, [r3, #24]
 800b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b756:	69d8      	ldr	r0, [r3, #28]
 800b758:	8a3b      	ldrh	r3, [r7, #16]
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	4b19      	ldr	r3, [pc, #100]	; (800b7c4 <udp_input+0x1c8>)
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b762:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b764:	e021      	b.n	800b7aa <udp_input+0x1ae>
        pbuf_free(p);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7fa f912 	bl	8005990 <pbuf_free>
        goto end;
 800b76c:	e01c      	b.n	800b7a8 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b76e:	7cfb      	ldrb	r3, [r7, #19]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d112      	bne.n	800b79a <udp_input+0x19e>
 800b774:	4b0e      	ldr	r3, [pc, #56]	; (800b7b0 <udp_input+0x1b4>)
 800b776:	695b      	ldr	r3, [r3, #20]
 800b778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b77c:	2be0      	cmp	r3, #224	; 0xe0
 800b77e:	d00c      	beq.n	800b79a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b780:	4b0b      	ldr	r3, [pc, #44]	; (800b7b0 <udp_input+0x1b4>)
 800b782:	899b      	ldrh	r3, [r3, #12]
 800b784:	3308      	adds	r3, #8
 800b786:	b29b      	uxth	r3, r3
 800b788:	b21b      	sxth	r3, r3
 800b78a:	4619      	mov	r1, r3
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7fa f8ed 	bl	800596c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b792:	2103      	movs	r1, #3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f003 f917 	bl	800e9c8 <icmp_dest_unreach>
      pbuf_free(p);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7fa f8f8 	bl	8005990 <pbuf_free>
  return;
 800b7a0:	e003      	b.n	800b7aa <udp_input+0x1ae>
    pbuf_free(p);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7fa f8f4 	bl	8005990 <pbuf_free>
  return;
 800b7a8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b7aa:	372c      	adds	r7, #44	; 0x2c
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd90      	pop	{r4, r7, pc}
 800b7b0:	20000674 	.word	0x20000674
 800b7b4:	20003bdc 	.word	0x20003bdc
 800b7b8:	08013698 	.word	0x08013698
 800b7bc:	080136c8 	.word	0x080136c8
 800b7c0:	080136dc 	.word	0x080136dc
 800b7c4:	20000684 	.word	0x20000684

0800b7c8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af02      	add	r7, sp, #8
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
 800b7d4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <udp_sendto_if+0x1a>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d102      	bne.n	800b7e8 <udp_sendto_if+0x20>
    return ERR_VAL;
 800b7e2:	f06f 0305 	mvn.w	r3, #5
 800b7e6:	e028      	b.n	800b83a <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d009      	beq.n	800b802 <udp_sendto_if+0x3a>
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d005      	beq.n	800b802 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b7fe:	2be0      	cmp	r3, #224	; 0xe0
 800b800:	d103      	bne.n	800b80a <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800b802:	6a3b      	ldr	r3, [r7, #32]
 800b804:	3304      	adds	r3, #4
 800b806:	617b      	str	r3, [r7, #20]
 800b808:	e00b      	b.n	800b822 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	6a3b      	ldr	r3, [r7, #32]
 800b810:	3304      	adds	r3, #4
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	429a      	cmp	r2, r3
 800b816:	d002      	beq.n	800b81e <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800b818:	f06f 0303 	mvn.w	r3, #3
 800b81c:	e00d      	b.n	800b83a <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b822:	887a      	ldrh	r2, [r7, #2]
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	9301      	str	r3, [sp, #4]
 800b828:	6a3b      	ldr	r3, [r7, #32]
 800b82a:	9300      	str	r3, [sp, #0]
 800b82c:	4613      	mov	r3, r2
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	68b9      	ldr	r1, [r7, #8]
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f000 f806 	bl	800b844 <udp_sendto_if_src>
 800b838:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b08c      	sub	sp, #48	; 0x30
 800b848:	af04      	add	r7, sp, #16
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	607a      	str	r2, [r7, #4]
 800b850:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d002      	beq.n	800b85e <udp_sendto_if_src+0x1a>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d102      	bne.n	800b864 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800b85e:	f06f 0305 	mvn.w	r3, #5
 800b862:	e07e      	b.n	800b962 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	8a5b      	ldrh	r3, [r3, #18]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10f      	bne.n	800b88c <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b86c:	68f9      	ldr	r1, [r7, #12]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	8a5b      	ldrh	r3, [r3, #18]
 800b872:	461a      	mov	r2, r3
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f000 f87f 	bl	800b978 <udp_bind>
 800b87a:	4603      	mov	r3, r0
 800b87c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b87e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d002      	beq.n	800b88c <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b886:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b88a:	e06a      	b.n	800b962 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800b88c:	2108      	movs	r1, #8
 800b88e:	68b8      	ldr	r0, [r7, #8]
 800b890:	f7fa f85a 	bl	8005948 <pbuf_header>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d014      	beq.n	800b8c4 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b89a:	2200      	movs	r2, #0
 800b89c:	2108      	movs	r1, #8
 800b89e:	2001      	movs	r0, #1
 800b8a0:	f7f9 fd04 	bl	80052ac <pbuf_alloc>
 800b8a4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d102      	bne.n	800b8b2 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b8b0:	e057      	b.n	800b962 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	891b      	ldrh	r3, [r3, #8]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d006      	beq.n	800b8c8 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b8ba:	68b9      	ldr	r1, [r7, #8]
 800b8bc:	69f8      	ldr	r0, [r7, #28]
 800b8be:	f7fa f98b 	bl	8005bd8 <pbuf_chain>
 800b8c2:	e001      	b.n	800b8c8 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	895b      	ldrh	r3, [r3, #10]
 800b8cc:	2b07      	cmp	r3, #7
 800b8ce:	d806      	bhi.n	800b8de <udp_sendto_if_src+0x9a>
 800b8d0:	4b26      	ldr	r3, [pc, #152]	; (800b96c <udp_sendto_if_src+0x128>)
 800b8d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b8d6:	4926      	ldr	r1, [pc, #152]	; (800b970 <udp_sendto_if_src+0x12c>)
 800b8d8:	4826      	ldr	r0, [pc, #152]	; (800b974 <udp_sendto_if_src+0x130>)
 800b8da:	f005 fb87 	bl	8010fec <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	8a5b      	ldrh	r3, [r3, #18]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7f8 febb 	bl	8004664 <lwip_htons>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b8f6:	887b      	ldrh	r3, [r7, #2]
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7f8 feb3 	bl	8004664 <lwip_htons>
 800b8fe:	4603      	mov	r3, r0
 800b900:	461a      	mov	r2, r3
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2200      	movs	r2, #0
 800b90a:	719a      	strb	r2, [r3, #6]
 800b90c:	2200      	movs	r2, #0
 800b90e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	891b      	ldrh	r3, [r3, #8]
 800b914:	4618      	mov	r0, r3
 800b916:	f7f8 fea5 	bl	8004664 <lwip_htons>
 800b91a:	4603      	mov	r3, r0
 800b91c:	461a      	mov	r2, r3
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b922:	2311      	movs	r3, #17
 800b924:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	7a9b      	ldrb	r3, [r3, #10]
 800b92a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	7a5b      	ldrb	r3, [r3, #9]
 800b930:	7cb9      	ldrb	r1, [r7, #18]
 800b932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b934:	9202      	str	r2, [sp, #8]
 800b936:	7cfa      	ldrb	r2, [r7, #19]
 800b938:	9201      	str	r2, [sp, #4]
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	460b      	mov	r3, r1
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b942:	69f8      	ldr	r0, [r7, #28]
 800b944:	f003 fab8 	bl	800eeb8 <ip4_output_if_src>
 800b948:	4603      	mov	r3, r0
 800b94a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b94c:	69fa      	ldr	r2, [r7, #28]
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	429a      	cmp	r2, r3
 800b952:	d004      	beq.n	800b95e <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800b954:	69f8      	ldr	r0, [r7, #28]
 800b956:	f7fa f81b 	bl	8005990 <pbuf_free>
    q = NULL;
 800b95a:	2300      	movs	r3, #0
 800b95c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b95e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3720      	adds	r7, #32
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	08013698 	.word	0x08013698
 800b970:	08013704 	.word	0x08013704
 800b974:	080136dc 	.word	0x080136dc

0800b978 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b086      	sub	sp, #24
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	4613      	mov	r3, r2
 800b984:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d101      	bne.n	800b990 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b98c:	4b30      	ldr	r3, [pc, #192]	; (800ba50 <udp_bind+0xd8>)
 800b98e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d002      	beq.n	800b99c <udp_bind+0x24>
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d102      	bne.n	800b9a2 <udp_bind+0x2a>
    return ERR_VAL;
 800b99c:	f06f 0305 	mvn.w	r3, #5
 800b9a0:	e052      	b.n	800ba48 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b9a6:	4b2b      	ldr	r3, [pc, #172]	; (800ba54 <udp_bind+0xdc>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	617b      	str	r3, [r7, #20]
 800b9ac:	e009      	b.n	800b9c2 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d102      	bne.n	800b9bc <udp_bind+0x44>
      rebind = 1;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	74fb      	strb	r3, [r7, #19]
      break;
 800b9ba:	e005      	b.n	800b9c8 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	617b      	str	r3, [r7, #20]
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1f2      	bne.n	800b9ae <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800b9c8:	88fb      	ldrh	r3, [r7, #6]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d109      	bne.n	800b9e2 <udp_bind+0x6a>
    port = udp_new_port();
 800b9ce:	f7ff fda1 	bl	800b514 <udp_new_port>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b9d6:	88fb      	ldrh	r3, [r7, #6]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d11e      	bne.n	800ba1a <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b9dc:	f06f 0307 	mvn.w	r3, #7
 800b9e0:	e032      	b.n	800ba48 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b9e2:	4b1c      	ldr	r3, [pc, #112]	; (800ba54 <udp_bind+0xdc>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	617b      	str	r3, [r7, #20]
 800b9e8:	e014      	b.n	800ba14 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d00d      	beq.n	800ba0e <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	8a5b      	ldrh	r3, [r3, #18]
 800b9f6:	88fa      	ldrh	r2, [r7, #6]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d108      	bne.n	800ba0e <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d102      	bne.n	800ba0e <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ba08:	f06f 0307 	mvn.w	r3, #7
 800ba0c:	e01c      	b.n	800ba48 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	617b      	str	r3, [r7, #20]
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1e7      	bne.n	800b9ea <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <udp_bind+0xae>
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	e000      	b.n	800ba28 <udp_bind+0xb0>
 800ba26:	2300      	movs	r3, #0
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	88fa      	ldrh	r2, [r7, #6]
 800ba30:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ba32:	7cfb      	ldrb	r3, [r7, #19]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d106      	bne.n	800ba46 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ba38:	4b06      	ldr	r3, [pc, #24]	; (800ba54 <udp_bind+0xdc>)
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800ba40:	4a04      	ldr	r2, [pc, #16]	; (800ba54 <udp_bind+0xdc>)
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ba46:	2300      	movs	r3, #0
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	08015100 	.word	0x08015100
 800ba54:	20003bdc 	.word	0x20003bdc

0800ba58 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	4613      	mov	r3, r2
 800ba64:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <udp_connect+0x1a>
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d102      	bne.n	800ba78 <udp_connect+0x20>
    return ERR_VAL;
 800ba72:	f06f 0305 	mvn.w	r3, #5
 800ba76:	e03e      	b.n	800baf6 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	8a5b      	ldrh	r3, [r3, #18]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10f      	bne.n	800baa0 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ba80:	68f9      	ldr	r1, [r7, #12]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	8a5b      	ldrh	r3, [r3, #18]
 800ba86:	461a      	mov	r2, r3
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f7ff ff75 	bl	800b978 <udp_bind>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ba92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d002      	beq.n	800baa0 <udp_connect+0x48>
      return err;
 800ba9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba9e:	e02a      	b.n	800baf6 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d002      	beq.n	800baac <udp_connect+0x54>
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	e000      	b.n	800baae <udp_connect+0x56>
 800baac:	2300      	movs	r3, #0
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	88fa      	ldrh	r2, [r7, #6]
 800bab6:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	7c1b      	ldrb	r3, [r3, #16]
 800babc:	f043 0304 	orr.w	r3, r3, #4
 800bac0:	b2da      	uxtb	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bac6:	4b0e      	ldr	r3, [pc, #56]	; (800bb00 <udp_connect+0xa8>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	617b      	str	r3, [r7, #20]
 800bacc:	e008      	b.n	800bae0 <udp_connect+0x88>
    if (pcb == ipcb) {
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d101      	bne.n	800bada <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800bad6:	2300      	movs	r3, #0
 800bad8:	e00d      	b.n	800baf6 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	617b      	str	r3, [r7, #20]
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1f3      	bne.n	800bace <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800bae6:	4b06      	ldr	r3, [pc, #24]	; (800bb00 <udp_connect+0xa8>)
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800baee:	4a04      	ldr	r2, [pc, #16]	; (800bb00 <udp_connect+0xa8>)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	20003bdc 	.word	0x20003bdc

0800bb04 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	61da      	str	r2, [r3, #28]
}
 800bb1c:	bf00      	nop
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800bb30:	4b15      	ldr	r3, [pc, #84]	; (800bb88 <udp_remove+0x60>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d105      	bne.n	800bb46 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800bb3a:	4b13      	ldr	r3, [pc, #76]	; (800bb88 <udp_remove+0x60>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	4a11      	ldr	r2, [pc, #68]	; (800bb88 <udp_remove+0x60>)
 800bb42:	6013      	str	r3, [r2, #0]
 800bb44:	e017      	b.n	800bb76 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bb46:	4b10      	ldr	r3, [pc, #64]	; (800bb88 <udp_remove+0x60>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]
 800bb4c:	e010      	b.n	800bb70 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d009      	beq.n	800bb6a <udp_remove+0x42>
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d104      	bne.n	800bb6a <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	68da      	ldr	r2, [r3, #12]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	60da      	str	r2, [r3, #12]
        break;
 800bb68:	e005      	b.n	800bb76 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	60fb      	str	r3, [r7, #12]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1eb      	bne.n	800bb4e <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800bb76:	6879      	ldr	r1, [r7, #4]
 800bb78:	2000      	movs	r0, #0
 800bb7a:	f7f9 f9d7 	bl	8004f2c <memp_free>
}
 800bb7e:	bf00      	nop
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	20003bdc 	.word	0x20003bdc

0800bb8c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800bb92:	2000      	movs	r0, #0
 800bb94:	f7f9 f97e 	bl	8004e94 <memp_malloc>
 800bb98:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d007      	beq.n	800bbb0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800bba0:	2220      	movs	r2, #32
 800bba2:	2100      	movs	r1, #0
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f005 fa19 	bl	8010fdc <memset>
    pcb->ttl = UDP_TTL;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	22ff      	movs	r2, #255	; 0xff
 800bbae:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800bbb0:	687b      	ldr	r3, [r7, #4]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d01e      	beq.n	800bc0a <udp_netif_ip_addr_changed+0x4e>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d01a      	beq.n	800bc0a <udp_netif_ip_addr_changed+0x4e>
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d017      	beq.n	800bc0a <udp_netif_ip_addr_changed+0x4e>
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d013      	beq.n	800bc0a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bbe2:	4b0d      	ldr	r3, [pc, #52]	; (800bc18 <udp_netif_ip_addr_changed+0x5c>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	60fb      	str	r3, [r7, #12]
 800bbe8:	e00c      	b.n	800bc04 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d103      	bne.n	800bbfe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	60fb      	str	r3, [r7, #12]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d1ef      	bne.n	800bbea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bc0a:	bf00      	nop
 800bc0c:	3714      	adds	r7, #20
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	20003bdc 	.word	0x20003bdc

0800bc1c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800bc20:	4b20      	ldr	r3, [pc, #128]	; (800bca4 <dhcp_inc_pcb_refcount+0x88>)
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d133      	bne.n	800bc90 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800bc28:	4b1f      	ldr	r3, [pc, #124]	; (800bca8 <dhcp_inc_pcb_refcount+0x8c>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d005      	beq.n	800bc3c <dhcp_inc_pcb_refcount+0x20>
 800bc30:	4b1e      	ldr	r3, [pc, #120]	; (800bcac <dhcp_inc_pcb_refcount+0x90>)
 800bc32:	22d9      	movs	r2, #217	; 0xd9
 800bc34:	491e      	ldr	r1, [pc, #120]	; (800bcb0 <dhcp_inc_pcb_refcount+0x94>)
 800bc36:	481f      	ldr	r0, [pc, #124]	; (800bcb4 <dhcp_inc_pcb_refcount+0x98>)
 800bc38:	f005 f9d8 	bl	8010fec <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800bc3c:	f7ff ffa6 	bl	800bb8c <udp_new>
 800bc40:	4602      	mov	r2, r0
 800bc42:	4b19      	ldr	r3, [pc, #100]	; (800bca8 <dhcp_inc_pcb_refcount+0x8c>)
 800bc44:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800bc46:	4b18      	ldr	r3, [pc, #96]	; (800bca8 <dhcp_inc_pcb_refcount+0x8c>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d102      	bne.n	800bc54 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800bc4e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc52:	e024      	b.n	800bc9e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800bc54:	4b14      	ldr	r3, [pc, #80]	; (800bca8 <dhcp_inc_pcb_refcount+0x8c>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	7a1a      	ldrb	r2, [r3, #8]
 800bc5a:	4b13      	ldr	r3, [pc, #76]	; (800bca8 <dhcp_inc_pcb_refcount+0x8c>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f042 0220 	orr.w	r2, r2, #32
 800bc62:	b2d2      	uxtb	r2, r2
 800bc64:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800bc66:	4b10      	ldr	r3, [pc, #64]	; (800bca8 <dhcp_inc_pcb_refcount+0x8c>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2244      	movs	r2, #68	; 0x44
 800bc6c:	4912      	ldr	r1, [pc, #72]	; (800bcb8 <dhcp_inc_pcb_refcount+0x9c>)
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7ff fe82 	bl	800b978 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 800bc74:	4b0c      	ldr	r3, [pc, #48]	; (800bca8 <dhcp_inc_pcb_refcount+0x8c>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2243      	movs	r2, #67	; 0x43
 800bc7a:	490f      	ldr	r1, [pc, #60]	; (800bcb8 <dhcp_inc_pcb_refcount+0x9c>)
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7ff feeb 	bl	800ba58 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800bc82:	4b09      	ldr	r3, [pc, #36]	; (800bca8 <dhcp_inc_pcb_refcount+0x8c>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2200      	movs	r2, #0
 800bc88:	490c      	ldr	r1, [pc, #48]	; (800bcbc <dhcp_inc_pcb_refcount+0xa0>)
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7ff ff3a 	bl	800bb04 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800bc90:	4b04      	ldr	r3, [pc, #16]	; (800bca4 <dhcp_inc_pcb_refcount+0x88>)
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	3301      	adds	r3, #1
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	4b02      	ldr	r3, [pc, #8]	; (800bca4 <dhcp_inc_pcb_refcount+0x88>)
 800bc9a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	20000550 	.word	0x20000550
 800bca8:	2000054c 	.word	0x2000054c
 800bcac:	08013734 	.word	0x08013734
 800bcb0:	0801376c 	.word	0x0801376c
 800bcb4:	08013794 	.word	0x08013794
 800bcb8:	08015100 	.word	0x08015100
 800bcbc:	0800d379 	.word	0x0800d379

0800bcc0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800bcc4:	4b0e      	ldr	r3, [pc, #56]	; (800bd00 <dhcp_dec_pcb_refcount+0x40>)
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d105      	bne.n	800bcd8 <dhcp_dec_pcb_refcount+0x18>
 800bccc:	4b0d      	ldr	r3, [pc, #52]	; (800bd04 <dhcp_dec_pcb_refcount+0x44>)
 800bcce:	22f3      	movs	r2, #243	; 0xf3
 800bcd0:	490d      	ldr	r1, [pc, #52]	; (800bd08 <dhcp_dec_pcb_refcount+0x48>)
 800bcd2:	480e      	ldr	r0, [pc, #56]	; (800bd0c <dhcp_dec_pcb_refcount+0x4c>)
 800bcd4:	f005 f98a 	bl	8010fec <iprintf>
  dhcp_pcb_refcount--;
 800bcd8:	4b09      	ldr	r3, [pc, #36]	; (800bd00 <dhcp_dec_pcb_refcount+0x40>)
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	4b07      	ldr	r3, [pc, #28]	; (800bd00 <dhcp_dec_pcb_refcount+0x40>)
 800bce2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800bce4:	4b06      	ldr	r3, [pc, #24]	; (800bd00 <dhcp_dec_pcb_refcount+0x40>)
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d107      	bne.n	800bcfc <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800bcec:	4b08      	ldr	r3, [pc, #32]	; (800bd10 <dhcp_dec_pcb_refcount+0x50>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7ff ff19 	bl	800bb28 <udp_remove>
    dhcp_pcb = NULL;
 800bcf6:	4b06      	ldr	r3, [pc, #24]	; (800bd10 <dhcp_dec_pcb_refcount+0x50>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	601a      	str	r2, [r3, #0]
  }
}
 800bcfc:	bf00      	nop
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	20000550 	.word	0x20000550
 800bd04:	08013734 	.word	0x08013734
 800bd08:	080137bc 	.word	0x080137bc
 800bd0c:	08013794 	.word	0x08013794
 800bd10:	2000054c 	.word	0x2000054c

0800bd14 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6a1b      	ldr	r3, [r3, #32]
 800bd20:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800bd22:	210c      	movs	r1, #12
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f000 ff85 	bl	800cc34 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800bd2a:	4b06      	ldr	r3, [pc, #24]	; (800bd44 <dhcp_handle_nak+0x30>)
 800bd2c:	4a05      	ldr	r2, [pc, #20]	; (800bd44 <dhcp_handle_nak+0x30>)
 800bd2e:	4905      	ldr	r1, [pc, #20]	; (800bd44 <dhcp_handle_nak+0x30>)
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7f9 f989 	bl	8005048 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 fbb6 	bl	800c4a8 <dhcp_discover>
}
 800bd3c:	bf00      	nop
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	08015100 	.word	0x08015100

0800bd48 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a1b      	ldr	r3, [r3, #32]
 800bd54:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800bd56:	2108      	movs	r1, #8
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f000 ff6b 	bl	800cc34 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	3328      	adds	r3, #40	; 0x28
 800bd62:	2200      	movs	r2, #0
 800bd64:	4619      	mov	r1, r3
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f002 fb1e 	bl	800e3a8 <etharp_query>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	7a9b      	ldrb	r3, [r3, #10]
 800bd74:	2bff      	cmp	r3, #255	; 0xff
 800bd76:	d005      	beq.n	800bd84 <dhcp_check+0x3c>
    dhcp->tries++;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	7a9b      	ldrb	r3, [r3, #10]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 800bd84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bd88:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800bd8a:	893b      	ldrh	r3, [r7, #8]
 800bd8c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800bd90:	4a06      	ldr	r2, [pc, #24]	; (800bdac <dhcp_check+0x64>)
 800bd92:	fb82 1203 	smull	r1, r2, r2, r3
 800bd96:	1152      	asrs	r2, r2, #5
 800bd98:	17db      	asrs	r3, r3, #31
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	b29a      	uxth	r2, r3
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800bda2:	bf00      	nop
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	10624dd3 	.word	0x10624dd3

0800bdb0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a1b      	ldr	r3, [r3, #32]
 800bdbc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800bdbe:	4b0c      	ldr	r3, [pc, #48]	; (800bdf0 <dhcp_handle_offer+0x40>)
 800bdc0:	789b      	ldrb	r3, [r3, #2]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00f      	beq.n	800bde6 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800bdc6:	4b0b      	ldr	r3, [pc, #44]	; (800bdf4 <dhcp_handle_offer+0x44>)
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7f8 fc58 	bl	8004680 <lwip_htonl>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	691a      	ldr	r2, [r3, #16]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 f809 	bl	800bdf8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 800bde6:	bf00      	nop
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	20003be0 	.word	0x20003be0
 800bdf4:	20003be8 	.word	0x20003be8

0800bdf8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b088      	sub	sp, #32
 800bdfc:	af02      	add	r7, sp, #8
 800bdfe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a1b      	ldr	r3, [r3, #32]
 800be04:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800be06:	2101      	movs	r1, #1
 800be08:	6938      	ldr	r0, [r7, #16]
 800be0a:	f000 ff13 	bl	800cc34 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800be0e:	2203      	movs	r2, #3
 800be10:	6939      	ldr	r1, [r7, #16]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f001 fb94 	bl	800d540 <dhcp_create_msg>
 800be18:	4603      	mov	r3, r0
 800be1a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800be1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d159      	bne.n	800bed8 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800be24:	2202      	movs	r2, #2
 800be26:	2139      	movs	r1, #57	; 0x39
 800be28:	6938      	ldr	r0, [r7, #16]
 800be2a:	f000 ff1d 	bl	800cc68 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be32:	4619      	mov	r1, r3
 800be34:	6938      	ldr	r0, [r7, #16]
 800be36:	f000 ff79 	bl	800cd2c <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800be3a:	2204      	movs	r2, #4
 800be3c:	2132      	movs	r1, #50	; 0x32
 800be3e:	6938      	ldr	r0, [r7, #16]
 800be40:	f000 ff12 	bl	800cc68 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be48:	4618      	mov	r0, r3
 800be4a:	f7f8 fc19 	bl	8004680 <lwip_htonl>
 800be4e:	4603      	mov	r3, r0
 800be50:	4619      	mov	r1, r3
 800be52:	6938      	ldr	r0, [r7, #16]
 800be54:	f000 ffa4 	bl	800cda0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800be58:	2204      	movs	r2, #4
 800be5a:	2136      	movs	r1, #54	; 0x36
 800be5c:	6938      	ldr	r0, [r7, #16]
 800be5e:	f000 ff03 	bl	800cc68 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be66:	4618      	mov	r0, r3
 800be68:	f7f8 fc0a 	bl	8004680 <lwip_htonl>
 800be6c:	4603      	mov	r3, r0
 800be6e:	4619      	mov	r1, r3
 800be70:	6938      	ldr	r0, [r7, #16]
 800be72:	f000 ff95 	bl	800cda0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800be76:	2203      	movs	r2, #3
 800be78:	2137      	movs	r1, #55	; 0x37
 800be7a:	6938      	ldr	r0, [r7, #16]
 800be7c:	f000 fef4 	bl	800cc68 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800be80:	2300      	movs	r3, #0
 800be82:	75fb      	strb	r3, [r7, #23]
 800be84:	e009      	b.n	800be9a <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800be86:	7dfb      	ldrb	r3, [r7, #23]
 800be88:	4a29      	ldr	r2, [pc, #164]	; (800bf30 <dhcp_select+0x138>)
 800be8a:	5cd3      	ldrb	r3, [r2, r3]
 800be8c:	4619      	mov	r1, r3
 800be8e:	6938      	ldr	r0, [r7, #16]
 800be90:	f000 ff24 	bl	800ccdc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800be94:	7dfb      	ldrb	r3, [r7, #23]
 800be96:	3301      	adds	r3, #1
 800be98:	75fb      	strb	r3, [r7, #23]
 800be9a:	7dfb      	ldrb	r3, [r7, #23]
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d9f2      	bls.n	800be86 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800bea0:	6938      	ldr	r0, [r7, #16]
 800bea2:	f001 fcf1 	bl	800d888 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	68da      	ldr	r2, [r3, #12]
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	8a9b      	ldrh	r3, [r3, #20]
 800beae:	33f0      	adds	r3, #240	; 0xf0
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	4619      	mov	r1, r3
 800beb4:	4610      	mov	r0, r2
 800beb6:	f7f9 fbf7 	bl	80056a8 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800beba:	4b1e      	ldr	r3, [pc, #120]	; (800bf34 <dhcp_select+0x13c>)
 800bebc:	6818      	ldr	r0, [r3, #0]
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	68d9      	ldr	r1, [r3, #12]
 800bec2:	4b1d      	ldr	r3, [pc, #116]	; (800bf38 <dhcp_select+0x140>)
 800bec4:	9301      	str	r3, [sp, #4]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	2343      	movs	r3, #67	; 0x43
 800becc:	4a1b      	ldr	r2, [pc, #108]	; (800bf3c <dhcp_select+0x144>)
 800bece:	f7ff fcb9 	bl	800b844 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800bed2:	6938      	ldr	r0, [r7, #16]
 800bed4:	f001 fc96 	bl	800d804 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	7a9b      	ldrb	r3, [r3, #10]
 800bedc:	2bff      	cmp	r3, #255	; 0xff
 800bede:	d005      	beq.n	800beec <dhcp_select+0xf4>
    dhcp->tries++;
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	7a9b      	ldrb	r3, [r3, #10]
 800bee4:	3301      	adds	r3, #1
 800bee6:	b2da      	uxtb	r2, r3
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	7a9b      	ldrb	r3, [r3, #10]
 800bef0:	2b05      	cmp	r3, #5
 800bef2:	d807      	bhi.n	800bf04 <dhcp_select+0x10c>
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	7a9b      	ldrb	r3, [r3, #10]
 800bef8:	461a      	mov	r2, r3
 800befa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800befe:	4093      	lsls	r3, r2
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	e001      	b.n	800bf08 <dhcp_select+0x110>
 800bf04:	f64e 2360 	movw	r3, #60000	; 0xea60
 800bf08:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800bf0a:	89bb      	ldrh	r3, [r7, #12]
 800bf0c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800bf10:	4a0b      	ldr	r2, [pc, #44]	; (800bf40 <dhcp_select+0x148>)
 800bf12:	fb82 1203 	smull	r1, r2, r2, r3
 800bf16:	1152      	asrs	r2, r2, #5
 800bf18:	17db      	asrs	r3, r3, #31
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800bf22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	20000010 	.word	0x20000010
 800bf34:	2000054c 	.word	0x2000054c
 800bf38:	08015100 	.word	0x08015100
 800bf3c:	08015104 	.word	0x08015104
 800bf40:	10624dd3 	.word	0x10624dd3

0800bf44 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800bf4a:	4b27      	ldr	r3, [pc, #156]	; (800bfe8 <dhcp_coarse_tmr+0xa4>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800bf50:	e042      	b.n	800bfd8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6a1b      	ldr	r3, [r3, #32]
 800bf56:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d039      	beq.n	800bfd2 <dhcp_coarse_tmr+0x8e>
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	7a5b      	ldrb	r3, [r3, #9]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d035      	beq.n	800bfd2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d012      	beq.n	800bf94 <dhcp_coarse_tmr+0x50>
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	8c1b      	ldrh	r3, [r3, #32]
 800bf72:	3301      	adds	r3, #1
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	841a      	strh	r2, [r3, #32]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	8c1a      	ldrh	r2, [r3, #32]
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d106      	bne.n	800bf94 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fd94 	bl	800cab4 <dhcp_release>
        dhcp_discover(netif);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fa8b 	bl	800c4a8 <dhcp_discover>
 800bf92:	e01e      	b.n	800bfd2 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	8bdb      	ldrh	r3, [r3, #30]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d00b      	beq.n	800bfb4 <dhcp_coarse_tmr+0x70>
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	8bdb      	ldrh	r3, [r3, #30]
 800bfa0:	1e5a      	subs	r2, r3, #1
 800bfa2:	b291      	uxth	r1, r2
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	83d1      	strh	r1, [r2, #30]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d103      	bne.n	800bfb4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f8c6 	bl	800c13e <dhcp_t2_timeout>
 800bfb2:	e00e      	b.n	800bfd2 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	8b9b      	ldrh	r3, [r3, #28]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00a      	beq.n	800bfd2 <dhcp_coarse_tmr+0x8e>
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	8b9b      	ldrh	r3, [r3, #28]
 800bfc0:	1e5a      	subs	r2, r3, #1
 800bfc2:	b291      	uxth	r1, r2
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	8391      	strh	r1, [r2, #28]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d102      	bne.n	800bfd2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f888 	bl	800c0e2 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1b9      	bne.n	800bf52 <dhcp_coarse_tmr+0xe>
  }
}
 800bfde:	bf00      	nop
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20003bb4 	.word	0x20003bb4

0800bfec <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800bff2:	4b16      	ldr	r3, [pc, #88]	; (800c04c <dhcp_fine_tmr+0x60>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 800bff8:	e020      	b.n	800c03c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d017      	beq.n	800c036 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	8adb      	ldrh	r3, [r3, #22]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d906      	bls.n	800c01c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	8adb      	ldrh	r3, [r3, #22]
 800c012:	3b01      	subs	r3, #1
 800c014:	b29a      	uxth	r2, r3
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	82da      	strh	r2, [r3, #22]
 800c01a:	e00c      	b.n	800c036 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	8adb      	ldrh	r3, [r3, #22]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d108      	bne.n	800c036 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	8adb      	ldrh	r3, [r3, #22]
 800c028:	3b01      	subs	r3, #1
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f80d 	bl	800c050 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d1db      	bne.n	800bffa <dhcp_fine_tmr+0xe>
  }
}
 800c042:	bf00      	nop
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	20003bb4 	.word	0x20003bb4

0800c050 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a1b      	ldr	r3, [r3, #32]
 800c05c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	7a5b      	ldrb	r3, [r3, #9]
 800c062:	2b0c      	cmp	r3, #12
 800c064:	d003      	beq.n	800c06e <dhcp_timeout+0x1e>
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	7a5b      	ldrb	r3, [r3, #9]
 800c06a:	2b06      	cmp	r3, #6
 800c06c:	d103      	bne.n	800c076 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 fa1a 	bl	800c4a8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800c074:	e031      	b.n	800c0da <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	7a5b      	ldrb	r3, [r3, #9]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d10e      	bne.n	800c09c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	7a9b      	ldrb	r3, [r3, #10]
 800c082:	2b05      	cmp	r3, #5
 800c084:	d803      	bhi.n	800c08e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7ff feb6 	bl	800bdf8 <dhcp_select>
}
 800c08c:	e025      	b.n	800c0da <dhcp_timeout+0x8a>
      dhcp_release(netif);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fd10 	bl	800cab4 <dhcp_release>
      dhcp_discover(netif);
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fa07 	bl	800c4a8 <dhcp_discover>
}
 800c09a:	e01e      	b.n	800c0da <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	7a5b      	ldrb	r3, [r3, #9]
 800c0a0:	2b08      	cmp	r3, #8
 800c0a2:	d10b      	bne.n	800c0bc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	7a9b      	ldrb	r3, [r3, #10]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d803      	bhi.n	800c0b4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f7ff fe4b 	bl	800bd48 <dhcp_check>
}
 800c0b2:	e012      	b.n	800c0da <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 fa83 	bl	800c5c0 <dhcp_bind>
}
 800c0ba:	e00e      	b.n	800c0da <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	7a5b      	ldrb	r3, [r3, #9]
 800c0c0:	2b03      	cmp	r3, #3
 800c0c2:	d10a      	bne.n	800c0da <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	7a9b      	ldrb	r3, [r3, #10]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d803      	bhi.n	800c0d4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 fc5d 	bl	800c98c <dhcp_reboot>
}
 800c0d2:	e002      	b.n	800c0da <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f9e7 	bl	800c4a8 <dhcp_discover>
}
 800c0da:	bf00      	nop
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b084      	sub	sp, #16
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a1b      	ldr	r3, [r3, #32]
 800c0ee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	7a5b      	ldrb	r3, [r3, #9]
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d007      	beq.n	800c108 <dhcp_t1_timeout+0x26>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	7a5b      	ldrb	r3, [r3, #9]
 800c0fc:	2b0a      	cmp	r3, #10
 800c0fe:	d003      	beq.n	800c108 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c104:	2b05      	cmp	r3, #5
 800c106:	d116      	bne.n	800c136 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fb33 	bl	800c774 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	8b5b      	ldrh	r3, [r3, #26]
 800c112:	461a      	mov	r2, r3
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	8c1b      	ldrh	r3, [r3, #32]
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	dd0b      	ble.n	800c136 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	8b5b      	ldrh	r3, [r3, #26]
 800c122:	461a      	mov	r2, r3
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	8c1b      	ldrh	r3, [r3, #32]
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	0fda      	lsrs	r2, r3, #31
 800c12c:	4413      	add	r3, r2
 800c12e:	105b      	asrs	r3, r3, #1
 800c130:	b29a      	uxth	r2, r3
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	839a      	strh	r2, [r3, #28]
    }
  }
}
 800c136:	bf00      	nop
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b084      	sub	sp, #16
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a1b      	ldr	r3, [r3, #32]
 800c14a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	7a5b      	ldrb	r3, [r3, #9]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d00b      	beq.n	800c16c <dhcp_t2_timeout+0x2e>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	7a5b      	ldrb	r3, [r3, #9]
 800c158:	2b0a      	cmp	r3, #10
 800c15a:	d007      	beq.n	800c16c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800c160:	2b05      	cmp	r3, #5
 800c162:	d003      	beq.n	800c16c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	7a5b      	ldrb	r3, [r3, #9]
 800c168:	2b04      	cmp	r3, #4
 800c16a:	d116      	bne.n	800c19a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fb87 	bl	800c880 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c176:	461a      	mov	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	8c1b      	ldrh	r3, [r3, #32]
 800c17c:	1ad3      	subs	r3, r2, r3
 800c17e:	2b01      	cmp	r3, #1
 800c180:	dd0b      	ble.n	800c19a <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c186:	461a      	mov	r2, r3
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	8c1b      	ldrh	r3, [r3, #32]
 800c18c:	1ad3      	subs	r3, r2, r3
 800c18e:	0fda      	lsrs	r2, r3, #31
 800c190:	4413      	add	r3, r2
 800c192:	105b      	asrs	r3, r3, #1
 800c194:	b29a      	uxth	r2, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	83da      	strh	r2, [r3, #30]
    }
  }
}
 800c19a:	bf00      	nop
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6a1b      	ldr	r3, [r3, #32]
 800c1b0:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800c1be:	4b27      	ldr	r3, [pc, #156]	; (800c25c <dhcp_handle_ack+0xb8>)
 800c1c0:	78db      	ldrb	r3, [r3, #3]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800c1c6:	4b26      	ldr	r3, [pc, #152]	; (800c260 <dhcp_handle_ack+0xbc>)
 800c1c8:	68da      	ldr	r2, [r3, #12]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800c1ce:	4b23      	ldr	r3, [pc, #140]	; (800c25c <dhcp_handle_ack+0xb8>)
 800c1d0:	791b      	ldrb	r3, [r3, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d004      	beq.n	800c1e0 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800c1d6:	4b22      	ldr	r3, [pc, #136]	; (800c260 <dhcp_handle_ack+0xbc>)
 800c1d8:	691a      	ldr	r2, [r3, #16]
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	639a      	str	r2, [r3, #56]	; 0x38
 800c1de:	e004      	b.n	800c1ea <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e4:	085a      	lsrs	r2, r3, #1
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800c1ea:	4b1c      	ldr	r3, [pc, #112]	; (800c25c <dhcp_handle_ack+0xb8>)
 800c1ec:	795b      	ldrb	r3, [r3, #5]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d004      	beq.n	800c1fc <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800c1f2:	4b1b      	ldr	r3, [pc, #108]	; (800c260 <dhcp_handle_ack+0xbc>)
 800c1f4:	695a      	ldr	r2, [r3, #20]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	63da      	str	r2, [r3, #60]	; 0x3c
 800c1fa:	e007      	b.n	800c20c <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c200:	4613      	mov	r3, r2
 800c202:	00db      	lsls	r3, r3, #3
 800c204:	1a9b      	subs	r3, r3, r2
 800c206:	08da      	lsrs	r2, r3, #3
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	691a      	ldr	r2, [r3, #16]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800c216:	4b11      	ldr	r3, [pc, #68]	; (800c25c <dhcp_handle_ack+0xb8>)
 800c218:	799b      	ldrb	r3, [r3, #6]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00b      	beq.n	800c236 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800c21e:	4b10      	ldr	r3, [pc, #64]	; (800c260 <dhcp_handle_ack+0xbc>)
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	4618      	mov	r0, r3
 800c224:	f7f8 fa2c 	bl	8004680 <lwip_htonl>
 800c228:	4602      	mov	r2, r0
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2201      	movs	r2, #1
 800c232:	72da      	strb	r2, [r3, #11]
 800c234:	e002      	b.n	800c23c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800c23c:	4b07      	ldr	r3, [pc, #28]	; (800c25c <dhcp_handle_ack+0xb8>)
 800c23e:	79db      	ldrb	r3, [r3, #7]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d007      	beq.n	800c254 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800c244:	4b06      	ldr	r3, [pc, #24]	; (800c260 <dhcp_handle_ack+0xbc>)
 800c246:	69db      	ldr	r3, [r3, #28]
 800c248:	4618      	mov	r0, r3
 800c24a:	f7f8 fa19 	bl	8004680 <lwip_htonl>
 800c24e:	4602      	mov	r2, r0
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800c254:	bf00      	nop
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	20003be0 	.word	0x20003be0
 800c260:	20003be8 	.word	0x20003be8

0800c264 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d109      	bne.n	800c286 <dhcp_start+0x22>
 800c272:	4b3c      	ldr	r3, [pc, #240]	; (800c364 <dhcp_start+0x100>)
 800c274:	f240 22d6 	movw	r2, #726	; 0x2d6
 800c278:	493b      	ldr	r1, [pc, #236]	; (800c368 <dhcp_start+0x104>)
 800c27a:	483c      	ldr	r0, [pc, #240]	; (800c36c <dhcp_start+0x108>)
 800c27c:	f004 feb6 	bl	8010fec <iprintf>
 800c280:	f06f 030f 	mvn.w	r3, #15
 800c284:	e069      	b.n	800c35a <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c28c:	f003 0301 	and.w	r3, r3, #1
 800c290:	2b00      	cmp	r3, #0
 800c292:	d109      	bne.n	800c2a8 <dhcp_start+0x44>
 800c294:	4b33      	ldr	r3, [pc, #204]	; (800c364 <dhcp_start+0x100>)
 800c296:	f240 22d7 	movw	r2, #727	; 0x2d7
 800c29a:	4935      	ldr	r1, [pc, #212]	; (800c370 <dhcp_start+0x10c>)
 800c29c:	4833      	ldr	r0, [pc, #204]	; (800c36c <dhcp_start+0x108>)
 800c29e:	f004 fea5 	bl	8010fec <iprintf>
 800c2a2:	f06f 030f 	mvn.w	r3, #15
 800c2a6:	e058      	b.n	800c35a <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6a1b      	ldr	r3, [r3, #32]
 800c2ac:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c2b2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800c2b6:	d202      	bcs.n	800c2be <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800c2b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2bc:	e04d      	b.n	800c35a <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10d      	bne.n	800c2e0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800c2c4:	2040      	movs	r0, #64	; 0x40
 800c2c6:	f7f8 fc87 	bl	8004bd8 <mem_malloc>
 800c2ca:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d102      	bne.n	800c2d8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800c2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2d6:	e040      	b.n	800c35a <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	621a      	str	r2, [r3, #32]
 800c2de:	e01b      	b.n	800c318 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d006      	beq.n	800c2f6 <dhcp_start+0x92>
 800c2e8:	4b1e      	ldr	r3, [pc, #120]	; (800c364 <dhcp_start+0x100>)
 800c2ea:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800c2ee:	4921      	ldr	r1, [pc, #132]	; (800c374 <dhcp_start+0x110>)
 800c2f0:	481e      	ldr	r0, [pc, #120]	; (800c36c <dhcp_start+0x108>)
 800c2f2:	f004 fe7b 	bl	8010fec <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d006      	beq.n	800c30c <dhcp_start+0xa8>
 800c2fe:	4b19      	ldr	r3, [pc, #100]	; (800c364 <dhcp_start+0x100>)
 800c300:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c304:	491c      	ldr	r1, [pc, #112]	; (800c378 <dhcp_start+0x114>)
 800c306:	4819      	ldr	r0, [pc, #100]	; (800c36c <dhcp_start+0x108>)
 800c308:	f004 fe70 	bl	8010fec <iprintf>

    if (dhcp->pcb_allocated != 0) {
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	7a1b      	ldrb	r3, [r3, #8]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800c314:	f7ff fcd4 	bl	800bcc0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800c318:	2240      	movs	r2, #64	; 0x40
 800c31a:	2100      	movs	r1, #0
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f004 fe5d 	bl	8010fdc <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800c322:	f7ff fc7b 	bl	800bc1c <dhcp_inc_pcb_refcount>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d002      	beq.n	800c332 <dhcp_start+0xce>
    return ERR_MEM;
 800c32c:	f04f 33ff 	mov.w	r3, #4294967295
 800c330:	e013      	b.n	800c35a <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2201      	movs	r2, #1
 800c336:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f8b5 	bl	800c4a8 <dhcp_discover>
 800c33e:	4603      	mov	r3, r0
 800c340:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800c342:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d005      	beq.n	800c356 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fc3a 	bl	800cbc4 <dhcp_stop>
    return ERR_MEM;
 800c350:	f04f 33ff 	mov.w	r3, #4294967295
 800c354:	e001      	b.n	800c35a <dhcp_start+0xf6>
  }
  return result;
 800c356:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	08013734 	.word	0x08013734
 800c368:	080137e0 	.word	0x080137e0
 800c36c:	08013794 	.word	0x08013794
 800c370:	08013824 	.word	0x08013824
 800c374:	08013848 	.word	0x08013848
 800c378:	08013860 	.word	0x08013860

0800c37c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d107      	bne.n	800c39c <dhcp_arp_reply+0x20>
 800c38c:	4b0e      	ldr	r3, [pc, #56]	; (800c3c8 <dhcp_arp_reply+0x4c>)
 800c38e:	f240 327b 	movw	r2, #891	; 0x37b
 800c392:	490e      	ldr	r1, [pc, #56]	; (800c3cc <dhcp_arp_reply+0x50>)
 800c394:	480e      	ldr	r0, [pc, #56]	; (800c3d0 <dhcp_arp_reply+0x54>)
 800c396:	f004 fe29 	bl	8010fec <iprintf>
 800c39a:	e012      	b.n	800c3c2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6a1b      	ldr	r3, [r3, #32]
 800c3a0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00c      	beq.n	800c3c2 <dhcp_arp_reply+0x46>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	7a5b      	ldrb	r3, [r3, #9]
 800c3ac:	2b08      	cmp	r3, #8
 800c3ae:	d108      	bne.n	800c3c2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d102      	bne.n	800c3c2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 f809 	bl	800c3d4 <dhcp_decline>
    }
  }
}
 800c3c2:	3710      	adds	r7, #16
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	08013734 	.word	0x08013734
 800c3cc:	080137e0 	.word	0x080137e0
 800c3d0:	08013794 	.word	0x08013794

0800c3d4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b086      	sub	sp, #24
 800c3d8:	af02      	add	r7, sp, #8
 800c3da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a1b      	ldr	r3, [r3, #32]
 800c3e0:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800c3e6:	210c      	movs	r1, #12
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f000 fc23 	bl	800cc34 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800c3ee:	2204      	movs	r2, #4
 800c3f0:	68f9      	ldr	r1, [r7, #12]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f001 f8a4 	bl	800d540 <dhcp_create_msg>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 800c3fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d12a      	bne.n	800c45a <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800c404:	2204      	movs	r2, #4
 800c406:	2132      	movs	r1, #50	; 0x32
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f000 fc2d 	bl	800cc68 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c412:	4618      	mov	r0, r3
 800c414:	f7f8 f934 	bl	8004680 <lwip_htonl>
 800c418:	4603      	mov	r3, r0
 800c41a:	4619      	mov	r1, r3
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f000 fcbf 	bl	800cda0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f001 fa30 	bl	800d888 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	68da      	ldr	r2, [r3, #12]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	8a9b      	ldrh	r3, [r3, #20]
 800c430:	33f0      	adds	r3, #240	; 0xf0
 800c432:	b29b      	uxth	r3, r3
 800c434:	4619      	mov	r1, r3
 800c436:	4610      	mov	r0, r2
 800c438:	f7f9 f936 	bl	80056a8 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800c43c:	4b16      	ldr	r3, [pc, #88]	; (800c498 <dhcp_decline+0xc4>)
 800c43e:	6818      	ldr	r0, [r3, #0]
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	68d9      	ldr	r1, [r3, #12]
 800c444:	4b15      	ldr	r3, [pc, #84]	; (800c49c <dhcp_decline+0xc8>)
 800c446:	9301      	str	r3, [sp, #4]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	2343      	movs	r3, #67	; 0x43
 800c44e:	4a14      	ldr	r2, [pc, #80]	; (800c4a0 <dhcp_decline+0xcc>)
 800c450:	f7ff f9f8 	bl	800b844 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f001 f9d5 	bl	800d804 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	7a9b      	ldrb	r3, [r3, #10]
 800c45e:	2bff      	cmp	r3, #255	; 0xff
 800c460:	d005      	beq.n	800c46e <dhcp_decline+0x9a>
    dhcp->tries++;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	7a9b      	ldrb	r3, [r3, #10]
 800c466:	3301      	adds	r3, #1
 800c468:	b2da      	uxtb	r2, r3
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800c46e:	f242 7310 	movw	r3, #10000	; 0x2710
 800c472:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800c474:	893b      	ldrh	r3, [r7, #8]
 800c476:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c47a:	4a0a      	ldr	r2, [pc, #40]	; (800c4a4 <dhcp_decline+0xd0>)
 800c47c:	fb82 1203 	smull	r1, r2, r2, r3
 800c480:	1152      	asrs	r2, r2, #5
 800c482:	17db      	asrs	r3, r3, #31
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	b29a      	uxth	r2, r3
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c48c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c490:	4618      	mov	r0, r3
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	2000054c 	.word	0x2000054c
 800c49c:	08015100 	.word	0x08015100
 800c4a0:	08015104 	.word	0x08015104
 800c4a4:	10624dd3 	.word	0x10624dd3

0800c4a8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b088      	sub	sp, #32
 800c4ac:	af02      	add	r7, sp, #8
 800c4ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a1b      	ldr	r3, [r3, #32]
 800c4b4:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800c4c0:	2106      	movs	r1, #6
 800c4c2:	6938      	ldr	r0, [r7, #16]
 800c4c4:	f000 fbb6 	bl	800cc34 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	6939      	ldr	r1, [r7, #16]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f001 f837 	bl	800d540 <dhcp_create_msg>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800c4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d13b      	bne.n	800c556 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c4de:	2202      	movs	r2, #2
 800c4e0:	2139      	movs	r1, #57	; 0x39
 800c4e2:	6938      	ldr	r0, [r7, #16]
 800c4e4:	f000 fbc0 	bl	800cc68 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	6938      	ldr	r0, [r7, #16]
 800c4f0:	f000 fc1c 	bl	800cd2c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c4f4:	2203      	movs	r2, #3
 800c4f6:	2137      	movs	r1, #55	; 0x37
 800c4f8:	6938      	ldr	r0, [r7, #16]
 800c4fa:	f000 fbb5 	bl	800cc68 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c4fe:	2300      	movs	r3, #0
 800c500:	75fb      	strb	r3, [r7, #23]
 800c502:	e009      	b.n	800c518 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800c504:	7dfb      	ldrb	r3, [r7, #23]
 800c506:	4a29      	ldr	r2, [pc, #164]	; (800c5ac <dhcp_discover+0x104>)
 800c508:	5cd3      	ldrb	r3, [r2, r3]
 800c50a:	4619      	mov	r1, r3
 800c50c:	6938      	ldr	r0, [r7, #16]
 800c50e:	f000 fbe5 	bl	800ccdc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c512:	7dfb      	ldrb	r3, [r7, #23]
 800c514:	3301      	adds	r3, #1
 800c516:	75fb      	strb	r3, [r7, #23]
 800c518:	7dfb      	ldrb	r3, [r7, #23]
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d9f2      	bls.n	800c504 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800c51e:	6938      	ldr	r0, [r7, #16]
 800c520:	f001 f9b2 	bl	800d888 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	68da      	ldr	r2, [r3, #12]
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	8a9b      	ldrh	r3, [r3, #20]
 800c52c:	33f0      	adds	r3, #240	; 0xf0
 800c52e:	b29b      	uxth	r3, r3
 800c530:	4619      	mov	r1, r3
 800c532:	4610      	mov	r0, r2
 800c534:	f7f9 f8b8 	bl	80056a8 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800c538:	4b1d      	ldr	r3, [pc, #116]	; (800c5b0 <dhcp_discover+0x108>)
 800c53a:	6818      	ldr	r0, [r3, #0]
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	68d9      	ldr	r1, [r3, #12]
 800c540:	4b1c      	ldr	r3, [pc, #112]	; (800c5b4 <dhcp_discover+0x10c>)
 800c542:	9301      	str	r3, [sp, #4]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	2343      	movs	r3, #67	; 0x43
 800c54a:	4a1b      	ldr	r2, [pc, #108]	; (800c5b8 <dhcp_discover+0x110>)
 800c54c:	f7ff f97a 	bl	800b844 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800c550:	6938      	ldr	r0, [r7, #16]
 800c552:	f001 f957 	bl	800d804 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	7a9b      	ldrb	r3, [r3, #10]
 800c55a:	2bff      	cmp	r3, #255	; 0xff
 800c55c:	d005      	beq.n	800c56a <dhcp_discover+0xc2>
    dhcp->tries++;
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	7a9b      	ldrb	r3, [r3, #10]
 800c562:	3301      	adds	r3, #1
 800c564:	b2da      	uxtb	r2, r3
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	7a9b      	ldrb	r3, [r3, #10]
 800c56e:	2b05      	cmp	r3, #5
 800c570:	d807      	bhi.n	800c582 <dhcp_discover+0xda>
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	7a9b      	ldrb	r3, [r3, #10]
 800c576:	461a      	mov	r2, r3
 800c578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c57c:	4093      	lsls	r3, r2
 800c57e:	b29b      	uxth	r3, r3
 800c580:	e001      	b.n	800c586 <dhcp_discover+0xde>
 800c582:	f64e 2360 	movw	r3, #60000	; 0xea60
 800c586:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800c588:	89bb      	ldrh	r3, [r7, #12]
 800c58a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c58e:	4a0b      	ldr	r2, [pc, #44]	; (800c5bc <dhcp_discover+0x114>)
 800c590:	fb82 1203 	smull	r1, r2, r2, r3
 800c594:	1152      	asrs	r2, r2, #5
 800c596:	17db      	asrs	r3, r3, #31
 800c598:	1ad3      	subs	r3, r2, r3
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c5a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3718      	adds	r7, #24
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	20000010 	.word	0x20000010
 800c5b0:	2000054c 	.word	0x2000054c
 800c5b4:	08015100 	.word	0x08015100
 800c5b8:	08015104 	.word	0x08015104
 800c5bc:	10624dd3 	.word	0x10624dd3

0800c5c0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b088      	sub	sp, #32
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d107      	bne.n	800c5de <dhcp_bind+0x1e>
 800c5ce:	4b64      	ldr	r3, [pc, #400]	; (800c760 <dhcp_bind+0x1a0>)
 800c5d0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800c5d4:	4963      	ldr	r1, [pc, #396]	; (800c764 <dhcp_bind+0x1a4>)
 800c5d6:	4864      	ldr	r0, [pc, #400]	; (800c768 <dhcp_bind+0x1a8>)
 800c5d8:	f004 fd08 	bl	8010fec <iprintf>
 800c5dc:	e0bc      	b.n	800c758 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d107      	bne.n	800c5fa <dhcp_bind+0x3a>
 800c5ea:	4b5d      	ldr	r3, [pc, #372]	; (800c760 <dhcp_bind+0x1a0>)
 800c5ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c5f0:	495e      	ldr	r1, [pc, #376]	; (800c76c <dhcp_bind+0x1ac>)
 800c5f2:	485d      	ldr	r0, [pc, #372]	; (800c768 <dhcp_bind+0x1a8>)
 800c5f4:	f004 fcfa 	bl	8010fec <iprintf>
 800c5f8:	e0ae      	b.n	800c758 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c608:	d019      	beq.n	800c63e <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60e:	331e      	adds	r3, #30
 800c610:	4a57      	ldr	r2, [pc, #348]	; (800c770 <dhcp_bind+0x1b0>)
 800c612:	fba2 2303 	umull	r2, r3, r2, r3
 800c616:	095b      	lsrs	r3, r3, #5
 800c618:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c620:	d302      	bcc.n	800c628 <dhcp_bind+0x68>
       timeout = 0xffff;
 800c622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c626:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c634:	2b00      	cmp	r3, #0
 800c636:	d102      	bne.n	800c63e <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	2201      	movs	r2, #1
 800c63c:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c646:	d01d      	beq.n	800c684 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64c:	331e      	adds	r3, #30
 800c64e:	4a48      	ldr	r2, [pc, #288]	; (800c770 <dhcp_bind+0x1b0>)
 800c650:	fba2 2303 	umull	r2, r3, r2, r3
 800c654:	095b      	lsrs	r3, r3, #5
 800c656:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c65e:	d302      	bcc.n	800c666 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800c660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c664:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	b29a      	uxth	r2, r3
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	8b1b      	ldrh	r3, [r3, #24]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d102      	bne.n	800c67c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	2201      	movs	r2, #1
 800c67a:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	8b1a      	ldrh	r2, [r3, #24]
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c68c:	d01d      	beq.n	800c6ca <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c692:	331e      	adds	r3, #30
 800c694:	4a36      	ldr	r2, [pc, #216]	; (800c770 <dhcp_bind+0x1b0>)
 800c696:	fba2 2303 	umull	r2, r3, r2, r3
 800c69a:	095b      	lsrs	r3, r3, #5
 800c69c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6a4:	d302      	bcc.n	800c6ac <dhcp_bind+0xec>
      timeout = 0xffff;
 800c6a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c6aa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	8b5b      	ldrh	r3, [r3, #26]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d102      	bne.n	800c6c2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	2201      	movs	r2, #1
 800c6c0:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	8b5a      	ldrh	r2, [r3, #26]
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	8b1a      	ldrh	r2, [r3, #24]
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	8b5b      	ldrh	r3, [r3, #26]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d306      	bcc.n	800c6e4 <dhcp_bind+0x124>
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	8b5b      	ldrh	r3, [r3, #26]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d002      	beq.n	800c6e4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	7adb      	ldrb	r3, [r3, #11]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f0:	613b      	str	r3, [r7, #16]
 800c6f2:	e014      	b.n	800c71e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	3328      	adds	r3, #40	; 0x28
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800c6fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c700:	2b00      	cmp	r3, #0
 800c702:	db02      	blt.n	800c70a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800c704:	23ff      	movs	r3, #255	; 0xff
 800c706:	613b      	str	r3, [r7, #16]
 800c708:	e009      	b.n	800c71e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800c70a:	7dfb      	ldrb	r3, [r7, #23]
 800c70c:	2bbf      	cmp	r3, #191	; 0xbf
 800c70e:	d903      	bls.n	800c718 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800c710:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800c714:	613b      	str	r3, [r7, #16]
 800c716:	e002      	b.n	800c71e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800c718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c71c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c722:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d108      	bne.n	800c73c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	4013      	ands	r3, r2
 800c732:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c73a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800c73c:	210a      	movs	r1, #10
 800c73e:	69b8      	ldr	r0, [r7, #24]
 800c740:	f000 fa78 	bl	800cc34 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c74a:	f107 030c 	add.w	r3, r7, #12
 800c74e:	f107 0210 	add.w	r2, r7, #16
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f7f8 fc78 	bl	8005048 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800c758:	3720      	adds	r7, #32
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	08013734 	.word	0x08013734
 800c764:	08013874 	.word	0x08013874
 800c768:	08013794 	.word	0x08013794
 800c76c:	08013890 	.word	0x08013890
 800c770:	88888889 	.word	0x88888889

0800c774 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b088      	sub	sp, #32
 800c778:	af02      	add	r7, sp, #8
 800c77a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6a1b      	ldr	r3, [r3, #32]
 800c780:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800c782:	2105      	movs	r1, #5
 800c784:	6938      	ldr	r0, [r7, #16]
 800c786:	f000 fa55 	bl	800cc34 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800c78a:	2203      	movs	r2, #3
 800c78c:	6939      	ldr	r1, [r7, #16]
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 fed6 	bl	800d540 <dhcp_create_msg>
 800c794:	4603      	mov	r3, r0
 800c796:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800c798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d13b      	bne.n	800c818 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c7a0:	2202      	movs	r2, #2
 800c7a2:	2139      	movs	r1, #57	; 0x39
 800c7a4:	6938      	ldr	r0, [r7, #16]
 800c7a6:	f000 fa5f 	bl	800cc68 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	6938      	ldr	r0, [r7, #16]
 800c7b2:	f000 fabb 	bl	800cd2c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c7b6:	2203      	movs	r2, #3
 800c7b8:	2137      	movs	r1, #55	; 0x37
 800c7ba:	6938      	ldr	r0, [r7, #16]
 800c7bc:	f000 fa54 	bl	800cc68 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	75fb      	strb	r3, [r7, #23]
 800c7c4:	e009      	b.n	800c7da <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
 800c7c8:	4a2a      	ldr	r2, [pc, #168]	; (800c874 <dhcp_renew+0x100>)
 800c7ca:	5cd3      	ldrb	r3, [r2, r3]
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	6938      	ldr	r0, [r7, #16]
 800c7d0:	f000 fa84 	bl	800ccdc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c7d4:	7dfb      	ldrb	r3, [r7, #23]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	75fb      	strb	r3, [r7, #23]
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	d9f2      	bls.n	800c7c6 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800c7e0:	6938      	ldr	r0, [r7, #16]
 800c7e2:	f001 f851 	bl	800d888 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	68da      	ldr	r2, [r3, #12]
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	8a9b      	ldrh	r3, [r3, #20]
 800c7ee:	33f0      	adds	r3, #240	; 0xf0
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	4610      	mov	r0, r2
 800c7f6:	f7f8 ff57 	bl	80056a8 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800c7fa:	4b1f      	ldr	r3, [pc, #124]	; (800c878 <dhcp_renew+0x104>)
 800c7fc:	6818      	ldr	r0, [r3, #0]
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	68d9      	ldr	r1, [r3, #12]
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	2343      	movs	r3, #67	; 0x43
 800c80e:	f7fe ffdb 	bl	800b7c8 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800c812:	6938      	ldr	r0, [r7, #16]
 800c814:	f000 fff6 	bl	800d804 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	7a9b      	ldrb	r3, [r3, #10]
 800c81c:	2bff      	cmp	r3, #255	; 0xff
 800c81e:	d005      	beq.n	800c82c <dhcp_renew+0xb8>
    dhcp->tries++;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	7a9b      	ldrb	r3, [r3, #10]
 800c824:	3301      	adds	r3, #1
 800c826:	b2da      	uxtb	r2, r3
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	7a9b      	ldrb	r3, [r3, #10]
 800c830:	2b09      	cmp	r3, #9
 800c832:	d80a      	bhi.n	800c84a <dhcp_renew+0xd6>
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	7a9b      	ldrb	r3, [r3, #10]
 800c838:	b29b      	uxth	r3, r3
 800c83a:	461a      	mov	r2, r3
 800c83c:	0152      	lsls	r2, r2, #5
 800c83e:	1ad2      	subs	r2, r2, r3
 800c840:	0092      	lsls	r2, r2, #2
 800c842:	4413      	add	r3, r2
 800c844:	011b      	lsls	r3, r3, #4
 800c846:	b29b      	uxth	r3, r3
 800c848:	e001      	b.n	800c84e <dhcp_renew+0xda>
 800c84a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c84e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800c850:	89bb      	ldrh	r3, [r7, #12]
 800c852:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c856:	4a09      	ldr	r2, [pc, #36]	; (800c87c <dhcp_renew+0x108>)
 800c858:	fb82 1203 	smull	r1, r2, r2, r3
 800c85c:	1152      	asrs	r2, r2, #5
 800c85e:	17db      	asrs	r3, r3, #31
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	b29a      	uxth	r2, r3
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c868:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3718      	adds	r7, #24
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	20000010 	.word	0x20000010
 800c878:	2000054c 	.word	0x2000054c
 800c87c:	10624dd3 	.word	0x10624dd3

0800c880 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b088      	sub	sp, #32
 800c884:	af02      	add	r7, sp, #8
 800c886:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6a1b      	ldr	r3, [r3, #32]
 800c88c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800c88e:	2104      	movs	r1, #4
 800c890:	6938      	ldr	r0, [r7, #16]
 800c892:	f000 f9cf 	bl	800cc34 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800c896:	2203      	movs	r2, #3
 800c898:	6939      	ldr	r1, [r7, #16]
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fe50 	bl	800d540 <dhcp_create_msg>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800c8a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d139      	bne.n	800c920 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c8ac:	2202      	movs	r2, #2
 800c8ae:	2139      	movs	r1, #57	; 0x39
 800c8b0:	6938      	ldr	r0, [r7, #16]
 800c8b2:	f000 f9d9 	bl	800cc68 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	6938      	ldr	r0, [r7, #16]
 800c8be:	f000 fa35 	bl	800cd2c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c8c2:	2203      	movs	r2, #3
 800c8c4:	2137      	movs	r1, #55	; 0x37
 800c8c6:	6938      	ldr	r0, [r7, #16]
 800c8c8:	f000 f9ce 	bl	800cc68 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	75fb      	strb	r3, [r7, #23]
 800c8d0:	e009      	b.n	800c8e6 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800c8d2:	7dfb      	ldrb	r3, [r7, #23]
 800c8d4:	4a29      	ldr	r2, [pc, #164]	; (800c97c <dhcp_rebind+0xfc>)
 800c8d6:	5cd3      	ldrb	r3, [r2, r3]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	6938      	ldr	r0, [r7, #16]
 800c8dc:	f000 f9fe 	bl	800ccdc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c8e0:	7dfb      	ldrb	r3, [r7, #23]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	75fb      	strb	r3, [r7, #23]
 800c8e6:	7dfb      	ldrb	r3, [r7, #23]
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	d9f2      	bls.n	800c8d2 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800c8ec:	6938      	ldr	r0, [r7, #16]
 800c8ee:	f000 ffcb 	bl	800d888 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	68da      	ldr	r2, [r3, #12]
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	8a9b      	ldrh	r3, [r3, #20]
 800c8fa:	33f0      	adds	r3, #240	; 0xf0
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	4619      	mov	r1, r3
 800c900:	4610      	mov	r0, r2
 800c902:	f7f8 fed1 	bl	80056a8 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800c906:	4b1e      	ldr	r3, [pc, #120]	; (800c980 <dhcp_rebind+0x100>)
 800c908:	6818      	ldr	r0, [r3, #0]
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	68d9      	ldr	r1, [r3, #12]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	2343      	movs	r3, #67	; 0x43
 800c914:	4a1b      	ldr	r2, [pc, #108]	; (800c984 <dhcp_rebind+0x104>)
 800c916:	f7fe ff57 	bl	800b7c8 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800c91a:	6938      	ldr	r0, [r7, #16]
 800c91c:	f000 ff72 	bl	800d804 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	7a9b      	ldrb	r3, [r3, #10]
 800c924:	2bff      	cmp	r3, #255	; 0xff
 800c926:	d005      	beq.n	800c934 <dhcp_rebind+0xb4>
    dhcp->tries++;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	7a9b      	ldrb	r3, [r3, #10]
 800c92c:	3301      	adds	r3, #1
 800c92e:	b2da      	uxtb	r2, r3
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	7a9b      	ldrb	r3, [r3, #10]
 800c938:	2b09      	cmp	r3, #9
 800c93a:	d80a      	bhi.n	800c952 <dhcp_rebind+0xd2>
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	7a9b      	ldrb	r3, [r3, #10]
 800c940:	b29b      	uxth	r3, r3
 800c942:	461a      	mov	r2, r3
 800c944:	0152      	lsls	r2, r2, #5
 800c946:	1ad2      	subs	r2, r2, r3
 800c948:	0092      	lsls	r2, r2, #2
 800c94a:	4413      	add	r3, r2
 800c94c:	00db      	lsls	r3, r3, #3
 800c94e:	b29b      	uxth	r3, r3
 800c950:	e001      	b.n	800c956 <dhcp_rebind+0xd6>
 800c952:	f242 7310 	movw	r3, #10000	; 0x2710
 800c956:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800c958:	89bb      	ldrh	r3, [r7, #12]
 800c95a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c95e:	4a0a      	ldr	r2, [pc, #40]	; (800c988 <dhcp_rebind+0x108>)
 800c960:	fb82 1203 	smull	r1, r2, r2, r3
 800c964:	1152      	asrs	r2, r2, #5
 800c966:	17db      	asrs	r3, r3, #31
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c970:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3718      	adds	r7, #24
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	20000010 	.word	0x20000010
 800c980:	2000054c 	.word	0x2000054c
 800c984:	08015104 	.word	0x08015104
 800c988:	10624dd3 	.word	0x10624dd3

0800c98c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b088      	sub	sp, #32
 800c990:	af02      	add	r7, sp, #8
 800c992:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a1b      	ldr	r3, [r3, #32]
 800c998:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800c99a:	2103      	movs	r1, #3
 800c99c:	6938      	ldr	r0, [r7, #16]
 800c99e:	f000 f949 	bl	800cc34 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800c9a2:	2203      	movs	r2, #3
 800c9a4:	6939      	ldr	r1, [r7, #16]
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 fdca 	bl	800d540 <dhcp_create_msg>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800c9b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d147      	bne.n	800ca48 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c9b8:	2202      	movs	r2, #2
 800c9ba:	2139      	movs	r1, #57	; 0x39
 800c9bc:	6938      	ldr	r0, [r7, #16]
 800c9be:	f000 f953 	bl	800cc68 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800c9c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c9c6:	6938      	ldr	r0, [r7, #16]
 800c9c8:	f000 f9b0 	bl	800cd2c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800c9cc:	2204      	movs	r2, #4
 800c9ce:	2132      	movs	r1, #50	; 0x32
 800c9d0:	6938      	ldr	r0, [r7, #16]
 800c9d2:	f000 f949 	bl	800cc68 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7f7 fe50 	bl	8004680 <lwip_htonl>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	6938      	ldr	r0, [r7, #16]
 800c9e6:	f000 f9db 	bl	800cda0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c9ea:	2203      	movs	r2, #3
 800c9ec:	2137      	movs	r1, #55	; 0x37
 800c9ee:	6938      	ldr	r0, [r7, #16]
 800c9f0:	f000 f93a 	bl	800cc68 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	75fb      	strb	r3, [r7, #23]
 800c9f8:	e009      	b.n	800ca0e <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
 800c9fc:	4a29      	ldr	r2, [pc, #164]	; (800caa4 <dhcp_reboot+0x118>)
 800c9fe:	5cd3      	ldrb	r3, [r2, r3]
 800ca00:	4619      	mov	r1, r3
 800ca02:	6938      	ldr	r0, [r7, #16]
 800ca04:	f000 f96a 	bl	800ccdc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ca08:	7dfb      	ldrb	r3, [r7, #23]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	75fb      	strb	r3, [r7, #23]
 800ca0e:	7dfb      	ldrb	r3, [r7, #23]
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	d9f2      	bls.n	800c9fa <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 800ca14:	6938      	ldr	r0, [r7, #16]
 800ca16:	f000 ff37 	bl	800d888 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	68da      	ldr	r2, [r3, #12]
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	8a9b      	ldrh	r3, [r3, #20]
 800ca22:	33f0      	adds	r3, #240	; 0xf0
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	4619      	mov	r1, r3
 800ca28:	4610      	mov	r0, r2
 800ca2a:	f7f8 fe3d 	bl	80056a8 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800ca2e:	4b1e      	ldr	r3, [pc, #120]	; (800caa8 <dhcp_reboot+0x11c>)
 800ca30:	6818      	ldr	r0, [r3, #0]
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	68d9      	ldr	r1, [r3, #12]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	2343      	movs	r3, #67	; 0x43
 800ca3c:	4a1b      	ldr	r2, [pc, #108]	; (800caac <dhcp_reboot+0x120>)
 800ca3e:	f7fe fec3 	bl	800b7c8 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800ca42:	6938      	ldr	r0, [r7, #16]
 800ca44:	f000 fede 	bl	800d804 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	7a9b      	ldrb	r3, [r3, #10]
 800ca4c:	2bff      	cmp	r3, #255	; 0xff
 800ca4e:	d005      	beq.n	800ca5c <dhcp_reboot+0xd0>
    dhcp->tries++;
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	7a9b      	ldrb	r3, [r3, #10]
 800ca54:	3301      	adds	r3, #1
 800ca56:	b2da      	uxtb	r2, r3
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	7a9b      	ldrb	r3, [r3, #10]
 800ca60:	2b09      	cmp	r3, #9
 800ca62:	d80a      	bhi.n	800ca7a <dhcp_reboot+0xee>
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	7a9b      	ldrb	r3, [r3, #10]
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	0152      	lsls	r2, r2, #5
 800ca6e:	1ad2      	subs	r2, r2, r3
 800ca70:	0092      	lsls	r2, r2, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	00db      	lsls	r3, r3, #3
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	e001      	b.n	800ca7e <dhcp_reboot+0xf2>
 800ca7a:	f242 7310 	movw	r3, #10000	; 0x2710
 800ca7e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800ca80:	89bb      	ldrh	r3, [r7, #12]
 800ca82:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ca86:	4a0a      	ldr	r2, [pc, #40]	; (800cab0 <dhcp_reboot+0x124>)
 800ca88:	fb82 1203 	smull	r1, r2, r2, r3
 800ca8c:	1152      	asrs	r2, r2, #5
 800ca8e:	17db      	asrs	r3, r3, #31
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ca98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3718      	adds	r7, #24
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	20000010 	.word	0x20000010
 800caa8:	2000054c 	.word	0x2000054c
 800caac:	08015104 	.word	0x08015104
 800cab0:	10624dd3 	.word	0x10624dd3

0800cab4 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b088      	sub	sp, #32
 800cab8:	af02      	add	r7, sp, #8
 800caba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6a1b      	ldr	r3, [r3, #32]
 800cac0:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d102      	bne.n	800cace <dhcp_release+0x1a>
    return ERR_ARG;
 800cac8:	f06f 030f 	mvn.w	r3, #15
 800cacc:	e072      	b.n	800cbb4 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad2:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 ff31 	bl	800d93c <dhcp_supplied_address>
 800cada:	4603      	mov	r3, r0
 800cadc:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800cade:	2100      	movs	r1, #0
 800cae0:	6978      	ldr	r0, [r7, #20]
 800cae2:	f000 f8a7 	bl	800cc34 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	2200      	movs	r2, #0
 800caea:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	2200      	movs	r2, #0
 800caf0:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	2200      	movs	r2, #0
 800caf6:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	2200      	movs	r2, #0
 800cafc:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	2200      	movs	r2, #0
 800cb02:	63da      	str	r2, [r3, #60]	; 0x3c
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	639a      	str	r2, [r3, #56]	; 0x38
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	2200      	movs	r2, #0
 800cb18:	845a      	strh	r2, [r3, #34]	; 0x22
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	841a      	strh	r2, [r3, #32]
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	8c1a      	ldrh	r2, [r3, #32]
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	83da      	strh	r2, [r3, #30]
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	8bda      	ldrh	r2, [r3, #30]
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800cb32:	7cfb      	ldrb	r3, [r7, #19]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d101      	bne.n	800cb3c <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	e03b      	b.n	800cbb4 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800cb3c:	2207      	movs	r2, #7
 800cb3e:	6979      	ldr	r1, [r7, #20]
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 fcfd 	bl	800d540 <dhcp_create_msg>
 800cb46:	4603      	mov	r3, r0
 800cb48:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800cb4a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d128      	bne.n	800cba4 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800cb52:	2204      	movs	r2, #4
 800cb54:	2136      	movs	r1, #54	; 0x36
 800cb56:	6978      	ldr	r0, [r7, #20]
 800cb58:	f000 f886 	bl	800cc68 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7f7 fd8e 	bl	8004680 <lwip_htonl>
 800cb64:	4603      	mov	r3, r0
 800cb66:	4619      	mov	r1, r3
 800cb68:	6978      	ldr	r0, [r7, #20]
 800cb6a:	f000 f919 	bl	800cda0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800cb6e:	6978      	ldr	r0, [r7, #20]
 800cb70:	f000 fe8a 	bl	800d888 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	68da      	ldr	r2, [r3, #12]
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	8a9b      	ldrh	r3, [r3, #20]
 800cb7c:	33f0      	adds	r3, #240	; 0xf0
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	4619      	mov	r1, r3
 800cb82:	4610      	mov	r0, r2
 800cb84:	f7f8 fd90 	bl	80056a8 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800cb88:	4b0c      	ldr	r3, [pc, #48]	; (800cbbc <dhcp_release+0x108>)
 800cb8a:	6818      	ldr	r0, [r3, #0]
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	68d9      	ldr	r1, [r3, #12]
 800cb90:	f107 020c 	add.w	r2, r7, #12
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	2343      	movs	r3, #67	; 0x43
 800cb9a:	f7fe fe15 	bl	800b7c8 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800cb9e:	6978      	ldr	r0, [r7, #20]
 800cba0:	f000 fe30 	bl	800d804 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800cba4:	4b06      	ldr	r3, [pc, #24]	; (800cbc0 <dhcp_release+0x10c>)
 800cba6:	4a06      	ldr	r2, [pc, #24]	; (800cbc0 <dhcp_release+0x10c>)
 800cba8:	4905      	ldr	r1, [pc, #20]	; (800cbc0 <dhcp_release+0x10c>)
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7f8 fa4c 	bl	8005048 <netif_set_addr>

  return result;
 800cbb0:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	2000054c 	.word	0x2000054c
 800cbc0:	08015100 	.word	0x08015100

0800cbc4 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d107      	bne.n	800cbe2 <dhcp_stop+0x1e>
 800cbd2:	4b14      	ldr	r3, [pc, #80]	; (800cc24 <dhcp_stop+0x60>)
 800cbd4:	f240 5242 	movw	r2, #1346	; 0x542
 800cbd8:	4913      	ldr	r1, [pc, #76]	; (800cc28 <dhcp_stop+0x64>)
 800cbda:	4814      	ldr	r0, [pc, #80]	; (800cc2c <dhcp_stop+0x68>)
 800cbdc:	f004 fa06 	bl	8010fec <iprintf>
 800cbe0:	e01d      	b.n	800cc1e <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6a1b      	ldr	r3, [r3, #32]
 800cbe6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d017      	beq.n	800cc1e <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d006      	beq.n	800cc04 <dhcp_stop+0x40>
 800cbf6:	4b0b      	ldr	r3, [pc, #44]	; (800cc24 <dhcp_stop+0x60>)
 800cbf8:	f240 524f 	movw	r2, #1359	; 0x54f
 800cbfc:	490c      	ldr	r1, [pc, #48]	; (800cc30 <dhcp_stop+0x6c>)
 800cbfe:	480b      	ldr	r0, [pc, #44]	; (800cc2c <dhcp_stop+0x68>)
 800cc00:	f004 f9f4 	bl	8010fec <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800cc04:	2100      	movs	r1, #0
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f000 f814 	bl	800cc34 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	7a1b      	ldrb	r3, [r3, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d004      	beq.n	800cc1e <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800cc14:	f7ff f854 	bl	800bcc0 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	721a      	strb	r2, [r3, #8]
    }
  }
}
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	08013734 	.word	0x08013734
 800cc28:	080138a8 	.word	0x080138a8
 800cc2c:	08013794 	.word	0x08013794
 800cc30:	08013860 	.word	0x08013860

0800cc34 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	7a5b      	ldrb	r3, [r3, #9]
 800cc44:	78fa      	ldrb	r2, [r7, #3]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d008      	beq.n	800cc5c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	78fa      	ldrb	r2, [r7, #3]
 800cc4e:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2200      	movs	r2, #0
 800cc54:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	82da      	strh	r2, [r3, #22]
  }
}
 800cc5c:	bf00      	nop
 800cc5e:	370c      	adds	r7, #12
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	460b      	mov	r3, r1
 800cc72:	70fb      	strb	r3, [r7, #3]
 800cc74:	4613      	mov	r3, r2
 800cc76:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	8a9b      	ldrh	r3, [r3, #20]
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	78bb      	ldrb	r3, [r7, #2]
 800cc80:	4413      	add	r3, r2
 800cc82:	3302      	adds	r3, #2
 800cc84:	2b44      	cmp	r3, #68	; 0x44
 800cc86:	d906      	bls.n	800cc96 <dhcp_option+0x2e>
 800cc88:	4b11      	ldr	r3, [pc, #68]	; (800ccd0 <dhcp_option+0x68>)
 800cc8a:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800cc8e:	4911      	ldr	r1, [pc, #68]	; (800ccd4 <dhcp_option+0x6c>)
 800cc90:	4811      	ldr	r0, [pc, #68]	; (800ccd8 <dhcp_option+0x70>)
 800cc92:	f004 f9ab 	bl	8010fec <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	691a      	ldr	r2, [r3, #16]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	8a9b      	ldrh	r3, [r3, #20]
 800cc9e:	1c59      	adds	r1, r3, #1
 800cca0:	b288      	uxth	r0, r1
 800cca2:	6879      	ldr	r1, [r7, #4]
 800cca4:	8288      	strh	r0, [r1, #20]
 800cca6:	4413      	add	r3, r2
 800cca8:	78fa      	ldrb	r2, [r7, #3]
 800ccaa:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	691a      	ldr	r2, [r3, #16]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	8a9b      	ldrh	r3, [r3, #20]
 800ccb6:	1c59      	adds	r1, r3, #1
 800ccb8:	b288      	uxth	r0, r1
 800ccba:	6879      	ldr	r1, [r7, #4]
 800ccbc:	8288      	strh	r0, [r1, #20]
 800ccbe:	4413      	add	r3, r2
 800ccc0:	78ba      	ldrb	r2, [r7, #2]
 800ccc2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800ccc6:	bf00      	nop
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	08013734 	.word	0x08013734
 800ccd4:	080138c4 	.word	0x080138c4
 800ccd8:	08013794 	.word	0x08013794

0800ccdc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	460b      	mov	r3, r1
 800cce6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	8a9b      	ldrh	r3, [r3, #20]
 800ccec:	2b43      	cmp	r3, #67	; 0x43
 800ccee:	d906      	bls.n	800ccfe <dhcp_option_byte+0x22>
 800ccf0:	4b0b      	ldr	r3, [pc, #44]	; (800cd20 <dhcp_option_byte+0x44>)
 800ccf2:	f240 527b 	movw	r2, #1403	; 0x57b
 800ccf6:	490b      	ldr	r1, [pc, #44]	; (800cd24 <dhcp_option_byte+0x48>)
 800ccf8:	480b      	ldr	r0, [pc, #44]	; (800cd28 <dhcp_option_byte+0x4c>)
 800ccfa:	f004 f977 	bl	8010fec <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	691a      	ldr	r2, [r3, #16]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	8a9b      	ldrh	r3, [r3, #20]
 800cd06:	1c59      	adds	r1, r3, #1
 800cd08:	b288      	uxth	r0, r1
 800cd0a:	6879      	ldr	r1, [r7, #4]
 800cd0c:	8288      	strh	r0, [r1, #20]
 800cd0e:	4413      	add	r3, r2
 800cd10:	78fa      	ldrb	r2, [r7, #3]
 800cd12:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800cd16:	bf00      	nop
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	08013734 	.word	0x08013734
 800cd24:	0801390c 	.word	0x0801390c
 800cd28:	08013794 	.word	0x08013794

0800cd2c <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800cd2c:	b590      	push	{r4, r7, lr}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	460b      	mov	r3, r1
 800cd36:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	8a9b      	ldrh	r3, [r3, #20]
 800cd3c:	3302      	adds	r3, #2
 800cd3e:	2b44      	cmp	r3, #68	; 0x44
 800cd40:	d906      	bls.n	800cd50 <dhcp_option_short+0x24>
 800cd42:	4b14      	ldr	r3, [pc, #80]	; (800cd94 <dhcp_option_short+0x68>)
 800cd44:	f240 5282 	movw	r2, #1410	; 0x582
 800cd48:	4913      	ldr	r1, [pc, #76]	; (800cd98 <dhcp_option_short+0x6c>)
 800cd4a:	4814      	ldr	r0, [pc, #80]	; (800cd9c <dhcp_option_short+0x70>)
 800cd4c:	f004 f94e 	bl	8010fec <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800cd50:	887b      	ldrh	r3, [r7, #2]
 800cd52:	0a1b      	lsrs	r3, r3, #8
 800cd54:	b298      	uxth	r0, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	691a      	ldr	r2, [r3, #16]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	8a9b      	ldrh	r3, [r3, #20]
 800cd5e:	1c59      	adds	r1, r3, #1
 800cd60:	b28c      	uxth	r4, r1
 800cd62:	6879      	ldr	r1, [r7, #4]
 800cd64:	828c      	strh	r4, [r1, #20]
 800cd66:	b2c1      	uxtb	r1, r0
 800cd68:	4413      	add	r3, r2
 800cd6a:	460a      	mov	r2, r1
 800cd6c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	691a      	ldr	r2, [r3, #16]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	8a9b      	ldrh	r3, [r3, #20]
 800cd78:	1c59      	adds	r1, r3, #1
 800cd7a:	b288      	uxth	r0, r1
 800cd7c:	6879      	ldr	r1, [r7, #4]
 800cd7e:	8288      	strh	r0, [r1, #20]
 800cd80:	8879      	ldrh	r1, [r7, #2]
 800cd82:	b2c9      	uxtb	r1, r1
 800cd84:	4413      	add	r3, r2
 800cd86:	460a      	mov	r2, r1
 800cd88:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800cd8c:	bf00      	nop
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd90      	pop	{r4, r7, pc}
 800cd94:	08013734 	.word	0x08013734
 800cd98:	08013948 	.word	0x08013948
 800cd9c:	08013794 	.word	0x08013794

0800cda0 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800cda0:	b590      	push	{r4, r7, lr}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	8a9b      	ldrh	r3, [r3, #20]
 800cdae:	3304      	adds	r3, #4
 800cdb0:	2b44      	cmp	r3, #68	; 0x44
 800cdb2:	d906      	bls.n	800cdc2 <dhcp_option_long+0x22>
 800cdb4:	4b22      	ldr	r3, [pc, #136]	; (800ce40 <dhcp_option_long+0xa0>)
 800cdb6:	f240 528a 	movw	r2, #1418	; 0x58a
 800cdba:	4922      	ldr	r1, [pc, #136]	; (800ce44 <dhcp_option_long+0xa4>)
 800cdbc:	4822      	ldr	r0, [pc, #136]	; (800ce48 <dhcp_option_long+0xa8>)
 800cdbe:	f004 f915 	bl	8010fec <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	0e18      	lsrs	r0, r3, #24
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	691a      	ldr	r2, [r3, #16]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	8a9b      	ldrh	r3, [r3, #20]
 800cdce:	1c59      	adds	r1, r3, #1
 800cdd0:	b28c      	uxth	r4, r1
 800cdd2:	6879      	ldr	r1, [r7, #4]
 800cdd4:	828c      	strh	r4, [r1, #20]
 800cdd6:	b2c1      	uxtb	r1, r0
 800cdd8:	4413      	add	r3, r2
 800cdda:	460a      	mov	r2, r1
 800cddc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	0c18      	lsrs	r0, r3, #16
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	691a      	ldr	r2, [r3, #16]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	8a9b      	ldrh	r3, [r3, #20]
 800cdec:	1c59      	adds	r1, r3, #1
 800cdee:	b28c      	uxth	r4, r1
 800cdf0:	6879      	ldr	r1, [r7, #4]
 800cdf2:	828c      	strh	r4, [r1, #20]
 800cdf4:	b2c1      	uxtb	r1, r0
 800cdf6:	4413      	add	r3, r2
 800cdf8:	460a      	mov	r2, r1
 800cdfa:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	0a18      	lsrs	r0, r3, #8
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	691a      	ldr	r2, [r3, #16]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	8a9b      	ldrh	r3, [r3, #20]
 800ce0a:	1c59      	adds	r1, r3, #1
 800ce0c:	b28c      	uxth	r4, r1
 800ce0e:	6879      	ldr	r1, [r7, #4]
 800ce10:	828c      	strh	r4, [r1, #20]
 800ce12:	b2c1      	uxtb	r1, r0
 800ce14:	4413      	add	r3, r2
 800ce16:	460a      	mov	r2, r1
 800ce18:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	691a      	ldr	r2, [r3, #16]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	8a9b      	ldrh	r3, [r3, #20]
 800ce24:	1c59      	adds	r1, r3, #1
 800ce26:	b288      	uxth	r0, r1
 800ce28:	6879      	ldr	r1, [r7, #4]
 800ce2a:	8288      	strh	r0, [r1, #20]
 800ce2c:	6839      	ldr	r1, [r7, #0]
 800ce2e:	b2c9      	uxtb	r1, r1
 800ce30:	4413      	add	r3, r2
 800ce32:	460a      	mov	r2, r1
 800ce34:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800ce38:	bf00      	nop
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd90      	pop	{r4, r7, pc}
 800ce40:	08013734 	.word	0x08013734
 800ce44:	0801398c 	.word	0x0801398c
 800ce48:	08013794 	.word	0x08013794

0800ce4c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b08e      	sub	sp, #56	; 0x38
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800ce56:	2300      	movs	r3, #0
 800ce58:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800ce5e:	2208      	movs	r2, #8
 800ce60:	2100      	movs	r1, #0
 800ce62:	48b3      	ldr	r0, [pc, #716]	; (800d130 <dhcp_parse_reply+0x2e4>)
 800ce64:	f004 f8ba 	bl	8010fdc <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	895b      	ldrh	r3, [r3, #10]
 800ce6c:	2b2b      	cmp	r3, #43	; 0x2b
 800ce6e:	d802      	bhi.n	800ce76 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800ce70:	f06f 0301 	mvn.w	r3, #1
 800ce74:	e26a      	b.n	800d34c <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	685a      	ldr	r2, [r3, #4]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800ce7e:	23f0      	movs	r3, #240	; 0xf0
 800ce80:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	891b      	ldrh	r3, [r3, #8]
 800ce86:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800ce8c:	e00c      	b.n	800cea8 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 800ce8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce90:	895b      	ldrh	r3, [r3, #10]
 800ce92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ce94:	1ad3      	subs	r3, r2, r3
 800ce96:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 800ce98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9a:	895b      	ldrh	r3, [r3, #10]
 800ce9c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ce9e:	1ad3      	subs	r3, r2, r3
 800cea0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 800cea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800cea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d004      	beq.n	800ceb8 <dhcp_parse_reply+0x6c>
 800ceae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb0:	895b      	ldrh	r3, [r3, #10]
 800ceb2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d2ea      	bcs.n	800ce8e <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 800ceb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d102      	bne.n	800cec4 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 800cebe:	f06f 0301 	mvn.w	r3, #1
 800cec2:	e243      	b.n	800d34c <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 800cec4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cec6:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 800cec8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ceca:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 800cecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ced2:	e1fb      	b.n	800d2cc <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 800ced4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ced6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ced8:	4413      	add	r3, r2
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 800cee2:	f04f 33ff 	mov.w	r3, #4294967295
 800cee6:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 800cee8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ceea:	3302      	adds	r3, #2
 800ceec:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800ceee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cef0:	3301      	adds	r3, #1
 800cef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cef4:	8952      	ldrh	r2, [r2, #10]
 800cef6:	4293      	cmp	r3, r2
 800cef8:	da06      	bge.n	800cf08 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 800cefa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cefc:	3301      	adds	r3, #1
 800cefe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf00:	4413      	add	r3, r2
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	77fb      	strb	r3, [r7, #31]
 800cf06:	e00a      	b.n	800cf1e <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800cf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d004      	beq.n	800cf1a <dhcp_parse_reply+0xce>
 800cf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	e000      	b.n	800cf1c <dhcp_parse_reply+0xd0>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800cf1e:	7ffb      	ldrb	r3, [r7, #31]
 800cf20:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 800cf22:	7d7b      	ldrb	r3, [r7, #21]
 800cf24:	2b3b      	cmp	r3, #59	; 0x3b
 800cf26:	f200 8121 	bhi.w	800d16c <dhcp_parse_reply+0x320>
 800cf2a:	a201      	add	r2, pc, #4	; (adr r2, 800cf30 <dhcp_parse_reply+0xe4>)
 800cf2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf30:	0800d021 	.word	0x0800d021
 800cf34:	0800d031 	.word	0x0800d031
 800cf38:	0800d16d 	.word	0x0800d16d
 800cf3c:	0800d051 	.word	0x0800d051
 800cf40:	0800d16d 	.word	0x0800d16d
 800cf44:	0800d16d 	.word	0x0800d16d
 800cf48:	0800d16d 	.word	0x0800d16d
 800cf4c:	0800d16d 	.word	0x0800d16d
 800cf50:	0800d16d 	.word	0x0800d16d
 800cf54:	0800d16d 	.word	0x0800d16d
 800cf58:	0800d16d 	.word	0x0800d16d
 800cf5c:	0800d16d 	.word	0x0800d16d
 800cf60:	0800d16d 	.word	0x0800d16d
 800cf64:	0800d16d 	.word	0x0800d16d
 800cf68:	0800d16d 	.word	0x0800d16d
 800cf6c:	0800d16d 	.word	0x0800d16d
 800cf70:	0800d16d 	.word	0x0800d16d
 800cf74:	0800d16d 	.word	0x0800d16d
 800cf78:	0800d16d 	.word	0x0800d16d
 800cf7c:	0800d16d 	.word	0x0800d16d
 800cf80:	0800d16d 	.word	0x0800d16d
 800cf84:	0800d16d 	.word	0x0800d16d
 800cf88:	0800d16d 	.word	0x0800d16d
 800cf8c:	0800d16d 	.word	0x0800d16d
 800cf90:	0800d16d 	.word	0x0800d16d
 800cf94:	0800d16d 	.word	0x0800d16d
 800cf98:	0800d16d 	.word	0x0800d16d
 800cf9c:	0800d16d 	.word	0x0800d16d
 800cfa0:	0800d16d 	.word	0x0800d16d
 800cfa4:	0800d16d 	.word	0x0800d16d
 800cfa8:	0800d16d 	.word	0x0800d16d
 800cfac:	0800d16d 	.word	0x0800d16d
 800cfb0:	0800d16d 	.word	0x0800d16d
 800cfb4:	0800d16d 	.word	0x0800d16d
 800cfb8:	0800d16d 	.word	0x0800d16d
 800cfbc:	0800d16d 	.word	0x0800d16d
 800cfc0:	0800d16d 	.word	0x0800d16d
 800cfc4:	0800d16d 	.word	0x0800d16d
 800cfc8:	0800d16d 	.word	0x0800d16d
 800cfcc:	0800d16d 	.word	0x0800d16d
 800cfd0:	0800d16d 	.word	0x0800d16d
 800cfd4:	0800d16d 	.word	0x0800d16d
 800cfd8:	0800d16d 	.word	0x0800d16d
 800cfdc:	0800d16d 	.word	0x0800d16d
 800cfe0:	0800d16d 	.word	0x0800d16d
 800cfe4:	0800d16d 	.word	0x0800d16d
 800cfe8:	0800d16d 	.word	0x0800d16d
 800cfec:	0800d16d 	.word	0x0800d16d
 800cff0:	0800d16d 	.word	0x0800d16d
 800cff4:	0800d16d 	.word	0x0800d16d
 800cff8:	0800d16d 	.word	0x0800d16d
 800cffc:	0800d077 	.word	0x0800d077
 800d000:	0800d097 	.word	0x0800d097
 800d004:	0800d0d1 	.word	0x0800d0d1
 800d008:	0800d0f1 	.word	0x0800d0f1
 800d00c:	0800d16d 	.word	0x0800d16d
 800d010:	0800d16d 	.word	0x0800d16d
 800d014:	0800d16d 	.word	0x0800d16d
 800d018:	0800d111 	.word	0x0800d111
 800d01c:	0800d14d 	.word	0x0800d14d
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800d020:	2300      	movs	r3, #0
 800d022:	77fb      	strb	r3, [r7, #31]
 800d024:	7ffb      	ldrb	r3, [r7, #31]
 800d026:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 800d028:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d02a:	3b01      	subs	r3, #1
 800d02c:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 800d02e:	e0a0      	b.n	800d172 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d030:	7ffb      	ldrb	r3, [r7, #31]
 800d032:	2b04      	cmp	r3, #4
 800d034:	d009      	beq.n	800d04a <dhcp_parse_reply+0x1fe>
 800d036:	4b3f      	ldr	r3, [pc, #252]	; (800d134 <dhcp_parse_reply+0x2e8>)
 800d038:	f240 52f6 	movw	r2, #1526	; 0x5f6
 800d03c:	493e      	ldr	r1, [pc, #248]	; (800d138 <dhcp_parse_reply+0x2ec>)
 800d03e:	483f      	ldr	r0, [pc, #252]	; (800d13c <dhcp_parse_reply+0x2f0>)
 800d040:	f003 ffd4 	bl	8010fec <iprintf>
 800d044:	f06f 0305 	mvn.w	r3, #5
 800d048:	e180      	b.n	800d34c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800d04a:	2306      	movs	r3, #6
 800d04c:	61bb      	str	r3, [r7, #24]
        break;
 800d04e:	e090      	b.n	800d172 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800d050:	2304      	movs	r3, #4
 800d052:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800d054:	7ffa      	ldrb	r2, [r7, #31]
 800d056:	7fbb      	ldrb	r3, [r7, #30]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d209      	bcs.n	800d070 <dhcp_parse_reply+0x224>
 800d05c:	4b35      	ldr	r3, [pc, #212]	; (800d134 <dhcp_parse_reply+0x2e8>)
 800d05e:	f240 52fb 	movw	r2, #1531	; 0x5fb
 800d062:	4937      	ldr	r1, [pc, #220]	; (800d140 <dhcp_parse_reply+0x2f4>)
 800d064:	4835      	ldr	r0, [pc, #212]	; (800d13c <dhcp_parse_reply+0x2f0>)
 800d066:	f003 ffc1 	bl	8010fec <iprintf>
 800d06a:	f06f 0305 	mvn.w	r3, #5
 800d06e:	e16d      	b.n	800d34c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800d070:	2307      	movs	r3, #7
 800d072:	61bb      	str	r3, [r7, #24]
        break;
 800d074:	e07d      	b.n	800d172 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d076:	7ffb      	ldrb	r3, [r7, #31]
 800d078:	2b04      	cmp	r3, #4
 800d07a:	d009      	beq.n	800d090 <dhcp_parse_reply+0x244>
 800d07c:	4b2d      	ldr	r3, [pc, #180]	; (800d134 <dhcp_parse_reply+0x2e8>)
 800d07e:	f240 6209 	movw	r2, #1545	; 0x609
 800d082:	492d      	ldr	r1, [pc, #180]	; (800d138 <dhcp_parse_reply+0x2ec>)
 800d084:	482d      	ldr	r0, [pc, #180]	; (800d13c <dhcp_parse_reply+0x2f0>)
 800d086:	f003 ffb1 	bl	8010fec <iprintf>
 800d08a:	f06f 0305 	mvn.w	r3, #5
 800d08e:	e15d      	b.n	800d34c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800d090:	2303      	movs	r3, #3
 800d092:	61bb      	str	r3, [r7, #24]
        break;
 800d094:	e06d      	b.n	800d172 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d096:	7ffb      	ldrb	r3, [r7, #31]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d009      	beq.n	800d0b0 <dhcp_parse_reply+0x264>
 800d09c:	4b25      	ldr	r3, [pc, #148]	; (800d134 <dhcp_parse_reply+0x2e8>)
 800d09e:	f240 6217 	movw	r2, #1559	; 0x617
 800d0a2:	4928      	ldr	r1, [pc, #160]	; (800d144 <dhcp_parse_reply+0x2f8>)
 800d0a4:	4825      	ldr	r0, [pc, #148]	; (800d13c <dhcp_parse_reply+0x2f0>)
 800d0a6:	f003 ffa1 	bl	8010fec <iprintf>
 800d0aa:	f06f 0305 	mvn.w	r3, #5
 800d0ae:	e14d      	b.n	800d34c <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800d0b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d0b2:	2bf0      	cmp	r3, #240	; 0xf0
 800d0b4:	d009      	beq.n	800d0ca <dhcp_parse_reply+0x27e>
 800d0b6:	4b1f      	ldr	r3, [pc, #124]	; (800d134 <dhcp_parse_reply+0x2e8>)
 800d0b8:	f240 6219 	movw	r2, #1561	; 0x619
 800d0bc:	4922      	ldr	r1, [pc, #136]	; (800d148 <dhcp_parse_reply+0x2fc>)
 800d0be:	481f      	ldr	r0, [pc, #124]	; (800d13c <dhcp_parse_reply+0x2f0>)
 800d0c0:	f003 ff94 	bl	8010fec <iprintf>
 800d0c4:	f06f 0305 	mvn.w	r3, #5
 800d0c8:	e140      	b.n	800d34c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	61bb      	str	r3, [r7, #24]
        break;
 800d0ce:	e050      	b.n	800d172 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d0d0:	7ffb      	ldrb	r3, [r7, #31]
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d009      	beq.n	800d0ea <dhcp_parse_reply+0x29e>
 800d0d6:	4b17      	ldr	r3, [pc, #92]	; (800d134 <dhcp_parse_reply+0x2e8>)
 800d0d8:	f240 621d 	movw	r2, #1565	; 0x61d
 800d0dc:	4919      	ldr	r1, [pc, #100]	; (800d144 <dhcp_parse_reply+0x2f8>)
 800d0de:	4817      	ldr	r0, [pc, #92]	; (800d13c <dhcp_parse_reply+0x2f0>)
 800d0e0:	f003 ff84 	bl	8010fec <iprintf>
 800d0e4:	f06f 0305 	mvn.w	r3, #5
 800d0e8:	e130      	b.n	800d34c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	61bb      	str	r3, [r7, #24]
        break;
 800d0ee:	e040      	b.n	800d172 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d0f0:	7ffb      	ldrb	r3, [r7, #31]
 800d0f2:	2b04      	cmp	r3, #4
 800d0f4:	d009      	beq.n	800d10a <dhcp_parse_reply+0x2be>
 800d0f6:	4b0f      	ldr	r3, [pc, #60]	; (800d134 <dhcp_parse_reply+0x2e8>)
 800d0f8:	f240 6221 	movw	r2, #1569	; 0x621
 800d0fc:	490e      	ldr	r1, [pc, #56]	; (800d138 <dhcp_parse_reply+0x2ec>)
 800d0fe:	480f      	ldr	r0, [pc, #60]	; (800d13c <dhcp_parse_reply+0x2f0>)
 800d100:	f003 ff74 	bl	8010fec <iprintf>
 800d104:	f06f 0305 	mvn.w	r3, #5
 800d108:	e120      	b.n	800d34c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800d10a:	2302      	movs	r3, #2
 800d10c:	61bb      	str	r3, [r7, #24]
        break;
 800d10e:	e030      	b.n	800d172 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d110:	7ffb      	ldrb	r3, [r7, #31]
 800d112:	2b04      	cmp	r3, #4
 800d114:	d009      	beq.n	800d12a <dhcp_parse_reply+0x2de>
 800d116:	4b07      	ldr	r3, [pc, #28]	; (800d134 <dhcp_parse_reply+0x2e8>)
 800d118:	f240 6225 	movw	r2, #1573	; 0x625
 800d11c:	4906      	ldr	r1, [pc, #24]	; (800d138 <dhcp_parse_reply+0x2ec>)
 800d11e:	4807      	ldr	r0, [pc, #28]	; (800d13c <dhcp_parse_reply+0x2f0>)
 800d120:	f003 ff64 	bl	8010fec <iprintf>
 800d124:	f06f 0305 	mvn.w	r3, #5
 800d128:	e110      	b.n	800d34c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 800d12a:	2304      	movs	r3, #4
 800d12c:	61bb      	str	r3, [r7, #24]
        break;
 800d12e:	e020      	b.n	800d172 <dhcp_parse_reply+0x326>
 800d130:	20003be0 	.word	0x20003be0
 800d134:	08013734 	.word	0x08013734
 800d138:	080139cc 	.word	0x080139cc
 800d13c:	08013794 	.word	0x08013794
 800d140:	080139d8 	.word	0x080139d8
 800d144:	080139ec 	.word	0x080139ec
 800d148:	080139f8 	.word	0x080139f8
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d14c:	7ffb      	ldrb	r3, [r7, #31]
 800d14e:	2b04      	cmp	r3, #4
 800d150:	d009      	beq.n	800d166 <dhcp_parse_reply+0x31a>
 800d152:	4b80      	ldr	r3, [pc, #512]	; (800d354 <dhcp_parse_reply+0x508>)
 800d154:	f240 6229 	movw	r2, #1577	; 0x629
 800d158:	497f      	ldr	r1, [pc, #508]	; (800d358 <dhcp_parse_reply+0x50c>)
 800d15a:	4880      	ldr	r0, [pc, #512]	; (800d35c <dhcp_parse_reply+0x510>)
 800d15c:	f003 ff46 	bl	8010fec <iprintf>
 800d160:	f06f 0305 	mvn.w	r3, #5
 800d164:	e0f2      	b.n	800d34c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 800d166:	2305      	movs	r3, #5
 800d168:	61bb      	str	r3, [r7, #24]
        break;
 800d16a:	e002      	b.n	800d172 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 800d16c:	2300      	movs	r3, #0
 800d16e:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 800d170:	bf00      	nop
    }
    offset += len + 2;
 800d172:	7ffb      	ldrb	r3, [r7, #31]
 800d174:	b29a      	uxth	r2, r3
 800d176:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d178:	4413      	add	r3, r2
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	3302      	adds	r3, #2
 800d17e:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 800d180:	7fbb      	ldrb	r3, [r7, #30]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d079      	beq.n	800d27a <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 800d186:	2300      	movs	r3, #0
 800d188:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	db02      	blt.n	800d196 <dhcp_parse_reply+0x34a>
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	2b07      	cmp	r3, #7
 800d194:	dd06      	ble.n	800d1a4 <dhcp_parse_reply+0x358>
 800d196:	4b6f      	ldr	r3, [pc, #444]	; (800d354 <dhcp_parse_reply+0x508>)
 800d198:	f240 6236 	movw	r2, #1590	; 0x636
 800d19c:	4970      	ldr	r1, [pc, #448]	; (800d360 <dhcp_parse_reply+0x514>)
 800d19e:	486f      	ldr	r0, [pc, #444]	; (800d35c <dhcp_parse_reply+0x510>)
 800d1a0:	f003 ff24 	bl	8010fec <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800d1a4:	4a6f      	ldr	r2, [pc, #444]	; (800d364 <dhcp_parse_reply+0x518>)
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	4413      	add	r3, r2
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d164      	bne.n	800d27a <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 800d1b0:	7fbb      	ldrb	r3, [r7, #30]
 800d1b2:	2b04      	cmp	r3, #4
 800d1b4:	bf28      	it	cs
 800d1b6:	2304      	movcs	r3, #4
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800d1bc:	8afb      	ldrh	r3, [r7, #22]
 800d1be:	8a7a      	ldrh	r2, [r7, #18]
 800d1c0:	f107 0108 	add.w	r1, r7, #8
 800d1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1c6:	f7f8 fde3 	bl	8005d90 <pbuf_copy_partial>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	8a7b      	ldrh	r3, [r7, #18]
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d002      	beq.n	800d1da <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 800d1d4:	f06f 0301 	mvn.w	r3, #1
 800d1d8:	e0b8      	b.n	800d34c <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 800d1da:	7fbb      	ldrb	r3, [r7, #30]
 800d1dc:	2b04      	cmp	r3, #4
 800d1de:	d927      	bls.n	800d230 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800d1e0:	7fbb      	ldrb	r3, [r7, #30]
 800d1e2:	f003 0303 	and.w	r3, r3, #3
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d009      	beq.n	800d200 <dhcp_parse_reply+0x3b4>
 800d1ec:	4b59      	ldr	r3, [pc, #356]	; (800d354 <dhcp_parse_reply+0x508>)
 800d1ee:	f240 623e 	movw	r2, #1598	; 0x63e
 800d1f2:	495d      	ldr	r1, [pc, #372]	; (800d368 <dhcp_parse_reply+0x51c>)
 800d1f4:	4859      	ldr	r0, [pc, #356]	; (800d35c <dhcp_parse_reply+0x510>)
 800d1f6:	f003 fef9 	bl	8010fec <iprintf>
 800d1fa:	f06f 0305 	mvn.w	r3, #5
 800d1fe:	e0a5      	b.n	800d34c <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 800d200:	4a58      	ldr	r2, [pc, #352]	; (800d364 <dhcp_parse_reply+0x518>)
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	4413      	add	r3, r2
 800d206:	2201      	movs	r2, #1
 800d208:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7f7 fa37 	bl	8004680 <lwip_htonl>
 800d212:	4601      	mov	r1, r0
 800d214:	4a55      	ldr	r2, [pc, #340]	; (800d36c <dhcp_parse_reply+0x520>)
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 800d21c:	7fbb      	ldrb	r3, [r7, #30]
 800d21e:	3b04      	subs	r3, #4
 800d220:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 800d222:	8afb      	ldrh	r3, [r7, #22]
 800d224:	3304      	adds	r3, #4
 800d226:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	3301      	adds	r3, #1
 800d22c:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 800d22e:	e7ac      	b.n	800d18a <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 800d230:	7fbb      	ldrb	r3, [r7, #30]
 800d232:	2b04      	cmp	r3, #4
 800d234:	d106      	bne.n	800d244 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	4618      	mov	r0, r3
 800d23a:	f7f7 fa21 	bl	8004680 <lwip_htonl>
 800d23e:	4603      	mov	r3, r0
 800d240:	60bb      	str	r3, [r7, #8]
 800d242:	e010      	b.n	800d266 <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800d244:	7fbb      	ldrb	r3, [r7, #30]
 800d246:	2b01      	cmp	r3, #1
 800d248:	d009      	beq.n	800d25e <dhcp_parse_reply+0x412>
 800d24a:	4b42      	ldr	r3, [pc, #264]	; (800d354 <dhcp_parse_reply+0x508>)
 800d24c:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 800d250:	4947      	ldr	r1, [pc, #284]	; (800d370 <dhcp_parse_reply+0x524>)
 800d252:	4842      	ldr	r0, [pc, #264]	; (800d35c <dhcp_parse_reply+0x510>)
 800d254:	f003 feca 	bl	8010fec <iprintf>
 800d258:	f06f 0305 	mvn.w	r3, #5
 800d25c:	e076      	b.n	800d34c <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 800d25e:	f107 0308 	add.w	r3, r7, #8
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 800d266:	4a3f      	ldr	r2, [pc, #252]	; (800d364 <dhcp_parse_reply+0x518>)
 800d268:	69bb      	ldr	r3, [r7, #24]
 800d26a:	4413      	add	r3, r2
 800d26c:	2201      	movs	r2, #1
 800d26e:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800d270:	68ba      	ldr	r2, [r7, #8]
 800d272:	493e      	ldr	r1, [pc, #248]	; (800d36c <dhcp_parse_reply+0x520>)
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 800d27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27c:	895b      	ldrh	r3, [r3, #10]
 800d27e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800d280:	429a      	cmp	r2, r3
 800d282:	d323      	bcc.n	800d2cc <dhcp_parse_reply+0x480>
      offset -= q->len;
 800d284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d286:	895b      	ldrh	r3, [r3, #10]
 800d288:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 800d28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d290:	895b      	ldrh	r3, [r3, #10]
 800d292:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800d294:	1ad3      	subs	r3, r2, r3
 800d296:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 800d298:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800d29a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d223      	bcs.n	800d2e8 <dhcp_parse_reply+0x49c>
 800d2a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d020      	beq.n	800d2e8 <dhcp_parse_reply+0x49c>
        q = q->next;
 800d2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800d2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d109      	bne.n	800d2c6 <dhcp_parse_reply+0x47a>
 800d2b2:	4b28      	ldr	r3, [pc, #160]	; (800d354 <dhcp_parse_reply+0x508>)
 800d2b4:	f240 6254 	movw	r2, #1620	; 0x654
 800d2b8:	492e      	ldr	r1, [pc, #184]	; (800d374 <dhcp_parse_reply+0x528>)
 800d2ba:	4828      	ldr	r0, [pc, #160]	; (800d35c <dhcp_parse_reply+0x510>)
 800d2bc:	f003 fe96 	bl	8010fec <iprintf>
 800d2c0:	f06f 0305 	mvn.w	r3, #5
 800d2c4:	e042      	b.n	800d34c <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 800d2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800d2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00a      	beq.n	800d2e8 <dhcp_parse_reply+0x49c>
 800d2d2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800d2d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d206      	bcs.n	800d2e8 <dhcp_parse_reply+0x49c>
 800d2da:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d2dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2de:	4413      	add	r3, r2
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2bff      	cmp	r3, #255	; 0xff
 800d2e4:	f47f adf6 	bne.w	800ced4 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800d2e8:	4b1e      	ldr	r3, [pc, #120]	; (800d364 <dhcp_parse_reply+0x518>)
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d018      	beq.n	800d322 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800d2f0:	4b1e      	ldr	r3, [pc, #120]	; (800d36c <dhcp_parse_reply+0x520>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800d2f6:	4b1b      	ldr	r3, [pc, #108]	; (800d364 <dhcp_parse_reply+0x518>)
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d102      	bne.n	800d308 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 800d302:	2301      	movs	r3, #1
 800d304:	627b      	str	r3, [r7, #36]	; 0x24
 800d306:	e00c      	b.n	800d322 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	d102      	bne.n	800d314 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 800d30e:	2301      	movs	r3, #1
 800d310:	623b      	str	r3, [r7, #32]
 800d312:	e006      	b.n	800d322 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2b03      	cmp	r3, #3
 800d318:	d103      	bne.n	800d322 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 800d31a:	2301      	movs	r3, #1
 800d31c:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 800d31e:	2301      	movs	r3, #1
 800d320:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 800d322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d324:	2b00      	cmp	r3, #0
 800d326:	d006      	beq.n	800d336 <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 800d32c:	236c      	movs	r3, #108	; 0x6c
 800d32e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800d330:	23ec      	movs	r3, #236	; 0xec
 800d332:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800d334:	e5a8      	b.n	800ce88 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 800d336:	6a3b      	ldr	r3, [r7, #32]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d006      	beq.n	800d34a <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 800d33c:	2300      	movs	r3, #0
 800d33e:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 800d340:	232c      	movs	r3, #44	; 0x2c
 800d342:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800d344:	236c      	movs	r3, #108	; 0x6c
 800d346:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800d348:	e59e      	b.n	800ce88 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 800d34a:	2300      	movs	r3, #0
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3738      	adds	r7, #56	; 0x38
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	08013734 	.word	0x08013734
 800d358:	080139cc 	.word	0x080139cc
 800d35c:	08013794 	.word	0x08013794
 800d360:	08013a10 	.word	0x08013a10
 800d364:	20003be0 	.word	0x20003be0
 800d368:	08013a24 	.word	0x08013a24
 800d36c:	20003be8 	.word	0x20003be8
 800d370:	08013a3c 	.word	0x08013a3c
 800d374:	08013a50 	.word	0x08013a50

0800d378 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b08a      	sub	sp, #40	; 0x28
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
 800d384:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800d386:	4b68      	ldr	r3, [pc, #416]	; (800d528 <dhcp_recv+0x1b0>)
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d38c:	6a3b      	ldr	r3, [r7, #32]
 800d38e:	6a1b      	ldr	r3, [r3, #32]
 800d390:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	f000 80a9 	beq.w	800d4f2 <dhcp_recv+0x17a>
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	7a1b      	ldrb	r3, [r3, #8]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f000 80a4 	beq.w	800d4f2 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d006      	beq.n	800d3c0 <dhcp_recv+0x48>
 800d3b2:	4b5e      	ldr	r3, [pc, #376]	; (800d52c <dhcp_recv+0x1b4>)
 800d3b4:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 800d3b8:	495d      	ldr	r1, [pc, #372]	; (800d530 <dhcp_recv+0x1b8>)
 800d3ba:	485e      	ldr	r0, [pc, #376]	; (800d534 <dhcp_recv+0x1bc>)
 800d3bc:	f003 fe16 	bl	8010fec <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	895b      	ldrh	r3, [r3, #10]
 800d3c4:	2b2b      	cmp	r3, #43	; 0x2b
 800d3c6:	f240 8096 	bls.w	800d4f6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	f040 8093 	bne.w	800d4fa <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d3da:	e012      	b.n	800d402 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800d3dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3e0:	6a3a      	ldr	r2, [r7, #32]
 800d3e2:	4413      	add	r3, r2
 800d3e4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800d3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3ec:	69b9      	ldr	r1, [r7, #24]
 800d3ee:	440b      	add	r3, r1
 800d3f0:	7f1b      	ldrb	r3, [r3, #28]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	f040 8083 	bne.w	800d4fe <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800d3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d402:	6a3b      	ldr	r3, [r7, #32]
 800d404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d408:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d207      	bcs.n	800d420 <dhcp_recv+0xa8>
 800d410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d414:	2b05      	cmp	r3, #5
 800d416:	d803      	bhi.n	800d420 <dhcp_recv+0xa8>
 800d418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d41c:	2b0f      	cmp	r3, #15
 800d41e:	d9dd      	bls.n	800d3dc <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800d420:	69bb      	ldr	r3, [r7, #24]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	4618      	mov	r0, r3
 800d426:	f7f7 f92b 	bl	8004680 <lwip_htonl>
 800d42a:	4602      	mov	r2, r0
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	429a      	cmp	r2, r3
 800d432:	d166      	bne.n	800d502 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 800d434:	6879      	ldr	r1, [r7, #4]
 800d436:	69f8      	ldr	r0, [r7, #28]
 800d438:	f7ff fd08 	bl	800ce4c <dhcp_parse_reply>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d161      	bne.n	800d506 <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800d442:	4b3d      	ldr	r3, [pc, #244]	; (800d538 <dhcp_recv+0x1c0>)
 800d444:	785b      	ldrb	r3, [r3, #1]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d05f      	beq.n	800d50a <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800d44a:	4b3c      	ldr	r3, [pc, #240]	; (800d53c <dhcp_recv+0x1c4>)
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800d450:	7dfb      	ldrb	r3, [r7, #23]
 800d452:	2b05      	cmp	r3, #5
 800d454:	d128      	bne.n	800d4a8 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	7a5b      	ldrb	r3, [r3, #9]
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d111      	bne.n	800d482 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 800d45e:	6a38      	ldr	r0, [r7, #32]
 800d460:	f7fe fea0 	bl	800c1a4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800d464:	6a3b      	ldr	r3, [r7, #32]
 800d466:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d46a:	f003 0308 	and.w	r3, r3, #8
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d003      	beq.n	800d47a <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800d472:	6a38      	ldr	r0, [r7, #32]
 800d474:	f7fe fc68 	bl	800bd48 <dhcp_check>
 800d478:	e048      	b.n	800d50c <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800d47a:	6a38      	ldr	r0, [r7, #32]
 800d47c:	f7ff f8a0 	bl	800c5c0 <dhcp_bind>
 800d480:	e044      	b.n	800d50c <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800d482:	69fb      	ldr	r3, [r7, #28]
 800d484:	7a5b      	ldrb	r3, [r3, #9]
 800d486:	2b03      	cmp	r3, #3
 800d488:	d007      	beq.n	800d49a <dhcp_recv+0x122>
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	7a5b      	ldrb	r3, [r3, #9]
 800d48e:	2b04      	cmp	r3, #4
 800d490:	d003      	beq.n	800d49a <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800d496:	2b05      	cmp	r3, #5
 800d498:	d138      	bne.n	800d50c <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 800d49a:	6a38      	ldr	r0, [r7, #32]
 800d49c:	f7fe fe82 	bl	800c1a4 <dhcp_handle_ack>
      dhcp_bind(netif);
 800d4a0:	6a38      	ldr	r0, [r7, #32]
 800d4a2:	f7ff f88d 	bl	800c5c0 <dhcp_bind>
 800d4a6:	e031      	b.n	800d50c <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800d4a8:	7dfb      	ldrb	r3, [r7, #23]
 800d4aa:	2b06      	cmp	r3, #6
 800d4ac:	d113      	bne.n	800d4d6 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 800d4b2:	2b03      	cmp	r3, #3
 800d4b4:	d00b      	beq.n	800d4ce <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	7a5b      	ldrb	r3, [r3, #9]
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d007      	beq.n	800d4ce <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800d4c2:	2b04      	cmp	r3, #4
 800d4c4:	d003      	beq.n	800d4ce <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	7a5b      	ldrb	r3, [r3, #9]
 800d4ca:	2b05      	cmp	r3, #5
 800d4cc:	d103      	bne.n	800d4d6 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800d4ce:	6a38      	ldr	r0, [r7, #32]
 800d4d0:	f7fe fc20 	bl	800bd14 <dhcp_handle_nak>
 800d4d4:	e01a      	b.n	800d50c <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800d4d6:	7dfb      	ldrb	r3, [r7, #23]
 800d4d8:	2b02      	cmp	r3, #2
 800d4da:	d10a      	bne.n	800d4f2 <dhcp_recv+0x17a>
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	7a5b      	ldrb	r3, [r3, #9]
 800d4e0:	2b06      	cmp	r3, #6
 800d4e2:	d106      	bne.n	800d4f2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 800d4ea:	6a38      	ldr	r0, [r7, #32]
 800d4ec:	f7fe fc60 	bl	800bdb0 <dhcp_handle_offer>
 800d4f0:	e00c      	b.n	800d50c <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 800d4f2:	bf00      	nop
 800d4f4:	e00a      	b.n	800d50c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800d4f6:	bf00      	nop
 800d4f8:	e008      	b.n	800d50c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800d4fa:	bf00      	nop
 800d4fc:	e006      	b.n	800d50c <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 800d4fe:	bf00      	nop
 800d500:	e004      	b.n	800d50c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800d502:	bf00      	nop
 800d504:	e002      	b.n	800d50c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800d506:	bf00      	nop
 800d508:	e000      	b.n	800d50c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800d50a:	bf00      	nop
  if (dhcp != NULL) {
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d002      	beq.n	800d518 <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	2200      	movs	r2, #0
 800d516:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f7f8 fa39 	bl	8005990 <pbuf_free>
}
 800d51e:	bf00      	nop
 800d520:	3728      	adds	r7, #40	; 0x28
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	20000674 	.word	0x20000674
 800d52c:	08013734 	.word	0x08013734
 800d530:	08013860 	.word	0x08013860
 800d534:	08013794 	.word	0x08013794
 800d538:	20003be0 	.word	0x20003be0
 800d53c:	20003be8 	.word	0x20003be8

0800d540 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800d540:	b590      	push	{r4, r7, lr}
 800d542:	b087      	sub	sp, #28
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	4613      	mov	r3, r2
 800d54c:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d109      	bne.n	800d568 <dhcp_create_msg+0x28>
 800d554:	4ba3      	ldr	r3, [pc, #652]	; (800d7e4 <dhcp_create_msg+0x2a4>)
 800d556:	f240 721d 	movw	r2, #1821	; 0x71d
 800d55a:	49a3      	ldr	r1, [pc, #652]	; (800d7e8 <dhcp_create_msg+0x2a8>)
 800d55c:	48a3      	ldr	r0, [pc, #652]	; (800d7ec <dhcp_create_msg+0x2ac>)
 800d55e:	f003 fd45 	bl	8010fec <iprintf>
 800d562:	f06f 030f 	mvn.w	r3, #15
 800d566:	e138      	b.n	800d7da <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d109      	bne.n	800d582 <dhcp_create_msg+0x42>
 800d56e:	4b9d      	ldr	r3, [pc, #628]	; (800d7e4 <dhcp_create_msg+0x2a4>)
 800d570:	f240 721e 	movw	r2, #1822	; 0x71e
 800d574:	499e      	ldr	r1, [pc, #632]	; (800d7f0 <dhcp_create_msg+0x2b0>)
 800d576:	489d      	ldr	r0, [pc, #628]	; (800d7ec <dhcp_create_msg+0x2ac>)
 800d578:	f003 fd38 	bl	8010fec <iprintf>
 800d57c:	f06f 0305 	mvn.w	r3, #5
 800d580:	e12b      	b.n	800d7da <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d006      	beq.n	800d598 <dhcp_create_msg+0x58>
 800d58a:	4b96      	ldr	r3, [pc, #600]	; (800d7e4 <dhcp_create_msg+0x2a4>)
 800d58c:	f240 721f 	movw	r2, #1823	; 0x71f
 800d590:	4998      	ldr	r1, [pc, #608]	; (800d7f4 <dhcp_create_msg+0x2b4>)
 800d592:	4896      	ldr	r0, [pc, #600]	; (800d7ec <dhcp_create_msg+0x2ac>)
 800d594:	f003 fd2a 	bl	8010fec <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	691b      	ldr	r3, [r3, #16]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d006      	beq.n	800d5ae <dhcp_create_msg+0x6e>
 800d5a0:	4b90      	ldr	r3, [pc, #576]	; (800d7e4 <dhcp_create_msg+0x2a4>)
 800d5a2:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800d5a6:	4994      	ldr	r1, [pc, #592]	; (800d7f8 <dhcp_create_msg+0x2b8>)
 800d5a8:	4890      	ldr	r0, [pc, #576]	; (800d7ec <dhcp_create_msg+0x2ac>)
 800d5aa:	f003 fd1f 	bl	8010fec <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f44f 719a 	mov.w	r1, #308	; 0x134
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	f7f7 fe79 	bl	80052ac <pbuf_alloc>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d102      	bne.n	800d5ce <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 800d5c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d5cc:	e105      	b.n	800d7da <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	895b      	ldrh	r3, [r3, #10]
 800d5d4:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800d5d8:	d206      	bcs.n	800d5e8 <dhcp_create_msg+0xa8>
 800d5da:	4b82      	ldr	r3, [pc, #520]	; (800d7e4 <dhcp_create_msg+0x2a4>)
 800d5dc:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800d5e0:	4986      	ldr	r1, [pc, #536]	; (800d7fc <dhcp_create_msg+0x2bc>)
 800d5e2:	4882      	ldr	r0, [pc, #520]	; (800d7ec <dhcp_create_msg+0x2ac>)
 800d5e4:	f003 fd02 	bl	8010fec <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800d5e8:	79fb      	ldrb	r3, [r7, #7]
 800d5ea:	2b03      	cmp	r3, #3
 800d5ec:	d103      	bne.n	800d5f6 <dhcp_create_msg+0xb6>
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	7a5b      	ldrb	r3, [r3, #9]
 800d5f2:	2b03      	cmp	r3, #3
 800d5f4:	d10d      	bne.n	800d612 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	7a9b      	ldrb	r3, [r3, #10]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d105      	bne.n	800d60a <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800d5fe:	f003 fd0d 	bl	801101c <rand>
 800d602:	4603      	mov	r3, r0
 800d604:	461a      	mov	r2, r3
 800d606:	4b7e      	ldr	r3, [pc, #504]	; (800d800 <dhcp_create_msg+0x2c0>)
 800d608:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800d60a:	4b7d      	ldr	r3, [pc, #500]	; (800d800 <dhcp_create_msg+0x2c0>)
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	685a      	ldr	r2, [r3, #4]
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	691b      	ldr	r3, [r3, #16]
 800d620:	2201      	movs	r2, #1
 800d622:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	2201      	movs	r2, #1
 800d62a:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	68fa      	ldr	r2, [r7, #12]
 800d632:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800d636:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	2200      	movs	r2, #0
 800d63e:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	681a      	ldr	r2, [r3, #0]
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	691c      	ldr	r4, [r3, #16]
 800d648:	4610      	mov	r0, r2
 800d64a:	f7f7 f819 	bl	8004680 <lwip_htonl>
 800d64e:	4603      	mov	r3, r0
 800d650:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	691b      	ldr	r3, [r3, #16]
 800d656:	2200      	movs	r2, #0
 800d658:	721a      	strb	r2, [r3, #8]
 800d65a:	2200      	movs	r2, #0
 800d65c:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	691b      	ldr	r3, [r3, #16]
 800d662:	2200      	movs	r2, #0
 800d664:	729a      	strb	r2, [r3, #10]
 800d666:	2200      	movs	r2, #0
 800d668:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	691b      	ldr	r3, [r3, #16]
 800d66e:	2200      	movs	r2, #0
 800d670:	731a      	strb	r2, [r3, #12]
 800d672:	2200      	movs	r2, #0
 800d674:	735a      	strb	r2, [r3, #13]
 800d676:	2200      	movs	r2, #0
 800d678:	739a      	strb	r2, [r3, #14]
 800d67a:	2200      	movs	r2, #0
 800d67c:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800d67e:	79fb      	ldrb	r3, [r7, #7]
 800d680:	2b08      	cmp	r3, #8
 800d682:	d010      	beq.n	800d6a6 <dhcp_create_msg+0x166>
 800d684:	79fb      	ldrb	r3, [r7, #7]
 800d686:	2b04      	cmp	r3, #4
 800d688:	d00d      	beq.n	800d6a6 <dhcp_create_msg+0x166>
 800d68a:	79fb      	ldrb	r3, [r7, #7]
 800d68c:	2b07      	cmp	r3, #7
 800d68e:	d00a      	beq.n	800d6a6 <dhcp_create_msg+0x166>
 800d690:	79fb      	ldrb	r3, [r7, #7]
 800d692:	2b03      	cmp	r3, #3
 800d694:	d10d      	bne.n	800d6b2 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800d69a:	2b05      	cmp	r3, #5
 800d69c:	d003      	beq.n	800d6a6 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	7a5b      	ldrb	r3, [r3, #9]
 800d6a2:	2b04      	cmp	r3, #4
 800d6a4:	d105      	bne.n	800d6b2 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	1d1a      	adds	r2, r3, #4
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	691b      	ldr	r3, [r3, #16]
 800d6ae:	6812      	ldr	r2, [r2, #0]
 800d6b0:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	691b      	ldr	r3, [r3, #16]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	741a      	strb	r2, [r3, #16]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	745a      	strb	r2, [r3, #17]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	749a      	strb	r2, [r3, #18]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	751a      	strb	r2, [r3, #20]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	755a      	strb	r2, [r3, #21]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	759a      	strb	r2, [r3, #22]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	691b      	ldr	r3, [r3, #16]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	761a      	strb	r2, [r3, #24]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	765a      	strb	r2, [r3, #25]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	769a      	strb	r2, [r3, #26]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	82fb      	strh	r3, [r7, #22]
 800d6f2:	e019      	b.n	800d728 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	8afa      	ldrh	r2, [r7, #22]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d208      	bcs.n	800d714 <dhcp_create_msg+0x1d4>
 800d702:	8afb      	ldrh	r3, [r7, #22]
 800d704:	2b05      	cmp	r3, #5
 800d706:	d805      	bhi.n	800d714 <dhcp_create_msg+0x1d4>
 800d708:	8afb      	ldrh	r3, [r7, #22]
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	4413      	add	r3, r2
 800d70e:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 800d712:	e000      	b.n	800d716 <dhcp_create_msg+0x1d6>
 800d714:	2100      	movs	r1, #0
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	691a      	ldr	r2, [r3, #16]
 800d71a:	8afb      	ldrh	r3, [r7, #22]
 800d71c:	4413      	add	r3, r2
 800d71e:	460a      	mov	r2, r1
 800d720:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800d722:	8afb      	ldrh	r3, [r7, #22]
 800d724:	3301      	adds	r3, #1
 800d726:	82fb      	strh	r3, [r7, #22]
 800d728:	8afb      	ldrh	r3, [r7, #22]
 800d72a:	2b0f      	cmp	r3, #15
 800d72c:	d9e2      	bls.n	800d6f4 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800d72e:	2300      	movs	r3, #0
 800d730:	82fb      	strh	r3, [r7, #22]
 800d732:	e009      	b.n	800d748 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	691a      	ldr	r2, [r3, #16]
 800d738:	8afb      	ldrh	r3, [r7, #22]
 800d73a:	4413      	add	r3, r2
 800d73c:	2200      	movs	r2, #0
 800d73e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800d742:	8afb      	ldrh	r3, [r7, #22]
 800d744:	3301      	adds	r3, #1
 800d746:	82fb      	strh	r3, [r7, #22]
 800d748:	8afb      	ldrh	r3, [r7, #22]
 800d74a:	2b3f      	cmp	r3, #63	; 0x3f
 800d74c:	d9f2      	bls.n	800d734 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800d74e:	2300      	movs	r3, #0
 800d750:	82fb      	strh	r3, [r7, #22]
 800d752:	e009      	b.n	800d768 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	691a      	ldr	r2, [r3, #16]
 800d758:	8afb      	ldrh	r3, [r7, #22]
 800d75a:	4413      	add	r3, r2
 800d75c:	2200      	movs	r2, #0
 800d75e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800d762:	8afb      	ldrh	r3, [r7, #22]
 800d764:	3301      	adds	r3, #1
 800d766:	82fb      	strh	r3, [r7, #22]
 800d768:	8afb      	ldrh	r3, [r7, #22]
 800d76a:	2b7f      	cmp	r3, #127	; 0x7f
 800d76c:	d9f2      	bls.n	800d754 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	691b      	ldr	r3, [r3, #16]
 800d772:	2200      	movs	r2, #0
 800d774:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d778:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800d77c:	2200      	movs	r2, #0
 800d77e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800d782:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800d786:	2200      	movs	r2, #0
 800d788:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800d78c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800d790:	2200      	movs	r2, #0
 800d792:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d796:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	2200      	movs	r2, #0
 800d79e:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	82fb      	strh	r3, [r7, #22]
 800d7a4:	e00b      	b.n	800d7be <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	691a      	ldr	r2, [r3, #16]
 800d7aa:	8afb      	ldrh	r3, [r7, #22]
 800d7ac:	8af9      	ldrh	r1, [r7, #22]
 800d7ae:	b2c9      	uxtb	r1, r1
 800d7b0:	4413      	add	r3, r2
 800d7b2:	460a      	mov	r2, r1
 800d7b4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800d7b8:	8afb      	ldrh	r3, [r7, #22]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	82fb      	strh	r3, [r7, #22]
 800d7be:	8afb      	ldrh	r3, [r7, #22]
 800d7c0:	2b43      	cmp	r3, #67	; 0x43
 800d7c2:	d9f0      	bls.n	800d7a6 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	2135      	movs	r1, #53	; 0x35
 800d7c8:	68b8      	ldr	r0, [r7, #8]
 800d7ca:	f7ff fa4d 	bl	800cc68 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 800d7ce:	79fb      	ldrb	r3, [r7, #7]
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	68b8      	ldr	r0, [r7, #8]
 800d7d4:	f7ff fa82 	bl	800ccdc <dhcp_option_byte>
  return ERR_OK;
 800d7d8:	2300      	movs	r3, #0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	371c      	adds	r7, #28
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd90      	pop	{r4, r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	08013734 	.word	0x08013734
 800d7e8:	08013a64 	.word	0x08013a64
 800d7ec:	08013794 	.word	0x08013794
 800d7f0:	08013a84 	.word	0x08013a84
 800d7f4:	08013aa4 	.word	0x08013aa4
 800d7f8:	08013acc 	.word	0x08013acc
 800d7fc:	08013af4 	.word	0x08013af4
 800d800:	20000554 	.word	0x20000554

0800d804 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d107      	bne.n	800d822 <dhcp_delete_msg+0x1e>
 800d812:	4b18      	ldr	r3, [pc, #96]	; (800d874 <dhcp_delete_msg+0x70>)
 800d814:	f240 726d 	movw	r2, #1901	; 0x76d
 800d818:	4917      	ldr	r1, [pc, #92]	; (800d878 <dhcp_delete_msg+0x74>)
 800d81a:	4818      	ldr	r0, [pc, #96]	; (800d87c <dhcp_delete_msg+0x78>)
 800d81c:	f003 fbe6 	bl	8010fec <iprintf>
 800d820:	e024      	b.n	800d86c <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	68db      	ldr	r3, [r3, #12]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d106      	bne.n	800d838 <dhcp_delete_msg+0x34>
 800d82a:	4b12      	ldr	r3, [pc, #72]	; (800d874 <dhcp_delete_msg+0x70>)
 800d82c:	f240 726e 	movw	r2, #1902	; 0x76e
 800d830:	4913      	ldr	r1, [pc, #76]	; (800d880 <dhcp_delete_msg+0x7c>)
 800d832:	4812      	ldr	r0, [pc, #72]	; (800d87c <dhcp_delete_msg+0x78>)
 800d834:	f003 fbda 	bl	8010fec <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	691b      	ldr	r3, [r3, #16]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d106      	bne.n	800d84e <dhcp_delete_msg+0x4a>
 800d840:	4b0c      	ldr	r3, [pc, #48]	; (800d874 <dhcp_delete_msg+0x70>)
 800d842:	f240 726f 	movw	r2, #1903	; 0x76f
 800d846:	490f      	ldr	r1, [pc, #60]	; (800d884 <dhcp_delete_msg+0x80>)
 800d848:	480c      	ldr	r0, [pc, #48]	; (800d87c <dhcp_delete_msg+0x78>)
 800d84a:	f003 fbcf 	bl	8010fec <iprintf>
  if (dhcp->p_out != NULL) {
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d004      	beq.n	800d860 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7f8 f898 	bl	8005990 <pbuf_free>
  }
  dhcp->p_out = NULL;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2200      	movs	r2, #0
 800d864:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	611a      	str	r2, [r3, #16]
}
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	08013734 	.word	0x08013734
 800d878:	08013b34 	.word	0x08013b34
 800d87c:	08013794 	.word	0x08013794
 800d880:	08013b54 	.word	0x08013b54
 800d884:	08013b7c 	.word	0x08013b7c

0800d888 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d107      	bne.n	800d8a6 <dhcp_option_trailer+0x1e>
 800d896:	4b24      	ldr	r3, [pc, #144]	; (800d928 <dhcp_option_trailer+0xa0>)
 800d898:	f240 7282 	movw	r2, #1922	; 0x782
 800d89c:	4923      	ldr	r1, [pc, #140]	; (800d92c <dhcp_option_trailer+0xa4>)
 800d89e:	4824      	ldr	r0, [pc, #144]	; (800d930 <dhcp_option_trailer+0xa8>)
 800d8a0:	f003 fba4 	bl	8010fec <iprintf>
 800d8a4:	e03c      	b.n	800d920 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	691b      	ldr	r3, [r3, #16]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d106      	bne.n	800d8bc <dhcp_option_trailer+0x34>
 800d8ae:	4b1e      	ldr	r3, [pc, #120]	; (800d928 <dhcp_option_trailer+0xa0>)
 800d8b0:	f240 7283 	movw	r2, #1923	; 0x783
 800d8b4:	491f      	ldr	r1, [pc, #124]	; (800d934 <dhcp_option_trailer+0xac>)
 800d8b6:	481e      	ldr	r0, [pc, #120]	; (800d930 <dhcp_option_trailer+0xa8>)
 800d8b8:	f003 fb98 	bl	8010fec <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	8a9b      	ldrh	r3, [r3, #20]
 800d8c0:	2b43      	cmp	r3, #67	; 0x43
 800d8c2:	d906      	bls.n	800d8d2 <dhcp_option_trailer+0x4a>
 800d8c4:	4b18      	ldr	r3, [pc, #96]	; (800d928 <dhcp_option_trailer+0xa0>)
 800d8c6:	f240 7284 	movw	r2, #1924	; 0x784
 800d8ca:	491b      	ldr	r1, [pc, #108]	; (800d938 <dhcp_option_trailer+0xb0>)
 800d8cc:	4818      	ldr	r0, [pc, #96]	; (800d930 <dhcp_option_trailer+0xa8>)
 800d8ce:	f003 fb8d 	bl	8010fec <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	691a      	ldr	r2, [r3, #16]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	8a9b      	ldrh	r3, [r3, #20]
 800d8da:	1c59      	adds	r1, r3, #1
 800d8dc:	b288      	uxth	r0, r1
 800d8de:	6879      	ldr	r1, [r7, #4]
 800d8e0:	8288      	strh	r0, [r1, #20]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	22ff      	movs	r2, #255	; 0xff
 800d8e6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800d8ea:	e00b      	b.n	800d904 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	691a      	ldr	r2, [r3, #16]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	8a9b      	ldrh	r3, [r3, #20]
 800d8f4:	1c59      	adds	r1, r3, #1
 800d8f6:	b288      	uxth	r0, r1
 800d8f8:	6879      	ldr	r1, [r7, #4]
 800d8fa:	8288      	strh	r0, [r1, #20]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	2200      	movs	r2, #0
 800d900:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	8a9b      	ldrh	r3, [r3, #20]
 800d908:	2b43      	cmp	r3, #67	; 0x43
 800d90a:	d905      	bls.n	800d918 <dhcp_option_trailer+0x90>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	8a9b      	ldrh	r3, [r3, #20]
 800d910:	f003 0303 	and.w	r3, r3, #3
 800d914:	2b00      	cmp	r3, #0
 800d916:	d003      	beq.n	800d920 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800d91c:	2b43      	cmp	r3, #67	; 0x43
 800d91e:	d9e5      	bls.n	800d8ec <dhcp_option_trailer+0x64>
  }
}
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	08013734 	.word	0x08013734
 800d92c:	08013ba4 	.word	0x08013ba4
 800d930:	08013794 	.word	0x08013794
 800d934:	08013bc8 	.word	0x08013bc8
 800d938:	08013bf4 	.word	0x08013bf4

0800d93c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b085      	sub	sp, #20
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d017      	beq.n	800d97a <dhcp_supplied_address+0x3e>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6a1b      	ldr	r3, [r3, #32]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d013      	beq.n	800d97a <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6a1b      	ldr	r3, [r3, #32]
 800d956:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	7a5b      	ldrb	r3, [r3, #9]
 800d95c:	2b0a      	cmp	r3, #10
 800d95e:	d007      	beq.n	800d970 <dhcp_supplied_address+0x34>
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	7a5b      	ldrb	r3, [r3, #9]
 800d964:	2b05      	cmp	r3, #5
 800d966:	d003      	beq.n	800d970 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d96c:	2b04      	cmp	r3, #4
 800d96e:	d101      	bne.n	800d974 <dhcp_supplied_address+0x38>
 800d970:	2301      	movs	r3, #1
 800d972:	e000      	b.n	800d976 <dhcp_supplied_address+0x3a>
 800d974:	2300      	movs	r3, #0
 800d976:	b2db      	uxtb	r3, r3
 800d978:	e000      	b.n	800d97c <dhcp_supplied_address+0x40>
  }
  return 0;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3714      	adds	r7, #20
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d990:	4915      	ldr	r1, [pc, #84]	; (800d9e8 <etharp_free_entry+0x60>)
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	4613      	mov	r3, r2
 800d996:	005b      	lsls	r3, r3, #1
 800d998:	4413      	add	r3, r2
 800d99a:	00db      	lsls	r3, r3, #3
 800d99c:	440b      	add	r3, r1
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d013      	beq.n	800d9cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d9a4:	4910      	ldr	r1, [pc, #64]	; (800d9e8 <etharp_free_entry+0x60>)
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	005b      	lsls	r3, r3, #1
 800d9ac:	4413      	add	r3, r2
 800d9ae:	00db      	lsls	r3, r3, #3
 800d9b0:	440b      	add	r3, r1
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7f7 ffeb 	bl	8005990 <pbuf_free>
    arp_table[i].q = NULL;
 800d9ba:	490b      	ldr	r1, [pc, #44]	; (800d9e8 <etharp_free_entry+0x60>)
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	4613      	mov	r3, r2
 800d9c0:	005b      	lsls	r3, r3, #1
 800d9c2:	4413      	add	r3, r2
 800d9c4:	00db      	lsls	r3, r3, #3
 800d9c6:	440b      	add	r3, r1
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d9cc:	4906      	ldr	r1, [pc, #24]	; (800d9e8 <etharp_free_entry+0x60>)
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	005b      	lsls	r3, r3, #1
 800d9d4:	4413      	add	r3, r2
 800d9d6:	00db      	lsls	r3, r3, #3
 800d9d8:	440b      	add	r3, r1
 800d9da:	3314      	adds	r3, #20
 800d9dc:	2200      	movs	r2, #0
 800d9de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d9e0:	bf00      	nop
 800d9e2:	3708      	adds	r7, #8
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	20000558 	.word	0x20000558

0800d9ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	71fb      	strb	r3, [r7, #7]
 800d9f6:	e096      	b.n	800db26 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d9f8:	79fa      	ldrb	r2, [r7, #7]
 800d9fa:	494f      	ldr	r1, [pc, #316]	; (800db38 <etharp_tmr+0x14c>)
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	005b      	lsls	r3, r3, #1
 800da00:	4413      	add	r3, r2
 800da02:	00db      	lsls	r3, r3, #3
 800da04:	440b      	add	r3, r1
 800da06:	3314      	adds	r3, #20
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800da0c:	79bb      	ldrb	r3, [r7, #6]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f000 8086 	beq.w	800db20 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800da14:	79fa      	ldrb	r2, [r7, #7]
 800da16:	4948      	ldr	r1, [pc, #288]	; (800db38 <etharp_tmr+0x14c>)
 800da18:	4613      	mov	r3, r2
 800da1a:	005b      	lsls	r3, r3, #1
 800da1c:	4413      	add	r3, r2
 800da1e:	00db      	lsls	r3, r3, #3
 800da20:	440b      	add	r3, r1
 800da22:	3312      	adds	r3, #18
 800da24:	881b      	ldrh	r3, [r3, #0]
 800da26:	3301      	adds	r3, #1
 800da28:	b298      	uxth	r0, r3
 800da2a:	4943      	ldr	r1, [pc, #268]	; (800db38 <etharp_tmr+0x14c>)
 800da2c:	4613      	mov	r3, r2
 800da2e:	005b      	lsls	r3, r3, #1
 800da30:	4413      	add	r3, r2
 800da32:	00db      	lsls	r3, r3, #3
 800da34:	440b      	add	r3, r1
 800da36:	3312      	adds	r3, #18
 800da38:	4602      	mov	r2, r0
 800da3a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800da3c:	79fa      	ldrb	r2, [r7, #7]
 800da3e:	493e      	ldr	r1, [pc, #248]	; (800db38 <etharp_tmr+0x14c>)
 800da40:	4613      	mov	r3, r2
 800da42:	005b      	lsls	r3, r3, #1
 800da44:	4413      	add	r3, r2
 800da46:	00db      	lsls	r3, r3, #3
 800da48:	440b      	add	r3, r1
 800da4a:	3312      	adds	r3, #18
 800da4c:	881b      	ldrh	r3, [r3, #0]
 800da4e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800da52:	d215      	bcs.n	800da80 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800da54:	79fa      	ldrb	r2, [r7, #7]
 800da56:	4938      	ldr	r1, [pc, #224]	; (800db38 <etharp_tmr+0x14c>)
 800da58:	4613      	mov	r3, r2
 800da5a:	005b      	lsls	r3, r3, #1
 800da5c:	4413      	add	r3, r2
 800da5e:	00db      	lsls	r3, r3, #3
 800da60:	440b      	add	r3, r1
 800da62:	3314      	adds	r3, #20
 800da64:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800da66:	2b01      	cmp	r3, #1
 800da68:	d10f      	bne.n	800da8a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800da6a:	79fa      	ldrb	r2, [r7, #7]
 800da6c:	4932      	ldr	r1, [pc, #200]	; (800db38 <etharp_tmr+0x14c>)
 800da6e:	4613      	mov	r3, r2
 800da70:	005b      	lsls	r3, r3, #1
 800da72:	4413      	add	r3, r2
 800da74:	00db      	lsls	r3, r3, #3
 800da76:	440b      	add	r3, r1
 800da78:	3312      	adds	r3, #18
 800da7a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800da7c:	2b04      	cmp	r3, #4
 800da7e:	d904      	bls.n	800da8a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800da80:	79fb      	ldrb	r3, [r7, #7]
 800da82:	4618      	mov	r0, r3
 800da84:	f7ff ff80 	bl	800d988 <etharp_free_entry>
 800da88:	e04a      	b.n	800db20 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800da8a:	79fa      	ldrb	r2, [r7, #7]
 800da8c:	492a      	ldr	r1, [pc, #168]	; (800db38 <etharp_tmr+0x14c>)
 800da8e:	4613      	mov	r3, r2
 800da90:	005b      	lsls	r3, r3, #1
 800da92:	4413      	add	r3, r2
 800da94:	00db      	lsls	r3, r3, #3
 800da96:	440b      	add	r3, r1
 800da98:	3314      	adds	r3, #20
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	2b03      	cmp	r3, #3
 800da9e:	d10a      	bne.n	800dab6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800daa0:	79fa      	ldrb	r2, [r7, #7]
 800daa2:	4925      	ldr	r1, [pc, #148]	; (800db38 <etharp_tmr+0x14c>)
 800daa4:	4613      	mov	r3, r2
 800daa6:	005b      	lsls	r3, r3, #1
 800daa8:	4413      	add	r3, r2
 800daaa:	00db      	lsls	r3, r3, #3
 800daac:	440b      	add	r3, r1
 800daae:	3314      	adds	r3, #20
 800dab0:	2204      	movs	r2, #4
 800dab2:	701a      	strb	r2, [r3, #0]
 800dab4:	e034      	b.n	800db20 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800dab6:	79fa      	ldrb	r2, [r7, #7]
 800dab8:	491f      	ldr	r1, [pc, #124]	; (800db38 <etharp_tmr+0x14c>)
 800daba:	4613      	mov	r3, r2
 800dabc:	005b      	lsls	r3, r3, #1
 800dabe:	4413      	add	r3, r2
 800dac0:	00db      	lsls	r3, r3, #3
 800dac2:	440b      	add	r3, r1
 800dac4:	3314      	adds	r3, #20
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	2b04      	cmp	r3, #4
 800daca:	d10a      	bne.n	800dae2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800dacc:	79fa      	ldrb	r2, [r7, #7]
 800dace:	491a      	ldr	r1, [pc, #104]	; (800db38 <etharp_tmr+0x14c>)
 800dad0:	4613      	mov	r3, r2
 800dad2:	005b      	lsls	r3, r3, #1
 800dad4:	4413      	add	r3, r2
 800dad6:	00db      	lsls	r3, r3, #3
 800dad8:	440b      	add	r3, r1
 800dada:	3314      	adds	r3, #20
 800dadc:	2202      	movs	r2, #2
 800dade:	701a      	strb	r2, [r3, #0]
 800dae0:	e01e      	b.n	800db20 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dae2:	79fa      	ldrb	r2, [r7, #7]
 800dae4:	4914      	ldr	r1, [pc, #80]	; (800db38 <etharp_tmr+0x14c>)
 800dae6:	4613      	mov	r3, r2
 800dae8:	005b      	lsls	r3, r3, #1
 800daea:	4413      	add	r3, r2
 800daec:	00db      	lsls	r3, r3, #3
 800daee:	440b      	add	r3, r1
 800daf0:	3314      	adds	r3, #20
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d113      	bne.n	800db20 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800daf8:	79fa      	ldrb	r2, [r7, #7]
 800dafa:	490f      	ldr	r1, [pc, #60]	; (800db38 <etharp_tmr+0x14c>)
 800dafc:	4613      	mov	r3, r2
 800dafe:	005b      	lsls	r3, r3, #1
 800db00:	4413      	add	r3, r2
 800db02:	00db      	lsls	r3, r3, #3
 800db04:	440b      	add	r3, r1
 800db06:	3308      	adds	r3, #8
 800db08:	6818      	ldr	r0, [r3, #0]
 800db0a:	79fa      	ldrb	r2, [r7, #7]
 800db0c:	4613      	mov	r3, r2
 800db0e:	005b      	lsls	r3, r3, #1
 800db10:	4413      	add	r3, r2
 800db12:	00db      	lsls	r3, r3, #3
 800db14:	4a08      	ldr	r2, [pc, #32]	; (800db38 <etharp_tmr+0x14c>)
 800db16:	4413      	add	r3, r2
 800db18:	3304      	adds	r3, #4
 800db1a:	4619      	mov	r1, r3
 800db1c:	f000 fe3c 	bl	800e798 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db20:	79fb      	ldrb	r3, [r7, #7]
 800db22:	3301      	adds	r3, #1
 800db24:	71fb      	strb	r3, [r7, #7]
 800db26:	79fb      	ldrb	r3, [r7, #7]
 800db28:	2b09      	cmp	r3, #9
 800db2a:	f67f af65 	bls.w	800d9f8 <etharp_tmr+0xc>
      }
    }
  }
}
 800db2e:	bf00      	nop
 800db30:	3708      	adds	r7, #8
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	20000558 	.word	0x20000558

0800db3c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b088      	sub	sp, #32
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	460b      	mov	r3, r1
 800db46:	607a      	str	r2, [r7, #4]
 800db48:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800db4a:	230a      	movs	r3, #10
 800db4c:	77fb      	strb	r3, [r7, #31]
 800db4e:	230a      	movs	r3, #10
 800db50:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800db52:	230a      	movs	r3, #10
 800db54:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800db56:	2300      	movs	r3, #0
 800db58:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800db5a:	230a      	movs	r3, #10
 800db5c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800db5e:	2300      	movs	r3, #0
 800db60:	833b      	strh	r3, [r7, #24]
 800db62:	2300      	movs	r3, #0
 800db64:	82fb      	strh	r3, [r7, #22]
 800db66:	2300      	movs	r3, #0
 800db68:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db6a:	2300      	movs	r3, #0
 800db6c:	773b      	strb	r3, [r7, #28]
 800db6e:	e093      	b.n	800dc98 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800db70:	7f3a      	ldrb	r2, [r7, #28]
 800db72:	4990      	ldr	r1, [pc, #576]	; (800ddb4 <etharp_find_entry+0x278>)
 800db74:	4613      	mov	r3, r2
 800db76:	005b      	lsls	r3, r3, #1
 800db78:	4413      	add	r3, r2
 800db7a:	00db      	lsls	r3, r3, #3
 800db7c:	440b      	add	r3, r1
 800db7e:	3314      	adds	r3, #20
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800db84:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800db88:	2b0a      	cmp	r3, #10
 800db8a:	d105      	bne.n	800db98 <etharp_find_entry+0x5c>
 800db8c:	7cfb      	ldrb	r3, [r7, #19]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d102      	bne.n	800db98 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800db92:	7f3b      	ldrb	r3, [r7, #28]
 800db94:	777b      	strb	r3, [r7, #29]
 800db96:	e07c      	b.n	800dc92 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800db98:	7cfb      	ldrb	r3, [r7, #19]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d079      	beq.n	800dc92 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800db9e:	7cfb      	ldrb	r3, [r7, #19]
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d009      	beq.n	800dbb8 <etharp_find_entry+0x7c>
 800dba4:	7cfb      	ldrb	r3, [r7, #19]
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d806      	bhi.n	800dbb8 <etharp_find_entry+0x7c>
 800dbaa:	4b83      	ldr	r3, [pc, #524]	; (800ddb8 <etharp_find_entry+0x27c>)
 800dbac:	f44f 7293 	mov.w	r2, #294	; 0x126
 800dbb0:	4982      	ldr	r1, [pc, #520]	; (800ddbc <etharp_find_entry+0x280>)
 800dbb2:	4883      	ldr	r0, [pc, #524]	; (800ddc0 <etharp_find_entry+0x284>)
 800dbb4:	f003 fa1a 	bl	8010fec <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00f      	beq.n	800dbde <etharp_find_entry+0xa2>
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6819      	ldr	r1, [r3, #0]
 800dbc2:	7f3a      	ldrb	r2, [r7, #28]
 800dbc4:	487b      	ldr	r0, [pc, #492]	; (800ddb4 <etharp_find_entry+0x278>)
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	005b      	lsls	r3, r3, #1
 800dbca:	4413      	add	r3, r2
 800dbcc:	00db      	lsls	r3, r3, #3
 800dbce:	4403      	add	r3, r0
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4299      	cmp	r1, r3
 800dbd6:	d102      	bne.n	800dbde <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800dbd8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800dbdc:	e0e5      	b.n	800ddaa <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800dbde:	7cfb      	ldrb	r3, [r7, #19]
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d13b      	bne.n	800dc5c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800dbe4:	7f3a      	ldrb	r2, [r7, #28]
 800dbe6:	4973      	ldr	r1, [pc, #460]	; (800ddb4 <etharp_find_entry+0x278>)
 800dbe8:	4613      	mov	r3, r2
 800dbea:	005b      	lsls	r3, r3, #1
 800dbec:	4413      	add	r3, r2
 800dbee:	00db      	lsls	r3, r3, #3
 800dbf0:	440b      	add	r3, r1
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d018      	beq.n	800dc2a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800dbf8:	7f3a      	ldrb	r2, [r7, #28]
 800dbfa:	496e      	ldr	r1, [pc, #440]	; (800ddb4 <etharp_find_entry+0x278>)
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	005b      	lsls	r3, r3, #1
 800dc00:	4413      	add	r3, r2
 800dc02:	00db      	lsls	r3, r3, #3
 800dc04:	440b      	add	r3, r1
 800dc06:	3312      	adds	r3, #18
 800dc08:	881b      	ldrh	r3, [r3, #0]
 800dc0a:	8b3a      	ldrh	r2, [r7, #24]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d840      	bhi.n	800dc92 <etharp_find_entry+0x156>
            old_queue = i;
 800dc10:	7f3b      	ldrb	r3, [r7, #28]
 800dc12:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800dc14:	7f3a      	ldrb	r2, [r7, #28]
 800dc16:	4967      	ldr	r1, [pc, #412]	; (800ddb4 <etharp_find_entry+0x278>)
 800dc18:	4613      	mov	r3, r2
 800dc1a:	005b      	lsls	r3, r3, #1
 800dc1c:	4413      	add	r3, r2
 800dc1e:	00db      	lsls	r3, r3, #3
 800dc20:	440b      	add	r3, r1
 800dc22:	3312      	adds	r3, #18
 800dc24:	881b      	ldrh	r3, [r3, #0]
 800dc26:	833b      	strh	r3, [r7, #24]
 800dc28:	e033      	b.n	800dc92 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800dc2a:	7f3a      	ldrb	r2, [r7, #28]
 800dc2c:	4961      	ldr	r1, [pc, #388]	; (800ddb4 <etharp_find_entry+0x278>)
 800dc2e:	4613      	mov	r3, r2
 800dc30:	005b      	lsls	r3, r3, #1
 800dc32:	4413      	add	r3, r2
 800dc34:	00db      	lsls	r3, r3, #3
 800dc36:	440b      	add	r3, r1
 800dc38:	3312      	adds	r3, #18
 800dc3a:	881b      	ldrh	r3, [r3, #0]
 800dc3c:	8afa      	ldrh	r2, [r7, #22]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d827      	bhi.n	800dc92 <etharp_find_entry+0x156>
            old_pending = i;
 800dc42:	7f3b      	ldrb	r3, [r7, #28]
 800dc44:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800dc46:	7f3a      	ldrb	r2, [r7, #28]
 800dc48:	495a      	ldr	r1, [pc, #360]	; (800ddb4 <etharp_find_entry+0x278>)
 800dc4a:	4613      	mov	r3, r2
 800dc4c:	005b      	lsls	r3, r3, #1
 800dc4e:	4413      	add	r3, r2
 800dc50:	00db      	lsls	r3, r3, #3
 800dc52:	440b      	add	r3, r1
 800dc54:	3312      	adds	r3, #18
 800dc56:	881b      	ldrh	r3, [r3, #0]
 800dc58:	82fb      	strh	r3, [r7, #22]
 800dc5a:	e01a      	b.n	800dc92 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800dc5c:	7cfb      	ldrb	r3, [r7, #19]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d917      	bls.n	800dc92 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800dc62:	7f3a      	ldrb	r2, [r7, #28]
 800dc64:	4953      	ldr	r1, [pc, #332]	; (800ddb4 <etharp_find_entry+0x278>)
 800dc66:	4613      	mov	r3, r2
 800dc68:	005b      	lsls	r3, r3, #1
 800dc6a:	4413      	add	r3, r2
 800dc6c:	00db      	lsls	r3, r3, #3
 800dc6e:	440b      	add	r3, r1
 800dc70:	3312      	adds	r3, #18
 800dc72:	881b      	ldrh	r3, [r3, #0]
 800dc74:	8aba      	ldrh	r2, [r7, #20]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d80b      	bhi.n	800dc92 <etharp_find_entry+0x156>
            old_stable = i;
 800dc7a:	7f3b      	ldrb	r3, [r7, #28]
 800dc7c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800dc7e:	7f3a      	ldrb	r2, [r7, #28]
 800dc80:	494c      	ldr	r1, [pc, #304]	; (800ddb4 <etharp_find_entry+0x278>)
 800dc82:	4613      	mov	r3, r2
 800dc84:	005b      	lsls	r3, r3, #1
 800dc86:	4413      	add	r3, r2
 800dc88:	00db      	lsls	r3, r3, #3
 800dc8a:	440b      	add	r3, r1
 800dc8c:	3312      	adds	r3, #18
 800dc8e:	881b      	ldrh	r3, [r3, #0]
 800dc90:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc92:	7f3b      	ldrb	r3, [r7, #28]
 800dc94:	3301      	adds	r3, #1
 800dc96:	773b      	strb	r3, [r7, #28]
 800dc98:	7f3b      	ldrb	r3, [r7, #28]
 800dc9a:	2b09      	cmp	r3, #9
 800dc9c:	f67f af68 	bls.w	800db70 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800dca0:	7afb      	ldrb	r3, [r7, #11]
 800dca2:	f003 0302 	and.w	r3, r3, #2
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d108      	bne.n	800dcbc <etharp_find_entry+0x180>
 800dcaa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dcae:	2b0a      	cmp	r3, #10
 800dcb0:	d107      	bne.n	800dcc2 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800dcb2:	7afb      	ldrb	r3, [r7, #11]
 800dcb4:	f003 0301 	and.w	r3, r3, #1
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d102      	bne.n	800dcc2 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800dcbc:	f04f 33ff 	mov.w	r3, #4294967295
 800dcc0:	e073      	b.n	800ddaa <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800dcc2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dcc6:	2b09      	cmp	r3, #9
 800dcc8:	dc02      	bgt.n	800dcd0 <etharp_find_entry+0x194>
    i = empty;
 800dcca:	7f7b      	ldrb	r3, [r7, #29]
 800dccc:	773b      	strb	r3, [r7, #28]
 800dcce:	e036      	b.n	800dd3e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800dcd0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800dcd4:	2b09      	cmp	r3, #9
 800dcd6:	dc13      	bgt.n	800dd00 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800dcd8:	7fbb      	ldrb	r3, [r7, #30]
 800dcda:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800dcdc:	7f3a      	ldrb	r2, [r7, #28]
 800dcde:	4935      	ldr	r1, [pc, #212]	; (800ddb4 <etharp_find_entry+0x278>)
 800dce0:	4613      	mov	r3, r2
 800dce2:	005b      	lsls	r3, r3, #1
 800dce4:	4413      	add	r3, r2
 800dce6:	00db      	lsls	r3, r3, #3
 800dce8:	440b      	add	r3, r1
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d018      	beq.n	800dd22 <etharp_find_entry+0x1e6>
 800dcf0:	4b31      	ldr	r3, [pc, #196]	; (800ddb8 <etharp_find_entry+0x27c>)
 800dcf2:	f240 126f 	movw	r2, #367	; 0x16f
 800dcf6:	4933      	ldr	r1, [pc, #204]	; (800ddc4 <etharp_find_entry+0x288>)
 800dcf8:	4831      	ldr	r0, [pc, #196]	; (800ddc0 <etharp_find_entry+0x284>)
 800dcfa:	f003 f977 	bl	8010fec <iprintf>
 800dcfe:	e010      	b.n	800dd22 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800dd00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd04:	2b09      	cmp	r3, #9
 800dd06:	dc02      	bgt.n	800dd0e <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800dd08:	7ffb      	ldrb	r3, [r7, #31]
 800dd0a:	773b      	strb	r3, [r7, #28]
 800dd0c:	e009      	b.n	800dd22 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800dd0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dd12:	2b09      	cmp	r3, #9
 800dd14:	dc02      	bgt.n	800dd1c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800dd16:	7efb      	ldrb	r3, [r7, #27]
 800dd18:	773b      	strb	r3, [r7, #28]
 800dd1a:	e002      	b.n	800dd22 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800dd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd20:	e043      	b.n	800ddaa <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dd22:	7f3b      	ldrb	r3, [r7, #28]
 800dd24:	2b09      	cmp	r3, #9
 800dd26:	d906      	bls.n	800dd36 <etharp_find_entry+0x1fa>
 800dd28:	4b23      	ldr	r3, [pc, #140]	; (800ddb8 <etharp_find_entry+0x27c>)
 800dd2a:	f240 1281 	movw	r2, #385	; 0x181
 800dd2e:	4926      	ldr	r1, [pc, #152]	; (800ddc8 <etharp_find_entry+0x28c>)
 800dd30:	4823      	ldr	r0, [pc, #140]	; (800ddc0 <etharp_find_entry+0x284>)
 800dd32:	f003 f95b 	bl	8010fec <iprintf>
    etharp_free_entry(i);
 800dd36:	7f3b      	ldrb	r3, [r7, #28]
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7ff fe25 	bl	800d988 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dd3e:	7f3b      	ldrb	r3, [r7, #28]
 800dd40:	2b09      	cmp	r3, #9
 800dd42:	d906      	bls.n	800dd52 <etharp_find_entry+0x216>
 800dd44:	4b1c      	ldr	r3, [pc, #112]	; (800ddb8 <etharp_find_entry+0x27c>)
 800dd46:	f240 1285 	movw	r2, #389	; 0x185
 800dd4a:	491f      	ldr	r1, [pc, #124]	; (800ddc8 <etharp_find_entry+0x28c>)
 800dd4c:	481c      	ldr	r0, [pc, #112]	; (800ddc0 <etharp_find_entry+0x284>)
 800dd4e:	f003 f94d 	bl	8010fec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800dd52:	7f3a      	ldrb	r2, [r7, #28]
 800dd54:	4917      	ldr	r1, [pc, #92]	; (800ddb4 <etharp_find_entry+0x278>)
 800dd56:	4613      	mov	r3, r2
 800dd58:	005b      	lsls	r3, r3, #1
 800dd5a:	4413      	add	r3, r2
 800dd5c:	00db      	lsls	r3, r3, #3
 800dd5e:	440b      	add	r3, r1
 800dd60:	3314      	adds	r3, #20
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d006      	beq.n	800dd76 <etharp_find_entry+0x23a>
 800dd68:	4b13      	ldr	r3, [pc, #76]	; (800ddb8 <etharp_find_entry+0x27c>)
 800dd6a:	f240 1287 	movw	r2, #391	; 0x187
 800dd6e:	4917      	ldr	r1, [pc, #92]	; (800ddcc <etharp_find_entry+0x290>)
 800dd70:	4813      	ldr	r0, [pc, #76]	; (800ddc0 <etharp_find_entry+0x284>)
 800dd72:	f003 f93b 	bl	8010fec <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00a      	beq.n	800dd92 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800dd7c:	7f3a      	ldrb	r2, [r7, #28]
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	6819      	ldr	r1, [r3, #0]
 800dd82:	480c      	ldr	r0, [pc, #48]	; (800ddb4 <etharp_find_entry+0x278>)
 800dd84:	4613      	mov	r3, r2
 800dd86:	005b      	lsls	r3, r3, #1
 800dd88:	4413      	add	r3, r2
 800dd8a:	00db      	lsls	r3, r3, #3
 800dd8c:	4403      	add	r3, r0
 800dd8e:	3304      	adds	r3, #4
 800dd90:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800dd92:	7f3a      	ldrb	r2, [r7, #28]
 800dd94:	4907      	ldr	r1, [pc, #28]	; (800ddb4 <etharp_find_entry+0x278>)
 800dd96:	4613      	mov	r3, r2
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	4413      	add	r3, r2
 800dd9c:	00db      	lsls	r3, r3, #3
 800dd9e:	440b      	add	r3, r1
 800dda0:	3312      	adds	r3, #18
 800dda2:	2200      	movs	r2, #0
 800dda4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800dda6:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3720      	adds	r7, #32
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	20000558 	.word	0x20000558
 800ddb8:	08013c34 	.word	0x08013c34
 800ddbc:	08013c6c 	.word	0x08013c6c
 800ddc0:	08013cac 	.word	0x08013cac
 800ddc4:	08013cd4 	.word	0x08013cd4
 800ddc8:	08013cec 	.word	0x08013cec
 800ddcc:	08013d00 	.word	0x08013d00

0800ddd0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b088      	sub	sp, #32
 800ddd4:	af02      	add	r7, sp, #8
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	607a      	str	r2, [r7, #4]
 800dddc:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dde4:	2b06      	cmp	r3, #6
 800dde6:	d006      	beq.n	800ddf6 <etharp_update_arp_entry+0x26>
 800dde8:	4b48      	ldr	r3, [pc, #288]	; (800df0c <etharp_update_arp_entry+0x13c>)
 800ddea:	f240 12ab 	movw	r2, #427	; 0x1ab
 800ddee:	4948      	ldr	r1, [pc, #288]	; (800df10 <etharp_update_arp_entry+0x140>)
 800ddf0:	4848      	ldr	r0, [pc, #288]	; (800df14 <etharp_update_arp_entry+0x144>)
 800ddf2:	f003 f8fb 	bl	8010fec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d012      	beq.n	800de22 <etharp_update_arp_entry+0x52>
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d00e      	beq.n	800de22 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	68f9      	ldr	r1, [r7, #12]
 800de0a:	4618      	mov	r0, r3
 800de0c:	f001 f8fc 	bl	800f008 <ip4_addr_isbroadcast_u32>
 800de10:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800de12:	2b00      	cmp	r3, #0
 800de14:	d105      	bne.n	800de22 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800de1e:	2be0      	cmp	r3, #224	; 0xe0
 800de20:	d102      	bne.n	800de28 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800de22:	f06f 030f 	mvn.w	r3, #15
 800de26:	e06c      	b.n	800df02 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800de28:	78fb      	ldrb	r3, [r7, #3]
 800de2a:	68fa      	ldr	r2, [r7, #12]
 800de2c:	4619      	mov	r1, r3
 800de2e:	68b8      	ldr	r0, [r7, #8]
 800de30:	f7ff fe84 	bl	800db3c <etharp_find_entry>
 800de34:	4603      	mov	r3, r0
 800de36:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800de38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	da02      	bge.n	800de46 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800de40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de44:	e05d      	b.n	800df02 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800de46:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800de4a:	4933      	ldr	r1, [pc, #204]	; (800df18 <etharp_update_arp_entry+0x148>)
 800de4c:	4613      	mov	r3, r2
 800de4e:	005b      	lsls	r3, r3, #1
 800de50:	4413      	add	r3, r2
 800de52:	00db      	lsls	r3, r3, #3
 800de54:	440b      	add	r3, r1
 800de56:	3314      	adds	r3, #20
 800de58:	2202      	movs	r2, #2
 800de5a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800de5c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800de60:	492d      	ldr	r1, [pc, #180]	; (800df18 <etharp_update_arp_entry+0x148>)
 800de62:	4613      	mov	r3, r2
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	4413      	add	r3, r2
 800de68:	00db      	lsls	r3, r3, #3
 800de6a:	440b      	add	r3, r1
 800de6c:	3308      	adds	r3, #8
 800de6e:	68fa      	ldr	r2, [r7, #12]
 800de70:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800de72:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800de76:	4613      	mov	r3, r2
 800de78:	005b      	lsls	r3, r3, #1
 800de7a:	4413      	add	r3, r2
 800de7c:	00db      	lsls	r3, r3, #3
 800de7e:	3308      	adds	r3, #8
 800de80:	4a25      	ldr	r2, [pc, #148]	; (800df18 <etharp_update_arp_entry+0x148>)
 800de82:	4413      	add	r3, r2
 800de84:	3304      	adds	r3, #4
 800de86:	2206      	movs	r2, #6
 800de88:	6879      	ldr	r1, [r7, #4]
 800de8a:	4618      	mov	r0, r3
 800de8c:	f003 f89b 	bl	8010fc6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800de90:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800de94:	4920      	ldr	r1, [pc, #128]	; (800df18 <etharp_update_arp_entry+0x148>)
 800de96:	4613      	mov	r3, r2
 800de98:	005b      	lsls	r3, r3, #1
 800de9a:	4413      	add	r3, r2
 800de9c:	00db      	lsls	r3, r3, #3
 800de9e:	440b      	add	r3, r1
 800dea0:	3312      	adds	r3, #18
 800dea2:	2200      	movs	r2, #0
 800dea4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800dea6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800deaa:	491b      	ldr	r1, [pc, #108]	; (800df18 <etharp_update_arp_entry+0x148>)
 800deac:	4613      	mov	r3, r2
 800deae:	005b      	lsls	r3, r3, #1
 800deb0:	4413      	add	r3, r2
 800deb2:	00db      	lsls	r3, r3, #3
 800deb4:	440b      	add	r3, r1
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d021      	beq.n	800df00 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800debc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800dec0:	4915      	ldr	r1, [pc, #84]	; (800df18 <etharp_update_arp_entry+0x148>)
 800dec2:	4613      	mov	r3, r2
 800dec4:	005b      	lsls	r3, r3, #1
 800dec6:	4413      	add	r3, r2
 800dec8:	00db      	lsls	r3, r3, #3
 800deca:	440b      	add	r3, r1
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ded0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800ded4:	4910      	ldr	r1, [pc, #64]	; (800df18 <etharp_update_arp_entry+0x148>)
 800ded6:	4613      	mov	r3, r2
 800ded8:	005b      	lsls	r3, r3, #1
 800deda:	4413      	add	r3, r2
 800dedc:	00db      	lsls	r3, r3, #3
 800dede:	440b      	add	r3, r1
 800dee0:	2200      	movs	r2, #0
 800dee2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800deea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800deee:	9300      	str	r3, [sp, #0]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6939      	ldr	r1, [r7, #16]
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f001 ff29 	bl	800fd4c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800defa:	6938      	ldr	r0, [r7, #16]
 800defc:	f7f7 fd48 	bl	8005990 <pbuf_free>
  }
  return ERR_OK;
 800df00:	2300      	movs	r3, #0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3718      	adds	r7, #24
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	08013c34 	.word	0x08013c34
 800df10:	08013d2c 	.word	0x08013d2c
 800df14:	08013cac 	.word	0x08013cac
 800df18:	20000558 	.word	0x20000558

0800df1c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800df24:	2300      	movs	r3, #0
 800df26:	73fb      	strb	r3, [r7, #15]
 800df28:	e01f      	b.n	800df6a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800df2a:	7bfa      	ldrb	r2, [r7, #15]
 800df2c:	4912      	ldr	r1, [pc, #72]	; (800df78 <etharp_cleanup_netif+0x5c>)
 800df2e:	4613      	mov	r3, r2
 800df30:	005b      	lsls	r3, r3, #1
 800df32:	4413      	add	r3, r2
 800df34:	00db      	lsls	r3, r3, #3
 800df36:	440b      	add	r3, r1
 800df38:	3314      	adds	r3, #20
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800df3e:	7bbb      	ldrb	r3, [r7, #14]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00f      	beq.n	800df64 <etharp_cleanup_netif+0x48>
 800df44:	7bfa      	ldrb	r2, [r7, #15]
 800df46:	490c      	ldr	r1, [pc, #48]	; (800df78 <etharp_cleanup_netif+0x5c>)
 800df48:	4613      	mov	r3, r2
 800df4a:	005b      	lsls	r3, r3, #1
 800df4c:	4413      	add	r3, r2
 800df4e:	00db      	lsls	r3, r3, #3
 800df50:	440b      	add	r3, r1
 800df52:	3308      	adds	r3, #8
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d103      	bne.n	800df64 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
 800df5e:	4618      	mov	r0, r3
 800df60:	f7ff fd12 	bl	800d988 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800df64:	7bfb      	ldrb	r3, [r7, #15]
 800df66:	3301      	adds	r3, #1
 800df68:	73fb      	strb	r3, [r7, #15]
 800df6a:	7bfb      	ldrb	r3, [r7, #15]
 800df6c:	2b09      	cmp	r3, #9
 800df6e:	d9dc      	bls.n	800df2a <etharp_cleanup_netif+0xe>
    }
  }
}
 800df70:	bf00      	nop
 800df72:	3710      	adds	r7, #16
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}
 800df78:	20000558 	.word	0x20000558

0800df7c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800df7c:	b5b0      	push	{r4, r5, r7, lr}
 800df7e:	b08a      	sub	sp, #40	; 0x28
 800df80:	af04      	add	r7, sp, #16
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d107      	bne.n	800df9c <etharp_input+0x20>
 800df8c:	4b3f      	ldr	r3, [pc, #252]	; (800e08c <etharp_input+0x110>)
 800df8e:	f44f 7222 	mov.w	r2, #648	; 0x288
 800df92:	493f      	ldr	r1, [pc, #252]	; (800e090 <etharp_input+0x114>)
 800df94:	483f      	ldr	r0, [pc, #252]	; (800e094 <etharp_input+0x118>)
 800df96:	f003 f829 	bl	8010fec <iprintf>
 800df9a:	e074      	b.n	800e086 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	881b      	ldrh	r3, [r3, #0]
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfac:	d10c      	bne.n	800dfc8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800dfb2:	2b06      	cmp	r3, #6
 800dfb4:	d108      	bne.n	800dfc8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dfba:	2b04      	cmp	r3, #4
 800dfbc:	d104      	bne.n	800dfc8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	885b      	ldrh	r3, [r3, #2]
 800dfc2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dfc4:	2b08      	cmp	r3, #8
 800dfc6:	d003      	beq.n	800dfd0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7f7 fce1 	bl	8005990 <pbuf_free>
    return;
 800dfce:	e05a      	b.n	800e086 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	330e      	adds	r3, #14
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	3318      	adds	r3, #24
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	3304      	adds	r3, #4
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d102      	bne.n	800dff0 <etharp_input+0x74>
    for_us = 0;
 800dfea:	2300      	movs	r3, #0
 800dfec:	75fb      	strb	r3, [r7, #23]
 800dfee:	e009      	b.n	800e004 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	3304      	adds	r3, #4
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	bf0c      	ite	eq
 800dffc:	2301      	moveq	r3, #1
 800dffe:	2300      	movne	r3, #0
 800e000:	b2db      	uxtb	r3, r3
 800e002:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	f103 0208 	add.w	r2, r3, #8
 800e00a:	7dfb      	ldrb	r3, [r7, #23]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <etharp_input+0x98>
 800e010:	2301      	movs	r3, #1
 800e012:	e000      	b.n	800e016 <etharp_input+0x9a>
 800e014:	2302      	movs	r3, #2
 800e016:	f107 010c 	add.w	r1, r7, #12
 800e01a:	6838      	ldr	r0, [r7, #0]
 800e01c:	f7ff fed8 	bl	800ddd0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	88db      	ldrh	r3, [r3, #6]
 800e024:	b29b      	uxth	r3, r3
 800e026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e02a:	d003      	beq.n	800e034 <etharp_input+0xb8>
 800e02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e030:	d01e      	beq.n	800e070 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800e032:	e025      	b.n	800e080 <etharp_input+0x104>
    if (for_us) {
 800e034:	7dfb      	ldrb	r3, [r7, #23]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d021      	beq.n	800e07e <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800e050:	693a      	ldr	r2, [r7, #16]
 800e052:	3208      	adds	r2, #8
      etharp_raw(netif,
 800e054:	2102      	movs	r1, #2
 800e056:	9103      	str	r1, [sp, #12]
 800e058:	f107 010c 	add.w	r1, r7, #12
 800e05c:	9102      	str	r1, [sp, #8]
 800e05e:	9201      	str	r2, [sp, #4]
 800e060:	9300      	str	r3, [sp, #0]
 800e062:	462b      	mov	r3, r5
 800e064:	4622      	mov	r2, r4
 800e066:	4601      	mov	r1, r0
 800e068:	6838      	ldr	r0, [r7, #0]
 800e06a:	f000 fae7 	bl	800e63c <etharp_raw>
    break;
 800e06e:	e006      	b.n	800e07e <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 800e070:	f107 030c 	add.w	r3, r7, #12
 800e074:	4619      	mov	r1, r3
 800e076:	6838      	ldr	r0, [r7, #0]
 800e078:	f7fe f980 	bl	800c37c <dhcp_arp_reply>
    break;
 800e07c:	e000      	b.n	800e080 <etharp_input+0x104>
    break;
 800e07e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f7f7 fc85 	bl	8005990 <pbuf_free>
}
 800e086:	3718      	adds	r7, #24
 800e088:	46bd      	mov	sp, r7
 800e08a:	bdb0      	pop	{r4, r5, r7, pc}
 800e08c:	08013c34 	.word	0x08013c34
 800e090:	08013d84 	.word	0x08013d84
 800e094:	08013cac 	.word	0x08013cac

0800e098 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b086      	sub	sp, #24
 800e09c:	af02      	add	r7, sp, #8
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e0a6:	79fa      	ldrb	r2, [r7, #7]
 800e0a8:	4944      	ldr	r1, [pc, #272]	; (800e1bc <etharp_output_to_arp_index+0x124>)
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	005b      	lsls	r3, r3, #1
 800e0ae:	4413      	add	r3, r2
 800e0b0:	00db      	lsls	r3, r3, #3
 800e0b2:	440b      	add	r3, r1
 800e0b4:	3314      	adds	r3, #20
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d806      	bhi.n	800e0ca <etharp_output_to_arp_index+0x32>
 800e0bc:	4b40      	ldr	r3, [pc, #256]	; (800e1c0 <etharp_output_to_arp_index+0x128>)
 800e0be:	f240 22ed 	movw	r2, #749	; 0x2ed
 800e0c2:	4940      	ldr	r1, [pc, #256]	; (800e1c4 <etharp_output_to_arp_index+0x12c>)
 800e0c4:	4840      	ldr	r0, [pc, #256]	; (800e1c8 <etharp_output_to_arp_index+0x130>)
 800e0c6:	f002 ff91 	bl	8010fec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e0ca:	79fa      	ldrb	r2, [r7, #7]
 800e0cc:	493b      	ldr	r1, [pc, #236]	; (800e1bc <etharp_output_to_arp_index+0x124>)
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	005b      	lsls	r3, r3, #1
 800e0d2:	4413      	add	r3, r2
 800e0d4:	00db      	lsls	r3, r3, #3
 800e0d6:	440b      	add	r3, r1
 800e0d8:	3314      	adds	r3, #20
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	2b02      	cmp	r3, #2
 800e0de:	d153      	bne.n	800e188 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e0e0:	79fa      	ldrb	r2, [r7, #7]
 800e0e2:	4936      	ldr	r1, [pc, #216]	; (800e1bc <etharp_output_to_arp_index+0x124>)
 800e0e4:	4613      	mov	r3, r2
 800e0e6:	005b      	lsls	r3, r3, #1
 800e0e8:	4413      	add	r3, r2
 800e0ea:	00db      	lsls	r3, r3, #3
 800e0ec:	440b      	add	r3, r1
 800e0ee:	3312      	adds	r3, #18
 800e0f0:	881b      	ldrh	r3, [r3, #0]
 800e0f2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e0f6:	d919      	bls.n	800e12c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e0f8:	79fa      	ldrb	r2, [r7, #7]
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	005b      	lsls	r3, r3, #1
 800e0fe:	4413      	add	r3, r2
 800e100:	00db      	lsls	r3, r3, #3
 800e102:	4a2e      	ldr	r2, [pc, #184]	; (800e1bc <etharp_output_to_arp_index+0x124>)
 800e104:	4413      	add	r3, r2
 800e106:	3304      	adds	r3, #4
 800e108:	4619      	mov	r1, r3
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f000 fb44 	bl	800e798 <etharp_request>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	d138      	bne.n	800e188 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e116:	79fa      	ldrb	r2, [r7, #7]
 800e118:	4928      	ldr	r1, [pc, #160]	; (800e1bc <etharp_output_to_arp_index+0x124>)
 800e11a:	4613      	mov	r3, r2
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	4413      	add	r3, r2
 800e120:	00db      	lsls	r3, r3, #3
 800e122:	440b      	add	r3, r1
 800e124:	3314      	adds	r3, #20
 800e126:	2203      	movs	r2, #3
 800e128:	701a      	strb	r2, [r3, #0]
 800e12a:	e02d      	b.n	800e188 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e12c:	79fa      	ldrb	r2, [r7, #7]
 800e12e:	4923      	ldr	r1, [pc, #140]	; (800e1bc <etharp_output_to_arp_index+0x124>)
 800e130:	4613      	mov	r3, r2
 800e132:	005b      	lsls	r3, r3, #1
 800e134:	4413      	add	r3, r2
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	440b      	add	r3, r1
 800e13a:	3312      	adds	r3, #18
 800e13c:	881b      	ldrh	r3, [r3, #0]
 800e13e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e142:	d321      	bcc.n	800e188 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e144:	79fa      	ldrb	r2, [r7, #7]
 800e146:	4613      	mov	r3, r2
 800e148:	005b      	lsls	r3, r3, #1
 800e14a:	4413      	add	r3, r2
 800e14c:	00db      	lsls	r3, r3, #3
 800e14e:	4a1b      	ldr	r2, [pc, #108]	; (800e1bc <etharp_output_to_arp_index+0x124>)
 800e150:	4413      	add	r3, r2
 800e152:	1d19      	adds	r1, r3, #4
 800e154:	79fa      	ldrb	r2, [r7, #7]
 800e156:	4613      	mov	r3, r2
 800e158:	005b      	lsls	r3, r3, #1
 800e15a:	4413      	add	r3, r2
 800e15c:	00db      	lsls	r3, r3, #3
 800e15e:	3308      	adds	r3, #8
 800e160:	4a16      	ldr	r2, [pc, #88]	; (800e1bc <etharp_output_to_arp_index+0x124>)
 800e162:	4413      	add	r3, r2
 800e164:	3304      	adds	r3, #4
 800e166:	461a      	mov	r2, r3
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f000 faf3 	bl	800e754 <etharp_request_dst>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d109      	bne.n	800e188 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e174:	79fa      	ldrb	r2, [r7, #7]
 800e176:	4911      	ldr	r1, [pc, #68]	; (800e1bc <etharp_output_to_arp_index+0x124>)
 800e178:	4613      	mov	r3, r2
 800e17a:	005b      	lsls	r3, r3, #1
 800e17c:	4413      	add	r3, r2
 800e17e:	00db      	lsls	r3, r3, #3
 800e180:	440b      	add	r3, r1
 800e182:	3314      	adds	r3, #20
 800e184:	2203      	movs	r2, #3
 800e186:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800e18e:	79fa      	ldrb	r2, [r7, #7]
 800e190:	4613      	mov	r3, r2
 800e192:	005b      	lsls	r3, r3, #1
 800e194:	4413      	add	r3, r2
 800e196:	00db      	lsls	r3, r3, #3
 800e198:	3308      	adds	r3, #8
 800e19a:	4a08      	ldr	r2, [pc, #32]	; (800e1bc <etharp_output_to_arp_index+0x124>)
 800e19c:	4413      	add	r3, r2
 800e19e:	1d1a      	adds	r2, r3, #4
 800e1a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1a4:	9300      	str	r3, [sp, #0]
 800e1a6:	4613      	mov	r3, r2
 800e1a8:	460a      	mov	r2, r1
 800e1aa:	68b9      	ldr	r1, [r7, #8]
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f001 fdcd 	bl	800fd4c <ethernet_output>
 800e1b2:	4603      	mov	r3, r0
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3710      	adds	r7, #16
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	20000558 	.word	0x20000558
 800e1c0:	08013c34 	.word	0x08013c34
 800e1c4:	08013da4 	.word	0x08013da4
 800e1c8:	08013cac 	.word	0x08013cac

0800e1cc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b08a      	sub	sp, #40	; 0x28
 800e1d0:	af02      	add	r7, sp, #8
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d106      	bne.n	800e1f0 <etharp_output+0x24>
 800e1e2:	4b69      	ldr	r3, [pc, #420]	; (800e388 <etharp_output+0x1bc>)
 800e1e4:	f240 321b 	movw	r2, #795	; 0x31b
 800e1e8:	4968      	ldr	r1, [pc, #416]	; (800e38c <etharp_output+0x1c0>)
 800e1ea:	4869      	ldr	r0, [pc, #420]	; (800e390 <etharp_output+0x1c4>)
 800e1ec:	f002 fefe 	bl	8010fec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <etharp_output+0x38>
 800e1f6:	4b64      	ldr	r3, [pc, #400]	; (800e388 <etharp_output+0x1bc>)
 800e1f8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e1fc:	4965      	ldr	r1, [pc, #404]	; (800e394 <etharp_output+0x1c8>)
 800e1fe:	4864      	ldr	r0, [pc, #400]	; (800e390 <etharp_output+0x1c4>)
 800e200:	f002 fef4 	bl	8010fec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d106      	bne.n	800e218 <etharp_output+0x4c>
 800e20a:	4b5f      	ldr	r3, [pc, #380]	; (800e388 <etharp_output+0x1bc>)
 800e20c:	f240 321d 	movw	r2, #797	; 0x31d
 800e210:	4961      	ldr	r1, [pc, #388]	; (800e398 <etharp_output+0x1cc>)
 800e212:	485f      	ldr	r0, [pc, #380]	; (800e390 <etharp_output+0x1c4>)
 800e214:	f002 feea 	bl	8010fec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	68f9      	ldr	r1, [r7, #12]
 800e21e:	4618      	mov	r0, r3
 800e220:	f000 fef2 	bl	800f008 <ip4_addr_isbroadcast_u32>
 800e224:	4603      	mov	r3, r0
 800e226:	2b00      	cmp	r3, #0
 800e228:	d002      	beq.n	800e230 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e22a:	4b5c      	ldr	r3, [pc, #368]	; (800e39c <etharp_output+0x1d0>)
 800e22c:	61fb      	str	r3, [r7, #28]
 800e22e:	e09b      	b.n	800e368 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e238:	2be0      	cmp	r3, #224	; 0xe0
 800e23a:	d118      	bne.n	800e26e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e23c:	2301      	movs	r3, #1
 800e23e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e240:	2300      	movs	r3, #0
 800e242:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e244:	235e      	movs	r3, #94	; 0x5e
 800e246:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	3301      	adds	r3, #1
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e252:	b2db      	uxtb	r3, r3
 800e254:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	3302      	adds	r3, #2
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	3303      	adds	r3, #3
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e266:	f107 0310 	add.w	r3, r7, #16
 800e26a:	61fb      	str	r3, [r7, #28]
 800e26c:	e07c      	b.n	800e368 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	3304      	adds	r3, #4
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	405a      	eors	r2, r3
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	3308      	adds	r3, #8
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4013      	ands	r3, r2
 800e282:	2b00      	cmp	r3, #0
 800e284:	d012      	beq.n	800e2ac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e28c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e290:	4293      	cmp	r3, r2
 800e292:	d00b      	beq.n	800e2ac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	330c      	adds	r3, #12
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d003      	beq.n	800e2a6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	330c      	adds	r3, #12
 800e2a2:	61bb      	str	r3, [r7, #24]
 800e2a4:	e002      	b.n	800e2ac <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e2a6:	f06f 0303 	mvn.w	r3, #3
 800e2aa:	e069      	b.n	800e380 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e2ac:	4b3c      	ldr	r3, [pc, #240]	; (800e3a0 <etharp_output+0x1d4>)
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	4a3c      	ldr	r2, [pc, #240]	; (800e3a4 <etharp_output+0x1d8>)
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	005b      	lsls	r3, r3, #1
 800e2b8:	440b      	add	r3, r1
 800e2ba:	00db      	lsls	r3, r3, #3
 800e2bc:	4413      	add	r3, r2
 800e2be:	3314      	adds	r3, #20
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d917      	bls.n	800e2f6 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	4b35      	ldr	r3, [pc, #212]	; (800e3a0 <etharp_output+0x1d4>)
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	4934      	ldr	r1, [pc, #208]	; (800e3a4 <etharp_output+0x1d8>)
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	005b      	lsls	r3, r3, #1
 800e2d6:	4403      	add	r3, r0
 800e2d8:	00db      	lsls	r3, r3, #3
 800e2da:	440b      	add	r3, r1
 800e2dc:	3304      	adds	r3, #4
 800e2de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d108      	bne.n	800e2f6 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e2e4:	4b2e      	ldr	r3, [pc, #184]	; (800e3a0 <etharp_output+0x1d4>)
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	68b9      	ldr	r1, [r7, #8]
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f7ff fed3 	bl	800e098 <etharp_output_to_arp_index>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	e044      	b.n	800e380 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	75fb      	strb	r3, [r7, #23]
 800e2fa:	e02a      	b.n	800e352 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e2fc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800e300:	4928      	ldr	r1, [pc, #160]	; (800e3a4 <etharp_output+0x1d8>)
 800e302:	4613      	mov	r3, r2
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	4413      	add	r3, r2
 800e308:	00db      	lsls	r3, r3, #3
 800e30a:	440b      	add	r3, r1
 800e30c:	3314      	adds	r3, #20
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d918      	bls.n	800e346 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	6819      	ldr	r1, [r3, #0]
 800e318:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800e31c:	4821      	ldr	r0, [pc, #132]	; (800e3a4 <etharp_output+0x1d8>)
 800e31e:	4613      	mov	r3, r2
 800e320:	005b      	lsls	r3, r3, #1
 800e322:	4413      	add	r3, r2
 800e324:	00db      	lsls	r3, r3, #3
 800e326:	4403      	add	r3, r0
 800e328:	3304      	adds	r3, #4
 800e32a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e32c:	4299      	cmp	r1, r3
 800e32e:	d10a      	bne.n	800e346 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800e330:	7dfa      	ldrb	r2, [r7, #23]
 800e332:	4b1b      	ldr	r3, [pc, #108]	; (800e3a0 <etharp_output+0x1d4>)
 800e334:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e336:	7dfb      	ldrb	r3, [r7, #23]
 800e338:	461a      	mov	r2, r3
 800e33a:	68b9      	ldr	r1, [r7, #8]
 800e33c:	68f8      	ldr	r0, [r7, #12]
 800e33e:	f7ff feab 	bl	800e098 <etharp_output_to_arp_index>
 800e342:	4603      	mov	r3, r0
 800e344:	e01c      	b.n	800e380 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e346:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	3301      	adds	r3, #1
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	75fb      	strb	r3, [r7, #23]
 800e352:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e356:	2b09      	cmp	r3, #9
 800e358:	ddd0      	ble.n	800e2fc <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	69b9      	ldr	r1, [r7, #24]
 800e35e:	68f8      	ldr	r0, [r7, #12]
 800e360:	f000 f822 	bl	800e3a8 <etharp_query>
 800e364:	4603      	mov	r3, r0
 800e366:	e00b      	b.n	800e380 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800e36e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e372:	9300      	str	r3, [sp, #0]
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	68b9      	ldr	r1, [r7, #8]
 800e378:	68f8      	ldr	r0, [r7, #12]
 800e37a:	f001 fce7 	bl	800fd4c <ethernet_output>
 800e37e:	4603      	mov	r3, r0
}
 800e380:	4618      	mov	r0, r3
 800e382:	3720      	adds	r7, #32
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	08013c34 	.word	0x08013c34
 800e38c:	08013d84 	.word	0x08013d84
 800e390:	08013cac 	.word	0x08013cac
 800e394:	08013dd4 	.word	0x08013dd4
 800e398:	08013d74 	.word	0x08013d74
 800e39c:	08015108 	.word	0x08015108
 800e3a0:	20000648 	.word	0x20000648
 800e3a4:	20000558 	.word	0x20000558

0800e3a8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b08c      	sub	sp, #48	; 0x30
 800e3ac:	af02      	add	r7, sp, #8
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	60b9      	str	r1, [r7, #8]
 800e3b2:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	3329      	adds	r3, #41	; 0x29
 800e3b8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e3ba:	23ff      	movs	r3, #255	; 0xff
 800e3bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	68f9      	ldr	r1, [r7, #12]
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f000 fe1c 	bl	800f008 <ip4_addr_isbroadcast_u32>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d10c      	bne.n	800e3f0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e3de:	2be0      	cmp	r3, #224	; 0xe0
 800e3e0:	d006      	beq.n	800e3f0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d003      	beq.n	800e3f0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d102      	bne.n	800e3f6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e3f0:	f06f 030f 	mvn.w	r3, #15
 800e3f4:	e10f      	b.n	800e616 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e3f6:	68fa      	ldr	r2, [r7, #12]
 800e3f8:	2101      	movs	r1, #1
 800e3fa:	68b8      	ldr	r0, [r7, #8]
 800e3fc:	f7ff fb9e 	bl	800db3c <etharp_find_entry>
 800e400:	4603      	mov	r3, r0
 800e402:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800e404:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	da02      	bge.n	800e412 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800e40c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e410:	e101      	b.n	800e616 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e412:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e416:	4982      	ldr	r1, [pc, #520]	; (800e620 <etharp_query+0x278>)
 800e418:	4613      	mov	r3, r2
 800e41a:	005b      	lsls	r3, r3, #1
 800e41c:	4413      	add	r3, r2
 800e41e:	00db      	lsls	r3, r3, #3
 800e420:	440b      	add	r3, r1
 800e422:	3314      	adds	r3, #20
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d117      	bne.n	800e45a <etharp_query+0xb2>
    is_new_entry = 1;
 800e42a:	2301      	movs	r3, #1
 800e42c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e42e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e432:	497b      	ldr	r1, [pc, #492]	; (800e620 <etharp_query+0x278>)
 800e434:	4613      	mov	r3, r2
 800e436:	005b      	lsls	r3, r3, #1
 800e438:	4413      	add	r3, r2
 800e43a:	00db      	lsls	r3, r3, #3
 800e43c:	440b      	add	r3, r1
 800e43e:	3314      	adds	r3, #20
 800e440:	2201      	movs	r2, #1
 800e442:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e444:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e448:	4975      	ldr	r1, [pc, #468]	; (800e620 <etharp_query+0x278>)
 800e44a:	4613      	mov	r3, r2
 800e44c:	005b      	lsls	r3, r3, #1
 800e44e:	4413      	add	r3, r2
 800e450:	00db      	lsls	r3, r3, #3
 800e452:	440b      	add	r3, r1
 800e454:	3308      	adds	r3, #8
 800e456:	68fa      	ldr	r2, [r7, #12]
 800e458:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e45a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e45e:	4970      	ldr	r1, [pc, #448]	; (800e620 <etharp_query+0x278>)
 800e460:	4613      	mov	r3, r2
 800e462:	005b      	lsls	r3, r3, #1
 800e464:	4413      	add	r3, r2
 800e466:	00db      	lsls	r3, r3, #3
 800e468:	440b      	add	r3, r1
 800e46a:	3314      	adds	r3, #20
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d012      	beq.n	800e498 <etharp_query+0xf0>
 800e472:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e476:	496a      	ldr	r1, [pc, #424]	; (800e620 <etharp_query+0x278>)
 800e478:	4613      	mov	r3, r2
 800e47a:	005b      	lsls	r3, r3, #1
 800e47c:	4413      	add	r3, r2
 800e47e:	00db      	lsls	r3, r3, #3
 800e480:	440b      	add	r3, r1
 800e482:	3314      	adds	r3, #20
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	2b01      	cmp	r3, #1
 800e488:	d806      	bhi.n	800e498 <etharp_query+0xf0>
 800e48a:	4b66      	ldr	r3, [pc, #408]	; (800e624 <etharp_query+0x27c>)
 800e48c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e490:	4965      	ldr	r1, [pc, #404]	; (800e628 <etharp_query+0x280>)
 800e492:	4866      	ldr	r0, [pc, #408]	; (800e62c <etharp_query+0x284>)
 800e494:	f002 fdaa 	bl	8010fec <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e498:	6a3b      	ldr	r3, [r7, #32]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d102      	bne.n	800e4a4 <etharp_query+0xfc>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d10c      	bne.n	800e4be <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e4a4:	68b9      	ldr	r1, [r7, #8]
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f000 f976 	bl	800e798 <etharp_request>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d102      	bne.n	800e4be <etharp_query+0x116>
      return result;
 800e4b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e4bc:	e0ab      	b.n	800e616 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d106      	bne.n	800e4d2 <etharp_query+0x12a>
 800e4c4:	4b57      	ldr	r3, [pc, #348]	; (800e624 <etharp_query+0x27c>)
 800e4c6:	f240 32db 	movw	r2, #987	; 0x3db
 800e4ca:	4959      	ldr	r1, [pc, #356]	; (800e630 <etharp_query+0x288>)
 800e4cc:	4857      	ldr	r0, [pc, #348]	; (800e62c <etharp_query+0x284>)
 800e4ce:	f002 fd8d 	bl	8010fec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e4d2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e4d6:	4952      	ldr	r1, [pc, #328]	; (800e620 <etharp_query+0x278>)
 800e4d8:	4613      	mov	r3, r2
 800e4da:	005b      	lsls	r3, r3, #1
 800e4dc:	4413      	add	r3, r2
 800e4de:	00db      	lsls	r3, r3, #3
 800e4e0:	440b      	add	r3, r1
 800e4e2:	3314      	adds	r3, #20
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d919      	bls.n	800e51e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800e4ea:	7cfa      	ldrb	r2, [r7, #19]
 800e4ec:	4b51      	ldr	r3, [pc, #324]	; (800e634 <etharp_query+0x28c>)
 800e4ee:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e4f0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e4f4:	4613      	mov	r3, r2
 800e4f6:	005b      	lsls	r3, r3, #1
 800e4f8:	4413      	add	r3, r2
 800e4fa:	00db      	lsls	r3, r3, #3
 800e4fc:	3308      	adds	r3, #8
 800e4fe:	4a48      	ldr	r2, [pc, #288]	; (800e620 <etharp_query+0x278>)
 800e500:	4413      	add	r3, r2
 800e502:	1d1a      	adds	r2, r3, #4
 800e504:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	4613      	mov	r3, r2
 800e50c:	697a      	ldr	r2, [r7, #20]
 800e50e:	6879      	ldr	r1, [r7, #4]
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f001 fc1b 	bl	800fd4c <ethernet_output>
 800e516:	4603      	mov	r3, r0
 800e518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e51c:	e079      	b.n	800e612 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e51e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e522:	493f      	ldr	r1, [pc, #252]	; (800e620 <etharp_query+0x278>)
 800e524:	4613      	mov	r3, r2
 800e526:	005b      	lsls	r3, r3, #1
 800e528:	4413      	add	r3, r2
 800e52a:	00db      	lsls	r3, r3, #3
 800e52c:	440b      	add	r3, r1
 800e52e:	3314      	adds	r3, #20
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	2b01      	cmp	r3, #1
 800e534:	d16d      	bne.n	800e612 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e53e:	e01a      	b.n	800e576 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	895a      	ldrh	r2, [r3, #10]
 800e544:	69fb      	ldr	r3, [r7, #28]
 800e546:	891b      	ldrh	r3, [r3, #8]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d10a      	bne.n	800e562 <etharp_query+0x1ba>
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d006      	beq.n	800e562 <etharp_query+0x1ba>
 800e554:	4b33      	ldr	r3, [pc, #204]	; (800e624 <etharp_query+0x27c>)
 800e556:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800e55a:	4937      	ldr	r1, [pc, #220]	; (800e638 <etharp_query+0x290>)
 800e55c:	4833      	ldr	r0, [pc, #204]	; (800e62c <etharp_query+0x284>)
 800e55e:	f002 fd45 	bl	8010fec <iprintf>
      if (p->type != PBUF_ROM) {
 800e562:	69fb      	ldr	r3, [r7, #28]
 800e564:	7b1b      	ldrb	r3, [r3, #12]
 800e566:	2b01      	cmp	r3, #1
 800e568:	d002      	beq.n	800e570 <etharp_query+0x1c8>
        copy_needed = 1;
 800e56a:	2301      	movs	r3, #1
 800e56c:	61bb      	str	r3, [r7, #24]
        break;
 800e56e:	e005      	b.n	800e57c <etharp_query+0x1d4>
      }
      p = p->next;
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d1e1      	bne.n	800e540 <etharp_query+0x198>
    }
    if (copy_needed) {
 800e57c:	69bb      	ldr	r3, [r7, #24]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d017      	beq.n	800e5b2 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	891b      	ldrh	r3, [r3, #8]
 800e586:	2200      	movs	r2, #0
 800e588:	4619      	mov	r1, r3
 800e58a:	2002      	movs	r0, #2
 800e58c:	f7f6 fe8e 	bl	80052ac <pbuf_alloc>
 800e590:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d011      	beq.n	800e5bc <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800e598:	6879      	ldr	r1, [r7, #4]
 800e59a:	69f8      	ldr	r0, [r7, #28]
 800e59c:	f7f7 fb2c 	bl	8005bf8 <pbuf_copy>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d00a      	beq.n	800e5bc <etharp_query+0x214>
          pbuf_free(p);
 800e5a6:	69f8      	ldr	r0, [r7, #28]
 800e5a8:	f7f7 f9f2 	bl	8005990 <pbuf_free>
          p = NULL;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	61fb      	str	r3, [r7, #28]
 800e5b0:	e004      	b.n	800e5bc <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e5b6:	69f8      	ldr	r0, [r7, #28]
 800e5b8:	f7f7 fa96 	bl	8005ae8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d024      	beq.n	800e60c <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e5c2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e5c6:	4916      	ldr	r1, [pc, #88]	; (800e620 <etharp_query+0x278>)
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	005b      	lsls	r3, r3, #1
 800e5cc:	4413      	add	r3, r2
 800e5ce:	00db      	lsls	r3, r3, #3
 800e5d0:	440b      	add	r3, r1
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00b      	beq.n	800e5f0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800e5d8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e5dc:	4910      	ldr	r1, [pc, #64]	; (800e620 <etharp_query+0x278>)
 800e5de:	4613      	mov	r3, r2
 800e5e0:	005b      	lsls	r3, r3, #1
 800e5e2:	4413      	add	r3, r2
 800e5e4:	00db      	lsls	r3, r3, #3
 800e5e6:	440b      	add	r3, r1
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7f7 f9d0 	bl	8005990 <pbuf_free>
      }
      arp_table[i].q = p;
 800e5f0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800e5f4:	490a      	ldr	r1, [pc, #40]	; (800e620 <etharp_query+0x278>)
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	005b      	lsls	r3, r3, #1
 800e5fa:	4413      	add	r3, r2
 800e5fc:	00db      	lsls	r3, r3, #3
 800e5fe:	440b      	add	r3, r1
 800e600:	69fa      	ldr	r2, [r7, #28]
 800e602:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e604:	2300      	movs	r3, #0
 800e606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e60a:	e002      	b.n	800e612 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e60c:	23ff      	movs	r3, #255	; 0xff
 800e60e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e612:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e616:	4618      	mov	r0, r3
 800e618:	3728      	adds	r7, #40	; 0x28
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	20000558 	.word	0x20000558
 800e624:	08013c34 	.word	0x08013c34
 800e628:	08013de0 	.word	0x08013de0
 800e62c:	08013cac 	.word	0x08013cac
 800e630:	08013dd4 	.word	0x08013dd4
 800e634:	20000648 	.word	0x20000648
 800e638:	08013e08 	.word	0x08013e08

0800e63c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b08a      	sub	sp, #40	; 0x28
 800e640:	af02      	add	r7, sp, #8
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
 800e648:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e64a:	2300      	movs	r3, #0
 800e64c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d106      	bne.n	800e662 <etharp_raw+0x26>
 800e654:	4b3a      	ldr	r3, [pc, #232]	; (800e740 <etharp_raw+0x104>)
 800e656:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800e65a:	493a      	ldr	r1, [pc, #232]	; (800e744 <etharp_raw+0x108>)
 800e65c:	483a      	ldr	r0, [pc, #232]	; (800e748 <etharp_raw+0x10c>)
 800e65e:	f002 fcc5 	bl	8010fec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e662:	2200      	movs	r2, #0
 800e664:	211c      	movs	r1, #28
 800e666:	2002      	movs	r0, #2
 800e668:	f7f6 fe20 	bl	80052ac <pbuf_alloc>
 800e66c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d102      	bne.n	800e67a <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e674:	f04f 33ff 	mov.w	r3, #4294967295
 800e678:	e05d      	b.n	800e736 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	895b      	ldrh	r3, [r3, #10]
 800e67e:	2b1b      	cmp	r3, #27
 800e680:	d806      	bhi.n	800e690 <etharp_raw+0x54>
 800e682:	4b2f      	ldr	r3, [pc, #188]	; (800e740 <etharp_raw+0x104>)
 800e684:	f240 4264 	movw	r2, #1124	; 0x464
 800e688:	4930      	ldr	r1, [pc, #192]	; (800e74c <etharp_raw+0x110>)
 800e68a:	482f      	ldr	r0, [pc, #188]	; (800e748 <etharp_raw+0x10c>)
 800e68c:	f002 fcae 	bl	8010fec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e696:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e698:	4618      	mov	r0, r3
 800e69a:	f7f5 ffe3 	bl	8004664 <lwip_htons>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6ac:	2b06      	cmp	r3, #6
 800e6ae:	d006      	beq.n	800e6be <etharp_raw+0x82>
 800e6b0:	4b23      	ldr	r3, [pc, #140]	; (800e740 <etharp_raw+0x104>)
 800e6b2:	f240 426b 	movw	r2, #1131	; 0x46b
 800e6b6:	4926      	ldr	r1, [pc, #152]	; (800e750 <etharp_raw+0x114>)
 800e6b8:	4823      	ldr	r0, [pc, #140]	; (800e748 <etharp_raw+0x10c>)
 800e6ba:	f002 fc97 	bl	8010fec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	3308      	adds	r3, #8
 800e6c2:	2206      	movs	r2, #6
 800e6c4:	6839      	ldr	r1, [r7, #0]
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f002 fc7d 	bl	8010fc6 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	3312      	adds	r3, #18
 800e6d0:	2206      	movs	r2, #6
 800e6d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f002 fc76 	bl	8010fc6 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	330e      	adds	r3, #14
 800e6de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6e0:	6812      	ldr	r2, [r2, #0]
 800e6e2:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	3318      	adds	r3, #24
 800e6e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6ea:	6812      	ldr	r2, [r2, #0]
 800e6ec:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	701a      	strb	r2, [r3, #0]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f042 0201 	orr.w	r2, r2, #1
 800e6fa:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	2200      	movs	r2, #0
 800e700:	f042 0208 	orr.w	r2, r2, #8
 800e704:	709a      	strb	r2, [r3, #2]
 800e706:	2200      	movs	r2, #0
 800e708:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	2206      	movs	r2, #6
 800e70e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	2204      	movs	r2, #4
 800e714:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e716:	f640 0306 	movw	r3, #2054	; 0x806
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	69b9      	ldr	r1, [r7, #24]
 800e722:	68f8      	ldr	r0, [r7, #12]
 800e724:	f001 fb12 	bl	800fd4c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e728:	69b8      	ldr	r0, [r7, #24]
 800e72a:	f7f7 f931 	bl	8005990 <pbuf_free>
  p = NULL;
 800e72e:	2300      	movs	r3, #0
 800e730:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e732:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e736:	4618      	mov	r0, r3
 800e738:	3720      	adds	r7, #32
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	08013c34 	.word	0x08013c34
 800e744:	08013d84 	.word	0x08013d84
 800e748:	08013cac 	.word	0x08013cac
 800e74c:	08013e24 	.word	0x08013e24
 800e750:	08013e58 	.word	0x08013e58

0800e754 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b088      	sub	sp, #32
 800e758:	af04      	add	r7, sp, #16
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e770:	2201      	movs	r2, #1
 800e772:	9203      	str	r2, [sp, #12]
 800e774:	68ba      	ldr	r2, [r7, #8]
 800e776:	9202      	str	r2, [sp, #8]
 800e778:	4a06      	ldr	r2, [pc, #24]	; (800e794 <etharp_request_dst+0x40>)
 800e77a:	9201      	str	r2, [sp, #4]
 800e77c:	9300      	str	r3, [sp, #0]
 800e77e:	4603      	mov	r3, r0
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	68f8      	ldr	r0, [r7, #12]
 800e784:	f7ff ff5a 	bl	800e63c <etharp_raw>
 800e788:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3710      	adds	r7, #16
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	08015110 	.word	0x08015110

0800e798 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e7a2:	4a05      	ldr	r2, [pc, #20]	; (800e7b8 <etharp_request+0x20>)
 800e7a4:	6839      	ldr	r1, [r7, #0]
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f7ff ffd4 	bl	800e754 <etharp_request_dst>
 800e7ac:	4603      	mov	r3, r0
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3708      	adds	r7, #8
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	08015108 	.word	0x08015108

0800e7bc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b08e      	sub	sp, #56	; 0x38
 800e7c0:	af04      	add	r7, sp, #16
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e7c6:	4b7a      	ldr	r3, [pc, #488]	; (800e9b0 <icmp_input+0x1f4>)
 800e7c8:	689b      	ldr	r3, [r3, #8]
 800e7ca:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800e7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	f003 030f 	and.w	r3, r3, #15
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e7dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7de:	2b13      	cmp	r3, #19
 800e7e0:	f240 80d1 	bls.w	800e986 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	895b      	ldrh	r3, [r3, #10]
 800e7e8:	2b03      	cmp	r3, #3
 800e7ea:	f240 80ce 	bls.w	800e98a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e7f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f000 80bb 	beq.w	800e978 <icmp_input+0x1bc>
 800e802:	2b08      	cmp	r3, #8
 800e804:	f040 80bb 	bne.w	800e97e <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800e808:	4b6a      	ldr	r3, [pc, #424]	; (800e9b4 <icmp_input+0x1f8>)
 800e80a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e80c:	4b68      	ldr	r3, [pc, #416]	; (800e9b0 <icmp_input+0x1f4>)
 800e80e:	695b      	ldr	r3, [r3, #20]
 800e810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e814:	2be0      	cmp	r3, #224	; 0xe0
 800e816:	f000 80bf 	beq.w	800e998 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e81a:	4b65      	ldr	r3, [pc, #404]	; (800e9b0 <icmp_input+0x1f4>)
 800e81c:	695a      	ldr	r2, [r3, #20]
 800e81e:	4b64      	ldr	r3, [pc, #400]	; (800e9b0 <icmp_input+0x1f4>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4619      	mov	r1, r3
 800e824:	4610      	mov	r0, r2
 800e826:	f000 fbef 	bl	800f008 <ip4_addr_isbroadcast_u32>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f040 80b5 	bne.w	800e99c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	891b      	ldrh	r3, [r3, #8]
 800e836:	2b07      	cmp	r3, #7
 800e838:	f240 80a9 	bls.w	800e98e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e83c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e83e:	330e      	adds	r3, #14
 800e840:	b29b      	uxth	r3, r3
 800e842:	b21b      	sxth	r3, r3
 800e844:	4619      	mov	r1, r3
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f7f7 f87e 	bl	8005948 <pbuf_header>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d046      	beq.n	800e8e0 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	891a      	ldrh	r2, [r3, #8]
 800e856:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e858:	4413      	add	r3, r2
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	2200      	movs	r2, #0
 800e85e:	4619      	mov	r1, r3
 800e860:	2002      	movs	r0, #2
 800e862:	f7f6 fd23 	bl	80052ac <pbuf_alloc>
 800e866:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f000 8098 	beq.w	800e9a0 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	895b      	ldrh	r3, [r3, #10]
 800e874:	461a      	mov	r2, r3
 800e876:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e878:	3308      	adds	r3, #8
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d203      	bcs.n	800e886 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800e87e:	69b8      	ldr	r0, [r7, #24]
 800e880:	f7f7 f886 	bl	8005990 <pbuf_free>
        goto icmperr;
 800e884:	e08d      	b.n	800e9a2 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e88c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e88e:	4618      	mov	r0, r3
 800e890:	f002 fb99 	bl	8010fc6 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800e894:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e896:	425b      	negs	r3, r3
 800e898:	b29b      	uxth	r3, r3
 800e89a:	b21b      	sxth	r3, r3
 800e89c:	4619      	mov	r1, r3
 800e89e:	69b8      	ldr	r0, [r7, #24]
 800e8a0:	f7f7 f852 	bl	8005948 <pbuf_header>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d009      	beq.n	800e8be <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e8aa:	4b43      	ldr	r3, [pc, #268]	; (800e9b8 <icmp_input+0x1fc>)
 800e8ac:	22af      	movs	r2, #175	; 0xaf
 800e8ae:	4943      	ldr	r1, [pc, #268]	; (800e9bc <icmp_input+0x200>)
 800e8b0:	4843      	ldr	r0, [pc, #268]	; (800e9c0 <icmp_input+0x204>)
 800e8b2:	f002 fb9b 	bl	8010fec <iprintf>
        pbuf_free(r);
 800e8b6:	69b8      	ldr	r0, [r7, #24]
 800e8b8:	f7f7 f86a 	bl	8005990 <pbuf_free>
        goto icmperr;
 800e8bc:	e071      	b.n	800e9a2 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800e8be:	6879      	ldr	r1, [r7, #4]
 800e8c0:	69b8      	ldr	r0, [r7, #24]
 800e8c2:	f7f7 f999 	bl	8005bf8 <pbuf_copy>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d003      	beq.n	800e8d4 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800e8cc:	69b8      	ldr	r0, [r7, #24]
 800e8ce:	f7f7 f85f 	bl	8005990 <pbuf_free>
        goto icmperr;
 800e8d2:	e066      	b.n	800e9a2 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7f7 f85b 	bl	8005990 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	607b      	str	r3, [r7, #4]
 800e8de:	e015      	b.n	800e90c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800e8e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8e2:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800e8e6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800e8ea:	33f2      	adds	r3, #242	; 0xf2
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	b21b      	sxth	r3, r3
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f7f7 f828 	bl	8005948 <pbuf_header>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d006      	beq.n	800e90c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e8fe:	4b2e      	ldr	r3, [pc, #184]	; (800e9b8 <icmp_input+0x1fc>)
 800e900:	22c0      	movs	r2, #192	; 0xc0
 800e902:	4930      	ldr	r1, [pc, #192]	; (800e9c4 <icmp_input+0x208>)
 800e904:	482e      	ldr	r0, [pc, #184]	; (800e9c0 <icmp_input+0x204>)
 800e906:	f002 fb71 	bl	8010fec <iprintf>
        goto icmperr;
 800e90a:	e04a      	b.n	800e9a2 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800e912:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e916:	4619      	mov	r1, r3
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f7f7 f815 	bl	8005948 <pbuf_header>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d12b      	bne.n	800e97c <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e932:	4b1f      	ldr	r3, [pc, #124]	; (800e9b0 <icmp_input+0x1f4>)
 800e934:	691a      	ldr	r2, [r3, #16]
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	2200      	movs	r2, #0
 800e93e:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	2200      	movs	r2, #0
 800e944:	709a      	strb	r2, [r3, #2]
 800e946:	2200      	movs	r2, #0
 800e948:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	22ff      	movs	r2, #255	; 0xff
 800e94e:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	2200      	movs	r2, #0
 800e954:	729a      	strb	r2, [r3, #10]
 800e956:	2200      	movs	r2, #0
 800e958:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	9302      	str	r3, [sp, #8]
 800e95e:	2301      	movs	r3, #1
 800e960:	9301      	str	r3, [sp, #4]
 800e962:	2300      	movs	r3, #0
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	23ff      	movs	r3, #255	; 0xff
 800e968:	2200      	movs	r2, #0
 800e96a:	69f9      	ldr	r1, [r7, #28]
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 fa79 	bl	800ee64 <ip4_output_if>
 800e972:	4603      	mov	r3, r0
 800e974:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800e976:	e001      	b.n	800e97c <icmp_input+0x1c0>
    break;
 800e978:	bf00      	nop
 800e97a:	e000      	b.n	800e97e <icmp_input+0x1c2>
    break;
 800e97c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f7f7 f806 	bl	8005990 <pbuf_free>
  return;
 800e984:	e011      	b.n	800e9aa <icmp_input+0x1ee>
    goto lenerr;
 800e986:	bf00      	nop
 800e988:	e002      	b.n	800e990 <icmp_input+0x1d4>
    goto lenerr;
 800e98a:	bf00      	nop
 800e98c:	e000      	b.n	800e990 <icmp_input+0x1d4>
      goto lenerr;
 800e98e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f7f6 fffd 	bl	8005990 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e996:	e008      	b.n	800e9aa <icmp_input+0x1ee>
      goto icmperr;
 800e998:	bf00      	nop
 800e99a:	e002      	b.n	800e9a2 <icmp_input+0x1e6>
      goto icmperr;
 800e99c:	bf00      	nop
 800e99e:	e000      	b.n	800e9a2 <icmp_input+0x1e6>
        goto icmperr;
 800e9a0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7f6 fff4 	bl	8005990 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e9a8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e9aa:	3728      	adds	r7, #40	; 0x28
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	20000674 	.word	0x20000674
 800e9b4:	20000688 	.word	0x20000688
 800e9b8:	08013e9c 	.word	0x08013e9c
 800e9bc:	08013ed4 	.word	0x08013ed4
 800e9c0:	08013f0c 	.word	0x08013f0c
 800e9c4:	08013f34 	.word	0x08013f34

0800e9c8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e9d4:	78fb      	ldrb	r3, [r7, #3]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	2103      	movs	r1, #3
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 f814 	bl	800ea08 <icmp_send_response>
}
 800e9e0:	bf00      	nop
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e9f4:	78fb      	ldrb	r3, [r7, #3]
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	210b      	movs	r1, #11
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f000 f804 	bl	800ea08 <icmp_send_response>
}
 800ea00:	bf00      	nop
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b08c      	sub	sp, #48	; 0x30
 800ea0c:	af04      	add	r7, sp, #16
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	460b      	mov	r3, r1
 800ea12:	70fb      	strb	r3, [r7, #3]
 800ea14:	4613      	mov	r3, r2
 800ea16:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2124      	movs	r1, #36	; 0x24
 800ea1c:	2001      	movs	r0, #1
 800ea1e:	f7f6 fc45 	bl	80052ac <pbuf_alloc>
 800ea22:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d04c      	beq.n	800eac4 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	895b      	ldrh	r3, [r3, #10]
 800ea2e:	2b23      	cmp	r3, #35	; 0x23
 800ea30:	d806      	bhi.n	800ea40 <icmp_send_response+0x38>
 800ea32:	4b26      	ldr	r3, [pc, #152]	; (800eacc <icmp_send_response+0xc4>)
 800ea34:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800ea38:	4925      	ldr	r1, [pc, #148]	; (800ead0 <icmp_send_response+0xc8>)
 800ea3a:	4826      	ldr	r0, [pc, #152]	; (800ead4 <icmp_send_response+0xcc>)
 800ea3c:	f002 fad6 	bl	8010fec <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ea46:	69fb      	ldr	r3, [r7, #28]
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	78fa      	ldrb	r2, [r7, #3]
 800ea50:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	78ba      	ldrb	r2, [r7, #2]
 800ea56:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	711a      	strb	r2, [r3, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	2200      	movs	r2, #0
 800ea66:	719a      	strb	r2, [r3, #6]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	f103 0008 	add.w	r0, r3, #8
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	221c      	movs	r2, #28
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	f002 faa3 	bl	8010fc6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ea80:	69bb      	ldr	r3, [r7, #24]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ea86:	f107 030c 	add.w	r3, r7, #12
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f000 f824 	bl	800ead8 <ip4_route>
 800ea90:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d011      	beq.n	800eabc <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	709a      	strb	r2, [r3, #2]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800eaa2:	f107 020c 	add.w	r2, r7, #12
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	9302      	str	r3, [sp, #8]
 800eaaa:	2301      	movs	r3, #1
 800eaac:	9301      	str	r3, [sp, #4]
 800eaae:	2300      	movs	r3, #0
 800eab0:	9300      	str	r3, [sp, #0]
 800eab2:	23ff      	movs	r3, #255	; 0xff
 800eab4:	2100      	movs	r1, #0
 800eab6:	69f8      	ldr	r0, [r7, #28]
 800eab8:	f000 f9d4 	bl	800ee64 <ip4_output_if>
  }
  pbuf_free(q);
 800eabc:	69f8      	ldr	r0, [r7, #28]
 800eabe:	f7f6 ff67 	bl	8005990 <pbuf_free>
 800eac2:	e000      	b.n	800eac6 <icmp_send_response+0xbe>
    return;
 800eac4:	bf00      	nop
}
 800eac6:	3720      	adds	r7, #32
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	08013e9c 	.word	0x08013e9c
 800ead0:	08013f68 	.word	0x08013f68
 800ead4:	08013f0c 	.word	0x08013f0c

0800ead8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ead8:	b480      	push	{r7}
 800eada:	b085      	sub	sp, #20
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800eae0:	4b30      	ldr	r3, [pc, #192]	; (800eba4 <ip4_route+0xcc>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	60fb      	str	r3, [r7, #12]
 800eae6:	e036      	b.n	800eb56 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eaee:	f003 0301 	and.w	r3, r3, #1
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d02b      	beq.n	800eb50 <ip4_route+0x78>
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eafe:	089b      	lsrs	r3, r3, #2
 800eb00:	f003 0301 	and.w	r3, r3, #1
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d022      	beq.n	800eb50 <ip4_route+0x78>
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d01d      	beq.n	800eb50 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681a      	ldr	r2, [r3, #0]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	3304      	adds	r3, #4
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	405a      	eors	r2, r3
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	3308      	adds	r3, #8
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4013      	ands	r3, r2
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d101      	bne.n	800eb30 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	e033      	b.n	800eb98 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb36:	f003 0302 	and.w	r3, r3, #2
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d108      	bne.n	800eb50 <ip4_route+0x78>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	330c      	adds	r3, #12
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d101      	bne.n	800eb50 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	e023      	b.n	800eb98 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	60fb      	str	r3, [r7, #12]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1c5      	bne.n	800eae8 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800eb5c:	4b12      	ldr	r3, [pc, #72]	; (800eba8 <ip4_route+0xd0>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d015      	beq.n	800eb90 <ip4_route+0xb8>
 800eb64:	4b10      	ldr	r3, [pc, #64]	; (800eba8 <ip4_route+0xd0>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb6c:	f003 0301 	and.w	r3, r3, #1
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d00d      	beq.n	800eb90 <ip4_route+0xb8>
 800eb74:	4b0c      	ldr	r3, [pc, #48]	; (800eba8 <ip4_route+0xd0>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb7c:	f003 0304 	and.w	r3, r3, #4
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d005      	beq.n	800eb90 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800eb84:	4b08      	ldr	r3, [pc, #32]	; (800eba8 <ip4_route+0xd0>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	3304      	adds	r3, #4
 800eb8a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d101      	bne.n	800eb94 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800eb90:	2300      	movs	r3, #0
 800eb92:	e001      	b.n	800eb98 <ip4_route+0xc0>
  }

  return netif_default;
 800eb94:	4b04      	ldr	r3, [pc, #16]	; (800eba8 <ip4_route+0xd0>)
 800eb96:	681b      	ldr	r3, [r3, #0]
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3714      	adds	r7, #20
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr
 800eba4:	20003bb4 	.word	0x20003bb4
 800eba8:	20003bb8 	.word	0x20003bb8

0800ebac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b088      	sub	sp, #32
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	091b      	lsrs	r3, r3, #4
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	2b04      	cmp	r3, #4
 800ebca:	d004      	beq.n	800ebd6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7f6 fedf 	bl	8005990 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	e13e      	b.n	800ee54 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	f003 030f 	and.w	r3, r3, #15
 800ebe0:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800ebe2:	89fb      	ldrh	r3, [r7, #14]
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	885b      	ldrh	r3, [r3, #2]
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7f5 fd38 	bl	8004664 <lwip_htons>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	891b      	ldrh	r3, [r3, #8]
 800ebfc:	89ba      	ldrh	r2, [r7, #12]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d204      	bcs.n	800ec0c <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 800ec02:	89bb      	ldrh	r3, [r7, #12]
 800ec04:	4619      	mov	r1, r3
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7f6 fd4e 	bl	80056a8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	895b      	ldrh	r3, [r3, #10]
 800ec10:	89fa      	ldrh	r2, [r7, #14]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d807      	bhi.n	800ec26 <ip4_input+0x7a>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	891b      	ldrh	r3, [r3, #8]
 800ec1a:	89ba      	ldrh	r2, [r7, #12]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d802      	bhi.n	800ec26 <ip4_input+0x7a>
 800ec20:	89fb      	ldrh	r3, [r7, #14]
 800ec22:	2b13      	cmp	r3, #19
 800ec24:	d804      	bhi.n	800ec30 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f7f6 feb2 	bl	8005990 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	e111      	b.n	800ee54 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	691b      	ldr	r3, [r3, #16]
 800ec34:	4a89      	ldr	r2, [pc, #548]	; (800ee5c <ip4_input+0x2b0>)
 800ec36:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	4a87      	ldr	r2, [pc, #540]	; (800ee5c <ip4_input+0x2b0>)
 800ec3e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ec40:	4b86      	ldr	r3, [pc, #536]	; (800ee5c <ip4_input+0x2b0>)
 800ec42:	695b      	ldr	r3, [r3, #20]
 800ec44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec48:	2be0      	cmp	r3, #224	; 0xe0
 800ec4a:	d112      	bne.n	800ec72 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec52:	f003 0301 	and.w	r3, r3, #1
 800ec56:	b2db      	uxtb	r3, r3
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d007      	beq.n	800ec6c <ip4_input+0xc0>
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	3304      	adds	r3, #4
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d002      	beq.n	800ec6c <ip4_input+0xc0>
      netif = inp;
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	61bb      	str	r3, [r7, #24]
 800ec6a:	e041      	b.n	800ecf0 <ip4_input+0x144>
    } else {
      netif = NULL;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	61bb      	str	r3, [r7, #24]
 800ec70:	e03e      	b.n	800ecf0 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800ec72:	2301      	movs	r3, #1
 800ec74:	613b      	str	r3, [r7, #16]
    netif = inp;
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ec7a:	69bb      	ldr	r3, [r7, #24]
 800ec7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec80:	f003 0301 	and.w	r3, r3, #1
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d014      	beq.n	800ecb4 <ip4_input+0x108>
 800ec8a:	69bb      	ldr	r3, [r7, #24]
 800ec8c:	3304      	adds	r3, #4
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d00f      	beq.n	800ecb4 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ec94:	4b71      	ldr	r3, [pc, #452]	; (800ee5c <ip4_input+0x2b0>)
 800ec96:	695a      	ldr	r2, [r3, #20]
 800ec98:	69bb      	ldr	r3, [r7, #24]
 800ec9a:	3304      	adds	r3, #4
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d026      	beq.n	800ecf0 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800eca2:	4b6e      	ldr	r3, [pc, #440]	; (800ee5c <ip4_input+0x2b0>)
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	69b9      	ldr	r1, [r7, #24]
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f000 f9ad 	bl	800f008 <ip4_addr_isbroadcast_u32>
 800ecae:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d11d      	bne.n	800ecf0 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00d      	beq.n	800ecd6 <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800ecba:	4b68      	ldr	r3, [pc, #416]	; (800ee5c <ip4_input+0x2b0>)
 800ecbc:	695b      	ldr	r3, [r3, #20]
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	2b7f      	cmp	r3, #127	; 0x7f
 800ecc2:	d102      	bne.n	800ecca <ip4_input+0x11e>
          netif = NULL;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	61bb      	str	r3, [r7, #24]
          break;
 800ecc8:	e012      	b.n	800ecf0 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800ecca:	2300      	movs	r3, #0
 800eccc:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 800ecce:	4b64      	ldr	r3, [pc, #400]	; (800ee60 <ip4_input+0x2b4>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	61bb      	str	r3, [r7, #24]
 800ecd4:	e002      	b.n	800ecdc <ip4_input+0x130>
      } else {
        netif = netif->next;
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 800ecdc:	69ba      	ldr	r2, [r7, #24]
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d102      	bne.n	800ecea <ip4_input+0x13e>
        netif = netif->next;
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 800ecea:	69bb      	ldr	r3, [r7, #24]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d1c4      	bne.n	800ec7a <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d111      	bne.n	800ed1a <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	7a5b      	ldrb	r3, [r3, #9]
 800ecfa:	2b11      	cmp	r3, #17
 800ecfc:	d10d      	bne.n	800ed1a <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 800ecfe:	89fb      	ldrh	r3, [r7, #14]
 800ed00:	69fa      	ldr	r2, [r7, #28]
 800ed02:	4413      	add	r3, r2
 800ed04:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	885b      	ldrh	r3, [r3, #2]
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800ed10:	d103      	bne.n	800ed1a <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800ed16:	2300      	movs	r3, #0
 800ed18:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d017      	beq.n	800ed50 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800ed20:	4b4e      	ldr	r3, [pc, #312]	; (800ee5c <ip4_input+0x2b0>)
 800ed22:	691b      	ldr	r3, [r3, #16]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d013      	beq.n	800ed50 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ed28:	4b4c      	ldr	r3, [pc, #304]	; (800ee5c <ip4_input+0x2b0>)
 800ed2a:	691b      	ldr	r3, [r3, #16]
 800ed2c:	6839      	ldr	r1, [r7, #0]
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f000 f96a 	bl	800f008 <ip4_addr_isbroadcast_u32>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d105      	bne.n	800ed46 <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ed3a:	4b48      	ldr	r3, [pc, #288]	; (800ee5c <ip4_input+0x2b0>)
 800ed3c:	691b      	ldr	r3, [r3, #16]
 800ed3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ed42:	2be0      	cmp	r3, #224	; 0xe0
 800ed44:	d104      	bne.n	800ed50 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f7f6 fe22 	bl	8005990 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	e081      	b.n	800ee54 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d104      	bne.n	800ed60 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f7f6 fe1a 	bl	8005990 <pbuf_free>
    return ERR_OK;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	e079      	b.n	800ee54 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	88db      	ldrh	r3, [r3, #6]
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	461a      	mov	r2, r3
 800ed68:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800ed6c:	4013      	ands	r3, r2
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d00b      	beq.n	800ed8a <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 fc8e 	bl	800f694 <ip4_reass>
 800ed78:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d101      	bne.n	800ed84 <ip4_input+0x1d8>
      return ERR_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	e067      	b.n	800ee54 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ed8a:	4a34      	ldr	r2, [pc, #208]	; (800ee5c <ip4_input+0x2b0>)
 800ed8c:	69bb      	ldr	r3, [r7, #24]
 800ed8e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ed90:	4a32      	ldr	r2, [pc, #200]	; (800ee5c <ip4_input+0x2b0>)
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ed96:	4a31      	ldr	r2, [pc, #196]	; (800ee5c <ip4_input+0x2b0>)
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	f003 030f 	and.w	r3, r3, #15
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	009b      	lsls	r3, r3, #2
 800edaa:	b29a      	uxth	r2, r3
 800edac:	4b2b      	ldr	r3, [pc, #172]	; (800ee5c <ip4_input+0x2b0>)
 800edae:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800edb0:	89fb      	ldrh	r3, [r7, #14]
 800edb2:	425b      	negs	r3, r3
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	b21b      	sxth	r3, r3
 800edb8:	4619      	mov	r1, r3
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7f6 fdc4 	bl	8005948 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800edc0:	69fb      	ldr	r3, [r7, #28]
 800edc2:	7a5b      	ldrb	r3, [r3, #9]
 800edc4:	2b06      	cmp	r3, #6
 800edc6:	d009      	beq.n	800eddc <ip4_input+0x230>
 800edc8:	2b11      	cmp	r3, #17
 800edca:	d002      	beq.n	800edd2 <ip4_input+0x226>
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d00a      	beq.n	800ede6 <ip4_input+0x23a>
 800edd0:	e00e      	b.n	800edf0 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800edd2:	6839      	ldr	r1, [r7, #0]
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f7fc fc11 	bl	800b5fc <udp_input>
      break;
 800edda:	e028      	b.n	800ee2e <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800eddc:	6839      	ldr	r1, [r7, #0]
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f7f8 fc7c 	bl	80076dc <tcp_input>
      break;
 800ede4:	e023      	b.n	800ee2e <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800ede6:	6839      	ldr	r1, [r7, #0]
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f7ff fce7 	bl	800e7bc <icmp_input>
      break;
 800edee:	e01e      	b.n	800ee2e <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800edf0:	4b1a      	ldr	r3, [pc, #104]	; (800ee5c <ip4_input+0x2b0>)
 800edf2:	695b      	ldr	r3, [r3, #20]
 800edf4:	69b9      	ldr	r1, [r7, #24]
 800edf6:	4618      	mov	r0, r3
 800edf8:	f000 f906 	bl	800f008 <ip4_addr_isbroadcast_u32>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d112      	bne.n	800ee28 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ee02:	4b16      	ldr	r3, [pc, #88]	; (800ee5c <ip4_input+0x2b0>)
 800ee04:	695b      	ldr	r3, [r3, #20]
 800ee06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ee0a:	2be0      	cmp	r3, #224	; 0xe0
 800ee0c:	d00c      	beq.n	800ee28 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800ee0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ee12:	4619      	mov	r1, r3
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f7f6 fda9 	bl	800596c <pbuf_header_force>
        p->payload = iphdr;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	69fa      	ldr	r2, [r7, #28]
 800ee1e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ee20:	2102      	movs	r1, #2
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7ff fdd0 	bl	800e9c8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7f6 fdb1 	bl	8005990 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ee2e:	4b0b      	ldr	r3, [pc, #44]	; (800ee5c <ip4_input+0x2b0>)
 800ee30:	2200      	movs	r2, #0
 800ee32:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ee34:	4b09      	ldr	r3, [pc, #36]	; (800ee5c <ip4_input+0x2b0>)
 800ee36:	2200      	movs	r2, #0
 800ee38:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ee3a:	4b08      	ldr	r3, [pc, #32]	; (800ee5c <ip4_input+0x2b0>)
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ee40:	4b06      	ldr	r3, [pc, #24]	; (800ee5c <ip4_input+0x2b0>)
 800ee42:	2200      	movs	r2, #0
 800ee44:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ee46:	4b05      	ldr	r3, [pc, #20]	; (800ee5c <ip4_input+0x2b0>)
 800ee48:	2200      	movs	r2, #0
 800ee4a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ee4c:	4b03      	ldr	r3, [pc, #12]	; (800ee5c <ip4_input+0x2b0>)
 800ee4e:	2200      	movs	r2, #0
 800ee50:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3720      	adds	r7, #32
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	20000674 	.word	0x20000674
 800ee60:	20003bb4 	.word	0x20003bb4

0800ee64 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b08a      	sub	sp, #40	; 0x28
 800ee68:	af04      	add	r7, sp, #16
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	607a      	str	r2, [r7, #4]
 800ee70:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d009      	beq.n	800ee90 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d003      	beq.n	800ee8a <ip4_output_if+0x26>
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d102      	bne.n	800ee90 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ee8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8c:	3304      	adds	r3, #4
 800ee8e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ee90:	78fa      	ldrb	r2, [r7, #3]
 800ee92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee94:	9302      	str	r3, [sp, #8]
 800ee96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ee9a:	9301      	str	r3, [sp, #4]
 800ee9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eea0:	9300      	str	r3, [sp, #0]
 800eea2:	4613      	mov	r3, r2
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	6979      	ldr	r1, [r7, #20]
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	f000 f805 	bl	800eeb8 <ip4_output_if_src>
 800eeae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3718      	adds	r7, #24
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b088      	sub	sp, #32
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]
 800eec4:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	89db      	ldrh	r3, [r3, #14]
 800eeca:	2b01      	cmp	r3, #1
 800eecc:	d006      	beq.n	800eedc <ip4_output_if_src+0x24>
 800eece:	4b48      	ldr	r3, [pc, #288]	; (800eff0 <ip4_output_if_src+0x138>)
 800eed0:	f240 3233 	movw	r2, #819	; 0x333
 800eed4:	4947      	ldr	r1, [pc, #284]	; (800eff4 <ip4_output_if_src+0x13c>)
 800eed6:	4848      	ldr	r0, [pc, #288]	; (800eff8 <ip4_output_if_src+0x140>)
 800eed8:	f002 f888 	bl	8010fec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d060      	beq.n	800efa4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800eee2:	2314      	movs	r3, #20
 800eee4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800eee6:	2114      	movs	r1, #20
 800eee8:	68f8      	ldr	r0, [r7, #12]
 800eeea:	f7f6 fd2d 	bl	8005948 <pbuf_header>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d002      	beq.n	800eefa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eef4:	f06f 0301 	mvn.w	r3, #1
 800eef8:	e075      	b.n	800efe6 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	895b      	ldrh	r3, [r3, #10]
 800ef04:	2b13      	cmp	r3, #19
 800ef06:	d806      	bhi.n	800ef16 <ip4_output_if_src+0x5e>
 800ef08:	4b39      	ldr	r3, [pc, #228]	; (800eff0 <ip4_output_if_src+0x138>)
 800ef0a:	f240 3261 	movw	r2, #865	; 0x361
 800ef0e:	493b      	ldr	r1, [pc, #236]	; (800effc <ip4_output_if_src+0x144>)
 800ef10:	4839      	ldr	r0, [pc, #228]	; (800eff8 <ip4_output_if_src+0x140>)
 800ef12:	f002 f86b 	bl	8010fec <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	78fa      	ldrb	r2, [r7, #3]
 800ef1a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ef22:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	69fb      	ldr	r3, [r7, #28]
 800ef2a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ef2c:	8b7b      	ldrh	r3, [r7, #26]
 800ef2e:	089b      	lsrs	r3, r3, #2
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef38:	b2da      	uxtb	r2, r3
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ef44:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	891b      	ldrh	r3, [r3, #8]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7f5 fb8a 	bl	8004664 <lwip_htons>
 800ef50:	4603      	mov	r3, r0
 800ef52:	461a      	mov	r2, r3
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ef58:	69fb      	ldr	r3, [r7, #28]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	719a      	strb	r2, [r3, #6]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ef62:	4b27      	ldr	r3, [pc, #156]	; (800f000 <ip4_output_if_src+0x148>)
 800ef64:	881b      	ldrh	r3, [r3, #0]
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7f5 fb7c 	bl	8004664 <lwip_htons>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	461a      	mov	r2, r3
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ef74:	4b22      	ldr	r3, [pc, #136]	; (800f000 <ip4_output_if_src+0x148>)
 800ef76:	881b      	ldrh	r3, [r3, #0]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	b29a      	uxth	r2, r3
 800ef7c:	4b20      	ldr	r3, [pc, #128]	; (800f000 <ip4_output_if_src+0x148>)
 800ef7e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d104      	bne.n	800ef90 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ef86:	4b1f      	ldr	r3, [pc, #124]	; (800f004 <ip4_output_if_src+0x14c>)
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	69fb      	ldr	r3, [r7, #28]
 800ef8c:	60da      	str	r2, [r3, #12]
 800ef8e:	e003      	b.n	800ef98 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	69fb      	ldr	r3, [r7, #28]
 800ef96:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	729a      	strb	r2, [r3, #10]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	72da      	strb	r2, [r3, #11]
 800efa2:	e008      	b.n	800efb6 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800efaa:	69fb      	ldr	r3, [r7, #28]
 800efac:	691b      	ldr	r3, [r3, #16]
 800efae:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800efb0:	f107 0314 	add.w	r3, r7, #20
 800efb4:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800efb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00c      	beq.n	800efd8 <ip4_output_if_src+0x120>
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	891a      	ldrh	r2, [r3, #8]
 800efc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d906      	bls.n	800efd8 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f000 fd0a 	bl	800f9e8 <ip4_frag>
 800efd4:	4603      	mov	r3, r0
 800efd6:	e006      	b.n	800efe6 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800efd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efda:	695b      	ldr	r3, [r3, #20]
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	68f9      	ldr	r1, [r7, #12]
 800efe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efe2:	4798      	blx	r3
 800efe4:	4603      	mov	r3, r0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3720      	adds	r7, #32
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	08013f94 	.word	0x08013f94
 800eff4:	08013fc8 	.word	0x08013fc8
 800eff8:	08013fd4 	.word	0x08013fd4
 800effc:	08013ffc 	.word	0x08013ffc
 800f000:	2000064a 	.word	0x2000064a
 800f004:	08015100 	.word	0x08015100

0800f008 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f01c:	d002      	beq.n	800f024 <ip4_addr_isbroadcast_u32+0x1c>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d101      	bne.n	800f028 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f024:	2301      	movs	r3, #1
 800f026:	e02a      	b.n	800f07e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f02e:	f003 0302 	and.w	r3, r3, #2
 800f032:	2b00      	cmp	r3, #0
 800f034:	d101      	bne.n	800f03a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f036:	2300      	movs	r3, #0
 800f038:	e021      	b.n	800f07e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	3304      	adds	r3, #4
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	429a      	cmp	r2, r3
 800f044:	d101      	bne.n	800f04a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f046:	2300      	movs	r3, #0
 800f048:	e019      	b.n	800f07e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	3304      	adds	r3, #4
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	405a      	eors	r2, r3
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	3308      	adds	r3, #8
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4013      	ands	r3, r2
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d10d      	bne.n	800f07c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	3308      	adds	r3, #8
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	43da      	mvns	r2, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	3308      	adds	r3, #8
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f074:	429a      	cmp	r2, r3
 800f076:	d101      	bne.n	800f07c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f078:	2301      	movs	r3, #1
 800f07a:	e000      	b.n	800f07e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f07c:	2300      	movs	r3, #0
  }
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr
	...

0800f08c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b084      	sub	sp, #16
 800f090:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f092:	2300      	movs	r3, #0
 800f094:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f096:	4b12      	ldr	r3, [pc, #72]	; (800f0e0 <ip_reass_tmr+0x54>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f09c:	e018      	b.n	800f0d0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	7fdb      	ldrb	r3, [r3, #31]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00b      	beq.n	800f0be <ip_reass_tmr+0x32>
      r->timer--;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	7fdb      	ldrb	r3, [r3, #31]
 800f0aa:	3b01      	subs	r3, #1
 800f0ac:	b2da      	uxtb	r2, r3
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	60fb      	str	r3, [r7, #12]
 800f0bc:	e008      	b.n	800f0d0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f0c8:	68b9      	ldr	r1, [r7, #8]
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 f80a 	bl	800f0e4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d1e3      	bne.n	800f09e <ip_reass_tmr+0x12>
     }
   }
}
 800f0d6:	bf00      	nop
 800f0d8:	3710      	adds	r7, #16
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	2000064c 	.word	0x2000064c

0800f0e4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b088      	sub	sp, #32
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f0f2:	683a      	ldr	r2, [r7, #0]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d105      	bne.n	800f106 <ip_reass_free_complete_datagram+0x22>
 800f0fa:	4b45      	ldr	r3, [pc, #276]	; (800f210 <ip_reass_free_complete_datagram+0x12c>)
 800f0fc:	22ab      	movs	r2, #171	; 0xab
 800f0fe:	4945      	ldr	r1, [pc, #276]	; (800f214 <ip_reass_free_complete_datagram+0x130>)
 800f100:	4845      	ldr	r0, [pc, #276]	; (800f218 <ip_reass_free_complete_datagram+0x134>)
 800f102:	f001 ff73 	bl	8010fec <iprintf>
  if (prev != NULL) {
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d00a      	beq.n	800f122 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	429a      	cmp	r2, r3
 800f114:	d005      	beq.n	800f122 <ip_reass_free_complete_datagram+0x3e>
 800f116:	4b3e      	ldr	r3, [pc, #248]	; (800f210 <ip_reass_free_complete_datagram+0x12c>)
 800f118:	22ad      	movs	r2, #173	; 0xad
 800f11a:	4940      	ldr	r1, [pc, #256]	; (800f21c <ip_reass_free_complete_datagram+0x138>)
 800f11c:	483e      	ldr	r0, [pc, #248]	; (800f218 <ip_reass_free_complete_datagram+0x134>)
 800f11e:	f001 ff65 	bl	8010fec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	889b      	ldrh	r3, [r3, #4]
 800f12e:	b29b      	uxth	r3, r3
 800f130:	2b00      	cmp	r3, #0
 800f132:	d12a      	bne.n	800f18a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	6858      	ldr	r0, [r3, #4]
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	3308      	adds	r3, #8
 800f14a:	2214      	movs	r2, #20
 800f14c:	4619      	mov	r1, r3
 800f14e:	f001 ff3a 	bl	8010fc6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f152:	2101      	movs	r1, #1
 800f154:	69b8      	ldr	r0, [r7, #24]
 800f156:	f7ff fc47 	bl	800e9e8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f15a:	69b8      	ldr	r0, [r7, #24]
 800f15c:	f7f6 fcac 	bl	8005ab8 <pbuf_clen>
 800f160:	4603      	mov	r3, r0
 800f162:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f164:	8bfa      	ldrh	r2, [r7, #30]
 800f166:	8a7b      	ldrh	r3, [r7, #18]
 800f168:	4413      	add	r3, r2
 800f16a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f16e:	db05      	blt.n	800f17c <ip_reass_free_complete_datagram+0x98>
 800f170:	4b27      	ldr	r3, [pc, #156]	; (800f210 <ip_reass_free_complete_datagram+0x12c>)
 800f172:	22bc      	movs	r2, #188	; 0xbc
 800f174:	492a      	ldr	r1, [pc, #168]	; (800f220 <ip_reass_free_complete_datagram+0x13c>)
 800f176:	4828      	ldr	r0, [pc, #160]	; (800f218 <ip_reass_free_complete_datagram+0x134>)
 800f178:	f001 ff38 	bl	8010fec <iprintf>
    pbufs_freed += clen;
 800f17c:	8bfa      	ldrh	r2, [r7, #30]
 800f17e:	8a7b      	ldrh	r3, [r7, #18]
 800f180:	4413      	add	r3, r2
 800f182:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f184:	69b8      	ldr	r0, [r7, #24]
 800f186:	f7f6 fc03 	bl	8005990 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f190:	e01f      	b.n	800f1d2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f198:	69bb      	ldr	r3, [r7, #24]
 800f19a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	f7f6 fc88 	bl	8005ab8 <pbuf_clen>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f1ac:	8bfa      	ldrh	r2, [r7, #30]
 800f1ae:	8a7b      	ldrh	r3, [r7, #18]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1b6:	db05      	blt.n	800f1c4 <ip_reass_free_complete_datagram+0xe0>
 800f1b8:	4b15      	ldr	r3, [pc, #84]	; (800f210 <ip_reass_free_complete_datagram+0x12c>)
 800f1ba:	22cc      	movs	r2, #204	; 0xcc
 800f1bc:	4918      	ldr	r1, [pc, #96]	; (800f220 <ip_reass_free_complete_datagram+0x13c>)
 800f1be:	4816      	ldr	r0, [pc, #88]	; (800f218 <ip_reass_free_complete_datagram+0x134>)
 800f1c0:	f001 ff14 	bl	8010fec <iprintf>
    pbufs_freed += clen;
 800f1c4:	8bfa      	ldrh	r2, [r7, #30]
 800f1c6:	8a7b      	ldrh	r3, [r7, #18]
 800f1c8:	4413      	add	r3, r2
 800f1ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f7f6 fbdf 	bl	8005990 <pbuf_free>
  while (p != NULL) {
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1dc      	bne.n	800f192 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 f8c2 	bl	800f364 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800f1e0:	4b10      	ldr	r3, [pc, #64]	; (800f224 <ip_reass_free_complete_datagram+0x140>)
 800f1e2:	881b      	ldrh	r3, [r3, #0]
 800f1e4:	8bfa      	ldrh	r2, [r7, #30]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d905      	bls.n	800f1f6 <ip_reass_free_complete_datagram+0x112>
 800f1ea:	4b09      	ldr	r3, [pc, #36]	; (800f210 <ip_reass_free_complete_datagram+0x12c>)
 800f1ec:	22d2      	movs	r2, #210	; 0xd2
 800f1ee:	490e      	ldr	r1, [pc, #56]	; (800f228 <ip_reass_free_complete_datagram+0x144>)
 800f1f0:	4809      	ldr	r0, [pc, #36]	; (800f218 <ip_reass_free_complete_datagram+0x134>)
 800f1f2:	f001 fefb 	bl	8010fec <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800f1f6:	4b0b      	ldr	r3, [pc, #44]	; (800f224 <ip_reass_free_complete_datagram+0x140>)
 800f1f8:	881a      	ldrh	r2, [r3, #0]
 800f1fa:	8bfb      	ldrh	r3, [r7, #30]
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	b29a      	uxth	r2, r3
 800f200:	4b08      	ldr	r3, [pc, #32]	; (800f224 <ip_reass_free_complete_datagram+0x140>)
 800f202:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f204:	8bfb      	ldrh	r3, [r7, #30]
}
 800f206:	4618      	mov	r0, r3
 800f208:	3720      	adds	r7, #32
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
 800f20e:	bf00      	nop
 800f210:	0801402c 	.word	0x0801402c
 800f214:	08014068 	.word	0x08014068
 800f218:	08014074 	.word	0x08014074
 800f21c:	0801409c 	.word	0x0801409c
 800f220:	080140b0 	.word	0x080140b0
 800f224:	20000650 	.word	0x20000650
 800f228:	080140d0 	.word	0x080140d0

0800f22c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b08a      	sub	sp, #40	; 0x28
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f236:	2300      	movs	r3, #0
 800f238:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f23a:	2300      	movs	r3, #0
 800f23c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f23e:	2300      	movs	r3, #0
 800f240:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f242:	2300      	movs	r3, #0
 800f244:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f246:	2300      	movs	r3, #0
 800f248:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f24a:	4b28      	ldr	r3, [pc, #160]	; (800f2ec <ip_reass_remove_oldest_datagram+0xc0>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f250:	e030      	b.n	800f2b4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f254:	695a      	ldr	r2, [r3, #20]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d10c      	bne.n	800f278 <ip_reass_remove_oldest_datagram+0x4c>
 800f25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f260:	699a      	ldr	r2, [r3, #24]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	691b      	ldr	r3, [r3, #16]
 800f266:	429a      	cmp	r2, r3
 800f268:	d106      	bne.n	800f278 <ip_reass_remove_oldest_datagram+0x4c>
 800f26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26c:	899a      	ldrh	r2, [r3, #12]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	889b      	ldrh	r3, [r3, #4]
 800f272:	b29b      	uxth	r3, r3
 800f274:	429a      	cmp	r2, r3
 800f276:	d014      	beq.n	800f2a2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	3301      	adds	r3, #1
 800f27c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f27e:	6a3b      	ldr	r3, [r7, #32]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d104      	bne.n	800f28e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f286:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	61bb      	str	r3, [r7, #24]
 800f28c:	e009      	b.n	800f2a2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f290:	7fda      	ldrb	r2, [r3, #31]
 800f292:	6a3b      	ldr	r3, [r7, #32]
 800f294:	7fdb      	ldrb	r3, [r3, #31]
 800f296:	429a      	cmp	r2, r3
 800f298:	d803      	bhi.n	800f2a2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d001      	beq.n	800f2ae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1cb      	bne.n	800f252 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f2ba:	6a3b      	ldr	r3, [r7, #32]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d008      	beq.n	800f2d2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f2c0:	69b9      	ldr	r1, [r7, #24]
 800f2c2:	6a38      	ldr	r0, [r7, #32]
 800f2c4:	f7ff ff0e 	bl	800f0e4 <ip_reass_free_complete_datagram>
 800f2c8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f2ca:	697a      	ldr	r2, [r7, #20]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f2d2:	697a      	ldr	r2, [r7, #20]
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	da02      	bge.n	800f2e0 <ip_reass_remove_oldest_datagram+0xb4>
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	dcac      	bgt.n	800f23a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f2e0:	697b      	ldr	r3, [r7, #20]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3728      	adds	r7, #40	; 0x28
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	2000064c 	.word	0x2000064c

0800f2f0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b084      	sub	sp, #16
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f2fa:	2004      	movs	r0, #4
 800f2fc:	f7f5 fdca 	bl	8004e94 <memp_malloc>
 800f300:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d110      	bne.n	800f32a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f308:	6839      	ldr	r1, [r7, #0]
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7ff ff8e 	bl	800f22c <ip_reass_remove_oldest_datagram>
 800f310:	4602      	mov	r2, r0
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	4293      	cmp	r3, r2
 800f316:	dc03      	bgt.n	800f320 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f318:	2004      	movs	r0, #4
 800f31a:	f7f5 fdbb 	bl	8004e94 <memp_malloc>
 800f31e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d101      	bne.n	800f32a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800f326:	2300      	movs	r3, #0
 800f328:	e016      	b.n	800f358 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f32a:	2220      	movs	r2, #32
 800f32c:	2100      	movs	r1, #0
 800f32e:	68f8      	ldr	r0, [r7, #12]
 800f330:	f001 fe54 	bl	8010fdc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2203      	movs	r2, #3
 800f338:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f33a:	4b09      	ldr	r3, [pc, #36]	; (800f360 <ip_reass_enqueue_new_datagram+0x70>)
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f342:	4a07      	ldr	r2, [pc, #28]	; (800f360 <ip_reass_enqueue_new_datagram+0x70>)
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	3308      	adds	r3, #8
 800f34c:	2214      	movs	r2, #20
 800f34e:	6879      	ldr	r1, [r7, #4]
 800f350:	4618      	mov	r0, r3
 800f352:	f001 fe38 	bl	8010fc6 <memcpy>
  return ipr;
 800f356:	68fb      	ldr	r3, [r7, #12]
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3710      	adds	r7, #16
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}
 800f360:	2000064c 	.word	0x2000064c

0800f364 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f36e:	4b10      	ldr	r3, [pc, #64]	; (800f3b0 <ip_reass_dequeue_datagram+0x4c>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	429a      	cmp	r2, r3
 800f376:	d104      	bne.n	800f382 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4a0c      	ldr	r2, [pc, #48]	; (800f3b0 <ip_reass_dequeue_datagram+0x4c>)
 800f37e:	6013      	str	r3, [r2, #0]
 800f380:	e00d      	b.n	800f39e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d106      	bne.n	800f396 <ip_reass_dequeue_datagram+0x32>
 800f388:	4b0a      	ldr	r3, [pc, #40]	; (800f3b4 <ip_reass_dequeue_datagram+0x50>)
 800f38a:	f240 1245 	movw	r2, #325	; 0x145
 800f38e:	490a      	ldr	r1, [pc, #40]	; (800f3b8 <ip_reass_dequeue_datagram+0x54>)
 800f390:	480a      	ldr	r0, [pc, #40]	; (800f3bc <ip_reass_dequeue_datagram+0x58>)
 800f392:	f001 fe2b 	bl	8010fec <iprintf>
    prev->next = ipr->next;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f39e:	6879      	ldr	r1, [r7, #4]
 800f3a0:	2004      	movs	r0, #4
 800f3a2:	f7f5 fdc3 	bl	8004f2c <memp_free>
}
 800f3a6:	bf00      	nop
 800f3a8:	3708      	adds	r7, #8
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	2000064c 	.word	0x2000064c
 800f3b4:	0801402c 	.word	0x0801402c
 800f3b8:	080140ec 	.word	0x080140ec
 800f3bc:	08014074 	.word	0x08014074

0800f3c0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b08c      	sub	sp, #48	; 0x30
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f3da:	69fb      	ldr	r3, [r7, #28]
 800f3dc:	885b      	ldrh	r3, [r3, #2]
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7f5 f93f 	bl	8004664 <lwip_htons>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	f003 030f 	and.w	r3, r3, #15
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	1ad3      	subs	r3, r2, r3
 800f3fc:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	88db      	ldrh	r3, [r3, #6]
 800f402:	b29b      	uxth	r3, r3
 800f404:	4618      	mov	r0, r3
 800f406:	f7f5 f92d 	bl	8004664 <lwip_htons>
 800f40a:	4603      	mov	r3, r0
 800f40c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f410:	b29b      	uxth	r3, r3
 800f412:	00db      	lsls	r3, r3, #3
 800f414:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41e:	2200      	movs	r2, #0
 800f420:	701a      	strb	r2, [r3, #0]
 800f422:	2200      	movs	r2, #0
 800f424:	705a      	strb	r2, [r3, #1]
 800f426:	2200      	movs	r2, #0
 800f428:	709a      	strb	r2, [r3, #2]
 800f42a:	2200      	movs	r2, #0
 800f42c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f430:	8b3a      	ldrh	r2, [r7, #24]
 800f432:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800f434:	8b3a      	ldrh	r2, [r7, #24]
 800f436:	8b7b      	ldrh	r3, [r7, #26]
 800f438:	4413      	add	r3, r2
 800f43a:	b29a      	uxth	r2, r3
 800f43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43e:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	627b      	str	r3, [r7, #36]	; 0x24
 800f446:	e061      	b.n	800f50c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800f448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800f44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f450:	889b      	ldrh	r3, [r3, #4]
 800f452:	b29a      	uxth	r2, r3
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	889b      	ldrh	r3, [r3, #4]
 800f458:	b29b      	uxth	r3, r3
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d232      	bcs.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f462:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f466:	2b00      	cmp	r3, #0
 800f468:	d01f      	beq.n	800f4aa <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f46c:	889b      	ldrh	r3, [r3, #4]
 800f46e:	b29a      	uxth	r2, r3
 800f470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f472:	88db      	ldrh	r3, [r3, #6]
 800f474:	b29b      	uxth	r3, r3
 800f476:	429a      	cmp	r2, r3
 800f478:	f0c0 80e3 	bcc.w	800f642 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800f47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47e:	88db      	ldrh	r3, [r3, #6]
 800f480:	b29a      	uxth	r2, r3
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	889b      	ldrh	r3, [r3, #4]
 800f486:	b29b      	uxth	r3, r3
 800f488:	429a      	cmp	r2, r3
 800f48a:	f200 80da 	bhi.w	800f642 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f490:	68ba      	ldr	r2, [r7, #8]
 800f492:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f496:	88db      	ldrh	r3, [r3, #6]
 800f498:	b29a      	uxth	r2, r3
 800f49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49c:	889b      	ldrh	r3, [r3, #4]
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d037      	beq.n	800f514 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f4a8:	e034      	b.n	800f514 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800f4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ac:	88db      	ldrh	r3, [r3, #6]
 800f4ae:	b29a      	uxth	r2, r3
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	889b      	ldrh	r3, [r3, #4]
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	f200 80c5 	bhi.w	800f646 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	68ba      	ldr	r2, [r7, #8]
 800f4c0:	605a      	str	r2, [r3, #4]
      break;
 800f4c2:	e027      	b.n	800f514 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800f4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c6:	889b      	ldrh	r3, [r3, #4]
 800f4c8:	b29a      	uxth	r2, r3
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	889b      	ldrh	r3, [r3, #4]
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	f000 80ba 	beq.w	800f64a <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d8:	889b      	ldrh	r3, [r3, #4]
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	88db      	ldrh	r3, [r3, #6]
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	f0c0 80b3 	bcc.w	800f64e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d009      	beq.n	800f502 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800f4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f0:	88db      	ldrh	r3, [r3, #6]
 800f4f2:	b29a      	uxth	r2, r3
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	889b      	ldrh	r3, [r3, #4]
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d001      	beq.n	800f502 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f4fe:	2300      	movs	r3, #0
 800f500:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d19a      	bne.n	800f448 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800f512:	e000      	b.n	800f516 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800f514:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d12d      	bne.n	800f578 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800f51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d01c      	beq.n	800f55c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f524:	88db      	ldrh	r3, [r3, #6]
 800f526:	b29a      	uxth	r2, r3
 800f528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52a:	889b      	ldrh	r3, [r3, #4]
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	429a      	cmp	r2, r3
 800f530:	d906      	bls.n	800f540 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800f532:	4b51      	ldr	r3, [pc, #324]	; (800f678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f534:	f240 12ab 	movw	r2, #427	; 0x1ab
 800f538:	4950      	ldr	r1, [pc, #320]	; (800f67c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f53a:	4851      	ldr	r0, [pc, #324]	; (800f680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f53c:	f001 fd56 	bl	8010fec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f542:	68ba      	ldr	r2, [r7, #8]
 800f544:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f548:	88db      	ldrh	r3, [r3, #6]
 800f54a:	b29a      	uxth	r2, r3
 800f54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f54e:	889b      	ldrh	r3, [r3, #4]
 800f550:	b29b      	uxth	r3, r3
 800f552:	429a      	cmp	r2, r3
 800f554:	d010      	beq.n	800f578 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800f556:	2300      	movs	r3, #0
 800f558:	623b      	str	r3, [r7, #32]
 800f55a:	e00d      	b.n	800f578 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d006      	beq.n	800f572 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800f564:	4b44      	ldr	r3, [pc, #272]	; (800f678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f566:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800f56a:	4946      	ldr	r1, [pc, #280]	; (800f684 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f56c:	4844      	ldr	r0, [pc, #272]	; (800f680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f56e:	f001 fd3d 	bl	8010fec <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	68ba      	ldr	r2, [r7, #8]
 800f576:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d105      	bne.n	800f58a <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	7f9b      	ldrb	r3, [r3, #30]
 800f582:	f003 0301 	and.w	r3, r3, #1
 800f586:	2b00      	cmp	r3, #0
 800f588:	d059      	beq.n	800f63e <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800f58a:	6a3b      	ldr	r3, [r7, #32]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d04f      	beq.n	800f630 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	685b      	ldr	r3, [r3, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d006      	beq.n	800f5a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	889b      	ldrh	r3, [r3, #4]
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d002      	beq.n	800f5ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	623b      	str	r3, [r7, #32]
 800f5aa:	e041      	b.n	800f630 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ae:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f5b6:	e012      	b.n	800f5de <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800f5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c0:	88db      	ldrh	r3, [r3, #6]
 800f5c2:	b29a      	uxth	r2, r3
 800f5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c6:	889b      	ldrh	r3, [r3, #4]
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d002      	beq.n	800f5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	623b      	str	r3, [r7, #32]
            break;
 800f5d2:	e007      	b.n	800f5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800f5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d1e9      	bne.n	800f5b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f5e4:	6a3b      	ldr	r3, [r7, #32]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d022      	beq.n	800f630 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d106      	bne.n	800f600 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800f5f2:	4b21      	ldr	r3, [pc, #132]	; (800f678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f5f4:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800f5f8:	4923      	ldr	r1, [pc, #140]	; (800f688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f5fa:	4821      	ldr	r0, [pc, #132]	; (800f680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f5fc:	f001 fcf6 	bl	8010fec <iprintf>
          LWIP_ASSERT("sanity check",
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f608:	429a      	cmp	r2, r3
 800f60a:	d106      	bne.n	800f61a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800f60c:	4b1a      	ldr	r3, [pc, #104]	; (800f678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f60e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800f612:	491d      	ldr	r1, [pc, #116]	; (800f688 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f614:	481a      	ldr	r0, [pc, #104]	; (800f680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f616:	f001 fce9 	bl	8010fec <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d006      	beq.n	800f630 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800f622:	4b15      	ldr	r3, [pc, #84]	; (800f678 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800f624:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800f628:	4918      	ldr	r1, [pc, #96]	; (800f68c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f62a:	4815      	ldr	r0, [pc, #84]	; (800f680 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f62c:	f001 fcde 	bl	8010fec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f630:	6a3b      	ldr	r3, [r7, #32]
 800f632:	2b00      	cmp	r3, #0
 800f634:	bf14      	ite	ne
 800f636:	2301      	movne	r3, #1
 800f638:	2300      	moveq	r3, #0
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	e018      	b.n	800f670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f63e:	2300      	movs	r3, #0
 800f640:	e016      	b.n	800f670 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800f642:	bf00      	nop
 800f644:	e004      	b.n	800f650 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800f646:	bf00      	nop
 800f648:	e002      	b.n	800f650 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800f64a:	bf00      	nop
 800f64c:	e000      	b.n	800f650 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800f64e:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800f650:	68b8      	ldr	r0, [r7, #8]
 800f652:	f7f6 fa31 	bl	8005ab8 <pbuf_clen>
 800f656:	4603      	mov	r3, r0
 800f658:	461a      	mov	r2, r3
 800f65a:	4b0d      	ldr	r3, [pc, #52]	; (800f690 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f65c:	881b      	ldrh	r3, [r3, #0]
 800f65e:	1a9b      	subs	r3, r3, r2
 800f660:	b29a      	uxth	r2, r3
 800f662:	4b0b      	ldr	r3, [pc, #44]	; (800f690 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f664:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800f666:	68b8      	ldr	r0, [r7, #8]
 800f668:	f7f6 f992 	bl	8005990 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f66c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800f670:	4618      	mov	r0, r3
 800f672:	3730      	adds	r7, #48	; 0x30
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	0801402c 	.word	0x0801402c
 800f67c:	08014108 	.word	0x08014108
 800f680:	08014074 	.word	0x08014074
 800f684:	08014128 	.word	0x08014128
 800f688:	08014160 	.word	0x08014160
 800f68c:	08014170 	.word	0x08014170
 800f690:	20000650 	.word	0x20000650

0800f694 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b08e      	sub	sp, #56	; 0x38
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800f6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	f003 030f 	and.w	r3, r3, #15
 800f6aa:	009b      	lsls	r3, r3, #2
 800f6ac:	2b14      	cmp	r3, #20
 800f6ae:	f040 8131 	bne.w	800f914 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b4:	88db      	ldrh	r3, [r3, #6]
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7f4 ffd3 	bl	8004664 <lwip_htons>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	00db      	lsls	r3, r3, #3
 800f6c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6cc:	885b      	ldrh	r3, [r3, #2]
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7f4 ffc7 	bl	8004664 <lwip_htons>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	461a      	mov	r2, r3
 800f6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	f003 030f 	and.w	r3, r3, #15
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f7f6 f9e2 	bl	8005ab8 <pbuf_clen>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f6f8:	4b8d      	ldr	r3, [pc, #564]	; (800f930 <ip4_reass+0x29c>)
 800f6fa:	881b      	ldrh	r3, [r3, #0]
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f700:	4413      	add	r3, r2
 800f702:	2b0a      	cmp	r3, #10
 800f704:	dd10      	ble.n	800f728 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f706:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f708:	4619      	mov	r1, r3
 800f70a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f70c:	f7ff fd8e 	bl	800f22c <ip_reass_remove_oldest_datagram>
 800f710:	4603      	mov	r3, r0
 800f712:	2b00      	cmp	r3, #0
 800f714:	f000 8100 	beq.w	800f918 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f718:	4b85      	ldr	r3, [pc, #532]	; (800f930 <ip4_reass+0x29c>)
 800f71a:	881b      	ldrh	r3, [r3, #0]
 800f71c:	461a      	mov	r2, r3
 800f71e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f720:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f722:	2b0a      	cmp	r3, #10
 800f724:	f300 80f8 	bgt.w	800f918 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f728:	4b82      	ldr	r3, [pc, #520]	; (800f934 <ip4_reass+0x2a0>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	633b      	str	r3, [r7, #48]	; 0x30
 800f72e:	e015      	b.n	800f75c <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f732:	695a      	ldr	r2, [r3, #20]
 800f734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d10c      	bne.n	800f756 <ip4_reass+0xc2>
 800f73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73e:	699a      	ldr	r2, [r3, #24]
 800f740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f742:	691b      	ldr	r3, [r3, #16]
 800f744:	429a      	cmp	r2, r3
 800f746:	d106      	bne.n	800f756 <ip4_reass+0xc2>
 800f748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74a:	899a      	ldrh	r2, [r3, #12]
 800f74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f74e:	889b      	ldrh	r3, [r3, #4]
 800f750:	b29b      	uxth	r3, r3
 800f752:	429a      	cmp	r2, r3
 800f754:	d006      	beq.n	800f764 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	633b      	str	r3, [r7, #48]	; 0x30
 800f75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1e6      	bne.n	800f730 <ip4_reass+0x9c>
 800f762:	e000      	b.n	800f766 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f764:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d109      	bne.n	800f780 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f76c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f76e:	4619      	mov	r1, r3
 800f770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f772:	f7ff fdbd 	bl	800f2f0 <ip_reass_enqueue_new_datagram>
 800f776:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d11c      	bne.n	800f7b8 <ip4_reass+0x124>
      goto nullreturn;
 800f77e:	e0ce      	b.n	800f91e <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f782:	88db      	ldrh	r3, [r3, #6]
 800f784:	b29b      	uxth	r3, r3
 800f786:	4618      	mov	r0, r3
 800f788:	f7f4 ff6c 	bl	8004664 <lwip_htons>
 800f78c:	4603      	mov	r3, r0
 800f78e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f792:	2b00      	cmp	r3, #0
 800f794:	d110      	bne.n	800f7b8 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f798:	89db      	ldrh	r3, [r3, #14]
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7f4 ff62 	bl	8004664 <lwip_htons>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d006      	beq.n	800f7b8 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ac:	3308      	adds	r3, #8
 800f7ae:	2214      	movs	r2, #20
 800f7b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f001 fc07 	bl	8010fc6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ba:	88db      	ldrh	r3, [r3, #6]
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	f003 0320 	and.w	r3, r3, #32
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	bf0c      	ite	eq
 800f7c6:	2301      	moveq	r3, #1
 800f7c8:	2300      	movne	r3, #0
 800f7ca:	b2db      	uxtb	r3, r3
 800f7cc:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d00e      	beq.n	800f7f2 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800f7d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f7d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7d8:	4413      	add	r3, r2
 800f7da:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f7dc:	8b7a      	ldrh	r2, [r7, #26]
 800f7de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	f0c0 8099 	bcc.w	800f918 <ip4_reass+0x284>
 800f7e6:	8b7b      	ldrh	r3, [r7, #26]
 800f7e8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	f200 8093 	bhi.w	800f918 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f7f2:	69fa      	ldr	r2, [r7, #28]
 800f7f4:	6879      	ldr	r1, [r7, #4]
 800f7f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7f8:	f7ff fde2 	bl	800f3c0 <ip_reass_chain_frag_into_datagram_and_validate>
 800f7fc:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f804:	f000 808a 	beq.w	800f91c <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f808:	4b49      	ldr	r3, [pc, #292]	; (800f930 <ip4_reass+0x29c>)
 800f80a:	881a      	ldrh	r2, [r3, #0]
 800f80c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f80e:	4413      	add	r3, r2
 800f810:	b29a      	uxth	r2, r3
 800f812:	4b47      	ldr	r3, [pc, #284]	; (800f930 <ip4_reass+0x29c>)
 800f814:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d00d      	beq.n	800f838 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800f81c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f81e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f820:	4413      	add	r3, r2
 800f822:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f826:	8a7a      	ldrh	r2, [r7, #18]
 800f828:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82c:	7f9b      	ldrb	r3, [r3, #30]
 800f82e:	f043 0301 	orr.w	r3, r3, #1
 800f832:	b2da      	uxtb	r2, r3
 800f834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f836:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d168      	bne.n	800f910 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800f83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f840:	8b9b      	ldrh	r3, [r3, #28]
 800f842:	3314      	adds	r3, #20
 800f844:	b29a      	uxth	r2, r3
 800f846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f848:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800f84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800f854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85e:	3308      	adds	r3, #8
 800f860:	2214      	movs	r2, #20
 800f862:	4619      	mov	r1, r3
 800f864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f866:	f001 fbae 	bl	8010fc6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800f86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86c:	8b9b      	ldrh	r3, [r3, #28]
 800f86e:	4618      	mov	r0, r3
 800f870:	f7f4 fef8 	bl	8004664 <lwip_htons>
 800f874:	4603      	mov	r3, r0
 800f876:	461a      	mov	r2, r3
 800f878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87e:	2200      	movs	r2, #0
 800f880:	719a      	strb	r2, [r3, #6]
 800f882:	2200      	movs	r2, #0
 800f884:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f888:	2200      	movs	r2, #0
 800f88a:	729a      	strb	r2, [r3, #10]
 800f88c:	2200      	movs	r2, #0
 800f88e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f896:	e00e      	b.n	800f8b6 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800f898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800f89e:	f06f 0113 	mvn.w	r1, #19
 800f8a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f8a4:	f7f6 f850 	bl	8005948 <pbuf_header>
      pbuf_cat(p, r);
 800f8a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f7f6 f93e 	bl	8005b2c <pbuf_cat>
      r = iprh->next_pbuf;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d1ed      	bne.n	800f898 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f8bc:	4b1d      	ldr	r3, [pc, #116]	; (800f934 <ip4_reass+0x2a0>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d102      	bne.n	800f8cc <ip4_reass+0x238>
      ipr_prev = NULL;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f8ca:	e010      	b.n	800f8ee <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f8cc:	4b19      	ldr	r3, [pc, #100]	; (800f934 <ip4_reass+0x2a0>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f8d2:	e007      	b.n	800f8e4 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800f8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d006      	beq.n	800f8ec <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d1f4      	bne.n	800f8d4 <ip4_reass+0x240>
 800f8ea:	e000      	b.n	800f8ee <ip4_reass+0x25a>
          break;
 800f8ec:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f8ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8f2:	f7ff fd37 	bl	800f364 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f7f6 f8de 	bl	8005ab8 <pbuf_clen>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	461a      	mov	r2, r3
 800f900:	4b0b      	ldr	r3, [pc, #44]	; (800f930 <ip4_reass+0x29c>)
 800f902:	881b      	ldrh	r3, [r3, #0]
 800f904:	1a9b      	subs	r3, r3, r2
 800f906:	b29a      	uxth	r2, r3
 800f908:	4b09      	ldr	r3, [pc, #36]	; (800f930 <ip4_reass+0x29c>)
 800f90a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	e00a      	b.n	800f926 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f910:	2300      	movs	r3, #0
 800f912:	e008      	b.n	800f926 <ip4_reass+0x292>
    goto nullreturn;
 800f914:	bf00      	nop
 800f916:	e002      	b.n	800f91e <ip4_reass+0x28a>

nullreturn:
 800f918:	bf00      	nop
 800f91a:	e000      	b.n	800f91e <ip4_reass+0x28a>
    goto nullreturn;
 800f91c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7f6 f836 	bl	8005990 <pbuf_free>
  return NULL;
 800f924:	2300      	movs	r3, #0
}
 800f926:	4618      	mov	r0, r3
 800f928:	3738      	adds	r7, #56	; 0x38
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	20000650 	.word	0x20000650
 800f934:	2000064c 	.word	0x2000064c

0800f938 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800f93c:	2005      	movs	r0, #5
 800f93e:	f7f5 faa9 	bl	8004e94 <memp_malloc>
 800f942:	4603      	mov	r3, r0
}
 800f944:	4618      	mov	r0, r3
 800f946:	bd80      	pop	{r7, pc}

0800f948 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d106      	bne.n	800f964 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f956:	4b07      	ldr	r3, [pc, #28]	; (800f974 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f958:	f240 22ae 	movw	r2, #686	; 0x2ae
 800f95c:	4906      	ldr	r1, [pc, #24]	; (800f978 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f95e:	4807      	ldr	r0, [pc, #28]	; (800f97c <ip_frag_free_pbuf_custom_ref+0x34>)
 800f960:	f001 fb44 	bl	8010fec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f964:	6879      	ldr	r1, [r7, #4]
 800f966:	2005      	movs	r0, #5
 800f968:	f7f5 fae0 	bl	8004f2c <memp_free>
}
 800f96c:	bf00      	nop
 800f96e:	3708      	adds	r7, #8
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	0801402c 	.word	0x0801402c
 800f978:	08014194 	.word	0x08014194
 800f97c:	08014074 	.word	0x08014074

0800f980 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d106      	bne.n	800f9a0 <ipfrag_free_pbuf_custom+0x20>
 800f992:	4b11      	ldr	r3, [pc, #68]	; (800f9d8 <ipfrag_free_pbuf_custom+0x58>)
 800f994:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800f998:	4910      	ldr	r1, [pc, #64]	; (800f9dc <ipfrag_free_pbuf_custom+0x5c>)
 800f99a:	4811      	ldr	r0, [pc, #68]	; (800f9e0 <ipfrag_free_pbuf_custom+0x60>)
 800f99c:	f001 fb26 	bl	8010fec <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800f9a0:	68fa      	ldr	r2, [r7, #12]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d006      	beq.n	800f9b6 <ipfrag_free_pbuf_custom+0x36>
 800f9a8:	4b0b      	ldr	r3, [pc, #44]	; (800f9d8 <ipfrag_free_pbuf_custom+0x58>)
 800f9aa:	f240 22b9 	movw	r2, #697	; 0x2b9
 800f9ae:	490d      	ldr	r1, [pc, #52]	; (800f9e4 <ipfrag_free_pbuf_custom+0x64>)
 800f9b0:	480b      	ldr	r0, [pc, #44]	; (800f9e0 <ipfrag_free_pbuf_custom+0x60>)
 800f9b2:	f001 fb1b 	bl	8010fec <iprintf>
  if (pcr->original != NULL) {
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	695b      	ldr	r3, [r3, #20]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d004      	beq.n	800f9c8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	695b      	ldr	r3, [r3, #20]
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7f5 ffe4 	bl	8005990 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f7ff ffbd 	bl	800f948 <ip_frag_free_pbuf_custom_ref>
}
 800f9ce:	bf00      	nop
 800f9d0:	3710      	adds	r7, #16
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	0801402c 	.word	0x0801402c
 800f9dc:	080141a0 	.word	0x080141a0
 800f9e0:	08014074 	.word	0x08014074
 800f9e4:	080141ac 	.word	0x080141ac

0800f9e8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b092      	sub	sp, #72	; 0x48
 800f9ec:	af02      	add	r7, sp, #8
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	60b9      	str	r1, [r7, #8]
 800f9f2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f9fc:	3b14      	subs	r3, #20
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	da00      	bge.n	800fa04 <ip4_frag+0x1c>
 800fa02:	3307      	adds	r3, #7
 800fa04:	10db      	asrs	r3, r3, #3
 800fa06:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fa08:	2314      	movs	r3, #20
 800fa0a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800fa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa14:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800fa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	f003 030f 	and.w	r3, r3, #15
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	2b14      	cmp	r3, #20
 800fa22:	d009      	beq.n	800fa38 <ip4_frag+0x50>
 800fa24:	4b79      	ldr	r3, [pc, #484]	; (800fc0c <ip4_frag+0x224>)
 800fa26:	f240 22e1 	movw	r2, #737	; 0x2e1
 800fa2a:	4979      	ldr	r1, [pc, #484]	; (800fc10 <ip4_frag+0x228>)
 800fa2c:	4879      	ldr	r0, [pc, #484]	; (800fc14 <ip4_frag+0x22c>)
 800fa2e:	f001 fadd 	bl	8010fec <iprintf>
 800fa32:	f06f 0305 	mvn.w	r3, #5
 800fa36:	e0e5      	b.n	800fc04 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3a:	88db      	ldrh	r3, [r3, #6]
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7f4 fe10 	bl	8004664 <lwip_htons>
 800fa44:	4603      	mov	r3, r0
 800fa46:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800fa48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fa4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa4e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800fa50:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fa52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d009      	beq.n	800fa6e <ip4_frag+0x86>
 800fa5a:	4b6c      	ldr	r3, [pc, #432]	; (800fc0c <ip4_frag+0x224>)
 800fa5c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800fa60:	496d      	ldr	r1, [pc, #436]	; (800fc18 <ip4_frag+0x230>)
 800fa62:	486c      	ldr	r0, [pc, #432]	; (800fc14 <ip4_frag+0x22c>)
 800fa64:	f001 fac2 	bl	8010fec <iprintf>
 800fa68:	f06f 0305 	mvn.w	r3, #5
 800fa6c:	e0ca      	b.n	800fc04 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	891b      	ldrh	r3, [r3, #8]
 800fa72:	3b14      	subs	r3, #20
 800fa74:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800fa76:	e0bc      	b.n	800fbf2 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800fa78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fa7a:	00da      	lsls	r2, r3, #3
 800fa7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	bfa8      	it	ge
 800fa82:	4613      	movge	r3, r2
 800fa84:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fa86:	2200      	movs	r2, #0
 800fa88:	2114      	movs	r1, #20
 800fa8a:	2002      	movs	r0, #2
 800fa8c:	f7f5 fc0e 	bl	80052ac <pbuf_alloc>
 800fa90:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800fa92:	6a3b      	ldr	r3, [r7, #32]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	f000 80b2 	beq.w	800fbfe <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	895b      	ldrh	r3, [r3, #10]
 800fa9e:	2b13      	cmp	r3, #19
 800faa0:	d806      	bhi.n	800fab0 <ip4_frag+0xc8>
 800faa2:	4b5a      	ldr	r3, [pc, #360]	; (800fc0c <ip4_frag+0x224>)
 800faa4:	f240 3209 	movw	r2, #777	; 0x309
 800faa8:	495c      	ldr	r1, [pc, #368]	; (800fc1c <ip4_frag+0x234>)
 800faaa:	485a      	ldr	r0, [pc, #360]	; (800fc14 <ip4_frag+0x22c>)
 800faac:	f001 fa9e 	bl	8010fec <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fab0:	6a3b      	ldr	r3, [r7, #32]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	2214      	movs	r2, #20
 800fab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fab8:	4618      	mov	r0, r3
 800faba:	f001 fa84 	bl	8010fc6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fabe:	6a3b      	ldr	r3, [r7, #32]
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800fac4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fac6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800fac8:	e04f      	b.n	800fb6a <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	895a      	ldrh	r2, [r3, #10]
 800face:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fad0:	1ad3      	subs	r3, r2, r3
 800fad2:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fad4:	8b7a      	ldrh	r2, [r7, #26]
 800fad6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fad8:	4293      	cmp	r3, r2
 800fada:	bf28      	it	cs
 800fadc:	4613      	movcs	r3, r2
 800fade:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fae0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d105      	bne.n	800faf2 <ip4_frag+0x10a>
        poff = 0;
 800fae6:	2300      	movs	r3, #0
 800fae8:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	60fb      	str	r3, [r7, #12]
        continue;
 800faf0:	e03b      	b.n	800fb6a <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800faf2:	f7ff ff21 	bl	800f938 <ip_frag_alloc_pbuf_custom_ref>
 800faf6:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d103      	bne.n	800fb06 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800fafe:	6a38      	ldr	r0, [r7, #32]
 800fb00:	f7f5 ff46 	bl	8005990 <pbuf_free>
        goto memerr;
 800fb04:	e07c      	b.n	800fc00 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fb06:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fb0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fb0e:	4413      	add	r3, r2
 800fb10:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800fb12:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fb14:	9201      	str	r2, [sp, #4]
 800fb16:	9300      	str	r3, [sp, #0]
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2202      	movs	r2, #2
 800fb1c:	2004      	movs	r0, #4
 800fb1e:	f7f5 fd59 	bl	80055d4 <pbuf_alloced_custom>
 800fb22:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d106      	bne.n	800fb38 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fb2a:	6978      	ldr	r0, [r7, #20]
 800fb2c:	f7ff ff0c 	bl	800f948 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fb30:	6a38      	ldr	r0, [r7, #32]
 800fb32:	f7f5 ff2d 	bl	8005990 <pbuf_free>
        goto memerr;
 800fb36:	e063      	b.n	800fc00 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800fb38:	68f8      	ldr	r0, [r7, #12]
 800fb3a:	f7f5 ffd5 	bl	8005ae8 <pbuf_ref>
      pcr->original = p;
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	68fa      	ldr	r2, [r7, #12]
 800fb42:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	4a36      	ldr	r2, [pc, #216]	; (800fc20 <ip4_frag+0x238>)
 800fb48:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fb4a:	6939      	ldr	r1, [r7, #16]
 800fb4c:	6a38      	ldr	r0, [r7, #32]
 800fb4e:	f7f5 ffed 	bl	8005b2c <pbuf_cat>
      left_to_copy -= newpbuflen;
 800fb52:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800fb54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fb56:	1ad3      	subs	r3, r2, r3
 800fb58:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800fb5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d004      	beq.n	800fb6a <ip4_frag+0x182>
        poff = 0;
 800fb60:	2300      	movs	r3, #0
 800fb62:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fb6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1ac      	bne.n	800faca <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800fb70:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fb72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fb74:	4413      	add	r3, r2
 800fb76:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fb78:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fb7e:	3b14      	subs	r3, #20
 800fb80:	429a      	cmp	r2, r3
 800fb82:	bfd4      	ite	le
 800fb84:	2301      	movle	r3, #1
 800fb86:	2300      	movgt	r3, #0
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fb8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fb8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb92:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d103      	bne.n	800fba2 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800fb9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fb9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fba0:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fba2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7f4 fd5d 	bl	8004664 <lwip_htons>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	461a      	mov	r2, r3
 800fbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbb0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800fbb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbb4:	3314      	adds	r3, #20
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7f4 fd53 	bl	8004664 <lwip_htons>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc8:	2200      	movs	r2, #0
 800fbca:	729a      	strb	r2, [r3, #10]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	695b      	ldr	r3, [r3, #20]
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	6a39      	ldr	r1, [r7, #32]
 800fbd8:	68b8      	ldr	r0, [r7, #8]
 800fbda:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fbdc:	6a38      	ldr	r0, [r7, #32]
 800fbde:	f7f5 fed7 	bl	8005990 <pbuf_free>
    left -= fragsize;
 800fbe2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fbe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fbe6:	1ad3      	subs	r3, r2, r3
 800fbe8:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800fbea:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fbec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fbee:	4413      	add	r3, r2
 800fbf0:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800fbf2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	f47f af3f 	bne.w	800fa78 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	e002      	b.n	800fc04 <ip4_frag+0x21c>
      goto memerr;
 800fbfe:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fc00:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3740      	adds	r7, #64	; 0x40
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}
 800fc0c:	0801402c 	.word	0x0801402c
 800fc10:	080141b8 	.word	0x080141b8
 800fc14:	08014074 	.word	0x08014074
 800fc18:	080141e0 	.word	0x080141e0
 800fc1c:	080141fc 	.word	0x080141fc
 800fc20:	0800f981 	.word	0x0800f981

0800fc24 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b086      	sub	sp, #24
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800fc2e:	230e      	movs	r3, #14
 800fc30:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	895b      	ldrh	r3, [r3, #10]
 800fc36:	2b0e      	cmp	r3, #14
 800fc38:	d977      	bls.n	800fd2a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	7b1a      	ldrb	r2, [r3, #12]
 800fc44:	7b5b      	ldrb	r3, [r3, #13]
 800fc46:	021b      	lsls	r3, r3, #8
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	f003 0301 	and.w	r3, r3, #1
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d023      	beq.n	800fca0 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	2b01      	cmp	r3, #1
 800fc5e:	d10f      	bne.n	800fc80 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	785b      	ldrb	r3, [r3, #1]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d11b      	bne.n	800fca0 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fc6c:	2b5e      	cmp	r3, #94	; 0x5e
 800fc6e:	d117      	bne.n	800fca0 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	7b5b      	ldrb	r3, [r3, #13]
 800fc74:	f043 0310 	orr.w	r3, r3, #16
 800fc78:	b2da      	uxtb	r2, r3
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	735a      	strb	r2, [r3, #13]
 800fc7e:	e00f      	b.n	800fca0 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	2206      	movs	r2, #6
 800fc84:	4930      	ldr	r1, [pc, #192]	; (800fd48 <ethernet_input+0x124>)
 800fc86:	4618      	mov	r0, r3
 800fc88:	f001 f98e 	bl	8010fa8 <memcmp>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d106      	bne.n	800fca0 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	7b5b      	ldrb	r3, [r3, #13]
 800fc96:	f043 0308 	orr.w	r3, r3, #8
 800fc9a:	b2da      	uxtb	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fca0:	89fb      	ldrh	r3, [r7, #14]
 800fca2:	2b08      	cmp	r3, #8
 800fca4:	d003      	beq.n	800fcae <ethernet_input+0x8a>
 800fca6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800fcaa:	d01e      	beq.n	800fcea <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fcac:	e044      	b.n	800fd38 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fcb4:	f003 0308 	and.w	r3, r3, #8
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d038      	beq.n	800fd2e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	895b      	ldrh	r3, [r3, #10]
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	db33      	blt.n	800fd32 <ethernet_input+0x10e>
 800fcca:	8afb      	ldrh	r3, [r7, #22]
 800fccc:	425b      	negs	r3, r3
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	b21b      	sxth	r3, r3
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f7f5 fe37 	bl	8005948 <pbuf_header>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d128      	bne.n	800fd32 <ethernet_input+0x10e>
        ip4_input(p, netif);
 800fce0:	6839      	ldr	r1, [r7, #0]
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f7fe ff62 	bl	800ebac <ip4_input>
      break;
 800fce8:	e01d      	b.n	800fd26 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fcf0:	f003 0308 	and.w	r3, r3, #8
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d01e      	beq.n	800fd36 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	895b      	ldrh	r3, [r3, #10]
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	db15      	blt.n	800fd32 <ethernet_input+0x10e>
 800fd06:	8afb      	ldrh	r3, [r7, #22]
 800fd08:	425b      	negs	r3, r3
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	b21b      	sxth	r3, r3
 800fd0e:	4619      	mov	r1, r3
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f7f5 fe19 	bl	8005948 <pbuf_header>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d10a      	bne.n	800fd32 <ethernet_input+0x10e>
        etharp_input(p, netif);
 800fd1c:	6839      	ldr	r1, [r7, #0]
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f7fe f92c 	bl	800df7c <etharp_input>
      break;
 800fd24:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fd26:	2300      	movs	r3, #0
 800fd28:	e00a      	b.n	800fd40 <ethernet_input+0x11c>
    goto free_and_return;
 800fd2a:	bf00      	nop
 800fd2c:	e004      	b.n	800fd38 <ethernet_input+0x114>
        goto free_and_return;
 800fd2e:	bf00      	nop
 800fd30:	e002      	b.n	800fd38 <ethernet_input+0x114>

free_and_return:
 800fd32:	bf00      	nop
 800fd34:	e000      	b.n	800fd38 <ethernet_input+0x114>
        goto free_and_return;
 800fd36:	bf00      	nop
  pbuf_free(p);
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f7f5 fe29 	bl	8005990 <pbuf_free>
  return ERR_OK;
 800fd3e:	2300      	movs	r3, #0
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3718      	adds	r7, #24
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	08015108 	.word	0x08015108

0800fd4c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b086      	sub	sp, #24
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	60b9      	str	r1, [r7, #8]
 800fd56:	607a      	str	r2, [r7, #4]
 800fd58:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fd5a:	8c3b      	ldrh	r3, [r7, #32]
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7f4 fc81 	bl	8004664 <lwip_htons>
 800fd62:	4603      	mov	r3, r0
 800fd64:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800fd66:	210e      	movs	r1, #14
 800fd68:	68b8      	ldr	r0, [r7, #8]
 800fd6a:	f7f5 fded 	bl	8005948 <pbuf_header>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d125      	bne.n	800fdc0 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	685b      	ldr	r3, [r3, #4]
 800fd78:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	8afa      	ldrh	r2, [r7, #22]
 800fd7e:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	2206      	movs	r2, #6
 800fd84:	6839      	ldr	r1, [r7, #0]
 800fd86:	4618      	mov	r0, r3
 800fd88:	f001 f91d 	bl	8010fc6 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	3306      	adds	r3, #6
 800fd90:	2206      	movs	r2, #6
 800fd92:	6879      	ldr	r1, [r7, #4]
 800fd94:	4618      	mov	r0, r3
 800fd96:	f001 f916 	bl	8010fc6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fda0:	2b06      	cmp	r3, #6
 800fda2:	d006      	beq.n	800fdb2 <ethernet_output+0x66>
 800fda4:	4b0a      	ldr	r3, [pc, #40]	; (800fdd0 <ethernet_output+0x84>)
 800fda6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800fdaa:	490a      	ldr	r1, [pc, #40]	; (800fdd4 <ethernet_output+0x88>)
 800fdac:	480a      	ldr	r0, [pc, #40]	; (800fdd8 <ethernet_output+0x8c>)
 800fdae:	f001 f91d 	bl	8010fec <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	699b      	ldr	r3, [r3, #24]
 800fdb6:	68b9      	ldr	r1, [r7, #8]
 800fdb8:	68f8      	ldr	r0, [r7, #12]
 800fdba:	4798      	blx	r3
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	e002      	b.n	800fdc6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fdc0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fdc2:	f06f 0301 	mvn.w	r3, #1
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3718      	adds	r7, #24
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	0801421c 	.word	0x0801421c
 800fdd4:	08014254 	.word	0x08014254
 800fdd8:	08014288 	.word	0x08014288

0800fddc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b08e      	sub	sp, #56	; 0x38
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fde4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fde8:	2200      	movs	r2, #0
 800fdea:	601a      	str	r2, [r3, #0]
 800fdec:	605a      	str	r2, [r3, #4]
 800fdee:	609a      	str	r2, [r3, #8]
 800fdf0:	60da      	str	r2, [r3, #12]
 800fdf2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4a55      	ldr	r2, [pc, #340]	; (800ff50 <HAL_ETH_MspInit+0x174>)
 800fdfa:	4293      	cmp	r3, r2
 800fdfc:	f040 80a4 	bne.w	800ff48 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800fe00:	2300      	movs	r3, #0
 800fe02:	623b      	str	r3, [r7, #32]
 800fe04:	4b53      	ldr	r3, [pc, #332]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe08:	4a52      	ldr	r2, [pc, #328]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fe0e:	6313      	str	r3, [r2, #48]	; 0x30
 800fe10:	4b50      	ldr	r3, [pc, #320]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fe18:	623b      	str	r3, [r7, #32]
 800fe1a:	6a3b      	ldr	r3, [r7, #32]
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	61fb      	str	r3, [r7, #28]
 800fe20:	4b4c      	ldr	r3, [pc, #304]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe24:	4a4b      	ldr	r2, [pc, #300]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fe2a:	6313      	str	r3, [r2, #48]	; 0x30
 800fe2c:	4b49      	ldr	r3, [pc, #292]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fe34:	61fb      	str	r3, [r7, #28]
 800fe36:	69fb      	ldr	r3, [r7, #28]
 800fe38:	2300      	movs	r3, #0
 800fe3a:	61bb      	str	r3, [r7, #24]
 800fe3c:	4b45      	ldr	r3, [pc, #276]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe40:	4a44      	ldr	r2, [pc, #272]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe46:	6313      	str	r3, [r2, #48]	; 0x30
 800fe48:	4b42      	ldr	r3, [pc, #264]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe50:	61bb      	str	r3, [r7, #24]
 800fe52:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fe54:	2300      	movs	r3, #0
 800fe56:	617b      	str	r3, [r7, #20]
 800fe58:	4b3e      	ldr	r3, [pc, #248]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe5c:	4a3d      	ldr	r2, [pc, #244]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe5e:	f043 0304 	orr.w	r3, r3, #4
 800fe62:	6313      	str	r3, [r2, #48]	; 0x30
 800fe64:	4b3b      	ldr	r3, [pc, #236]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe68:	f003 0304 	and.w	r3, r3, #4
 800fe6c:	617b      	str	r3, [r7, #20]
 800fe6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe70:	2300      	movs	r3, #0
 800fe72:	613b      	str	r3, [r7, #16]
 800fe74:	4b37      	ldr	r3, [pc, #220]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe78:	4a36      	ldr	r2, [pc, #216]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe7a:	f043 0301 	orr.w	r3, r3, #1
 800fe7e:	6313      	str	r3, [r2, #48]	; 0x30
 800fe80:	4b34      	ldr	r3, [pc, #208]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe84:	f003 0301 	and.w	r3, r3, #1
 800fe88:	613b      	str	r3, [r7, #16]
 800fe8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	60fb      	str	r3, [r7, #12]
 800fe90:	4b30      	ldr	r3, [pc, #192]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe94:	4a2f      	ldr	r2, [pc, #188]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe96:	f043 0302 	orr.w	r3, r3, #2
 800fe9a:	6313      	str	r3, [r2, #48]	; 0x30
 800fe9c:	4b2d      	ldr	r3, [pc, #180]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800fe9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fea0:	f003 0302 	and.w	r3, r3, #2
 800fea4:	60fb      	str	r3, [r7, #12]
 800fea6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800fea8:	2300      	movs	r3, #0
 800feaa:	60bb      	str	r3, [r7, #8]
 800feac:	4b29      	ldr	r3, [pc, #164]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800feae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feb0:	4a28      	ldr	r2, [pc, #160]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800feb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800feb6:	6313      	str	r3, [r2, #48]	; 0x30
 800feb8:	4b26      	ldr	r3, [pc, #152]	; (800ff54 <HAL_ETH_MspInit+0x178>)
 800feba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800febc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fec0:	60bb      	str	r3, [r7, #8]
 800fec2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800fec4:	2332      	movs	r3, #50	; 0x32
 800fec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fec8:	2302      	movs	r3, #2
 800feca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fecc:	2300      	movs	r3, #0
 800fece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fed0:	2303      	movs	r3, #3
 800fed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fed4:	230b      	movs	r3, #11
 800fed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fedc:	4619      	mov	r1, r3
 800fede:	481e      	ldr	r0, [pc, #120]	; (800ff58 <HAL_ETH_MspInit+0x17c>)
 800fee0:	f7f1 fd78 	bl	80019d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800fee4:	2386      	movs	r3, #134	; 0x86
 800fee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fee8:	2302      	movs	r3, #2
 800feea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800feec:	2300      	movs	r3, #0
 800feee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fef0:	2303      	movs	r3, #3
 800fef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fef4:	230b      	movs	r3, #11
 800fef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fefc:	4619      	mov	r1, r3
 800fefe:	4817      	ldr	r0, [pc, #92]	; (800ff5c <HAL_ETH_MspInit+0x180>)
 800ff00:	f7f1 fd68 	bl	80019d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800ff04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ff08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ff0a:	2302      	movs	r3, #2
 800ff0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ff12:	2303      	movs	r3, #3
 800ff14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ff16:	230b      	movs	r3, #11
 800ff18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800ff1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff1e:	4619      	mov	r1, r3
 800ff20:	480f      	ldr	r0, [pc, #60]	; (800ff60 <HAL_ETH_MspInit+0x184>)
 800ff22:	f7f1 fd57 	bl	80019d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800ff26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ff2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ff2c:	2302      	movs	r3, #2
 800ff2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff30:	2300      	movs	r3, #0
 800ff32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ff34:	2303      	movs	r3, #3
 800ff36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ff38:	230b      	movs	r3, #11
 800ff3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ff3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff40:	4619      	mov	r1, r3
 800ff42:	4808      	ldr	r0, [pc, #32]	; (800ff64 <HAL_ETH_MspInit+0x188>)
 800ff44:	f7f1 fd46 	bl	80019d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ff48:	bf00      	nop
 800ff4a:	3738      	adds	r7, #56	; 0x38
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}
 800ff50:	40028000 	.word	0x40028000
 800ff54:	40023800 	.word	0x40023800
 800ff58:	40020800 	.word	0x40020800
 800ff5c:	40020000 	.word	0x40020000
 800ff60:	40020400 	.word	0x40020400
 800ff64:	40021800 	.word	0x40021800

0800ff68 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b086      	sub	sp, #24
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800ff70:	2300      	movs	r3, #0
 800ff72:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ff74:	4b49      	ldr	r3, [pc, #292]	; (801009c <low_level_init+0x134>)
 800ff76:	4a4a      	ldr	r2, [pc, #296]	; (80100a0 <low_level_init+0x138>)
 800ff78:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ff7a:	4b48      	ldr	r3, [pc, #288]	; (801009c <low_level_init+0x134>)
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800ff80:	4b46      	ldr	r3, [pc, #280]	; (801009c <low_level_init+0x134>)
 800ff82:	2200      	movs	r2, #0
 800ff84:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800ff86:	2300      	movs	r3, #0
 800ff88:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800ff8a:	2380      	movs	r3, #128	; 0x80
 800ff8c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800ff8e:	23e1      	movs	r3, #225	; 0xe1
 800ff90:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ff92:	2300      	movs	r3, #0
 800ff94:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ff96:	2300      	movs	r3, #0
 800ff98:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800ff9e:	4a3f      	ldr	r2, [pc, #252]	; (801009c <low_level_init+0x134>)
 800ffa0:	f107 0308 	add.w	r3, r7, #8
 800ffa4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800ffa6:	4b3d      	ldr	r3, [pc, #244]	; (801009c <low_level_init+0x134>)
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800ffac:	4b3b      	ldr	r3, [pc, #236]	; (801009c <low_level_init+0x134>)
 800ffae:	2200      	movs	r2, #0
 800ffb0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ffb2:	4b3a      	ldr	r3, [pc, #232]	; (801009c <low_level_init+0x134>)
 800ffb4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ffb8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ffba:	4838      	ldr	r0, [pc, #224]	; (801009c <low_level_init+0x134>)
 800ffbc:	f7f0 fd76 	bl	8000aac <HAL_ETH_Init>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800ffc4:	7dfb      	ldrb	r3, [r7, #23]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d108      	bne.n	800ffdc <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ffd0:	f043 0304 	orr.w	r3, r3, #4
 800ffd4:	b2da      	uxtb	r2, r3
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ffdc:	2304      	movs	r3, #4
 800ffde:	4a31      	ldr	r2, [pc, #196]	; (80100a4 <low_level_init+0x13c>)
 800ffe0:	4931      	ldr	r1, [pc, #196]	; (80100a8 <low_level_init+0x140>)
 800ffe2:	482e      	ldr	r0, [pc, #184]	; (801009c <low_level_init+0x134>)
 800ffe4:	f7f0 ff00 	bl	8000de8 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ffe8:	2304      	movs	r3, #4
 800ffea:	4a30      	ldr	r2, [pc, #192]	; (80100ac <low_level_init+0x144>)
 800ffec:	4930      	ldr	r1, [pc, #192]	; (80100b0 <low_level_init+0x148>)
 800ffee:	482b      	ldr	r0, [pc, #172]	; (801009c <low_level_init+0x134>)
 800fff0:	f7f0 ff63 	bl	8000eba <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2206      	movs	r2, #6
 800fff8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800fffc:	4b27      	ldr	r3, [pc, #156]	; (801009c <low_level_init+0x134>)
 800fffe:	695b      	ldr	r3, [r3, #20]
 8010000:	781a      	ldrb	r2, [r3, #0]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8010008:	4b24      	ldr	r3, [pc, #144]	; (801009c <low_level_init+0x134>)
 801000a:	695b      	ldr	r3, [r3, #20]
 801000c:	785a      	ldrb	r2, [r3, #1]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8010014:	4b21      	ldr	r3, [pc, #132]	; (801009c <low_level_init+0x134>)
 8010016:	695b      	ldr	r3, [r3, #20]
 8010018:	789a      	ldrb	r2, [r3, #2]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8010020:	4b1e      	ldr	r3, [pc, #120]	; (801009c <low_level_init+0x134>)
 8010022:	695b      	ldr	r3, [r3, #20]
 8010024:	78da      	ldrb	r2, [r3, #3]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801002c:	4b1b      	ldr	r3, [pc, #108]	; (801009c <low_level_init+0x134>)
 801002e:	695b      	ldr	r3, [r3, #20]
 8010030:	791a      	ldrb	r2, [r3, #4]
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8010038:	4b18      	ldr	r3, [pc, #96]	; (801009c <low_level_init+0x134>)
 801003a:	695b      	ldr	r3, [r3, #20]
 801003c:	795a      	ldrb	r2, [r3, #5]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801004a:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010052:	f043 030a 	orr.w	r3, r3, #10
 8010056:	b2da      	uxtb	r2, r3
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 801005e:	480f      	ldr	r0, [pc, #60]	; (801009c <low_level_init+0x134>)
 8010060:	f7f1 f9d4 	bl	800140c <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8010064:	f107 0310 	add.w	r3, r7, #16
 8010068:	461a      	mov	r2, r3
 801006a:	211d      	movs	r1, #29
 801006c:	480b      	ldr	r0, [pc, #44]	; (801009c <low_level_init+0x134>)
 801006e:	f7f1 f8ff 	bl	8001270 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	f043 030b 	orr.w	r3, r3, #11
 8010078:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	461a      	mov	r2, r3
 801007e:	211d      	movs	r1, #29
 8010080:	4806      	ldr	r0, [pc, #24]	; (801009c <low_level_init+0x134>)
 8010082:	f7f1 f95d 	bl	8001340 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8010086:	f107 0310 	add.w	r3, r7, #16
 801008a:	461a      	mov	r2, r3
 801008c:	211d      	movs	r1, #29
 801008e:	4803      	ldr	r0, [pc, #12]	; (801009c <low_level_init+0x134>)
 8010090:	f7f1 f8ee 	bl	8001270 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8010094:	bf00      	nop
 8010096:	3718      	adds	r7, #24
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	2000611c 	.word	0x2000611c
 80100a0:	40028000 	.word	0x40028000
 80100a4:	20006164 	.word	0x20006164
 80100a8:	2000484c 	.word	0x2000484c
 80100ac:	200048cc 	.word	0x200048cc
 80100b0:	2000609c 	.word	0x2000609c

080100b4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b08a      	sub	sp, #40	; 0x28
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80100be:	4b4b      	ldr	r3, [pc, #300]	; (80101ec <low_level_output+0x138>)
 80100c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100c2:	689b      	ldr	r3, [r3, #8]
 80100c4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80100c6:	2300      	movs	r3, #0
 80100c8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80100ca:	2300      	movs	r3, #0
 80100cc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80100ce:	2300      	movs	r3, #0
 80100d0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80100d2:	2300      	movs	r3, #0
 80100d4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80100d6:	4b45      	ldr	r3, [pc, #276]	; (80101ec <low_level_output+0x138>)
 80100d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100da:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80100dc:	2300      	movs	r3, #0
 80100de:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	623b      	str	r3, [r7, #32]
 80100e4:	e05a      	b.n	801019c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	da03      	bge.n	80100f6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80100ee:	23f8      	movs	r3, #248	; 0xf8
 80100f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80100f4:	e05c      	b.n	80101b0 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80100f6:	6a3b      	ldr	r3, [r7, #32]
 80100f8:	895b      	ldrh	r3, [r3, #10]
 80100fa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80100fc:	2300      	movs	r3, #0
 80100fe:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8010100:	e02f      	b.n	8010162 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8010102:	69fa      	ldr	r2, [r7, #28]
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	18d0      	adds	r0, r2, r3
 8010108:	6a3b      	ldr	r3, [r7, #32]
 801010a:	685a      	ldr	r2, [r3, #4]
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	18d1      	adds	r1, r2, r3
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8010116:	3304      	adds	r3, #4
 8010118:	461a      	mov	r2, r3
 801011a:	f000 ff54 	bl	8010fc6 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8010124:	69bb      	ldr	r3, [r7, #24]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	2b00      	cmp	r3, #0
 801012a:	da03      	bge.n	8010134 <low_level_output+0x80>
        {
          errval = ERR_USE;
 801012c:	23f8      	movs	r3, #248	; 0xf8
 801012e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8010132:	e03d      	b.n	80101b0 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8010134:	69bb      	ldr	r3, [r7, #24]
 8010136:	689b      	ldr	r3, [r3, #8]
 8010138:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801013a:	693a      	ldr	r2, [r7, #16]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	4413      	add	r3, r2
 8010140:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8010144:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8010146:	68ba      	ldr	r2, [r7, #8]
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	1ad3      	subs	r3, r2, r3
 801014c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8010150:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8010152:	697a      	ldr	r2, [r7, #20]
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	1ad3      	subs	r3, r2, r3
 8010158:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801015c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 801015e:	2300      	movs	r3, #0
 8010160:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8010162:	68fa      	ldr	r2, [r7, #12]
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	4413      	add	r3, r2
 8010168:	f240 52f4 	movw	r2, #1524	; 0x5f4
 801016c:	4293      	cmp	r3, r2
 801016e:	d8c8      	bhi.n	8010102 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8010170:	69fa      	ldr	r2, [r7, #28]
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	18d0      	adds	r0, r2, r3
 8010176:	6a3b      	ldr	r3, [r7, #32]
 8010178:	685a      	ldr	r2, [r3, #4]
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	4413      	add	r3, r2
 801017e:	68fa      	ldr	r2, [r7, #12]
 8010180:	4619      	mov	r1, r3
 8010182:	f000 ff20 	bl	8010fc6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8010186:	693a      	ldr	r2, [r7, #16]
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	4413      	add	r3, r2
 801018c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 801018e:	697a      	ldr	r2, [r7, #20]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	4413      	add	r3, r2
 8010194:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8010196:	6a3b      	ldr	r3, [r7, #32]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	623b      	str	r3, [r7, #32]
 801019c:	6a3b      	ldr	r3, [r7, #32]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d1a1      	bne.n	80100e6 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80101a2:	6979      	ldr	r1, [r7, #20]
 80101a4:	4811      	ldr	r0, [pc, #68]	; (80101ec <low_level_output+0x138>)
 80101a6:	f7f0 fef5 	bl	8000f94 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80101aa:	2300      	movs	r3, #0
 80101ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80101b0:	4b0e      	ldr	r3, [pc, #56]	; (80101ec <low_level_output+0x138>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101b8:	3314      	adds	r3, #20
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f003 0320 	and.w	r3, r3, #32
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d00d      	beq.n	80101e0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80101c4:	4b09      	ldr	r3, [pc, #36]	; (80101ec <low_level_output+0x138>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101cc:	3314      	adds	r3, #20
 80101ce:	2220      	movs	r2, #32
 80101d0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80101d2:	4b06      	ldr	r3, [pc, #24]	; (80101ec <low_level_output+0x138>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101da:	3304      	adds	r3, #4
 80101dc:	2200      	movs	r2, #0
 80101de:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80101e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3728      	adds	r7, #40	; 0x28
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	2000611c 	.word	0x2000611c

080101f0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b08c      	sub	sp, #48	; 0x30
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80101f8:	2300      	movs	r3, #0
 80101fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80101fc:	2300      	movs	r3, #0
 80101fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8010200:	2300      	movs	r3, #0
 8010202:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8010204:	2300      	movs	r3, #0
 8010206:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8010208:	2300      	movs	r3, #0
 801020a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 801020c:	2300      	movs	r3, #0
 801020e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8010210:	2300      	movs	r3, #0
 8010212:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8010214:	484e      	ldr	r0, [pc, #312]	; (8010350 <low_level_input+0x160>)
 8010216:	f7f0 ffa7 	bl	8001168 <HAL_ETH_GetReceivedFrame>
 801021a:	4603      	mov	r3, r0
 801021c:	2b00      	cmp	r3, #0
 801021e:	d001      	beq.n	8010224 <low_level_input+0x34>
    return NULL;
 8010220:	2300      	movs	r3, #0
 8010222:	e091      	b.n	8010348 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8010224:	4b4a      	ldr	r3, [pc, #296]	; (8010350 <low_level_input+0x160>)
 8010226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010228:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801022a:	4b49      	ldr	r3, [pc, #292]	; (8010350 <low_level_input+0x160>)
 801022c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801022e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8010230:	89fb      	ldrh	r3, [r7, #14]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d006      	beq.n	8010244 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8010236:	89fb      	ldrh	r3, [r7, #14]
 8010238:	2203      	movs	r2, #3
 801023a:	4619      	mov	r1, r3
 801023c:	2004      	movs	r0, #4
 801023e:	f7f5 f835 	bl	80052ac <pbuf_alloc>
 8010242:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8010244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010246:	2b00      	cmp	r3, #0
 8010248:	d04b      	beq.n	80102e2 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801024a:	4b41      	ldr	r3, [pc, #260]	; (8010350 <low_level_input+0x160>)
 801024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801024e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8010250:	2300      	movs	r3, #0
 8010252:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8010254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010256:	62bb      	str	r3, [r7, #40]	; 0x28
 8010258:	e040      	b.n	80102dc <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 801025a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025c:	895b      	ldrh	r3, [r3, #10]
 801025e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8010260:	2300      	movs	r3, #0
 8010262:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8010264:	e021      	b.n	80102aa <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8010266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010268:	685a      	ldr	r2, [r3, #4]
 801026a:	69bb      	ldr	r3, [r7, #24]
 801026c:	18d0      	adds	r0, r2, r3
 801026e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	18d1      	adds	r1, r2, r3
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 801027a:	3304      	adds	r3, #4
 801027c:	461a      	mov	r2, r3
 801027e:	f000 fea2 	bl	8010fc6 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8010282:	6a3b      	ldr	r3, [r7, #32]
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8010288:	6a3b      	ldr	r3, [r7, #32]
 801028a:	689b      	ldr	r3, [r3, #8]
 801028c:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 801028e:	69fa      	ldr	r2, [r7, #28]
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	4413      	add	r3, r2
 8010294:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8010298:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 801029a:	69ba      	ldr	r2, [r7, #24]
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	1ad3      	subs	r3, r2, r3
 80102a0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80102a4:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80102a6:	2300      	movs	r3, #0
 80102a8:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80102aa:	697a      	ldr	r2, [r7, #20]
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	4413      	add	r3, r2
 80102b0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d8d6      	bhi.n	8010266 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80102b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ba:	685a      	ldr	r2, [r3, #4]
 80102bc:	69bb      	ldr	r3, [r7, #24]
 80102be:	18d0      	adds	r0, r2, r3
 80102c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102c2:	69fb      	ldr	r3, [r7, #28]
 80102c4:	4413      	add	r3, r2
 80102c6:	697a      	ldr	r2, [r7, #20]
 80102c8:	4619      	mov	r1, r3
 80102ca:	f000 fe7c 	bl	8010fc6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80102ce:	69fa      	ldr	r2, [r7, #28]
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	4413      	add	r3, r2
 80102d4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80102d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	62bb      	str	r3, [r7, #40]	; 0x28
 80102dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d1bb      	bne.n	801025a <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80102e2:	4b1b      	ldr	r3, [pc, #108]	; (8010350 <low_level_input+0x160>)
 80102e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102e6:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80102e8:	2300      	movs	r3, #0
 80102ea:	613b      	str	r3, [r7, #16]
 80102ec:	e00b      	b.n	8010306 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80102ee:	6a3b      	ldr	r3, [r7, #32]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80102f6:	6a3b      	ldr	r3, [r7, #32]
 80102f8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80102fa:	6a3b      	ldr	r3, [r7, #32]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	3301      	adds	r3, #1
 8010304:	613b      	str	r3, [r7, #16]
 8010306:	4b12      	ldr	r3, [pc, #72]	; (8010350 <low_level_input+0x160>)
 8010308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801030a:	693a      	ldr	r2, [r7, #16]
 801030c:	429a      	cmp	r2, r3
 801030e:	d3ee      	bcc.n	80102ee <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8010310:	4b0f      	ldr	r3, [pc, #60]	; (8010350 <low_level_input+0x160>)
 8010312:	2200      	movs	r2, #0
 8010314:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8010316:	4b0e      	ldr	r3, [pc, #56]	; (8010350 <low_level_input+0x160>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801031e:	3314      	adds	r3, #20
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00d      	beq.n	8010346 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801032a:	4b09      	ldr	r3, [pc, #36]	; (8010350 <low_level_input+0x160>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010332:	3314      	adds	r3, #20
 8010334:	2280      	movs	r2, #128	; 0x80
 8010336:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8010338:	4b05      	ldr	r3, [pc, #20]	; (8010350 <low_level_input+0x160>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010340:	3308      	adds	r3, #8
 8010342:	2200      	movs	r2, #0
 8010344:	601a      	str	r2, [r3, #0]
  }
  return p;
 8010346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010348:	4618      	mov	r0, r3
 801034a:	3730      	adds	r7, #48	; 0x30
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}
 8010350:	2000611c 	.word	0x2000611c

08010354 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b084      	sub	sp, #16
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f7ff ff47 	bl	80101f0 <low_level_input>
 8010362:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d010      	beq.n	801038c <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	691b      	ldr	r3, [r3, #16]
 801036e:	6879      	ldr	r1, [r7, #4]
 8010370:	68f8      	ldr	r0, [r7, #12]
 8010372:	4798      	blx	r3
 8010374:	4603      	mov	r3, r0
 8010376:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8010378:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d006      	beq.n	801038e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8010380:	68f8      	ldr	r0, [r7, #12]
 8010382:	f7f5 fb05 	bl	8005990 <pbuf_free>
    p = NULL;    
 8010386:	2300      	movs	r3, #0
 8010388:	60fb      	str	r3, [r7, #12]
 801038a:	e000      	b.n	801038e <ethernetif_input+0x3a>
  if (p == NULL) return;
 801038c:	bf00      	nop
  }
}
 801038e:	3710      	adds	r7, #16
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d106      	bne.n	80103b0 <ethernetif_init+0x1c>
 80103a2:	4b0e      	ldr	r3, [pc, #56]	; (80103dc <ethernetif_init+0x48>)
 80103a4:	f44f 7204 	mov.w	r2, #528	; 0x210
 80103a8:	490d      	ldr	r1, [pc, #52]	; (80103e0 <ethernetif_init+0x4c>)
 80103aa:	480e      	ldr	r0, [pc, #56]	; (80103e4 <ethernetif_init+0x50>)
 80103ac:	f000 fe1e 	bl	8010fec <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2273      	movs	r2, #115	; 0x73
 80103b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2274      	movs	r2, #116	; 0x74
 80103bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	4a09      	ldr	r2, [pc, #36]	; (80103e8 <ethernetif_init+0x54>)
 80103c4:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	4a08      	ldr	r2, [pc, #32]	; (80103ec <ethernetif_init+0x58>)
 80103ca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f7ff fdcb 	bl	800ff68 <low_level_init>

  return ERR_OK;
 80103d2:	2300      	movs	r3, #0
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	080142b0 	.word	0x080142b0
 80103e0:	080142c4 	.word	0x080142c4
 80103e4:	080142d4 	.word	0x080142d4
 80103e8:	0800e1cd 	.word	0x0800e1cd
 80103ec:	080100b5 	.word	0x080100b5

080103f0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80103f4:	f7f0 f94a 	bl	800068c <HAL_GetTick>
 80103f8:	4603      	mov	r3, r0
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	bd80      	pop	{r7, pc}
	...

08010400 <MX_LWIP_Init>:

/**à
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8010406:	f7f4 f9be 	bl	8004786 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 801040a:	4b17      	ldr	r3, [pc, #92]	; (8010468 <MX_LWIP_Init+0x68>)
 801040c:	2200      	movs	r2, #0
 801040e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8010410:	4b16      	ldr	r3, [pc, #88]	; (801046c <MX_LWIP_Init+0x6c>)
 8010412:	2200      	movs	r2, #0
 8010414:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8010416:	4b16      	ldr	r3, [pc, #88]	; (8010470 <MX_LWIP_Init+0x70>)
 8010418:	2200      	movs	r2, #0
 801041a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801041c:	4b15      	ldr	r3, [pc, #84]	; (8010474 <MX_LWIP_Init+0x74>)
 801041e:	9302      	str	r3, [sp, #8]
 8010420:	4b15      	ldr	r3, [pc, #84]	; (8010478 <MX_LWIP_Init+0x78>)
 8010422:	9301      	str	r3, [sp, #4]
 8010424:	2300      	movs	r3, #0
 8010426:	9300      	str	r3, [sp, #0]
 8010428:	4b11      	ldr	r3, [pc, #68]	; (8010470 <MX_LWIP_Init+0x70>)
 801042a:	4a10      	ldr	r2, [pc, #64]	; (801046c <MX_LWIP_Init+0x6c>)
 801042c:	490e      	ldr	r1, [pc, #56]	; (8010468 <MX_LWIP_Init+0x68>)
 801042e:	4813      	ldr	r0, [pc, #76]	; (801047c <MX_LWIP_Init+0x7c>)
 8010430:	f7f4 fdae 	bl	8004f90 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8010434:	4811      	ldr	r0, [pc, #68]	; (801047c <MX_LWIP_Init+0x7c>)
 8010436:	f7f4 fe93 	bl	8005160 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801043a:	4b10      	ldr	r3, [pc, #64]	; (801047c <MX_LWIP_Init+0x7c>)
 801043c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010440:	089b      	lsrs	r3, r3, #2
 8010442:	f003 0301 	and.w	r3, r3, #1
 8010446:	b2db      	uxtb	r3, r3
 8010448:	2b00      	cmp	r3, #0
 801044a:	d003      	beq.n	8010454 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801044c:	480b      	ldr	r0, [pc, #44]	; (801047c <MX_LWIP_Init+0x7c>)
 801044e:	f7f4 fe97 	bl	8005180 <netif_set_up>
 8010452:	e002      	b.n	801045a <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8010454:	4809      	ldr	r0, [pc, #36]	; (801047c <MX_LWIP_Init+0x7c>)
 8010456:	f7f4 fed7 	bl	8005208 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 801045a:	4808      	ldr	r0, [pc, #32]	; (801047c <MX_LWIP_Init+0x7c>)
 801045c:	f7fb ff02 	bl	800c264 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8010460:	bf00      	nop
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
 8010466:	bf00      	nop
 8010468:	20007968 	.word	0x20007968
 801046c:	2000796c 	.word	0x2000796c
 8010470:	20007970 	.word	0x20007970
 8010474:	0800fc25 	.word	0x0800fc25
 8010478:	08010395 	.word	0x08010395
 801047c:	20007934 	.word	0x20007934

08010480 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8010484:	4803      	ldr	r0, [pc, #12]	; (8010494 <MX_LWIP_Process+0x14>)
 8010486:	f7ff ff65 	bl	8010354 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 801048a:	f7fa ffe9 	bl	800b460 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 801048e:	bf00      	nop
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	20007934 	.word	0x20007934

08010498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801049c:	f7f0 f890 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80104a0:	f000 f814 	bl	80104cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80104a4:	f000 f966 	bl	8010774 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80104a8:	f000 f90c 	bl	80106c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80104ac:	f000 f934 	bl	8010718 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 80104b0:	f000 f876 	bl	80105a0 <MX_CAN1_Init>
  MX_CAN2_Init();
 80104b4:	f000 f8a8 	bl	8010608 <MX_CAN2_Init>
  MX_USART2_UART_Init();
 80104b8:	f000 f8da 	bl	8010670 <MX_USART2_UART_Init>
  MX_LWIP_Init();
 80104bc:	f7ff ffa0 	bl	8010400 <MX_LWIP_Init>
  httpd_init();
 80104c0:	f7f4 f884 	bl	80045cc <httpd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 MX_LWIP_Process();
 80104c4:	f7ff ffdc 	bl	8010480 <MX_LWIP_Process>
 80104c8:	e7fc      	b.n	80104c4 <main+0x2c>
	...

080104cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b094      	sub	sp, #80	; 0x50
 80104d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80104d2:	f107 0320 	add.w	r3, r7, #32
 80104d6:	2230      	movs	r2, #48	; 0x30
 80104d8:	2100      	movs	r1, #0
 80104da:	4618      	mov	r0, r3
 80104dc:	f000 fd7e 	bl	8010fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80104e0:	f107 030c 	add.w	r3, r7, #12
 80104e4:	2200      	movs	r2, #0
 80104e6:	601a      	str	r2, [r3, #0]
 80104e8:	605a      	str	r2, [r3, #4]
 80104ea:	609a      	str	r2, [r3, #8]
 80104ec:	60da      	str	r2, [r3, #12]
 80104ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80104f0:	2300      	movs	r3, #0
 80104f2:	60bb      	str	r3, [r7, #8]
 80104f4:	4b28      	ldr	r3, [pc, #160]	; (8010598 <SystemClock_Config+0xcc>)
 80104f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104f8:	4a27      	ldr	r2, [pc, #156]	; (8010598 <SystemClock_Config+0xcc>)
 80104fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104fe:	6413      	str	r3, [r2, #64]	; 0x40
 8010500:	4b25      	ldr	r3, [pc, #148]	; (8010598 <SystemClock_Config+0xcc>)
 8010502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010508:	60bb      	str	r3, [r7, #8]
 801050a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801050c:	2300      	movs	r3, #0
 801050e:	607b      	str	r3, [r7, #4]
 8010510:	4b22      	ldr	r3, [pc, #136]	; (801059c <SystemClock_Config+0xd0>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4a21      	ldr	r2, [pc, #132]	; (801059c <SystemClock_Config+0xd0>)
 8010516:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801051a:	6013      	str	r3, [r2, #0]
 801051c:	4b1f      	ldr	r3, [pc, #124]	; (801059c <SystemClock_Config+0xd0>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010524:	607b      	str	r3, [r7, #4]
 8010526:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8010528:	2301      	movs	r3, #1
 801052a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 801052c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8010530:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010532:	2302      	movs	r3, #2
 8010534:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010536:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801053a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 801053c:	2304      	movs	r3, #4
 801053e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8010540:	23a8      	movs	r3, #168	; 0xa8
 8010542:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010544:	2302      	movs	r3, #2
 8010546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8010548:	2307      	movs	r3, #7
 801054a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801054c:	f107 0320 	add.w	r3, r7, #32
 8010550:	4618      	mov	r0, r3
 8010552:	f7f1 fd1f 	bl	8001f94 <HAL_RCC_OscConfig>
 8010556:	4603      	mov	r3, r0
 8010558:	2b00      	cmp	r3, #0
 801055a:	d001      	beq.n	8010560 <SystemClock_Config+0x94>
  {
    Error_Handler();
 801055c:	f000 fa10 	bl	8010980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010560:	230f      	movs	r3, #15
 8010562:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010564:	2302      	movs	r3, #2
 8010566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010568:	2300      	movs	r3, #0
 801056a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801056c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8010570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010576:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8010578:	f107 030c 	add.w	r3, r7, #12
 801057c:	2105      	movs	r1, #5
 801057e:	4618      	mov	r0, r3
 8010580:	f7f1 ff4a 	bl	8002418 <HAL_RCC_ClockConfig>
 8010584:	4603      	mov	r3, r0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d001      	beq.n	801058e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 801058a:	f000 f9f9 	bl	8010980 <Error_Handler>
  }
}
 801058e:	bf00      	nop
 8010590:	3750      	adds	r7, #80	; 0x50
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	40023800 	.word	0x40023800
 801059c:	40007000 	.word	0x40007000

080105a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80105a4:	4b16      	ldr	r3, [pc, #88]	; (8010600 <MX_CAN1_Init+0x60>)
 80105a6:	4a17      	ldr	r2, [pc, #92]	; (8010604 <MX_CAN1_Init+0x64>)
 80105a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80105aa:	4b15      	ldr	r3, [pc, #84]	; (8010600 <MX_CAN1_Init+0x60>)
 80105ac:	2210      	movs	r2, #16
 80105ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80105b0:	4b13      	ldr	r3, [pc, #76]	; (8010600 <MX_CAN1_Init+0x60>)
 80105b2:	2200      	movs	r2, #0
 80105b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80105b6:	4b12      	ldr	r3, [pc, #72]	; (8010600 <MX_CAN1_Init+0x60>)
 80105b8:	2200      	movs	r2, #0
 80105ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80105bc:	4b10      	ldr	r3, [pc, #64]	; (8010600 <MX_CAN1_Init+0x60>)
 80105be:	2200      	movs	r2, #0
 80105c0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80105c2:	4b0f      	ldr	r3, [pc, #60]	; (8010600 <MX_CAN1_Init+0x60>)
 80105c4:	2200      	movs	r2, #0
 80105c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80105c8:	4b0d      	ldr	r3, [pc, #52]	; (8010600 <MX_CAN1_Init+0x60>)
 80105ca:	2200      	movs	r2, #0
 80105cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80105ce:	4b0c      	ldr	r3, [pc, #48]	; (8010600 <MX_CAN1_Init+0x60>)
 80105d0:	2200      	movs	r2, #0
 80105d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80105d4:	4b0a      	ldr	r3, [pc, #40]	; (8010600 <MX_CAN1_Init+0x60>)
 80105d6:	2200      	movs	r2, #0
 80105d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80105da:	4b09      	ldr	r3, [pc, #36]	; (8010600 <MX_CAN1_Init+0x60>)
 80105dc:	2200      	movs	r2, #0
 80105de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80105e0:	4b07      	ldr	r3, [pc, #28]	; (8010600 <MX_CAN1_Init+0x60>)
 80105e2:	2200      	movs	r2, #0
 80105e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80105e6:	4b06      	ldr	r3, [pc, #24]	; (8010600 <MX_CAN1_Init+0x60>)
 80105e8:	2200      	movs	r2, #0
 80105ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80105ec:	4804      	ldr	r0, [pc, #16]	; (8010600 <MX_CAN1_Init+0x60>)
 80105ee:	f7f0 f87b 	bl	80006e8 <HAL_CAN_Init>
 80105f2:	4603      	mov	r3, r0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d001      	beq.n	80105fc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80105f8:	f000 f9c2 	bl	8010980 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80105fc:	bf00      	nop
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	20007da4 	.word	0x20007da4
 8010604:	40006400 	.word	0x40006400

08010608 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 801060c:	4b16      	ldr	r3, [pc, #88]	; (8010668 <MX_CAN2_Init+0x60>)
 801060e:	4a17      	ldr	r2, [pc, #92]	; (801066c <MX_CAN2_Init+0x64>)
 8010610:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8010612:	4b15      	ldr	r3, [pc, #84]	; (8010668 <MX_CAN2_Init+0x60>)
 8010614:	2210      	movs	r2, #16
 8010616:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8010618:	4b13      	ldr	r3, [pc, #76]	; (8010668 <MX_CAN2_Init+0x60>)
 801061a:	2200      	movs	r2, #0
 801061c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 801061e:	4b12      	ldr	r3, [pc, #72]	; (8010668 <MX_CAN2_Init+0x60>)
 8010620:	2200      	movs	r2, #0
 8010622:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8010624:	4b10      	ldr	r3, [pc, #64]	; (8010668 <MX_CAN2_Init+0x60>)
 8010626:	2200      	movs	r2, #0
 8010628:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 801062a:	4b0f      	ldr	r3, [pc, #60]	; (8010668 <MX_CAN2_Init+0x60>)
 801062c:	2200      	movs	r2, #0
 801062e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8010630:	4b0d      	ldr	r3, [pc, #52]	; (8010668 <MX_CAN2_Init+0x60>)
 8010632:	2200      	movs	r2, #0
 8010634:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8010636:	4b0c      	ldr	r3, [pc, #48]	; (8010668 <MX_CAN2_Init+0x60>)
 8010638:	2200      	movs	r2, #0
 801063a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 801063c:	4b0a      	ldr	r3, [pc, #40]	; (8010668 <MX_CAN2_Init+0x60>)
 801063e:	2200      	movs	r2, #0
 8010640:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8010642:	4b09      	ldr	r3, [pc, #36]	; (8010668 <MX_CAN2_Init+0x60>)
 8010644:	2200      	movs	r2, #0
 8010646:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8010648:	4b07      	ldr	r3, [pc, #28]	; (8010668 <MX_CAN2_Init+0x60>)
 801064a:	2200      	movs	r2, #0
 801064c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 801064e:	4b06      	ldr	r3, [pc, #24]	; (8010668 <MX_CAN2_Init+0x60>)
 8010650:	2200      	movs	r2, #0
 8010652:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8010654:	4804      	ldr	r0, [pc, #16]	; (8010668 <MX_CAN2_Init+0x60>)
 8010656:	f7f0 f847 	bl	80006e8 <HAL_CAN_Init>
 801065a:	4603      	mov	r3, r0
 801065c:	2b00      	cmp	r3, #0
 801065e:	d001      	beq.n	8010664 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8010660:	f000 f98e 	bl	8010980 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8010664:	bf00      	nop
 8010666:	bd80      	pop	{r7, pc}
 8010668:	20007d7c 	.word	0x20007d7c
 801066c:	40006800 	.word	0x40006800

08010670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8010674:	4b11      	ldr	r3, [pc, #68]	; (80106bc <MX_USART2_UART_Init+0x4c>)
 8010676:	4a12      	ldr	r2, [pc, #72]	; (80106c0 <MX_USART2_UART_Init+0x50>)
 8010678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801067a:	4b10      	ldr	r3, [pc, #64]	; (80106bc <MX_USART2_UART_Init+0x4c>)
 801067c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8010682:	4b0e      	ldr	r3, [pc, #56]	; (80106bc <MX_USART2_UART_Init+0x4c>)
 8010684:	2200      	movs	r2, #0
 8010686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010688:	4b0c      	ldr	r3, [pc, #48]	; (80106bc <MX_USART2_UART_Init+0x4c>)
 801068a:	2200      	movs	r2, #0
 801068c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801068e:	4b0b      	ldr	r3, [pc, #44]	; (80106bc <MX_USART2_UART_Init+0x4c>)
 8010690:	2200      	movs	r2, #0
 8010692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8010694:	4b09      	ldr	r3, [pc, #36]	; (80106bc <MX_USART2_UART_Init+0x4c>)
 8010696:	220c      	movs	r2, #12
 8010698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801069a:	4b08      	ldr	r3, [pc, #32]	; (80106bc <MX_USART2_UART_Init+0x4c>)
 801069c:	2200      	movs	r2, #0
 801069e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80106a0:	4b06      	ldr	r3, [pc, #24]	; (80106bc <MX_USART2_UART_Init+0x4c>)
 80106a2:	2200      	movs	r2, #0
 80106a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80106a6:	4805      	ldr	r0, [pc, #20]	; (80106bc <MX_USART2_UART_Init+0x4c>)
 80106a8:	f7f2 f8a4 	bl	80027f4 <HAL_UART_Init>
 80106ac:	4603      	mov	r3, r0
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d001      	beq.n	80106b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80106b2:	f000 f965 	bl	8010980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80106b6:	bf00      	nop
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	2000480c 	.word	0x2000480c
 80106c0:	40004400 	.word	0x40004400

080106c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80106c8:	4b11      	ldr	r3, [pc, #68]	; (8010710 <MX_USART3_UART_Init+0x4c>)
 80106ca:	4a12      	ldr	r2, [pc, #72]	; (8010714 <MX_USART3_UART_Init+0x50>)
 80106cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80106ce:	4b10      	ldr	r3, [pc, #64]	; (8010710 <MX_USART3_UART_Init+0x4c>)
 80106d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80106d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80106d6:	4b0e      	ldr	r3, [pc, #56]	; (8010710 <MX_USART3_UART_Init+0x4c>)
 80106d8:	2200      	movs	r2, #0
 80106da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80106dc:	4b0c      	ldr	r3, [pc, #48]	; (8010710 <MX_USART3_UART_Init+0x4c>)
 80106de:	2200      	movs	r2, #0
 80106e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80106e2:	4b0b      	ldr	r3, [pc, #44]	; (8010710 <MX_USART3_UART_Init+0x4c>)
 80106e4:	2200      	movs	r2, #0
 80106e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80106e8:	4b09      	ldr	r3, [pc, #36]	; (8010710 <MX_USART3_UART_Init+0x4c>)
 80106ea:	220c      	movs	r2, #12
 80106ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80106ee:	4b08      	ldr	r3, [pc, #32]	; (8010710 <MX_USART3_UART_Init+0x4c>)
 80106f0:	2200      	movs	r2, #0
 80106f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80106f4:	4b06      	ldr	r3, [pc, #24]	; (8010710 <MX_USART3_UART_Init+0x4c>)
 80106f6:	2200      	movs	r2, #0
 80106f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80106fa:	4805      	ldr	r0, [pc, #20]	; (8010710 <MX_USART3_UART_Init+0x4c>)
 80106fc:	f7f2 f87a 	bl	80027f4 <HAL_UART_Init>
 8010700:	4603      	mov	r3, r0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d001      	beq.n	801070a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8010706:	f000 f93b 	bl	8010980 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 801070a:	bf00      	nop
 801070c:	bd80      	pop	{r7, pc}
 801070e:	bf00      	nop
 8010710:	20003c0c 	.word	0x20003c0c
 8010714:	40004800 	.word	0x40004800

08010718 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801071c:	4b14      	ldr	r3, [pc, #80]	; (8010770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 801071e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010722:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010724:	4b12      	ldr	r3, [pc, #72]	; (8010770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8010726:	2204      	movs	r2, #4
 8010728:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801072a:	4b11      	ldr	r3, [pc, #68]	; (8010770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 801072c:	2202      	movs	r2, #2
 801072e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010730:	4b0f      	ldr	r3, [pc, #60]	; (8010770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8010732:	2200      	movs	r2, #0
 8010734:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010736:	4b0e      	ldr	r3, [pc, #56]	; (8010770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8010738:	2202      	movs	r2, #2
 801073a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801073c:	4b0c      	ldr	r3, [pc, #48]	; (8010770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 801073e:	2201      	movs	r2, #1
 8010740:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010742:	4b0b      	ldr	r3, [pc, #44]	; (8010770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8010744:	2200      	movs	r2, #0
 8010746:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010748:	4b09      	ldr	r3, [pc, #36]	; (8010770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 801074a:	2200      	movs	r2, #0
 801074c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801074e:	4b08      	ldr	r3, [pc, #32]	; (8010770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8010750:	2201      	movs	r2, #1
 8010752:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010754:	4b06      	ldr	r3, [pc, #24]	; (8010770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8010756:	2200      	movs	r2, #0
 8010758:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801075a:	4805      	ldr	r0, [pc, #20]	; (8010770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 801075c:	f7f1 fafd 	bl	8001d5a <HAL_PCD_Init>
 8010760:	4603      	mov	r3, r0
 8010762:	2b00      	cmp	r3, #0
 8010764:	d001      	beq.n	801076a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8010766:	f000 f90b 	bl	8010980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 801076a:	bf00      	nop
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	20007974 	.word	0x20007974

08010774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b08c      	sub	sp, #48	; 0x30
 8010778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801077a:	f107 031c 	add.w	r3, r7, #28
 801077e:	2200      	movs	r2, #0
 8010780:	601a      	str	r2, [r3, #0]
 8010782:	605a      	str	r2, [r3, #4]
 8010784:	609a      	str	r2, [r3, #8]
 8010786:	60da      	str	r2, [r3, #12]
 8010788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801078a:	2300      	movs	r3, #0
 801078c:	61bb      	str	r3, [r7, #24]
 801078e:	4b75      	ldr	r3, [pc, #468]	; (8010964 <MX_GPIO_Init+0x1f0>)
 8010790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010792:	4a74      	ldr	r2, [pc, #464]	; (8010964 <MX_GPIO_Init+0x1f0>)
 8010794:	f043 0310 	orr.w	r3, r3, #16
 8010798:	6313      	str	r3, [r2, #48]	; 0x30
 801079a:	4b72      	ldr	r3, [pc, #456]	; (8010964 <MX_GPIO_Init+0x1f0>)
 801079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801079e:	f003 0310 	and.w	r3, r3, #16
 80107a2:	61bb      	str	r3, [r7, #24]
 80107a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80107a6:	2300      	movs	r3, #0
 80107a8:	617b      	str	r3, [r7, #20]
 80107aa:	4b6e      	ldr	r3, [pc, #440]	; (8010964 <MX_GPIO_Init+0x1f0>)
 80107ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ae:	4a6d      	ldr	r2, [pc, #436]	; (8010964 <MX_GPIO_Init+0x1f0>)
 80107b0:	f043 0304 	orr.w	r3, r3, #4
 80107b4:	6313      	str	r3, [r2, #48]	; 0x30
 80107b6:	4b6b      	ldr	r3, [pc, #428]	; (8010964 <MX_GPIO_Init+0x1f0>)
 80107b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ba:	f003 0304 	and.w	r3, r3, #4
 80107be:	617b      	str	r3, [r7, #20]
 80107c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80107c2:	2300      	movs	r3, #0
 80107c4:	613b      	str	r3, [r7, #16]
 80107c6:	4b67      	ldr	r3, [pc, #412]	; (8010964 <MX_GPIO_Init+0x1f0>)
 80107c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ca:	4a66      	ldr	r2, [pc, #408]	; (8010964 <MX_GPIO_Init+0x1f0>)
 80107cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107d0:	6313      	str	r3, [r2, #48]	; 0x30
 80107d2:	4b64      	ldr	r3, [pc, #400]	; (8010964 <MX_GPIO_Init+0x1f0>)
 80107d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107da:	613b      	str	r3, [r7, #16]
 80107dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80107de:	2300      	movs	r3, #0
 80107e0:	60fb      	str	r3, [r7, #12]
 80107e2:	4b60      	ldr	r3, [pc, #384]	; (8010964 <MX_GPIO_Init+0x1f0>)
 80107e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107e6:	4a5f      	ldr	r2, [pc, #380]	; (8010964 <MX_GPIO_Init+0x1f0>)
 80107e8:	f043 0301 	orr.w	r3, r3, #1
 80107ec:	6313      	str	r3, [r2, #48]	; 0x30
 80107ee:	4b5d      	ldr	r3, [pc, #372]	; (8010964 <MX_GPIO_Init+0x1f0>)
 80107f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107f2:	f003 0301 	and.w	r3, r3, #1
 80107f6:	60fb      	str	r3, [r7, #12]
 80107f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80107fa:	2300      	movs	r3, #0
 80107fc:	60bb      	str	r3, [r7, #8]
 80107fe:	4b59      	ldr	r3, [pc, #356]	; (8010964 <MX_GPIO_Init+0x1f0>)
 8010800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010802:	4a58      	ldr	r2, [pc, #352]	; (8010964 <MX_GPIO_Init+0x1f0>)
 8010804:	f043 0302 	orr.w	r3, r3, #2
 8010808:	6313      	str	r3, [r2, #48]	; 0x30
 801080a:	4b56      	ldr	r3, [pc, #344]	; (8010964 <MX_GPIO_Init+0x1f0>)
 801080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801080e:	f003 0302 	and.w	r3, r3, #2
 8010812:	60bb      	str	r3, [r7, #8]
 8010814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010816:	2300      	movs	r3, #0
 8010818:	607b      	str	r3, [r7, #4]
 801081a:	4b52      	ldr	r3, [pc, #328]	; (8010964 <MX_GPIO_Init+0x1f0>)
 801081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801081e:	4a51      	ldr	r2, [pc, #324]	; (8010964 <MX_GPIO_Init+0x1f0>)
 8010820:	f043 0308 	orr.w	r3, r3, #8
 8010824:	6313      	str	r3, [r2, #48]	; 0x30
 8010826:	4b4f      	ldr	r3, [pc, #316]	; (8010964 <MX_GPIO_Init+0x1f0>)
 8010828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801082a:	f003 0308 	and.w	r3, r3, #8
 801082e:	607b      	str	r3, [r7, #4]
 8010830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8010832:	2300      	movs	r3, #0
 8010834:	603b      	str	r3, [r7, #0]
 8010836:	4b4b      	ldr	r3, [pc, #300]	; (8010964 <MX_GPIO_Init+0x1f0>)
 8010838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801083a:	4a4a      	ldr	r2, [pc, #296]	; (8010964 <MX_GPIO_Init+0x1f0>)
 801083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010840:	6313      	str	r3, [r2, #48]	; 0x30
 8010842:	4b48      	ldr	r3, [pc, #288]	; (8010964 <MX_GPIO_Init+0x1f0>)
 8010844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801084a:	603b      	str	r3, [r7, #0]
 801084c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 801084e:	2200      	movs	r2, #0
 8010850:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8010854:	4844      	ldr	r0, [pc, #272]	; (8010968 <MX_GPIO_Init+0x1f4>)
 8010856:	f7f1 fa67 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 801085a:	2200      	movs	r2, #0
 801085c:	2140      	movs	r1, #64	; 0x40
 801085e:	4843      	ldr	r0, [pc, #268]	; (801096c <MX_GPIO_Init+0x1f8>)
 8010860:	f7f1 fa62 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8010864:	2200      	movs	r2, #0
 8010866:	f44f 7100 	mov.w	r1, #512	; 0x200
 801086a:	4841      	ldr	r0, [pc, #260]	; (8010970 <MX_GPIO_Init+0x1fc>)
 801086c:	f7f1 fa5c 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010870:	2304      	movs	r3, #4
 8010872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010874:	2303      	movs	r3, #3
 8010876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010878:	2300      	movs	r3, #0
 801087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801087c:	f107 031c 	add.w	r3, r7, #28
 8010880:	4619      	mov	r1, r3
 8010882:	483c      	ldr	r0, [pc, #240]	; (8010974 <MX_GPIO_Init+0x200>)
 8010884:	f7f1 f8a6 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8010888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801088e:	4b3a      	ldr	r3, [pc, #232]	; (8010978 <MX_GPIO_Init+0x204>)
 8010890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010892:	2300      	movs	r3, #0
 8010894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8010896:	f107 031c 	add.w	r3, r7, #28
 801089a:	4619      	mov	r1, r3
 801089c:	4834      	ldr	r0, [pc, #208]	; (8010970 <MX_GPIO_Init+0x1fc>)
 801089e:	f7f1 f899 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80108a2:	2301      	movs	r3, #1
 80108a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80108a6:	2303      	movs	r3, #3
 80108a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108aa:	2300      	movs	r3, #0
 80108ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80108ae:	f107 031c 	add.w	r3, r7, #28
 80108b2:	4619      	mov	r1, r3
 80108b4:	4831      	ldr	r0, [pc, #196]	; (801097c <MX_GPIO_Init+0x208>)
 80108b6:	f7f1 f88d 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_B0_EN10_31_Pin */
  GPIO_InitStruct.Pin = SW_B0_EN10_31_Pin;
 80108ba:	2301      	movs	r3, #1
 80108bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80108be:	2300      	movs	r3, #0
 80108c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80108c2:	2301      	movs	r3, #1
 80108c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_B0_EN10_31_GPIO_Port, &GPIO_InitStruct);
 80108c6:	f107 031c 	add.w	r3, r7, #28
 80108ca:	4619      	mov	r1, r3
 80108cc:	4826      	ldr	r0, [pc, #152]	; (8010968 <MX_GPIO_Init+0x1f4>)
 80108ce:	f7f1 f881 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80108d2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80108d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80108d8:	2301      	movs	r3, #1
 80108da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108dc:	2300      	movs	r3, #0
 80108de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80108e0:	2300      	movs	r3, #0
 80108e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80108e4:	f107 031c 	add.w	r3, r7, #28
 80108e8:	4619      	mov	r1, r3
 80108ea:	481f      	ldr	r0, [pc, #124]	; (8010968 <MX_GPIO_Init+0x1f4>)
 80108ec:	f7f1 f872 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80108f0:	2340      	movs	r3, #64	; 0x40
 80108f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80108f4:	2301      	movs	r3, #1
 80108f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108f8:	2300      	movs	r3, #0
 80108fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80108fc:	2300      	movs	r3, #0
 80108fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8010900:	f107 031c 	add.w	r3, r7, #28
 8010904:	4619      	mov	r1, r3
 8010906:	4819      	ldr	r0, [pc, #100]	; (801096c <MX_GPIO_Init+0x1f8>)
 8010908:	f7f1 f864 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 801090c:	2380      	movs	r3, #128	; 0x80
 801090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010910:	2300      	movs	r3, #0
 8010912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010914:	2300      	movs	r3, #0
 8010916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8010918:	f107 031c 	add.w	r3, r7, #28
 801091c:	4619      	mov	r1, r3
 801091e:	4813      	ldr	r0, [pc, #76]	; (801096c <MX_GPIO_Init+0x1f8>)
 8010920:	f7f1 f858 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8010924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801092a:	2301      	movs	r3, #1
 801092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801092e:	2300      	movs	r3, #0
 8010930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010932:	2300      	movs	r3, #0
 8010934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8010936:	f107 031c 	add.w	r3, r7, #28
 801093a:	4619      	mov	r1, r3
 801093c:	480c      	ldr	r0, [pc, #48]	; (8010970 <MX_GPIO_Init+0x1fc>)
 801093e:	f7f1 f849 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_E0_CN10_33_Pin */
  GPIO_InitStruct.Pin = SW_E0_CN10_33_Pin;
 8010942:	2301      	movs	r3, #1
 8010944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010946:	2300      	movs	r3, #0
 8010948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801094a:	2301      	movs	r3, #1
 801094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_E0_CN10_33_GPIO_Port, &GPIO_InitStruct);
 801094e:	f107 031c 	add.w	r3, r7, #28
 8010952:	4619      	mov	r1, r3
 8010954:	4807      	ldr	r0, [pc, #28]	; (8010974 <MX_GPIO_Init+0x200>)
 8010956:	f7f1 f83d 	bl	80019d4 <HAL_GPIO_Init>

}
 801095a:	bf00      	nop
 801095c:	3730      	adds	r7, #48	; 0x30
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}
 8010962:	bf00      	nop
 8010964:	40023800 	.word	0x40023800
 8010968:	40020400 	.word	0x40020400
 801096c:	40021800 	.word	0x40021800
 8010970:	40020800 	.word	0x40020800
 8010974:	40021000 	.word	0x40021000
 8010978:	10110000 	.word	0x10110000
 801097c:	40020000 	.word	0x40020000

08010980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010980:	b480      	push	{r7}
 8010982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8010984:	bf00      	nop
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr
	...

08010990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010990:	b480      	push	{r7}
 8010992:	b083      	sub	sp, #12
 8010994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010996:	2300      	movs	r3, #0
 8010998:	607b      	str	r3, [r7, #4]
 801099a:	4b10      	ldr	r3, [pc, #64]	; (80109dc <HAL_MspInit+0x4c>)
 801099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801099e:	4a0f      	ldr	r2, [pc, #60]	; (80109dc <HAL_MspInit+0x4c>)
 80109a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80109a4:	6453      	str	r3, [r2, #68]	; 0x44
 80109a6:	4b0d      	ldr	r3, [pc, #52]	; (80109dc <HAL_MspInit+0x4c>)
 80109a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80109ae:	607b      	str	r3, [r7, #4]
 80109b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80109b2:	2300      	movs	r3, #0
 80109b4:	603b      	str	r3, [r7, #0]
 80109b6:	4b09      	ldr	r3, [pc, #36]	; (80109dc <HAL_MspInit+0x4c>)
 80109b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ba:	4a08      	ldr	r2, [pc, #32]	; (80109dc <HAL_MspInit+0x4c>)
 80109bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80109c0:	6413      	str	r3, [r2, #64]	; 0x40
 80109c2:	4b06      	ldr	r3, [pc, #24]	; (80109dc <HAL_MspInit+0x4c>)
 80109c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80109ca:	603b      	str	r3, [r7, #0]
 80109cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80109ce:	bf00      	nop
 80109d0:	370c      	adds	r7, #12
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	40023800 	.word	0x40023800

080109e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b08c      	sub	sp, #48	; 0x30
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80109e8:	f107 031c 	add.w	r3, r7, #28
 80109ec:	2200      	movs	r2, #0
 80109ee:	601a      	str	r2, [r3, #0]
 80109f0:	605a      	str	r2, [r3, #4]
 80109f2:	609a      	str	r2, [r3, #8]
 80109f4:	60da      	str	r2, [r3, #12]
 80109f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	4a42      	ldr	r2, [pc, #264]	; (8010b08 <HAL_CAN_MspInit+0x128>)
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d135      	bne.n	8010a6e <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8010a02:	4b42      	ldr	r3, [pc, #264]	; (8010b0c <HAL_CAN_MspInit+0x12c>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	3301      	adds	r3, #1
 8010a08:	4a40      	ldr	r2, [pc, #256]	; (8010b0c <HAL_CAN_MspInit+0x12c>)
 8010a0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8010a0c:	4b3f      	ldr	r3, [pc, #252]	; (8010b0c <HAL_CAN_MspInit+0x12c>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	2b01      	cmp	r3, #1
 8010a12:	d10d      	bne.n	8010a30 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8010a14:	2300      	movs	r3, #0
 8010a16:	61bb      	str	r3, [r7, #24]
 8010a18:	4b3d      	ldr	r3, [pc, #244]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a1c:	4a3c      	ldr	r2, [pc, #240]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010a22:	6413      	str	r3, [r2, #64]	; 0x40
 8010a24:	4b3a      	ldr	r3, [pc, #232]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a2c:	61bb      	str	r3, [r7, #24]
 8010a2e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010a30:	2300      	movs	r3, #0
 8010a32:	617b      	str	r3, [r7, #20]
 8010a34:	4b36      	ldr	r3, [pc, #216]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a38:	4a35      	ldr	r2, [pc, #212]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010a3a:	f043 0308 	orr.w	r3, r3, #8
 8010a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8010a40:	4b33      	ldr	r3, [pc, #204]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a44:	f003 0308 	and.w	r3, r3, #8
 8010a48:	617b      	str	r3, [r7, #20]
 8010a4a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8010a4c:	2303      	movs	r3, #3
 8010a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a50:	2302      	movs	r3, #2
 8010a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a54:	2300      	movs	r3, #0
 8010a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a58:	2303      	movs	r3, #3
 8010a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8010a5c:	2309      	movs	r3, #9
 8010a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010a60:	f107 031c 	add.w	r3, r7, #28
 8010a64:	4619      	mov	r1, r3
 8010a66:	482b      	ldr	r0, [pc, #172]	; (8010b14 <HAL_CAN_MspInit+0x134>)
 8010a68:	f7f0 ffb4 	bl	80019d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8010a6c:	e048      	b.n	8010b00 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	4a29      	ldr	r2, [pc, #164]	; (8010b18 <HAL_CAN_MspInit+0x138>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d143      	bne.n	8010b00 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8010a78:	2300      	movs	r3, #0
 8010a7a:	613b      	str	r3, [r7, #16]
 8010a7c:	4b24      	ldr	r3, [pc, #144]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a80:	4a23      	ldr	r2, [pc, #140]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010a82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010a86:	6413      	str	r3, [r2, #64]	; 0x40
 8010a88:	4b21      	ldr	r3, [pc, #132]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010a90:	613b      	str	r3, [r7, #16]
 8010a92:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8010a94:	4b1d      	ldr	r3, [pc, #116]	; (8010b0c <HAL_CAN_MspInit+0x12c>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	4a1c      	ldr	r2, [pc, #112]	; (8010b0c <HAL_CAN_MspInit+0x12c>)
 8010a9c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8010a9e:	4b1b      	ldr	r3, [pc, #108]	; (8010b0c <HAL_CAN_MspInit+0x12c>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d10d      	bne.n	8010ac2 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	60fb      	str	r3, [r7, #12]
 8010aaa:	4b19      	ldr	r3, [pc, #100]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aae:	4a18      	ldr	r2, [pc, #96]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010ab0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8010ab6:	4b16      	ldr	r3, [pc, #88]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010abe:	60fb      	str	r3, [r7, #12]
 8010ac0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	60bb      	str	r3, [r7, #8]
 8010ac6:	4b12      	ldr	r3, [pc, #72]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aca:	4a11      	ldr	r2, [pc, #68]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010acc:	f043 0302 	orr.w	r3, r3, #2
 8010ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8010ad2:	4b0f      	ldr	r3, [pc, #60]	; (8010b10 <HAL_CAN_MspInit+0x130>)
 8010ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ad6:	f003 0302 	and.w	r3, r3, #2
 8010ada:	60bb      	str	r3, [r7, #8]
 8010adc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8010ade:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8010ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ae4:	2302      	movs	r3, #2
 8010ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010aec:	2303      	movs	r3, #3
 8010aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8010af0:	2309      	movs	r3, #9
 8010af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010af4:	f107 031c 	add.w	r3, r7, #28
 8010af8:	4619      	mov	r1, r3
 8010afa:	4808      	ldr	r0, [pc, #32]	; (8010b1c <HAL_CAN_MspInit+0x13c>)
 8010afc:	f7f0 ff6a 	bl	80019d4 <HAL_GPIO_Init>
}
 8010b00:	bf00      	nop
 8010b02:	3730      	adds	r7, #48	; 0x30
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	40006400 	.word	0x40006400
 8010b0c:	20000654 	.word	0x20000654
 8010b10:	40023800 	.word	0x40023800
 8010b14:	40020c00 	.word	0x40020c00
 8010b18:	40006800 	.word	0x40006800
 8010b1c:	40020400 	.word	0x40020400

08010b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b08c      	sub	sp, #48	; 0x30
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b28:	f107 031c 	add.w	r3, r7, #28
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	601a      	str	r2, [r3, #0]
 8010b30:	605a      	str	r2, [r3, #4]
 8010b32:	609a      	str	r2, [r3, #8]
 8010b34:	60da      	str	r2, [r3, #12]
 8010b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4a41      	ldr	r2, [pc, #260]	; (8010c44 <HAL_UART_MspInit+0x124>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d14a      	bne.n	8010bd8 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8010b42:	2300      	movs	r3, #0
 8010b44:	61bb      	str	r3, [r7, #24]
 8010b46:	4b40      	ldr	r3, [pc, #256]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b4a:	4a3f      	ldr	r2, [pc, #252]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010b50:	6413      	str	r3, [r2, #64]	; 0x40
 8010b52:	4b3d      	ldr	r3, [pc, #244]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b5a:	61bb      	str	r3, [r7, #24]
 8010b5c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010b5e:	2300      	movs	r3, #0
 8010b60:	617b      	str	r3, [r7, #20]
 8010b62:	4b39      	ldr	r3, [pc, #228]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b66:	4a38      	ldr	r2, [pc, #224]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010b68:	f043 0301 	orr.w	r3, r3, #1
 8010b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8010b6e:	4b36      	ldr	r3, [pc, #216]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b72:	f003 0301 	and.w	r3, r3, #1
 8010b76:	617b      	str	r3, [r7, #20]
 8010b78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	613b      	str	r3, [r7, #16]
 8010b7e:	4b32      	ldr	r3, [pc, #200]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b82:	4a31      	ldr	r2, [pc, #196]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010b84:	f043 0308 	orr.w	r3, r3, #8
 8010b88:	6313      	str	r3, [r2, #48]	; 0x30
 8010b8a:	4b2f      	ldr	r3, [pc, #188]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b8e:	f003 0308 	and.w	r3, r3, #8
 8010b92:	613b      	str	r3, [r7, #16]
 8010b94:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8010b96:	2308      	movs	r3, #8
 8010b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b9a:	2302      	movs	r3, #2
 8010b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ba2:	2303      	movs	r3, #3
 8010ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8010ba6:	2307      	movs	r3, #7
 8010ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010baa:	f107 031c 	add.w	r3, r7, #28
 8010bae:	4619      	mov	r1, r3
 8010bb0:	4826      	ldr	r0, [pc, #152]	; (8010c4c <HAL_UART_MspInit+0x12c>)
 8010bb2:	f7f0 ff0f 	bl	80019d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8010bb6:	2320      	movs	r3, #32
 8010bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bba:	2302      	movs	r3, #2
 8010bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010bc2:	2303      	movs	r3, #3
 8010bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8010bc6:	2307      	movs	r3, #7
 8010bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010bca:	f107 031c 	add.w	r3, r7, #28
 8010bce:	4619      	mov	r1, r3
 8010bd0:	481f      	ldr	r0, [pc, #124]	; (8010c50 <HAL_UART_MspInit+0x130>)
 8010bd2:	f7f0 feff 	bl	80019d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8010bd6:	e031      	b.n	8010c3c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	4a1d      	ldr	r2, [pc, #116]	; (8010c54 <HAL_UART_MspInit+0x134>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d12c      	bne.n	8010c3c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8010be2:	2300      	movs	r3, #0
 8010be4:	60fb      	str	r3, [r7, #12]
 8010be6:	4b18      	ldr	r3, [pc, #96]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bea:	4a17      	ldr	r2, [pc, #92]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8010bf2:	4b15      	ldr	r3, [pc, #84]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010bfa:	60fb      	str	r3, [r7, #12]
 8010bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010bfe:	2300      	movs	r3, #0
 8010c00:	60bb      	str	r3, [r7, #8]
 8010c02:	4b11      	ldr	r3, [pc, #68]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c06:	4a10      	ldr	r2, [pc, #64]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010c08:	f043 0308 	orr.w	r3, r3, #8
 8010c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8010c0e:	4b0e      	ldr	r3, [pc, #56]	; (8010c48 <HAL_UART_MspInit+0x128>)
 8010c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c12:	f003 0308 	and.w	r3, r3, #8
 8010c16:	60bb      	str	r3, [r7, #8]
 8010c18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8010c1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c20:	2302      	movs	r3, #2
 8010c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010c24:	2301      	movs	r3, #1
 8010c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c28:	2303      	movs	r3, #3
 8010c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8010c2c:	2307      	movs	r3, #7
 8010c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010c30:	f107 031c 	add.w	r3, r7, #28
 8010c34:	4619      	mov	r1, r3
 8010c36:	4806      	ldr	r0, [pc, #24]	; (8010c50 <HAL_UART_MspInit+0x130>)
 8010c38:	f7f0 fecc 	bl	80019d4 <HAL_GPIO_Init>
}
 8010c3c:	bf00      	nop
 8010c3e:	3730      	adds	r7, #48	; 0x30
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}
 8010c44:	40004400 	.word	0x40004400
 8010c48:	40023800 	.word	0x40023800
 8010c4c:	40020000 	.word	0x40020000
 8010c50:	40020c00 	.word	0x40020c00
 8010c54:	40004800 	.word	0x40004800

08010c58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b08a      	sub	sp, #40	; 0x28
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c60:	f107 0314 	add.w	r3, r7, #20
 8010c64:	2200      	movs	r2, #0
 8010c66:	601a      	str	r2, [r3, #0]
 8010c68:	605a      	str	r2, [r3, #4]
 8010c6a:	609a      	str	r2, [r3, #8]
 8010c6c:	60da      	str	r2, [r3, #12]
 8010c6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010c78:	d13f      	bne.n	8010cfa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	613b      	str	r3, [r7, #16]
 8010c7e:	4b21      	ldr	r3, [pc, #132]	; (8010d04 <HAL_PCD_MspInit+0xac>)
 8010c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c82:	4a20      	ldr	r2, [pc, #128]	; (8010d04 <HAL_PCD_MspInit+0xac>)
 8010c84:	f043 0301 	orr.w	r3, r3, #1
 8010c88:	6313      	str	r3, [r2, #48]	; 0x30
 8010c8a:	4b1e      	ldr	r3, [pc, #120]	; (8010d04 <HAL_PCD_MspInit+0xac>)
 8010c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c8e:	f003 0301 	and.w	r3, r3, #1
 8010c92:	613b      	str	r3, [r7, #16]
 8010c94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8010c96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8010c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c9c:	2302      	movs	r3, #2
 8010c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ca4:	2303      	movs	r3, #3
 8010ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010ca8:	230a      	movs	r3, #10
 8010caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010cac:	f107 0314 	add.w	r3, r7, #20
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	4815      	ldr	r0, [pc, #84]	; (8010d08 <HAL_PCD_MspInit+0xb0>)
 8010cb4:	f7f0 fe8e 	bl	80019d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8010cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8010cc6:	f107 0314 	add.w	r3, r7, #20
 8010cca:	4619      	mov	r1, r3
 8010ccc:	480e      	ldr	r0, [pc, #56]	; (8010d08 <HAL_PCD_MspInit+0xb0>)
 8010cce:	f7f0 fe81 	bl	80019d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010cd2:	4b0c      	ldr	r3, [pc, #48]	; (8010d04 <HAL_PCD_MspInit+0xac>)
 8010cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cd6:	4a0b      	ldr	r2, [pc, #44]	; (8010d04 <HAL_PCD_MspInit+0xac>)
 8010cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cdc:	6353      	str	r3, [r2, #52]	; 0x34
 8010cde:	2300      	movs	r3, #0
 8010ce0:	60fb      	str	r3, [r7, #12]
 8010ce2:	4b08      	ldr	r3, [pc, #32]	; (8010d04 <HAL_PCD_MspInit+0xac>)
 8010ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ce6:	4a07      	ldr	r2, [pc, #28]	; (8010d04 <HAL_PCD_MspInit+0xac>)
 8010ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010cec:	6453      	str	r3, [r2, #68]	; 0x44
 8010cee:	4b05      	ldr	r3, [pc, #20]	; (8010d04 <HAL_PCD_MspInit+0xac>)
 8010cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010cf6:	60fb      	str	r3, [r7, #12]
 8010cf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8010cfa:	bf00      	nop
 8010cfc:	3728      	adds	r7, #40	; 0x28
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	40023800 	.word	0x40023800
 8010d08:	40020000 	.word	0x40020000

08010d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010d10:	bf00      	nop
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr

08010d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010d1a:	b480      	push	{r7}
 8010d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010d1e:	e7fe      	b.n	8010d1e <HardFault_Handler+0x4>

08010d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010d20:	b480      	push	{r7}
 8010d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010d24:	e7fe      	b.n	8010d24 <MemManage_Handler+0x4>

08010d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010d26:	b480      	push	{r7}
 8010d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010d2a:	e7fe      	b.n	8010d2a <BusFault_Handler+0x4>

08010d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010d30:	e7fe      	b.n	8010d30 <UsageFault_Handler+0x4>

08010d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010d32:	b480      	push	{r7}
 8010d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010d36:	bf00      	nop
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010d40:	b480      	push	{r7}
 8010d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010d44:	bf00      	nop
 8010d46:	46bd      	mov	sp, r7
 8010d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4c:	4770      	bx	lr

08010d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010d4e:	b480      	push	{r7}
 8010d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010d52:	bf00      	nop
 8010d54:	46bd      	mov	sp, r7
 8010d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5a:	4770      	bx	lr

08010d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010d60:	f7ef fc80 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010d64:	bf00      	nop
 8010d66:	bd80      	pop	{r7, pc}

08010d68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b086      	sub	sp, #24
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	60f8      	str	r0, [r7, #12]
 8010d70:	60b9      	str	r1, [r7, #8]
 8010d72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010d74:	2300      	movs	r3, #0
 8010d76:	617b      	str	r3, [r7, #20]
 8010d78:	e00a      	b.n	8010d90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010d7a:	f3af 8000 	nop.w
 8010d7e:	4601      	mov	r1, r0
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	1c5a      	adds	r2, r3, #1
 8010d84:	60ba      	str	r2, [r7, #8]
 8010d86:	b2ca      	uxtb	r2, r1
 8010d88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	617b      	str	r3, [r7, #20]
 8010d90:	697a      	ldr	r2, [r7, #20]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	429a      	cmp	r2, r3
 8010d96:	dbf0      	blt.n	8010d7a <_read+0x12>
	}

return len;
 8010d98:	687b      	ldr	r3, [r7, #4]
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3718      	adds	r7, #24
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}

08010da2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010da2:	b580      	push	{r7, lr}
 8010da4:	b086      	sub	sp, #24
 8010da6:	af00      	add	r7, sp, #0
 8010da8:	60f8      	str	r0, [r7, #12]
 8010daa:	60b9      	str	r1, [r7, #8]
 8010dac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010dae:	2300      	movs	r3, #0
 8010db0:	617b      	str	r3, [r7, #20]
 8010db2:	e009      	b.n	8010dc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	1c5a      	adds	r2, r3, #1
 8010db8:	60ba      	str	r2, [r7, #8]
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	3301      	adds	r3, #1
 8010dc6:	617b      	str	r3, [r7, #20]
 8010dc8:	697a      	ldr	r2, [r7, #20]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	dbf1      	blt.n	8010db4 <_write+0x12>
	}
	return len;
 8010dd0:	687b      	ldr	r3, [r7, #4]
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3718      	adds	r7, #24
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}

08010dda <_close>:

int _close(int file)
{
 8010dda:	b480      	push	{r7}
 8010ddc:	b083      	sub	sp, #12
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
	return -1;
 8010de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	370c      	adds	r7, #12
 8010dea:	46bd      	mov	sp, r7
 8010dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df0:	4770      	bx	lr

08010df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010df2:	b480      	push	{r7}
 8010df4:	b083      	sub	sp, #12
 8010df6:	af00      	add	r7, sp, #0
 8010df8:	6078      	str	r0, [r7, #4]
 8010dfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010e02:	605a      	str	r2, [r3, #4]
	return 0;
 8010e04:	2300      	movs	r3, #0
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	370c      	adds	r7, #12
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e10:	4770      	bx	lr

08010e12 <_isatty>:

int _isatty(int file)
{
 8010e12:	b480      	push	{r7}
 8010e14:	b083      	sub	sp, #12
 8010e16:	af00      	add	r7, sp, #0
 8010e18:	6078      	str	r0, [r7, #4]
	return 1;
 8010e1a:	2301      	movs	r3, #1
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b085      	sub	sp, #20
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	607a      	str	r2, [r7, #4]
	return 0;
 8010e34:	2300      	movs	r3, #0
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3714      	adds	r7, #20
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr
	...

08010e44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b085      	sub	sp, #20
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8010e4c:	4b11      	ldr	r3, [pc, #68]	; (8010e94 <_sbrk+0x50>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d102      	bne.n	8010e5a <_sbrk+0x16>
		heap_end = &end;
 8010e54:	4b0f      	ldr	r3, [pc, #60]	; (8010e94 <_sbrk+0x50>)
 8010e56:	4a10      	ldr	r2, [pc, #64]	; (8010e98 <_sbrk+0x54>)
 8010e58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8010e5a:	4b0e      	ldr	r3, [pc, #56]	; (8010e94 <_sbrk+0x50>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8010e60:	4b0c      	ldr	r3, [pc, #48]	; (8010e94 <_sbrk+0x50>)
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	4413      	add	r3, r2
 8010e68:	466a      	mov	r2, sp
 8010e6a:	4293      	cmp	r3, r2
 8010e6c:	d905      	bls.n	8010e7a <_sbrk+0x36>
	{
		errno = ENOMEM;
 8010e6e:	4b0b      	ldr	r3, [pc, #44]	; (8010e9c <_sbrk+0x58>)
 8010e70:	220c      	movs	r2, #12
 8010e72:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8010e74:	f04f 33ff 	mov.w	r3, #4294967295
 8010e78:	e006      	b.n	8010e88 <_sbrk+0x44>
	}

	heap_end += incr;
 8010e7a:	4b06      	ldr	r3, [pc, #24]	; (8010e94 <_sbrk+0x50>)
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4413      	add	r3, r2
 8010e82:	4a04      	ldr	r2, [pc, #16]	; (8010e94 <_sbrk+0x50>)
 8010e84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8010e86:	68fb      	ldr	r3, [r7, #12]
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3714      	adds	r7, #20
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr
 8010e94:	20000658 	.word	0x20000658
 8010e98:	20007dd0 	.word	0x20007dd0
 8010e9c:	20007dcc 	.word	0x20007dcc

08010ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010ea4:	4b16      	ldr	r3, [pc, #88]	; (8010f00 <SystemInit+0x60>)
 8010ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010eaa:	4a15      	ldr	r2, [pc, #84]	; (8010f00 <SystemInit+0x60>)
 8010eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8010eb4:	4b13      	ldr	r3, [pc, #76]	; (8010f04 <SystemInit+0x64>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	4a12      	ldr	r2, [pc, #72]	; (8010f04 <SystemInit+0x64>)
 8010eba:	f043 0301 	orr.w	r3, r3, #1
 8010ebe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010ec0:	4b10      	ldr	r3, [pc, #64]	; (8010f04 <SystemInit+0x64>)
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010ec6:	4b0f      	ldr	r3, [pc, #60]	; (8010f04 <SystemInit+0x64>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	4a0e      	ldr	r2, [pc, #56]	; (8010f04 <SystemInit+0x64>)
 8010ecc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8010ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010ed4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010ed6:	4b0b      	ldr	r3, [pc, #44]	; (8010f04 <SystemInit+0x64>)
 8010ed8:	4a0b      	ldr	r2, [pc, #44]	; (8010f08 <SystemInit+0x68>)
 8010eda:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010edc:	4b09      	ldr	r3, [pc, #36]	; (8010f04 <SystemInit+0x64>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4a08      	ldr	r2, [pc, #32]	; (8010f04 <SystemInit+0x64>)
 8010ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010ee6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010ee8:	4b06      	ldr	r3, [pc, #24]	; (8010f04 <SystemInit+0x64>)
 8010eea:	2200      	movs	r2, #0
 8010eec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010eee:	4b04      	ldr	r3, [pc, #16]	; (8010f00 <SystemInit+0x60>)
 8010ef0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010ef4:	609a      	str	r2, [r3, #8]
#endif
}
 8010ef6:	bf00      	nop
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efe:	4770      	bx	lr
 8010f00:	e000ed00 	.word	0xe000ed00
 8010f04:	40023800 	.word	0x40023800
 8010f08:	24003010 	.word	0x24003010

08010f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8010f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010f44 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010f10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010f12:	e003      	b.n	8010f1c <LoopCopyDataInit>

08010f14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010f14:	4b0c      	ldr	r3, [pc, #48]	; (8010f48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010f16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010f18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010f1a:	3104      	adds	r1, #4

08010f1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010f1c:	480b      	ldr	r0, [pc, #44]	; (8010f4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010f1e:	4b0c      	ldr	r3, [pc, #48]	; (8010f50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010f20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010f22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010f24:	d3f6      	bcc.n	8010f14 <CopyDataInit>
  ldr  r2, =_sbss
 8010f26:	4a0b      	ldr	r2, [pc, #44]	; (8010f54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010f28:	e002      	b.n	8010f30 <LoopFillZerobss>

08010f2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010f2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010f2c:	f842 3b04 	str.w	r3, [r2], #4

08010f30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010f30:	4b09      	ldr	r3, [pc, #36]	; (8010f58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010f32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010f34:	d3f9      	bcc.n	8010f2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010f36:	f7ff ffb3 	bl	8010ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010f3a:	f000 f811 	bl	8010f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010f3e:	f7ff faab 	bl	8010498 <main>
  bx  lr    
 8010f42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8010f44:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8010f48:	080151d8 	.word	0x080151d8
  ldr  r0, =_sdata
 8010f4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010f50:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8010f54:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8010f58:	20007dd0 	.word	0x20007dd0

08010f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010f5c:	e7fe      	b.n	8010f5c <ADC_IRQHandler>
	...

08010f60 <__libc_init_array>:
 8010f60:	b570      	push	{r4, r5, r6, lr}
 8010f62:	4e0d      	ldr	r6, [pc, #52]	; (8010f98 <__libc_init_array+0x38>)
 8010f64:	4c0d      	ldr	r4, [pc, #52]	; (8010f9c <__libc_init_array+0x3c>)
 8010f66:	1ba4      	subs	r4, r4, r6
 8010f68:	10a4      	asrs	r4, r4, #2
 8010f6a:	2500      	movs	r5, #0
 8010f6c:	42a5      	cmp	r5, r4
 8010f6e:	d109      	bne.n	8010f84 <__libc_init_array+0x24>
 8010f70:	4e0b      	ldr	r6, [pc, #44]	; (8010fa0 <__libc_init_array+0x40>)
 8010f72:	4c0c      	ldr	r4, [pc, #48]	; (8010fa4 <__libc_init_array+0x44>)
 8010f74:	f000 ff7a 	bl	8011e6c <_init>
 8010f78:	1ba4      	subs	r4, r4, r6
 8010f7a:	10a4      	asrs	r4, r4, #2
 8010f7c:	2500      	movs	r5, #0
 8010f7e:	42a5      	cmp	r5, r4
 8010f80:	d105      	bne.n	8010f8e <__libc_init_array+0x2e>
 8010f82:	bd70      	pop	{r4, r5, r6, pc}
 8010f84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010f88:	4798      	blx	r3
 8010f8a:	3501      	adds	r5, #1
 8010f8c:	e7ee      	b.n	8010f6c <__libc_init_array+0xc>
 8010f8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010f92:	4798      	blx	r3
 8010f94:	3501      	adds	r5, #1
 8010f96:	e7f2      	b.n	8010f7e <__libc_init_array+0x1e>
 8010f98:	080151d0 	.word	0x080151d0
 8010f9c:	080151d0 	.word	0x080151d0
 8010fa0:	080151d0 	.word	0x080151d0
 8010fa4:	080151d4 	.word	0x080151d4

08010fa8 <memcmp>:
 8010fa8:	b530      	push	{r4, r5, lr}
 8010faa:	2400      	movs	r4, #0
 8010fac:	42a2      	cmp	r2, r4
 8010fae:	d101      	bne.n	8010fb4 <memcmp+0xc>
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	e007      	b.n	8010fc4 <memcmp+0x1c>
 8010fb4:	5d03      	ldrb	r3, [r0, r4]
 8010fb6:	3401      	adds	r4, #1
 8010fb8:	190d      	adds	r5, r1, r4
 8010fba:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8010fbe:	42ab      	cmp	r3, r5
 8010fc0:	d0f4      	beq.n	8010fac <memcmp+0x4>
 8010fc2:	1b58      	subs	r0, r3, r5
 8010fc4:	bd30      	pop	{r4, r5, pc}

08010fc6 <memcpy>:
 8010fc6:	b510      	push	{r4, lr}
 8010fc8:	1e43      	subs	r3, r0, #1
 8010fca:	440a      	add	r2, r1
 8010fcc:	4291      	cmp	r1, r2
 8010fce:	d100      	bne.n	8010fd2 <memcpy+0xc>
 8010fd0:	bd10      	pop	{r4, pc}
 8010fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010fda:	e7f7      	b.n	8010fcc <memcpy+0x6>

08010fdc <memset>:
 8010fdc:	4402      	add	r2, r0
 8010fde:	4603      	mov	r3, r0
 8010fe0:	4293      	cmp	r3, r2
 8010fe2:	d100      	bne.n	8010fe6 <memset+0xa>
 8010fe4:	4770      	bx	lr
 8010fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8010fea:	e7f9      	b.n	8010fe0 <memset+0x4>

08010fec <iprintf>:
 8010fec:	b40f      	push	{r0, r1, r2, r3}
 8010fee:	4b0a      	ldr	r3, [pc, #40]	; (8011018 <iprintf+0x2c>)
 8010ff0:	b513      	push	{r0, r1, r4, lr}
 8010ff2:	681c      	ldr	r4, [r3, #0]
 8010ff4:	b124      	cbz	r4, 8011000 <iprintf+0x14>
 8010ff6:	69a3      	ldr	r3, [r4, #24]
 8010ff8:	b913      	cbnz	r3, 8011000 <iprintf+0x14>
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f000 f8a2 	bl	8011144 <__sinit>
 8011000:	ab05      	add	r3, sp, #20
 8011002:	9a04      	ldr	r2, [sp, #16]
 8011004:	68a1      	ldr	r1, [r4, #8]
 8011006:	9301      	str	r3, [sp, #4]
 8011008:	4620      	mov	r0, r4
 801100a:	f000 f9ff 	bl	801140c <_vfiprintf_r>
 801100e:	b002      	add	sp, #8
 8011010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011014:	b004      	add	sp, #16
 8011016:	4770      	bx	lr
 8011018:	20000018 	.word	0x20000018

0801101c <rand>:
 801101c:	b538      	push	{r3, r4, r5, lr}
 801101e:	4b13      	ldr	r3, [pc, #76]	; (801106c <rand+0x50>)
 8011020:	681c      	ldr	r4, [r3, #0]
 8011022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011024:	b97b      	cbnz	r3, 8011046 <rand+0x2a>
 8011026:	2018      	movs	r0, #24
 8011028:	f000 f916 	bl	8011258 <malloc>
 801102c:	4a10      	ldr	r2, [pc, #64]	; (8011070 <rand+0x54>)
 801102e:	4b11      	ldr	r3, [pc, #68]	; (8011074 <rand+0x58>)
 8011030:	63a0      	str	r0, [r4, #56]	; 0x38
 8011032:	e9c0 2300 	strd	r2, r3, [r0]
 8011036:	4b10      	ldr	r3, [pc, #64]	; (8011078 <rand+0x5c>)
 8011038:	6083      	str	r3, [r0, #8]
 801103a:	230b      	movs	r3, #11
 801103c:	8183      	strh	r3, [r0, #12]
 801103e:	2201      	movs	r2, #1
 8011040:	2300      	movs	r3, #0
 8011042:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011046:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011048:	480c      	ldr	r0, [pc, #48]	; (801107c <rand+0x60>)
 801104a:	690a      	ldr	r2, [r1, #16]
 801104c:	694b      	ldr	r3, [r1, #20]
 801104e:	4c0c      	ldr	r4, [pc, #48]	; (8011080 <rand+0x64>)
 8011050:	4350      	muls	r0, r2
 8011052:	fb04 0003 	mla	r0, r4, r3, r0
 8011056:	fba2 2304 	umull	r2, r3, r2, r4
 801105a:	4403      	add	r3, r0
 801105c:	1c54      	adds	r4, r2, #1
 801105e:	f143 0500 	adc.w	r5, r3, #0
 8011062:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8011066:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801106a:	bd38      	pop	{r3, r4, r5, pc}
 801106c:	20000018 	.word	0x20000018
 8011070:	abcd330e 	.word	0xabcd330e
 8011074:	e66d1234 	.word	0xe66d1234
 8011078:	0005deec 	.word	0x0005deec
 801107c:	5851f42d 	.word	0x5851f42d
 8011080:	4c957f2d 	.word	0x4c957f2d

08011084 <strchr>:
 8011084:	b2c9      	uxtb	r1, r1
 8011086:	4603      	mov	r3, r0
 8011088:	f810 2b01 	ldrb.w	r2, [r0], #1
 801108c:	b11a      	cbz	r2, 8011096 <strchr+0x12>
 801108e:	428a      	cmp	r2, r1
 8011090:	d1f9      	bne.n	8011086 <strchr+0x2>
 8011092:	4618      	mov	r0, r3
 8011094:	4770      	bx	lr
 8011096:	2900      	cmp	r1, #0
 8011098:	bf18      	it	ne
 801109a:	2300      	movne	r3, #0
 801109c:	e7f9      	b.n	8011092 <strchr+0xe>

0801109e <strncmp>:
 801109e:	b510      	push	{r4, lr}
 80110a0:	b16a      	cbz	r2, 80110be <strncmp+0x20>
 80110a2:	3901      	subs	r1, #1
 80110a4:	1884      	adds	r4, r0, r2
 80110a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80110aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d103      	bne.n	80110ba <strncmp+0x1c>
 80110b2:	42a0      	cmp	r0, r4
 80110b4:	d001      	beq.n	80110ba <strncmp+0x1c>
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d1f5      	bne.n	80110a6 <strncmp+0x8>
 80110ba:	1a98      	subs	r0, r3, r2
 80110bc:	bd10      	pop	{r4, pc}
 80110be:	4610      	mov	r0, r2
 80110c0:	e7fc      	b.n	80110bc <strncmp+0x1e>
	...

080110c4 <std>:
 80110c4:	2300      	movs	r3, #0
 80110c6:	b510      	push	{r4, lr}
 80110c8:	4604      	mov	r4, r0
 80110ca:	e9c0 3300 	strd	r3, r3, [r0]
 80110ce:	6083      	str	r3, [r0, #8]
 80110d0:	8181      	strh	r1, [r0, #12]
 80110d2:	6643      	str	r3, [r0, #100]	; 0x64
 80110d4:	81c2      	strh	r2, [r0, #14]
 80110d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80110da:	6183      	str	r3, [r0, #24]
 80110dc:	4619      	mov	r1, r3
 80110de:	2208      	movs	r2, #8
 80110e0:	305c      	adds	r0, #92	; 0x5c
 80110e2:	f7ff ff7b 	bl	8010fdc <memset>
 80110e6:	4b05      	ldr	r3, [pc, #20]	; (80110fc <std+0x38>)
 80110e8:	6263      	str	r3, [r4, #36]	; 0x24
 80110ea:	4b05      	ldr	r3, [pc, #20]	; (8011100 <std+0x3c>)
 80110ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80110ee:	4b05      	ldr	r3, [pc, #20]	; (8011104 <std+0x40>)
 80110f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80110f2:	4b05      	ldr	r3, [pc, #20]	; (8011108 <std+0x44>)
 80110f4:	6224      	str	r4, [r4, #32]
 80110f6:	6323      	str	r3, [r4, #48]	; 0x30
 80110f8:	bd10      	pop	{r4, pc}
 80110fa:	bf00      	nop
 80110fc:	08011969 	.word	0x08011969
 8011100:	0801198b 	.word	0x0801198b
 8011104:	080119c3 	.word	0x080119c3
 8011108:	080119e7 	.word	0x080119e7

0801110c <_cleanup_r>:
 801110c:	4901      	ldr	r1, [pc, #4]	; (8011114 <_cleanup_r+0x8>)
 801110e:	f000 b885 	b.w	801121c <_fwalk_reent>
 8011112:	bf00      	nop
 8011114:	08011cc1 	.word	0x08011cc1

08011118 <__sfmoreglue>:
 8011118:	b570      	push	{r4, r5, r6, lr}
 801111a:	1e4a      	subs	r2, r1, #1
 801111c:	2568      	movs	r5, #104	; 0x68
 801111e:	4355      	muls	r5, r2
 8011120:	460e      	mov	r6, r1
 8011122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011126:	f000 f8ed 	bl	8011304 <_malloc_r>
 801112a:	4604      	mov	r4, r0
 801112c:	b140      	cbz	r0, 8011140 <__sfmoreglue+0x28>
 801112e:	2100      	movs	r1, #0
 8011130:	e9c0 1600 	strd	r1, r6, [r0]
 8011134:	300c      	adds	r0, #12
 8011136:	60a0      	str	r0, [r4, #8]
 8011138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801113c:	f7ff ff4e 	bl	8010fdc <memset>
 8011140:	4620      	mov	r0, r4
 8011142:	bd70      	pop	{r4, r5, r6, pc}

08011144 <__sinit>:
 8011144:	6983      	ldr	r3, [r0, #24]
 8011146:	b510      	push	{r4, lr}
 8011148:	4604      	mov	r4, r0
 801114a:	bb33      	cbnz	r3, 801119a <__sinit+0x56>
 801114c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011150:	6503      	str	r3, [r0, #80]	; 0x50
 8011152:	4b12      	ldr	r3, [pc, #72]	; (801119c <__sinit+0x58>)
 8011154:	4a12      	ldr	r2, [pc, #72]	; (80111a0 <__sinit+0x5c>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	6282      	str	r2, [r0, #40]	; 0x28
 801115a:	4298      	cmp	r0, r3
 801115c:	bf04      	itt	eq
 801115e:	2301      	moveq	r3, #1
 8011160:	6183      	streq	r3, [r0, #24]
 8011162:	f000 f81f 	bl	80111a4 <__sfp>
 8011166:	6060      	str	r0, [r4, #4]
 8011168:	4620      	mov	r0, r4
 801116a:	f000 f81b 	bl	80111a4 <__sfp>
 801116e:	60a0      	str	r0, [r4, #8]
 8011170:	4620      	mov	r0, r4
 8011172:	f000 f817 	bl	80111a4 <__sfp>
 8011176:	2200      	movs	r2, #0
 8011178:	60e0      	str	r0, [r4, #12]
 801117a:	2104      	movs	r1, #4
 801117c:	6860      	ldr	r0, [r4, #4]
 801117e:	f7ff ffa1 	bl	80110c4 <std>
 8011182:	2201      	movs	r2, #1
 8011184:	2109      	movs	r1, #9
 8011186:	68a0      	ldr	r0, [r4, #8]
 8011188:	f7ff ff9c 	bl	80110c4 <std>
 801118c:	2202      	movs	r2, #2
 801118e:	2112      	movs	r1, #18
 8011190:	68e0      	ldr	r0, [r4, #12]
 8011192:	f7ff ff97 	bl	80110c4 <std>
 8011196:	2301      	movs	r3, #1
 8011198:	61a3      	str	r3, [r4, #24]
 801119a:	bd10      	pop	{r4, pc}
 801119c:	08015130 	.word	0x08015130
 80111a0:	0801110d 	.word	0x0801110d

080111a4 <__sfp>:
 80111a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111a6:	4b1b      	ldr	r3, [pc, #108]	; (8011214 <__sfp+0x70>)
 80111a8:	681e      	ldr	r6, [r3, #0]
 80111aa:	69b3      	ldr	r3, [r6, #24]
 80111ac:	4607      	mov	r7, r0
 80111ae:	b913      	cbnz	r3, 80111b6 <__sfp+0x12>
 80111b0:	4630      	mov	r0, r6
 80111b2:	f7ff ffc7 	bl	8011144 <__sinit>
 80111b6:	3648      	adds	r6, #72	; 0x48
 80111b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80111bc:	3b01      	subs	r3, #1
 80111be:	d503      	bpl.n	80111c8 <__sfp+0x24>
 80111c0:	6833      	ldr	r3, [r6, #0]
 80111c2:	b133      	cbz	r3, 80111d2 <__sfp+0x2e>
 80111c4:	6836      	ldr	r6, [r6, #0]
 80111c6:	e7f7      	b.n	80111b8 <__sfp+0x14>
 80111c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80111cc:	b16d      	cbz	r5, 80111ea <__sfp+0x46>
 80111ce:	3468      	adds	r4, #104	; 0x68
 80111d0:	e7f4      	b.n	80111bc <__sfp+0x18>
 80111d2:	2104      	movs	r1, #4
 80111d4:	4638      	mov	r0, r7
 80111d6:	f7ff ff9f 	bl	8011118 <__sfmoreglue>
 80111da:	6030      	str	r0, [r6, #0]
 80111dc:	2800      	cmp	r0, #0
 80111de:	d1f1      	bne.n	80111c4 <__sfp+0x20>
 80111e0:	230c      	movs	r3, #12
 80111e2:	603b      	str	r3, [r7, #0]
 80111e4:	4604      	mov	r4, r0
 80111e6:	4620      	mov	r0, r4
 80111e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111ea:	4b0b      	ldr	r3, [pc, #44]	; (8011218 <__sfp+0x74>)
 80111ec:	6665      	str	r5, [r4, #100]	; 0x64
 80111ee:	e9c4 5500 	strd	r5, r5, [r4]
 80111f2:	60a5      	str	r5, [r4, #8]
 80111f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80111f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80111fc:	2208      	movs	r2, #8
 80111fe:	4629      	mov	r1, r5
 8011200:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011204:	f7ff feea 	bl	8010fdc <memset>
 8011208:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801120c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011210:	e7e9      	b.n	80111e6 <__sfp+0x42>
 8011212:	bf00      	nop
 8011214:	08015130 	.word	0x08015130
 8011218:	ffff0001 	.word	0xffff0001

0801121c <_fwalk_reent>:
 801121c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011220:	4680      	mov	r8, r0
 8011222:	4689      	mov	r9, r1
 8011224:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011228:	2600      	movs	r6, #0
 801122a:	b914      	cbnz	r4, 8011232 <_fwalk_reent+0x16>
 801122c:	4630      	mov	r0, r6
 801122e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011232:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011236:	3f01      	subs	r7, #1
 8011238:	d501      	bpl.n	801123e <_fwalk_reent+0x22>
 801123a:	6824      	ldr	r4, [r4, #0]
 801123c:	e7f5      	b.n	801122a <_fwalk_reent+0xe>
 801123e:	89ab      	ldrh	r3, [r5, #12]
 8011240:	2b01      	cmp	r3, #1
 8011242:	d907      	bls.n	8011254 <_fwalk_reent+0x38>
 8011244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011248:	3301      	adds	r3, #1
 801124a:	d003      	beq.n	8011254 <_fwalk_reent+0x38>
 801124c:	4629      	mov	r1, r5
 801124e:	4640      	mov	r0, r8
 8011250:	47c8      	blx	r9
 8011252:	4306      	orrs	r6, r0
 8011254:	3568      	adds	r5, #104	; 0x68
 8011256:	e7ee      	b.n	8011236 <_fwalk_reent+0x1a>

08011258 <malloc>:
 8011258:	4b02      	ldr	r3, [pc, #8]	; (8011264 <malloc+0xc>)
 801125a:	4601      	mov	r1, r0
 801125c:	6818      	ldr	r0, [r3, #0]
 801125e:	f000 b851 	b.w	8011304 <_malloc_r>
 8011262:	bf00      	nop
 8011264:	20000018 	.word	0x20000018

08011268 <_free_r>:
 8011268:	b538      	push	{r3, r4, r5, lr}
 801126a:	4605      	mov	r5, r0
 801126c:	2900      	cmp	r1, #0
 801126e:	d045      	beq.n	80112fc <_free_r+0x94>
 8011270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011274:	1f0c      	subs	r4, r1, #4
 8011276:	2b00      	cmp	r3, #0
 8011278:	bfb8      	it	lt
 801127a:	18e4      	addlt	r4, r4, r3
 801127c:	f000 fdc0 	bl	8011e00 <__malloc_lock>
 8011280:	4a1f      	ldr	r2, [pc, #124]	; (8011300 <_free_r+0x98>)
 8011282:	6813      	ldr	r3, [r2, #0]
 8011284:	4610      	mov	r0, r2
 8011286:	b933      	cbnz	r3, 8011296 <_free_r+0x2e>
 8011288:	6063      	str	r3, [r4, #4]
 801128a:	6014      	str	r4, [r2, #0]
 801128c:	4628      	mov	r0, r5
 801128e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011292:	f000 bdb6 	b.w	8011e02 <__malloc_unlock>
 8011296:	42a3      	cmp	r3, r4
 8011298:	d90c      	bls.n	80112b4 <_free_r+0x4c>
 801129a:	6821      	ldr	r1, [r4, #0]
 801129c:	1862      	adds	r2, r4, r1
 801129e:	4293      	cmp	r3, r2
 80112a0:	bf04      	itt	eq
 80112a2:	681a      	ldreq	r2, [r3, #0]
 80112a4:	685b      	ldreq	r3, [r3, #4]
 80112a6:	6063      	str	r3, [r4, #4]
 80112a8:	bf04      	itt	eq
 80112aa:	1852      	addeq	r2, r2, r1
 80112ac:	6022      	streq	r2, [r4, #0]
 80112ae:	6004      	str	r4, [r0, #0]
 80112b0:	e7ec      	b.n	801128c <_free_r+0x24>
 80112b2:	4613      	mov	r3, r2
 80112b4:	685a      	ldr	r2, [r3, #4]
 80112b6:	b10a      	cbz	r2, 80112bc <_free_r+0x54>
 80112b8:	42a2      	cmp	r2, r4
 80112ba:	d9fa      	bls.n	80112b2 <_free_r+0x4a>
 80112bc:	6819      	ldr	r1, [r3, #0]
 80112be:	1858      	adds	r0, r3, r1
 80112c0:	42a0      	cmp	r0, r4
 80112c2:	d10b      	bne.n	80112dc <_free_r+0x74>
 80112c4:	6820      	ldr	r0, [r4, #0]
 80112c6:	4401      	add	r1, r0
 80112c8:	1858      	adds	r0, r3, r1
 80112ca:	4282      	cmp	r2, r0
 80112cc:	6019      	str	r1, [r3, #0]
 80112ce:	d1dd      	bne.n	801128c <_free_r+0x24>
 80112d0:	6810      	ldr	r0, [r2, #0]
 80112d2:	6852      	ldr	r2, [r2, #4]
 80112d4:	605a      	str	r2, [r3, #4]
 80112d6:	4401      	add	r1, r0
 80112d8:	6019      	str	r1, [r3, #0]
 80112da:	e7d7      	b.n	801128c <_free_r+0x24>
 80112dc:	d902      	bls.n	80112e4 <_free_r+0x7c>
 80112de:	230c      	movs	r3, #12
 80112e0:	602b      	str	r3, [r5, #0]
 80112e2:	e7d3      	b.n	801128c <_free_r+0x24>
 80112e4:	6820      	ldr	r0, [r4, #0]
 80112e6:	1821      	adds	r1, r4, r0
 80112e8:	428a      	cmp	r2, r1
 80112ea:	bf04      	itt	eq
 80112ec:	6811      	ldreq	r1, [r2, #0]
 80112ee:	6852      	ldreq	r2, [r2, #4]
 80112f0:	6062      	str	r2, [r4, #4]
 80112f2:	bf04      	itt	eq
 80112f4:	1809      	addeq	r1, r1, r0
 80112f6:	6021      	streq	r1, [r4, #0]
 80112f8:	605c      	str	r4, [r3, #4]
 80112fa:	e7c7      	b.n	801128c <_free_r+0x24>
 80112fc:	bd38      	pop	{r3, r4, r5, pc}
 80112fe:	bf00      	nop
 8011300:	2000065c 	.word	0x2000065c

08011304 <_malloc_r>:
 8011304:	b570      	push	{r4, r5, r6, lr}
 8011306:	1ccd      	adds	r5, r1, #3
 8011308:	f025 0503 	bic.w	r5, r5, #3
 801130c:	3508      	adds	r5, #8
 801130e:	2d0c      	cmp	r5, #12
 8011310:	bf38      	it	cc
 8011312:	250c      	movcc	r5, #12
 8011314:	2d00      	cmp	r5, #0
 8011316:	4606      	mov	r6, r0
 8011318:	db01      	blt.n	801131e <_malloc_r+0x1a>
 801131a:	42a9      	cmp	r1, r5
 801131c:	d903      	bls.n	8011326 <_malloc_r+0x22>
 801131e:	230c      	movs	r3, #12
 8011320:	6033      	str	r3, [r6, #0]
 8011322:	2000      	movs	r0, #0
 8011324:	bd70      	pop	{r4, r5, r6, pc}
 8011326:	f000 fd6b 	bl	8011e00 <__malloc_lock>
 801132a:	4a21      	ldr	r2, [pc, #132]	; (80113b0 <_malloc_r+0xac>)
 801132c:	6814      	ldr	r4, [r2, #0]
 801132e:	4621      	mov	r1, r4
 8011330:	b991      	cbnz	r1, 8011358 <_malloc_r+0x54>
 8011332:	4c20      	ldr	r4, [pc, #128]	; (80113b4 <_malloc_r+0xb0>)
 8011334:	6823      	ldr	r3, [r4, #0]
 8011336:	b91b      	cbnz	r3, 8011340 <_malloc_r+0x3c>
 8011338:	4630      	mov	r0, r6
 801133a:	f000 fb05 	bl	8011948 <_sbrk_r>
 801133e:	6020      	str	r0, [r4, #0]
 8011340:	4629      	mov	r1, r5
 8011342:	4630      	mov	r0, r6
 8011344:	f000 fb00 	bl	8011948 <_sbrk_r>
 8011348:	1c43      	adds	r3, r0, #1
 801134a:	d124      	bne.n	8011396 <_malloc_r+0x92>
 801134c:	230c      	movs	r3, #12
 801134e:	6033      	str	r3, [r6, #0]
 8011350:	4630      	mov	r0, r6
 8011352:	f000 fd56 	bl	8011e02 <__malloc_unlock>
 8011356:	e7e4      	b.n	8011322 <_malloc_r+0x1e>
 8011358:	680b      	ldr	r3, [r1, #0]
 801135a:	1b5b      	subs	r3, r3, r5
 801135c:	d418      	bmi.n	8011390 <_malloc_r+0x8c>
 801135e:	2b0b      	cmp	r3, #11
 8011360:	d90f      	bls.n	8011382 <_malloc_r+0x7e>
 8011362:	600b      	str	r3, [r1, #0]
 8011364:	50cd      	str	r5, [r1, r3]
 8011366:	18cc      	adds	r4, r1, r3
 8011368:	4630      	mov	r0, r6
 801136a:	f000 fd4a 	bl	8011e02 <__malloc_unlock>
 801136e:	f104 000b 	add.w	r0, r4, #11
 8011372:	1d23      	adds	r3, r4, #4
 8011374:	f020 0007 	bic.w	r0, r0, #7
 8011378:	1ac3      	subs	r3, r0, r3
 801137a:	d0d3      	beq.n	8011324 <_malloc_r+0x20>
 801137c:	425a      	negs	r2, r3
 801137e:	50e2      	str	r2, [r4, r3]
 8011380:	e7d0      	b.n	8011324 <_malloc_r+0x20>
 8011382:	428c      	cmp	r4, r1
 8011384:	684b      	ldr	r3, [r1, #4]
 8011386:	bf16      	itet	ne
 8011388:	6063      	strne	r3, [r4, #4]
 801138a:	6013      	streq	r3, [r2, #0]
 801138c:	460c      	movne	r4, r1
 801138e:	e7eb      	b.n	8011368 <_malloc_r+0x64>
 8011390:	460c      	mov	r4, r1
 8011392:	6849      	ldr	r1, [r1, #4]
 8011394:	e7cc      	b.n	8011330 <_malloc_r+0x2c>
 8011396:	1cc4      	adds	r4, r0, #3
 8011398:	f024 0403 	bic.w	r4, r4, #3
 801139c:	42a0      	cmp	r0, r4
 801139e:	d005      	beq.n	80113ac <_malloc_r+0xa8>
 80113a0:	1a21      	subs	r1, r4, r0
 80113a2:	4630      	mov	r0, r6
 80113a4:	f000 fad0 	bl	8011948 <_sbrk_r>
 80113a8:	3001      	adds	r0, #1
 80113aa:	d0cf      	beq.n	801134c <_malloc_r+0x48>
 80113ac:	6025      	str	r5, [r4, #0]
 80113ae:	e7db      	b.n	8011368 <_malloc_r+0x64>
 80113b0:	2000065c 	.word	0x2000065c
 80113b4:	20000660 	.word	0x20000660

080113b8 <__sfputc_r>:
 80113b8:	6893      	ldr	r3, [r2, #8]
 80113ba:	3b01      	subs	r3, #1
 80113bc:	2b00      	cmp	r3, #0
 80113be:	b410      	push	{r4}
 80113c0:	6093      	str	r3, [r2, #8]
 80113c2:	da08      	bge.n	80113d6 <__sfputc_r+0x1e>
 80113c4:	6994      	ldr	r4, [r2, #24]
 80113c6:	42a3      	cmp	r3, r4
 80113c8:	db01      	blt.n	80113ce <__sfputc_r+0x16>
 80113ca:	290a      	cmp	r1, #10
 80113cc:	d103      	bne.n	80113d6 <__sfputc_r+0x1e>
 80113ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113d2:	f000 bb0d 	b.w	80119f0 <__swbuf_r>
 80113d6:	6813      	ldr	r3, [r2, #0]
 80113d8:	1c58      	adds	r0, r3, #1
 80113da:	6010      	str	r0, [r2, #0]
 80113dc:	7019      	strb	r1, [r3, #0]
 80113de:	4608      	mov	r0, r1
 80113e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113e4:	4770      	bx	lr

080113e6 <__sfputs_r>:
 80113e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113e8:	4606      	mov	r6, r0
 80113ea:	460f      	mov	r7, r1
 80113ec:	4614      	mov	r4, r2
 80113ee:	18d5      	adds	r5, r2, r3
 80113f0:	42ac      	cmp	r4, r5
 80113f2:	d101      	bne.n	80113f8 <__sfputs_r+0x12>
 80113f4:	2000      	movs	r0, #0
 80113f6:	e007      	b.n	8011408 <__sfputs_r+0x22>
 80113f8:	463a      	mov	r2, r7
 80113fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113fe:	4630      	mov	r0, r6
 8011400:	f7ff ffda 	bl	80113b8 <__sfputc_r>
 8011404:	1c43      	adds	r3, r0, #1
 8011406:	d1f3      	bne.n	80113f0 <__sfputs_r+0xa>
 8011408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801140c <_vfiprintf_r>:
 801140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011410:	460c      	mov	r4, r1
 8011412:	b09d      	sub	sp, #116	; 0x74
 8011414:	4617      	mov	r7, r2
 8011416:	461d      	mov	r5, r3
 8011418:	4606      	mov	r6, r0
 801141a:	b118      	cbz	r0, 8011424 <_vfiprintf_r+0x18>
 801141c:	6983      	ldr	r3, [r0, #24]
 801141e:	b90b      	cbnz	r3, 8011424 <_vfiprintf_r+0x18>
 8011420:	f7ff fe90 	bl	8011144 <__sinit>
 8011424:	4b7c      	ldr	r3, [pc, #496]	; (8011618 <_vfiprintf_r+0x20c>)
 8011426:	429c      	cmp	r4, r3
 8011428:	d158      	bne.n	80114dc <_vfiprintf_r+0xd0>
 801142a:	6874      	ldr	r4, [r6, #4]
 801142c:	89a3      	ldrh	r3, [r4, #12]
 801142e:	0718      	lsls	r0, r3, #28
 8011430:	d55e      	bpl.n	80114f0 <_vfiprintf_r+0xe4>
 8011432:	6923      	ldr	r3, [r4, #16]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d05b      	beq.n	80114f0 <_vfiprintf_r+0xe4>
 8011438:	2300      	movs	r3, #0
 801143a:	9309      	str	r3, [sp, #36]	; 0x24
 801143c:	2320      	movs	r3, #32
 801143e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011442:	2330      	movs	r3, #48	; 0x30
 8011444:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011448:	9503      	str	r5, [sp, #12]
 801144a:	f04f 0b01 	mov.w	fp, #1
 801144e:	46b8      	mov	r8, r7
 8011450:	4645      	mov	r5, r8
 8011452:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011456:	b10b      	cbz	r3, 801145c <_vfiprintf_r+0x50>
 8011458:	2b25      	cmp	r3, #37	; 0x25
 801145a:	d154      	bne.n	8011506 <_vfiprintf_r+0xfa>
 801145c:	ebb8 0a07 	subs.w	sl, r8, r7
 8011460:	d00b      	beq.n	801147a <_vfiprintf_r+0x6e>
 8011462:	4653      	mov	r3, sl
 8011464:	463a      	mov	r2, r7
 8011466:	4621      	mov	r1, r4
 8011468:	4630      	mov	r0, r6
 801146a:	f7ff ffbc 	bl	80113e6 <__sfputs_r>
 801146e:	3001      	adds	r0, #1
 8011470:	f000 80c2 	beq.w	80115f8 <_vfiprintf_r+0x1ec>
 8011474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011476:	4453      	add	r3, sl
 8011478:	9309      	str	r3, [sp, #36]	; 0x24
 801147a:	f898 3000 	ldrb.w	r3, [r8]
 801147e:	2b00      	cmp	r3, #0
 8011480:	f000 80ba 	beq.w	80115f8 <_vfiprintf_r+0x1ec>
 8011484:	2300      	movs	r3, #0
 8011486:	f04f 32ff 	mov.w	r2, #4294967295
 801148a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801148e:	9304      	str	r3, [sp, #16]
 8011490:	9307      	str	r3, [sp, #28]
 8011492:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011496:	931a      	str	r3, [sp, #104]	; 0x68
 8011498:	46a8      	mov	r8, r5
 801149a:	2205      	movs	r2, #5
 801149c:	f818 1b01 	ldrb.w	r1, [r8], #1
 80114a0:	485e      	ldr	r0, [pc, #376]	; (801161c <_vfiprintf_r+0x210>)
 80114a2:	f7ee febd 	bl	8000220 <memchr>
 80114a6:	9b04      	ldr	r3, [sp, #16]
 80114a8:	bb78      	cbnz	r0, 801150a <_vfiprintf_r+0xfe>
 80114aa:	06d9      	lsls	r1, r3, #27
 80114ac:	bf44      	itt	mi
 80114ae:	2220      	movmi	r2, #32
 80114b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80114b4:	071a      	lsls	r2, r3, #28
 80114b6:	bf44      	itt	mi
 80114b8:	222b      	movmi	r2, #43	; 0x2b
 80114ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80114be:	782a      	ldrb	r2, [r5, #0]
 80114c0:	2a2a      	cmp	r2, #42	; 0x2a
 80114c2:	d02a      	beq.n	801151a <_vfiprintf_r+0x10e>
 80114c4:	9a07      	ldr	r2, [sp, #28]
 80114c6:	46a8      	mov	r8, r5
 80114c8:	2000      	movs	r0, #0
 80114ca:	250a      	movs	r5, #10
 80114cc:	4641      	mov	r1, r8
 80114ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114d2:	3b30      	subs	r3, #48	; 0x30
 80114d4:	2b09      	cmp	r3, #9
 80114d6:	d969      	bls.n	80115ac <_vfiprintf_r+0x1a0>
 80114d8:	b360      	cbz	r0, 8011534 <_vfiprintf_r+0x128>
 80114da:	e024      	b.n	8011526 <_vfiprintf_r+0x11a>
 80114dc:	4b50      	ldr	r3, [pc, #320]	; (8011620 <_vfiprintf_r+0x214>)
 80114de:	429c      	cmp	r4, r3
 80114e0:	d101      	bne.n	80114e6 <_vfiprintf_r+0xda>
 80114e2:	68b4      	ldr	r4, [r6, #8]
 80114e4:	e7a2      	b.n	801142c <_vfiprintf_r+0x20>
 80114e6:	4b4f      	ldr	r3, [pc, #316]	; (8011624 <_vfiprintf_r+0x218>)
 80114e8:	429c      	cmp	r4, r3
 80114ea:	bf08      	it	eq
 80114ec:	68f4      	ldreq	r4, [r6, #12]
 80114ee:	e79d      	b.n	801142c <_vfiprintf_r+0x20>
 80114f0:	4621      	mov	r1, r4
 80114f2:	4630      	mov	r0, r6
 80114f4:	f000 fae0 	bl	8011ab8 <__swsetup_r>
 80114f8:	2800      	cmp	r0, #0
 80114fa:	d09d      	beq.n	8011438 <_vfiprintf_r+0x2c>
 80114fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011500:	b01d      	add	sp, #116	; 0x74
 8011502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011506:	46a8      	mov	r8, r5
 8011508:	e7a2      	b.n	8011450 <_vfiprintf_r+0x44>
 801150a:	4a44      	ldr	r2, [pc, #272]	; (801161c <_vfiprintf_r+0x210>)
 801150c:	1a80      	subs	r0, r0, r2
 801150e:	fa0b f000 	lsl.w	r0, fp, r0
 8011512:	4318      	orrs	r0, r3
 8011514:	9004      	str	r0, [sp, #16]
 8011516:	4645      	mov	r5, r8
 8011518:	e7be      	b.n	8011498 <_vfiprintf_r+0x8c>
 801151a:	9a03      	ldr	r2, [sp, #12]
 801151c:	1d11      	adds	r1, r2, #4
 801151e:	6812      	ldr	r2, [r2, #0]
 8011520:	9103      	str	r1, [sp, #12]
 8011522:	2a00      	cmp	r2, #0
 8011524:	db01      	blt.n	801152a <_vfiprintf_r+0x11e>
 8011526:	9207      	str	r2, [sp, #28]
 8011528:	e004      	b.n	8011534 <_vfiprintf_r+0x128>
 801152a:	4252      	negs	r2, r2
 801152c:	f043 0302 	orr.w	r3, r3, #2
 8011530:	9207      	str	r2, [sp, #28]
 8011532:	9304      	str	r3, [sp, #16]
 8011534:	f898 3000 	ldrb.w	r3, [r8]
 8011538:	2b2e      	cmp	r3, #46	; 0x2e
 801153a:	d10e      	bne.n	801155a <_vfiprintf_r+0x14e>
 801153c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011540:	2b2a      	cmp	r3, #42	; 0x2a
 8011542:	d138      	bne.n	80115b6 <_vfiprintf_r+0x1aa>
 8011544:	9b03      	ldr	r3, [sp, #12]
 8011546:	1d1a      	adds	r2, r3, #4
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	9203      	str	r2, [sp, #12]
 801154c:	2b00      	cmp	r3, #0
 801154e:	bfb8      	it	lt
 8011550:	f04f 33ff 	movlt.w	r3, #4294967295
 8011554:	f108 0802 	add.w	r8, r8, #2
 8011558:	9305      	str	r3, [sp, #20]
 801155a:	4d33      	ldr	r5, [pc, #204]	; (8011628 <_vfiprintf_r+0x21c>)
 801155c:	f898 1000 	ldrb.w	r1, [r8]
 8011560:	2203      	movs	r2, #3
 8011562:	4628      	mov	r0, r5
 8011564:	f7ee fe5c 	bl	8000220 <memchr>
 8011568:	b140      	cbz	r0, 801157c <_vfiprintf_r+0x170>
 801156a:	2340      	movs	r3, #64	; 0x40
 801156c:	1b40      	subs	r0, r0, r5
 801156e:	fa03 f000 	lsl.w	r0, r3, r0
 8011572:	9b04      	ldr	r3, [sp, #16]
 8011574:	4303      	orrs	r3, r0
 8011576:	f108 0801 	add.w	r8, r8, #1
 801157a:	9304      	str	r3, [sp, #16]
 801157c:	f898 1000 	ldrb.w	r1, [r8]
 8011580:	482a      	ldr	r0, [pc, #168]	; (801162c <_vfiprintf_r+0x220>)
 8011582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011586:	2206      	movs	r2, #6
 8011588:	f108 0701 	add.w	r7, r8, #1
 801158c:	f7ee fe48 	bl	8000220 <memchr>
 8011590:	2800      	cmp	r0, #0
 8011592:	d037      	beq.n	8011604 <_vfiprintf_r+0x1f8>
 8011594:	4b26      	ldr	r3, [pc, #152]	; (8011630 <_vfiprintf_r+0x224>)
 8011596:	bb1b      	cbnz	r3, 80115e0 <_vfiprintf_r+0x1d4>
 8011598:	9b03      	ldr	r3, [sp, #12]
 801159a:	3307      	adds	r3, #7
 801159c:	f023 0307 	bic.w	r3, r3, #7
 80115a0:	3308      	adds	r3, #8
 80115a2:	9303      	str	r3, [sp, #12]
 80115a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115a6:	444b      	add	r3, r9
 80115a8:	9309      	str	r3, [sp, #36]	; 0x24
 80115aa:	e750      	b.n	801144e <_vfiprintf_r+0x42>
 80115ac:	fb05 3202 	mla	r2, r5, r2, r3
 80115b0:	2001      	movs	r0, #1
 80115b2:	4688      	mov	r8, r1
 80115b4:	e78a      	b.n	80114cc <_vfiprintf_r+0xc0>
 80115b6:	2300      	movs	r3, #0
 80115b8:	f108 0801 	add.w	r8, r8, #1
 80115bc:	9305      	str	r3, [sp, #20]
 80115be:	4619      	mov	r1, r3
 80115c0:	250a      	movs	r5, #10
 80115c2:	4640      	mov	r0, r8
 80115c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115c8:	3a30      	subs	r2, #48	; 0x30
 80115ca:	2a09      	cmp	r2, #9
 80115cc:	d903      	bls.n	80115d6 <_vfiprintf_r+0x1ca>
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d0c3      	beq.n	801155a <_vfiprintf_r+0x14e>
 80115d2:	9105      	str	r1, [sp, #20]
 80115d4:	e7c1      	b.n	801155a <_vfiprintf_r+0x14e>
 80115d6:	fb05 2101 	mla	r1, r5, r1, r2
 80115da:	2301      	movs	r3, #1
 80115dc:	4680      	mov	r8, r0
 80115de:	e7f0      	b.n	80115c2 <_vfiprintf_r+0x1b6>
 80115e0:	ab03      	add	r3, sp, #12
 80115e2:	9300      	str	r3, [sp, #0]
 80115e4:	4622      	mov	r2, r4
 80115e6:	4b13      	ldr	r3, [pc, #76]	; (8011634 <_vfiprintf_r+0x228>)
 80115e8:	a904      	add	r1, sp, #16
 80115ea:	4630      	mov	r0, r6
 80115ec:	f3af 8000 	nop.w
 80115f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80115f4:	4681      	mov	r9, r0
 80115f6:	d1d5      	bne.n	80115a4 <_vfiprintf_r+0x198>
 80115f8:	89a3      	ldrh	r3, [r4, #12]
 80115fa:	065b      	lsls	r3, r3, #25
 80115fc:	f53f af7e 	bmi.w	80114fc <_vfiprintf_r+0xf0>
 8011600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011602:	e77d      	b.n	8011500 <_vfiprintf_r+0xf4>
 8011604:	ab03      	add	r3, sp, #12
 8011606:	9300      	str	r3, [sp, #0]
 8011608:	4622      	mov	r2, r4
 801160a:	4b0a      	ldr	r3, [pc, #40]	; (8011634 <_vfiprintf_r+0x228>)
 801160c:	a904      	add	r1, sp, #16
 801160e:	4630      	mov	r0, r6
 8011610:	f000 f888 	bl	8011724 <_printf_i>
 8011614:	e7ec      	b.n	80115f0 <_vfiprintf_r+0x1e4>
 8011616:	bf00      	nop
 8011618:	08015154 	.word	0x08015154
 801161c:	08015194 	.word	0x08015194
 8011620:	08015174 	.word	0x08015174
 8011624:	08015134 	.word	0x08015134
 8011628:	0801519a 	.word	0x0801519a
 801162c:	0801519e 	.word	0x0801519e
 8011630:	00000000 	.word	0x00000000
 8011634:	080113e7 	.word	0x080113e7

08011638 <_printf_common>:
 8011638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801163c:	4691      	mov	r9, r2
 801163e:	461f      	mov	r7, r3
 8011640:	688a      	ldr	r2, [r1, #8]
 8011642:	690b      	ldr	r3, [r1, #16]
 8011644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011648:	4293      	cmp	r3, r2
 801164a:	bfb8      	it	lt
 801164c:	4613      	movlt	r3, r2
 801164e:	f8c9 3000 	str.w	r3, [r9]
 8011652:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011656:	4606      	mov	r6, r0
 8011658:	460c      	mov	r4, r1
 801165a:	b112      	cbz	r2, 8011662 <_printf_common+0x2a>
 801165c:	3301      	adds	r3, #1
 801165e:	f8c9 3000 	str.w	r3, [r9]
 8011662:	6823      	ldr	r3, [r4, #0]
 8011664:	0699      	lsls	r1, r3, #26
 8011666:	bf42      	ittt	mi
 8011668:	f8d9 3000 	ldrmi.w	r3, [r9]
 801166c:	3302      	addmi	r3, #2
 801166e:	f8c9 3000 	strmi.w	r3, [r9]
 8011672:	6825      	ldr	r5, [r4, #0]
 8011674:	f015 0506 	ands.w	r5, r5, #6
 8011678:	d107      	bne.n	801168a <_printf_common+0x52>
 801167a:	f104 0a19 	add.w	sl, r4, #25
 801167e:	68e3      	ldr	r3, [r4, #12]
 8011680:	f8d9 2000 	ldr.w	r2, [r9]
 8011684:	1a9b      	subs	r3, r3, r2
 8011686:	42ab      	cmp	r3, r5
 8011688:	dc28      	bgt.n	80116dc <_printf_common+0xa4>
 801168a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801168e:	6822      	ldr	r2, [r4, #0]
 8011690:	3300      	adds	r3, #0
 8011692:	bf18      	it	ne
 8011694:	2301      	movne	r3, #1
 8011696:	0692      	lsls	r2, r2, #26
 8011698:	d42d      	bmi.n	80116f6 <_printf_common+0xbe>
 801169a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801169e:	4639      	mov	r1, r7
 80116a0:	4630      	mov	r0, r6
 80116a2:	47c0      	blx	r8
 80116a4:	3001      	adds	r0, #1
 80116a6:	d020      	beq.n	80116ea <_printf_common+0xb2>
 80116a8:	6823      	ldr	r3, [r4, #0]
 80116aa:	68e5      	ldr	r5, [r4, #12]
 80116ac:	f8d9 2000 	ldr.w	r2, [r9]
 80116b0:	f003 0306 	and.w	r3, r3, #6
 80116b4:	2b04      	cmp	r3, #4
 80116b6:	bf08      	it	eq
 80116b8:	1aad      	subeq	r5, r5, r2
 80116ba:	68a3      	ldr	r3, [r4, #8]
 80116bc:	6922      	ldr	r2, [r4, #16]
 80116be:	bf0c      	ite	eq
 80116c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80116c4:	2500      	movne	r5, #0
 80116c6:	4293      	cmp	r3, r2
 80116c8:	bfc4      	itt	gt
 80116ca:	1a9b      	subgt	r3, r3, r2
 80116cc:	18ed      	addgt	r5, r5, r3
 80116ce:	f04f 0900 	mov.w	r9, #0
 80116d2:	341a      	adds	r4, #26
 80116d4:	454d      	cmp	r5, r9
 80116d6:	d11a      	bne.n	801170e <_printf_common+0xd6>
 80116d8:	2000      	movs	r0, #0
 80116da:	e008      	b.n	80116ee <_printf_common+0xb6>
 80116dc:	2301      	movs	r3, #1
 80116de:	4652      	mov	r2, sl
 80116e0:	4639      	mov	r1, r7
 80116e2:	4630      	mov	r0, r6
 80116e4:	47c0      	blx	r8
 80116e6:	3001      	adds	r0, #1
 80116e8:	d103      	bne.n	80116f2 <_printf_common+0xba>
 80116ea:	f04f 30ff 	mov.w	r0, #4294967295
 80116ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116f2:	3501      	adds	r5, #1
 80116f4:	e7c3      	b.n	801167e <_printf_common+0x46>
 80116f6:	18e1      	adds	r1, r4, r3
 80116f8:	1c5a      	adds	r2, r3, #1
 80116fa:	2030      	movs	r0, #48	; 0x30
 80116fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011700:	4422      	add	r2, r4
 8011702:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011706:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801170a:	3302      	adds	r3, #2
 801170c:	e7c5      	b.n	801169a <_printf_common+0x62>
 801170e:	2301      	movs	r3, #1
 8011710:	4622      	mov	r2, r4
 8011712:	4639      	mov	r1, r7
 8011714:	4630      	mov	r0, r6
 8011716:	47c0      	blx	r8
 8011718:	3001      	adds	r0, #1
 801171a:	d0e6      	beq.n	80116ea <_printf_common+0xb2>
 801171c:	f109 0901 	add.w	r9, r9, #1
 8011720:	e7d8      	b.n	80116d4 <_printf_common+0x9c>
	...

08011724 <_printf_i>:
 8011724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011728:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801172c:	460c      	mov	r4, r1
 801172e:	7e09      	ldrb	r1, [r1, #24]
 8011730:	b085      	sub	sp, #20
 8011732:	296e      	cmp	r1, #110	; 0x6e
 8011734:	4617      	mov	r7, r2
 8011736:	4606      	mov	r6, r0
 8011738:	4698      	mov	r8, r3
 801173a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801173c:	f000 80b3 	beq.w	80118a6 <_printf_i+0x182>
 8011740:	d822      	bhi.n	8011788 <_printf_i+0x64>
 8011742:	2963      	cmp	r1, #99	; 0x63
 8011744:	d036      	beq.n	80117b4 <_printf_i+0x90>
 8011746:	d80a      	bhi.n	801175e <_printf_i+0x3a>
 8011748:	2900      	cmp	r1, #0
 801174a:	f000 80b9 	beq.w	80118c0 <_printf_i+0x19c>
 801174e:	2958      	cmp	r1, #88	; 0x58
 8011750:	f000 8083 	beq.w	801185a <_printf_i+0x136>
 8011754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011758:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801175c:	e032      	b.n	80117c4 <_printf_i+0xa0>
 801175e:	2964      	cmp	r1, #100	; 0x64
 8011760:	d001      	beq.n	8011766 <_printf_i+0x42>
 8011762:	2969      	cmp	r1, #105	; 0x69
 8011764:	d1f6      	bne.n	8011754 <_printf_i+0x30>
 8011766:	6820      	ldr	r0, [r4, #0]
 8011768:	6813      	ldr	r3, [r2, #0]
 801176a:	0605      	lsls	r5, r0, #24
 801176c:	f103 0104 	add.w	r1, r3, #4
 8011770:	d52a      	bpl.n	80117c8 <_printf_i+0xa4>
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	6011      	str	r1, [r2, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	da03      	bge.n	8011782 <_printf_i+0x5e>
 801177a:	222d      	movs	r2, #45	; 0x2d
 801177c:	425b      	negs	r3, r3
 801177e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011782:	486f      	ldr	r0, [pc, #444]	; (8011940 <_printf_i+0x21c>)
 8011784:	220a      	movs	r2, #10
 8011786:	e039      	b.n	80117fc <_printf_i+0xd8>
 8011788:	2973      	cmp	r1, #115	; 0x73
 801178a:	f000 809d 	beq.w	80118c8 <_printf_i+0x1a4>
 801178e:	d808      	bhi.n	80117a2 <_printf_i+0x7e>
 8011790:	296f      	cmp	r1, #111	; 0x6f
 8011792:	d020      	beq.n	80117d6 <_printf_i+0xb2>
 8011794:	2970      	cmp	r1, #112	; 0x70
 8011796:	d1dd      	bne.n	8011754 <_printf_i+0x30>
 8011798:	6823      	ldr	r3, [r4, #0]
 801179a:	f043 0320 	orr.w	r3, r3, #32
 801179e:	6023      	str	r3, [r4, #0]
 80117a0:	e003      	b.n	80117aa <_printf_i+0x86>
 80117a2:	2975      	cmp	r1, #117	; 0x75
 80117a4:	d017      	beq.n	80117d6 <_printf_i+0xb2>
 80117a6:	2978      	cmp	r1, #120	; 0x78
 80117a8:	d1d4      	bne.n	8011754 <_printf_i+0x30>
 80117aa:	2378      	movs	r3, #120	; 0x78
 80117ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80117b0:	4864      	ldr	r0, [pc, #400]	; (8011944 <_printf_i+0x220>)
 80117b2:	e055      	b.n	8011860 <_printf_i+0x13c>
 80117b4:	6813      	ldr	r3, [r2, #0]
 80117b6:	1d19      	adds	r1, r3, #4
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	6011      	str	r1, [r2, #0]
 80117bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80117c4:	2301      	movs	r3, #1
 80117c6:	e08c      	b.n	80118e2 <_printf_i+0x1be>
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	6011      	str	r1, [r2, #0]
 80117cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80117d0:	bf18      	it	ne
 80117d2:	b21b      	sxthne	r3, r3
 80117d4:	e7cf      	b.n	8011776 <_printf_i+0x52>
 80117d6:	6813      	ldr	r3, [r2, #0]
 80117d8:	6825      	ldr	r5, [r4, #0]
 80117da:	1d18      	adds	r0, r3, #4
 80117dc:	6010      	str	r0, [r2, #0]
 80117de:	0628      	lsls	r0, r5, #24
 80117e0:	d501      	bpl.n	80117e6 <_printf_i+0xc2>
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	e002      	b.n	80117ec <_printf_i+0xc8>
 80117e6:	0668      	lsls	r0, r5, #25
 80117e8:	d5fb      	bpl.n	80117e2 <_printf_i+0xbe>
 80117ea:	881b      	ldrh	r3, [r3, #0]
 80117ec:	4854      	ldr	r0, [pc, #336]	; (8011940 <_printf_i+0x21c>)
 80117ee:	296f      	cmp	r1, #111	; 0x6f
 80117f0:	bf14      	ite	ne
 80117f2:	220a      	movne	r2, #10
 80117f4:	2208      	moveq	r2, #8
 80117f6:	2100      	movs	r1, #0
 80117f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80117fc:	6865      	ldr	r5, [r4, #4]
 80117fe:	60a5      	str	r5, [r4, #8]
 8011800:	2d00      	cmp	r5, #0
 8011802:	f2c0 8095 	blt.w	8011930 <_printf_i+0x20c>
 8011806:	6821      	ldr	r1, [r4, #0]
 8011808:	f021 0104 	bic.w	r1, r1, #4
 801180c:	6021      	str	r1, [r4, #0]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d13d      	bne.n	801188e <_printf_i+0x16a>
 8011812:	2d00      	cmp	r5, #0
 8011814:	f040 808e 	bne.w	8011934 <_printf_i+0x210>
 8011818:	4665      	mov	r5, ip
 801181a:	2a08      	cmp	r2, #8
 801181c:	d10b      	bne.n	8011836 <_printf_i+0x112>
 801181e:	6823      	ldr	r3, [r4, #0]
 8011820:	07db      	lsls	r3, r3, #31
 8011822:	d508      	bpl.n	8011836 <_printf_i+0x112>
 8011824:	6923      	ldr	r3, [r4, #16]
 8011826:	6862      	ldr	r2, [r4, #4]
 8011828:	429a      	cmp	r2, r3
 801182a:	bfde      	ittt	le
 801182c:	2330      	movle	r3, #48	; 0x30
 801182e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011832:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011836:	ebac 0305 	sub.w	r3, ip, r5
 801183a:	6123      	str	r3, [r4, #16]
 801183c:	f8cd 8000 	str.w	r8, [sp]
 8011840:	463b      	mov	r3, r7
 8011842:	aa03      	add	r2, sp, #12
 8011844:	4621      	mov	r1, r4
 8011846:	4630      	mov	r0, r6
 8011848:	f7ff fef6 	bl	8011638 <_printf_common>
 801184c:	3001      	adds	r0, #1
 801184e:	d14d      	bne.n	80118ec <_printf_i+0x1c8>
 8011850:	f04f 30ff 	mov.w	r0, #4294967295
 8011854:	b005      	add	sp, #20
 8011856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801185a:	4839      	ldr	r0, [pc, #228]	; (8011940 <_printf_i+0x21c>)
 801185c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011860:	6813      	ldr	r3, [r2, #0]
 8011862:	6821      	ldr	r1, [r4, #0]
 8011864:	1d1d      	adds	r5, r3, #4
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	6015      	str	r5, [r2, #0]
 801186a:	060a      	lsls	r2, r1, #24
 801186c:	d50b      	bpl.n	8011886 <_printf_i+0x162>
 801186e:	07ca      	lsls	r2, r1, #31
 8011870:	bf44      	itt	mi
 8011872:	f041 0120 	orrmi.w	r1, r1, #32
 8011876:	6021      	strmi	r1, [r4, #0]
 8011878:	b91b      	cbnz	r3, 8011882 <_printf_i+0x15e>
 801187a:	6822      	ldr	r2, [r4, #0]
 801187c:	f022 0220 	bic.w	r2, r2, #32
 8011880:	6022      	str	r2, [r4, #0]
 8011882:	2210      	movs	r2, #16
 8011884:	e7b7      	b.n	80117f6 <_printf_i+0xd2>
 8011886:	064d      	lsls	r5, r1, #25
 8011888:	bf48      	it	mi
 801188a:	b29b      	uxthmi	r3, r3
 801188c:	e7ef      	b.n	801186e <_printf_i+0x14a>
 801188e:	4665      	mov	r5, ip
 8011890:	fbb3 f1f2 	udiv	r1, r3, r2
 8011894:	fb02 3311 	mls	r3, r2, r1, r3
 8011898:	5cc3      	ldrb	r3, [r0, r3]
 801189a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801189e:	460b      	mov	r3, r1
 80118a0:	2900      	cmp	r1, #0
 80118a2:	d1f5      	bne.n	8011890 <_printf_i+0x16c>
 80118a4:	e7b9      	b.n	801181a <_printf_i+0xf6>
 80118a6:	6813      	ldr	r3, [r2, #0]
 80118a8:	6825      	ldr	r5, [r4, #0]
 80118aa:	6961      	ldr	r1, [r4, #20]
 80118ac:	1d18      	adds	r0, r3, #4
 80118ae:	6010      	str	r0, [r2, #0]
 80118b0:	0628      	lsls	r0, r5, #24
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	d501      	bpl.n	80118ba <_printf_i+0x196>
 80118b6:	6019      	str	r1, [r3, #0]
 80118b8:	e002      	b.n	80118c0 <_printf_i+0x19c>
 80118ba:	066a      	lsls	r2, r5, #25
 80118bc:	d5fb      	bpl.n	80118b6 <_printf_i+0x192>
 80118be:	8019      	strh	r1, [r3, #0]
 80118c0:	2300      	movs	r3, #0
 80118c2:	6123      	str	r3, [r4, #16]
 80118c4:	4665      	mov	r5, ip
 80118c6:	e7b9      	b.n	801183c <_printf_i+0x118>
 80118c8:	6813      	ldr	r3, [r2, #0]
 80118ca:	1d19      	adds	r1, r3, #4
 80118cc:	6011      	str	r1, [r2, #0]
 80118ce:	681d      	ldr	r5, [r3, #0]
 80118d0:	6862      	ldr	r2, [r4, #4]
 80118d2:	2100      	movs	r1, #0
 80118d4:	4628      	mov	r0, r5
 80118d6:	f7ee fca3 	bl	8000220 <memchr>
 80118da:	b108      	cbz	r0, 80118e0 <_printf_i+0x1bc>
 80118dc:	1b40      	subs	r0, r0, r5
 80118de:	6060      	str	r0, [r4, #4]
 80118e0:	6863      	ldr	r3, [r4, #4]
 80118e2:	6123      	str	r3, [r4, #16]
 80118e4:	2300      	movs	r3, #0
 80118e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118ea:	e7a7      	b.n	801183c <_printf_i+0x118>
 80118ec:	6923      	ldr	r3, [r4, #16]
 80118ee:	462a      	mov	r2, r5
 80118f0:	4639      	mov	r1, r7
 80118f2:	4630      	mov	r0, r6
 80118f4:	47c0      	blx	r8
 80118f6:	3001      	adds	r0, #1
 80118f8:	d0aa      	beq.n	8011850 <_printf_i+0x12c>
 80118fa:	6823      	ldr	r3, [r4, #0]
 80118fc:	079b      	lsls	r3, r3, #30
 80118fe:	d413      	bmi.n	8011928 <_printf_i+0x204>
 8011900:	68e0      	ldr	r0, [r4, #12]
 8011902:	9b03      	ldr	r3, [sp, #12]
 8011904:	4298      	cmp	r0, r3
 8011906:	bfb8      	it	lt
 8011908:	4618      	movlt	r0, r3
 801190a:	e7a3      	b.n	8011854 <_printf_i+0x130>
 801190c:	2301      	movs	r3, #1
 801190e:	464a      	mov	r2, r9
 8011910:	4639      	mov	r1, r7
 8011912:	4630      	mov	r0, r6
 8011914:	47c0      	blx	r8
 8011916:	3001      	adds	r0, #1
 8011918:	d09a      	beq.n	8011850 <_printf_i+0x12c>
 801191a:	3501      	adds	r5, #1
 801191c:	68e3      	ldr	r3, [r4, #12]
 801191e:	9a03      	ldr	r2, [sp, #12]
 8011920:	1a9b      	subs	r3, r3, r2
 8011922:	42ab      	cmp	r3, r5
 8011924:	dcf2      	bgt.n	801190c <_printf_i+0x1e8>
 8011926:	e7eb      	b.n	8011900 <_printf_i+0x1dc>
 8011928:	2500      	movs	r5, #0
 801192a:	f104 0919 	add.w	r9, r4, #25
 801192e:	e7f5      	b.n	801191c <_printf_i+0x1f8>
 8011930:	2b00      	cmp	r3, #0
 8011932:	d1ac      	bne.n	801188e <_printf_i+0x16a>
 8011934:	7803      	ldrb	r3, [r0, #0]
 8011936:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801193a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801193e:	e76c      	b.n	801181a <_printf_i+0xf6>
 8011940:	080151a5 	.word	0x080151a5
 8011944:	080151b6 	.word	0x080151b6

08011948 <_sbrk_r>:
 8011948:	b538      	push	{r3, r4, r5, lr}
 801194a:	4c06      	ldr	r4, [pc, #24]	; (8011964 <_sbrk_r+0x1c>)
 801194c:	2300      	movs	r3, #0
 801194e:	4605      	mov	r5, r0
 8011950:	4608      	mov	r0, r1
 8011952:	6023      	str	r3, [r4, #0]
 8011954:	f7ff fa76 	bl	8010e44 <_sbrk>
 8011958:	1c43      	adds	r3, r0, #1
 801195a:	d102      	bne.n	8011962 <_sbrk_r+0x1a>
 801195c:	6823      	ldr	r3, [r4, #0]
 801195e:	b103      	cbz	r3, 8011962 <_sbrk_r+0x1a>
 8011960:	602b      	str	r3, [r5, #0]
 8011962:	bd38      	pop	{r3, r4, r5, pc}
 8011964:	20007dcc 	.word	0x20007dcc

08011968 <__sread>:
 8011968:	b510      	push	{r4, lr}
 801196a:	460c      	mov	r4, r1
 801196c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011970:	f000 fa48 	bl	8011e04 <_read_r>
 8011974:	2800      	cmp	r0, #0
 8011976:	bfab      	itete	ge
 8011978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801197a:	89a3      	ldrhlt	r3, [r4, #12]
 801197c:	181b      	addge	r3, r3, r0
 801197e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011982:	bfac      	ite	ge
 8011984:	6563      	strge	r3, [r4, #84]	; 0x54
 8011986:	81a3      	strhlt	r3, [r4, #12]
 8011988:	bd10      	pop	{r4, pc}

0801198a <__swrite>:
 801198a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801198e:	461f      	mov	r7, r3
 8011990:	898b      	ldrh	r3, [r1, #12]
 8011992:	05db      	lsls	r3, r3, #23
 8011994:	4605      	mov	r5, r0
 8011996:	460c      	mov	r4, r1
 8011998:	4616      	mov	r6, r2
 801199a:	d505      	bpl.n	80119a8 <__swrite+0x1e>
 801199c:	2302      	movs	r3, #2
 801199e:	2200      	movs	r2, #0
 80119a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119a4:	f000 f9b6 	bl	8011d14 <_lseek_r>
 80119a8:	89a3      	ldrh	r3, [r4, #12]
 80119aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80119b2:	81a3      	strh	r3, [r4, #12]
 80119b4:	4632      	mov	r2, r6
 80119b6:	463b      	mov	r3, r7
 80119b8:	4628      	mov	r0, r5
 80119ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119be:	f000 b869 	b.w	8011a94 <_write_r>

080119c2 <__sseek>:
 80119c2:	b510      	push	{r4, lr}
 80119c4:	460c      	mov	r4, r1
 80119c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ca:	f000 f9a3 	bl	8011d14 <_lseek_r>
 80119ce:	1c43      	adds	r3, r0, #1
 80119d0:	89a3      	ldrh	r3, [r4, #12]
 80119d2:	bf15      	itete	ne
 80119d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80119d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80119da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80119de:	81a3      	strheq	r3, [r4, #12]
 80119e0:	bf18      	it	ne
 80119e2:	81a3      	strhne	r3, [r4, #12]
 80119e4:	bd10      	pop	{r4, pc}

080119e6 <__sclose>:
 80119e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ea:	f000 b8d3 	b.w	8011b94 <_close_r>
	...

080119f0 <__swbuf_r>:
 80119f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119f2:	460e      	mov	r6, r1
 80119f4:	4614      	mov	r4, r2
 80119f6:	4605      	mov	r5, r0
 80119f8:	b118      	cbz	r0, 8011a02 <__swbuf_r+0x12>
 80119fa:	6983      	ldr	r3, [r0, #24]
 80119fc:	b90b      	cbnz	r3, 8011a02 <__swbuf_r+0x12>
 80119fe:	f7ff fba1 	bl	8011144 <__sinit>
 8011a02:	4b21      	ldr	r3, [pc, #132]	; (8011a88 <__swbuf_r+0x98>)
 8011a04:	429c      	cmp	r4, r3
 8011a06:	d12a      	bne.n	8011a5e <__swbuf_r+0x6e>
 8011a08:	686c      	ldr	r4, [r5, #4]
 8011a0a:	69a3      	ldr	r3, [r4, #24]
 8011a0c:	60a3      	str	r3, [r4, #8]
 8011a0e:	89a3      	ldrh	r3, [r4, #12]
 8011a10:	071a      	lsls	r2, r3, #28
 8011a12:	d52e      	bpl.n	8011a72 <__swbuf_r+0x82>
 8011a14:	6923      	ldr	r3, [r4, #16]
 8011a16:	b363      	cbz	r3, 8011a72 <__swbuf_r+0x82>
 8011a18:	6923      	ldr	r3, [r4, #16]
 8011a1a:	6820      	ldr	r0, [r4, #0]
 8011a1c:	1ac0      	subs	r0, r0, r3
 8011a1e:	6963      	ldr	r3, [r4, #20]
 8011a20:	b2f6      	uxtb	r6, r6
 8011a22:	4283      	cmp	r3, r0
 8011a24:	4637      	mov	r7, r6
 8011a26:	dc04      	bgt.n	8011a32 <__swbuf_r+0x42>
 8011a28:	4621      	mov	r1, r4
 8011a2a:	4628      	mov	r0, r5
 8011a2c:	f000 f948 	bl	8011cc0 <_fflush_r>
 8011a30:	bb28      	cbnz	r0, 8011a7e <__swbuf_r+0x8e>
 8011a32:	68a3      	ldr	r3, [r4, #8]
 8011a34:	3b01      	subs	r3, #1
 8011a36:	60a3      	str	r3, [r4, #8]
 8011a38:	6823      	ldr	r3, [r4, #0]
 8011a3a:	1c5a      	adds	r2, r3, #1
 8011a3c:	6022      	str	r2, [r4, #0]
 8011a3e:	701e      	strb	r6, [r3, #0]
 8011a40:	6963      	ldr	r3, [r4, #20]
 8011a42:	3001      	adds	r0, #1
 8011a44:	4283      	cmp	r3, r0
 8011a46:	d004      	beq.n	8011a52 <__swbuf_r+0x62>
 8011a48:	89a3      	ldrh	r3, [r4, #12]
 8011a4a:	07db      	lsls	r3, r3, #31
 8011a4c:	d519      	bpl.n	8011a82 <__swbuf_r+0x92>
 8011a4e:	2e0a      	cmp	r6, #10
 8011a50:	d117      	bne.n	8011a82 <__swbuf_r+0x92>
 8011a52:	4621      	mov	r1, r4
 8011a54:	4628      	mov	r0, r5
 8011a56:	f000 f933 	bl	8011cc0 <_fflush_r>
 8011a5a:	b190      	cbz	r0, 8011a82 <__swbuf_r+0x92>
 8011a5c:	e00f      	b.n	8011a7e <__swbuf_r+0x8e>
 8011a5e:	4b0b      	ldr	r3, [pc, #44]	; (8011a8c <__swbuf_r+0x9c>)
 8011a60:	429c      	cmp	r4, r3
 8011a62:	d101      	bne.n	8011a68 <__swbuf_r+0x78>
 8011a64:	68ac      	ldr	r4, [r5, #8]
 8011a66:	e7d0      	b.n	8011a0a <__swbuf_r+0x1a>
 8011a68:	4b09      	ldr	r3, [pc, #36]	; (8011a90 <__swbuf_r+0xa0>)
 8011a6a:	429c      	cmp	r4, r3
 8011a6c:	bf08      	it	eq
 8011a6e:	68ec      	ldreq	r4, [r5, #12]
 8011a70:	e7cb      	b.n	8011a0a <__swbuf_r+0x1a>
 8011a72:	4621      	mov	r1, r4
 8011a74:	4628      	mov	r0, r5
 8011a76:	f000 f81f 	bl	8011ab8 <__swsetup_r>
 8011a7a:	2800      	cmp	r0, #0
 8011a7c:	d0cc      	beq.n	8011a18 <__swbuf_r+0x28>
 8011a7e:	f04f 37ff 	mov.w	r7, #4294967295
 8011a82:	4638      	mov	r0, r7
 8011a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a86:	bf00      	nop
 8011a88:	08015154 	.word	0x08015154
 8011a8c:	08015174 	.word	0x08015174
 8011a90:	08015134 	.word	0x08015134

08011a94 <_write_r>:
 8011a94:	b538      	push	{r3, r4, r5, lr}
 8011a96:	4c07      	ldr	r4, [pc, #28]	; (8011ab4 <_write_r+0x20>)
 8011a98:	4605      	mov	r5, r0
 8011a9a:	4608      	mov	r0, r1
 8011a9c:	4611      	mov	r1, r2
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	6022      	str	r2, [r4, #0]
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	f7ff f97d 	bl	8010da2 <_write>
 8011aa8:	1c43      	adds	r3, r0, #1
 8011aaa:	d102      	bne.n	8011ab2 <_write_r+0x1e>
 8011aac:	6823      	ldr	r3, [r4, #0]
 8011aae:	b103      	cbz	r3, 8011ab2 <_write_r+0x1e>
 8011ab0:	602b      	str	r3, [r5, #0]
 8011ab2:	bd38      	pop	{r3, r4, r5, pc}
 8011ab4:	20007dcc 	.word	0x20007dcc

08011ab8 <__swsetup_r>:
 8011ab8:	4b32      	ldr	r3, [pc, #200]	; (8011b84 <__swsetup_r+0xcc>)
 8011aba:	b570      	push	{r4, r5, r6, lr}
 8011abc:	681d      	ldr	r5, [r3, #0]
 8011abe:	4606      	mov	r6, r0
 8011ac0:	460c      	mov	r4, r1
 8011ac2:	b125      	cbz	r5, 8011ace <__swsetup_r+0x16>
 8011ac4:	69ab      	ldr	r3, [r5, #24]
 8011ac6:	b913      	cbnz	r3, 8011ace <__swsetup_r+0x16>
 8011ac8:	4628      	mov	r0, r5
 8011aca:	f7ff fb3b 	bl	8011144 <__sinit>
 8011ace:	4b2e      	ldr	r3, [pc, #184]	; (8011b88 <__swsetup_r+0xd0>)
 8011ad0:	429c      	cmp	r4, r3
 8011ad2:	d10f      	bne.n	8011af4 <__swsetup_r+0x3c>
 8011ad4:	686c      	ldr	r4, [r5, #4]
 8011ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ada:	b29a      	uxth	r2, r3
 8011adc:	0715      	lsls	r5, r2, #28
 8011ade:	d42c      	bmi.n	8011b3a <__swsetup_r+0x82>
 8011ae0:	06d0      	lsls	r0, r2, #27
 8011ae2:	d411      	bmi.n	8011b08 <__swsetup_r+0x50>
 8011ae4:	2209      	movs	r2, #9
 8011ae6:	6032      	str	r2, [r6, #0]
 8011ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aec:	81a3      	strh	r3, [r4, #12]
 8011aee:	f04f 30ff 	mov.w	r0, #4294967295
 8011af2:	e03e      	b.n	8011b72 <__swsetup_r+0xba>
 8011af4:	4b25      	ldr	r3, [pc, #148]	; (8011b8c <__swsetup_r+0xd4>)
 8011af6:	429c      	cmp	r4, r3
 8011af8:	d101      	bne.n	8011afe <__swsetup_r+0x46>
 8011afa:	68ac      	ldr	r4, [r5, #8]
 8011afc:	e7eb      	b.n	8011ad6 <__swsetup_r+0x1e>
 8011afe:	4b24      	ldr	r3, [pc, #144]	; (8011b90 <__swsetup_r+0xd8>)
 8011b00:	429c      	cmp	r4, r3
 8011b02:	bf08      	it	eq
 8011b04:	68ec      	ldreq	r4, [r5, #12]
 8011b06:	e7e6      	b.n	8011ad6 <__swsetup_r+0x1e>
 8011b08:	0751      	lsls	r1, r2, #29
 8011b0a:	d512      	bpl.n	8011b32 <__swsetup_r+0x7a>
 8011b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b0e:	b141      	cbz	r1, 8011b22 <__swsetup_r+0x6a>
 8011b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b14:	4299      	cmp	r1, r3
 8011b16:	d002      	beq.n	8011b1e <__swsetup_r+0x66>
 8011b18:	4630      	mov	r0, r6
 8011b1a:	f7ff fba5 	bl	8011268 <_free_r>
 8011b1e:	2300      	movs	r3, #0
 8011b20:	6363      	str	r3, [r4, #52]	; 0x34
 8011b22:	89a3      	ldrh	r3, [r4, #12]
 8011b24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b28:	81a3      	strh	r3, [r4, #12]
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	6063      	str	r3, [r4, #4]
 8011b2e:	6923      	ldr	r3, [r4, #16]
 8011b30:	6023      	str	r3, [r4, #0]
 8011b32:	89a3      	ldrh	r3, [r4, #12]
 8011b34:	f043 0308 	orr.w	r3, r3, #8
 8011b38:	81a3      	strh	r3, [r4, #12]
 8011b3a:	6923      	ldr	r3, [r4, #16]
 8011b3c:	b94b      	cbnz	r3, 8011b52 <__swsetup_r+0x9a>
 8011b3e:	89a3      	ldrh	r3, [r4, #12]
 8011b40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b48:	d003      	beq.n	8011b52 <__swsetup_r+0x9a>
 8011b4a:	4621      	mov	r1, r4
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	f000 f917 	bl	8011d80 <__smakebuf_r>
 8011b52:	89a2      	ldrh	r2, [r4, #12]
 8011b54:	f012 0301 	ands.w	r3, r2, #1
 8011b58:	d00c      	beq.n	8011b74 <__swsetup_r+0xbc>
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	60a3      	str	r3, [r4, #8]
 8011b5e:	6963      	ldr	r3, [r4, #20]
 8011b60:	425b      	negs	r3, r3
 8011b62:	61a3      	str	r3, [r4, #24]
 8011b64:	6923      	ldr	r3, [r4, #16]
 8011b66:	b953      	cbnz	r3, 8011b7e <__swsetup_r+0xc6>
 8011b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011b70:	d1ba      	bne.n	8011ae8 <__swsetup_r+0x30>
 8011b72:	bd70      	pop	{r4, r5, r6, pc}
 8011b74:	0792      	lsls	r2, r2, #30
 8011b76:	bf58      	it	pl
 8011b78:	6963      	ldrpl	r3, [r4, #20]
 8011b7a:	60a3      	str	r3, [r4, #8]
 8011b7c:	e7f2      	b.n	8011b64 <__swsetup_r+0xac>
 8011b7e:	2000      	movs	r0, #0
 8011b80:	e7f7      	b.n	8011b72 <__swsetup_r+0xba>
 8011b82:	bf00      	nop
 8011b84:	20000018 	.word	0x20000018
 8011b88:	08015154 	.word	0x08015154
 8011b8c:	08015174 	.word	0x08015174
 8011b90:	08015134 	.word	0x08015134

08011b94 <_close_r>:
 8011b94:	b538      	push	{r3, r4, r5, lr}
 8011b96:	4c06      	ldr	r4, [pc, #24]	; (8011bb0 <_close_r+0x1c>)
 8011b98:	2300      	movs	r3, #0
 8011b9a:	4605      	mov	r5, r0
 8011b9c:	4608      	mov	r0, r1
 8011b9e:	6023      	str	r3, [r4, #0]
 8011ba0:	f7ff f91b 	bl	8010dda <_close>
 8011ba4:	1c43      	adds	r3, r0, #1
 8011ba6:	d102      	bne.n	8011bae <_close_r+0x1a>
 8011ba8:	6823      	ldr	r3, [r4, #0]
 8011baa:	b103      	cbz	r3, 8011bae <_close_r+0x1a>
 8011bac:	602b      	str	r3, [r5, #0]
 8011bae:	bd38      	pop	{r3, r4, r5, pc}
 8011bb0:	20007dcc 	.word	0x20007dcc

08011bb4 <__sflush_r>:
 8011bb4:	898a      	ldrh	r2, [r1, #12]
 8011bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bba:	4605      	mov	r5, r0
 8011bbc:	0710      	lsls	r0, r2, #28
 8011bbe:	460c      	mov	r4, r1
 8011bc0:	d458      	bmi.n	8011c74 <__sflush_r+0xc0>
 8011bc2:	684b      	ldr	r3, [r1, #4]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	dc05      	bgt.n	8011bd4 <__sflush_r+0x20>
 8011bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	dc02      	bgt.n	8011bd4 <__sflush_r+0x20>
 8011bce:	2000      	movs	r0, #0
 8011bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bd6:	2e00      	cmp	r6, #0
 8011bd8:	d0f9      	beq.n	8011bce <__sflush_r+0x1a>
 8011bda:	2300      	movs	r3, #0
 8011bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011be0:	682f      	ldr	r7, [r5, #0]
 8011be2:	6a21      	ldr	r1, [r4, #32]
 8011be4:	602b      	str	r3, [r5, #0]
 8011be6:	d032      	beq.n	8011c4e <__sflush_r+0x9a>
 8011be8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011bea:	89a3      	ldrh	r3, [r4, #12]
 8011bec:	075a      	lsls	r2, r3, #29
 8011bee:	d505      	bpl.n	8011bfc <__sflush_r+0x48>
 8011bf0:	6863      	ldr	r3, [r4, #4]
 8011bf2:	1ac0      	subs	r0, r0, r3
 8011bf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bf6:	b10b      	cbz	r3, 8011bfc <__sflush_r+0x48>
 8011bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011bfa:	1ac0      	subs	r0, r0, r3
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	4602      	mov	r2, r0
 8011c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c02:	6a21      	ldr	r1, [r4, #32]
 8011c04:	4628      	mov	r0, r5
 8011c06:	47b0      	blx	r6
 8011c08:	1c43      	adds	r3, r0, #1
 8011c0a:	89a3      	ldrh	r3, [r4, #12]
 8011c0c:	d106      	bne.n	8011c1c <__sflush_r+0x68>
 8011c0e:	6829      	ldr	r1, [r5, #0]
 8011c10:	291d      	cmp	r1, #29
 8011c12:	d848      	bhi.n	8011ca6 <__sflush_r+0xf2>
 8011c14:	4a29      	ldr	r2, [pc, #164]	; (8011cbc <__sflush_r+0x108>)
 8011c16:	40ca      	lsrs	r2, r1
 8011c18:	07d6      	lsls	r6, r2, #31
 8011c1a:	d544      	bpl.n	8011ca6 <__sflush_r+0xf2>
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	6062      	str	r2, [r4, #4]
 8011c20:	04d9      	lsls	r1, r3, #19
 8011c22:	6922      	ldr	r2, [r4, #16]
 8011c24:	6022      	str	r2, [r4, #0]
 8011c26:	d504      	bpl.n	8011c32 <__sflush_r+0x7e>
 8011c28:	1c42      	adds	r2, r0, #1
 8011c2a:	d101      	bne.n	8011c30 <__sflush_r+0x7c>
 8011c2c:	682b      	ldr	r3, [r5, #0]
 8011c2e:	b903      	cbnz	r3, 8011c32 <__sflush_r+0x7e>
 8011c30:	6560      	str	r0, [r4, #84]	; 0x54
 8011c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c34:	602f      	str	r7, [r5, #0]
 8011c36:	2900      	cmp	r1, #0
 8011c38:	d0c9      	beq.n	8011bce <__sflush_r+0x1a>
 8011c3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c3e:	4299      	cmp	r1, r3
 8011c40:	d002      	beq.n	8011c48 <__sflush_r+0x94>
 8011c42:	4628      	mov	r0, r5
 8011c44:	f7ff fb10 	bl	8011268 <_free_r>
 8011c48:	2000      	movs	r0, #0
 8011c4a:	6360      	str	r0, [r4, #52]	; 0x34
 8011c4c:	e7c0      	b.n	8011bd0 <__sflush_r+0x1c>
 8011c4e:	2301      	movs	r3, #1
 8011c50:	4628      	mov	r0, r5
 8011c52:	47b0      	blx	r6
 8011c54:	1c41      	adds	r1, r0, #1
 8011c56:	d1c8      	bne.n	8011bea <__sflush_r+0x36>
 8011c58:	682b      	ldr	r3, [r5, #0]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d0c5      	beq.n	8011bea <__sflush_r+0x36>
 8011c5e:	2b1d      	cmp	r3, #29
 8011c60:	d001      	beq.n	8011c66 <__sflush_r+0xb2>
 8011c62:	2b16      	cmp	r3, #22
 8011c64:	d101      	bne.n	8011c6a <__sflush_r+0xb6>
 8011c66:	602f      	str	r7, [r5, #0]
 8011c68:	e7b1      	b.n	8011bce <__sflush_r+0x1a>
 8011c6a:	89a3      	ldrh	r3, [r4, #12]
 8011c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c70:	81a3      	strh	r3, [r4, #12]
 8011c72:	e7ad      	b.n	8011bd0 <__sflush_r+0x1c>
 8011c74:	690f      	ldr	r7, [r1, #16]
 8011c76:	2f00      	cmp	r7, #0
 8011c78:	d0a9      	beq.n	8011bce <__sflush_r+0x1a>
 8011c7a:	0793      	lsls	r3, r2, #30
 8011c7c:	680e      	ldr	r6, [r1, #0]
 8011c7e:	bf08      	it	eq
 8011c80:	694b      	ldreq	r3, [r1, #20]
 8011c82:	600f      	str	r7, [r1, #0]
 8011c84:	bf18      	it	ne
 8011c86:	2300      	movne	r3, #0
 8011c88:	eba6 0807 	sub.w	r8, r6, r7
 8011c8c:	608b      	str	r3, [r1, #8]
 8011c8e:	f1b8 0f00 	cmp.w	r8, #0
 8011c92:	dd9c      	ble.n	8011bce <__sflush_r+0x1a>
 8011c94:	4643      	mov	r3, r8
 8011c96:	463a      	mov	r2, r7
 8011c98:	6a21      	ldr	r1, [r4, #32]
 8011c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c9c:	4628      	mov	r0, r5
 8011c9e:	47b0      	blx	r6
 8011ca0:	2800      	cmp	r0, #0
 8011ca2:	dc06      	bgt.n	8011cb2 <__sflush_r+0xfe>
 8011ca4:	89a3      	ldrh	r3, [r4, #12]
 8011ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011caa:	81a3      	strh	r3, [r4, #12]
 8011cac:	f04f 30ff 	mov.w	r0, #4294967295
 8011cb0:	e78e      	b.n	8011bd0 <__sflush_r+0x1c>
 8011cb2:	4407      	add	r7, r0
 8011cb4:	eba8 0800 	sub.w	r8, r8, r0
 8011cb8:	e7e9      	b.n	8011c8e <__sflush_r+0xda>
 8011cba:	bf00      	nop
 8011cbc:	20400001 	.word	0x20400001

08011cc0 <_fflush_r>:
 8011cc0:	b538      	push	{r3, r4, r5, lr}
 8011cc2:	690b      	ldr	r3, [r1, #16]
 8011cc4:	4605      	mov	r5, r0
 8011cc6:	460c      	mov	r4, r1
 8011cc8:	b1db      	cbz	r3, 8011d02 <_fflush_r+0x42>
 8011cca:	b118      	cbz	r0, 8011cd4 <_fflush_r+0x14>
 8011ccc:	6983      	ldr	r3, [r0, #24]
 8011cce:	b90b      	cbnz	r3, 8011cd4 <_fflush_r+0x14>
 8011cd0:	f7ff fa38 	bl	8011144 <__sinit>
 8011cd4:	4b0c      	ldr	r3, [pc, #48]	; (8011d08 <_fflush_r+0x48>)
 8011cd6:	429c      	cmp	r4, r3
 8011cd8:	d109      	bne.n	8011cee <_fflush_r+0x2e>
 8011cda:	686c      	ldr	r4, [r5, #4]
 8011cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ce0:	b17b      	cbz	r3, 8011d02 <_fflush_r+0x42>
 8011ce2:	4621      	mov	r1, r4
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cea:	f7ff bf63 	b.w	8011bb4 <__sflush_r>
 8011cee:	4b07      	ldr	r3, [pc, #28]	; (8011d0c <_fflush_r+0x4c>)
 8011cf0:	429c      	cmp	r4, r3
 8011cf2:	d101      	bne.n	8011cf8 <_fflush_r+0x38>
 8011cf4:	68ac      	ldr	r4, [r5, #8]
 8011cf6:	e7f1      	b.n	8011cdc <_fflush_r+0x1c>
 8011cf8:	4b05      	ldr	r3, [pc, #20]	; (8011d10 <_fflush_r+0x50>)
 8011cfa:	429c      	cmp	r4, r3
 8011cfc:	bf08      	it	eq
 8011cfe:	68ec      	ldreq	r4, [r5, #12]
 8011d00:	e7ec      	b.n	8011cdc <_fflush_r+0x1c>
 8011d02:	2000      	movs	r0, #0
 8011d04:	bd38      	pop	{r3, r4, r5, pc}
 8011d06:	bf00      	nop
 8011d08:	08015154 	.word	0x08015154
 8011d0c:	08015174 	.word	0x08015174
 8011d10:	08015134 	.word	0x08015134

08011d14 <_lseek_r>:
 8011d14:	b538      	push	{r3, r4, r5, lr}
 8011d16:	4c07      	ldr	r4, [pc, #28]	; (8011d34 <_lseek_r+0x20>)
 8011d18:	4605      	mov	r5, r0
 8011d1a:	4608      	mov	r0, r1
 8011d1c:	4611      	mov	r1, r2
 8011d1e:	2200      	movs	r2, #0
 8011d20:	6022      	str	r2, [r4, #0]
 8011d22:	461a      	mov	r2, r3
 8011d24:	f7ff f880 	bl	8010e28 <_lseek>
 8011d28:	1c43      	adds	r3, r0, #1
 8011d2a:	d102      	bne.n	8011d32 <_lseek_r+0x1e>
 8011d2c:	6823      	ldr	r3, [r4, #0]
 8011d2e:	b103      	cbz	r3, 8011d32 <_lseek_r+0x1e>
 8011d30:	602b      	str	r3, [r5, #0]
 8011d32:	bd38      	pop	{r3, r4, r5, pc}
 8011d34:	20007dcc 	.word	0x20007dcc

08011d38 <__swhatbuf_r>:
 8011d38:	b570      	push	{r4, r5, r6, lr}
 8011d3a:	460e      	mov	r6, r1
 8011d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d40:	2900      	cmp	r1, #0
 8011d42:	b096      	sub	sp, #88	; 0x58
 8011d44:	4614      	mov	r4, r2
 8011d46:	461d      	mov	r5, r3
 8011d48:	da07      	bge.n	8011d5a <__swhatbuf_r+0x22>
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	602b      	str	r3, [r5, #0]
 8011d4e:	89b3      	ldrh	r3, [r6, #12]
 8011d50:	061a      	lsls	r2, r3, #24
 8011d52:	d410      	bmi.n	8011d76 <__swhatbuf_r+0x3e>
 8011d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d58:	e00e      	b.n	8011d78 <__swhatbuf_r+0x40>
 8011d5a:	466a      	mov	r2, sp
 8011d5c:	f000 f864 	bl	8011e28 <_fstat_r>
 8011d60:	2800      	cmp	r0, #0
 8011d62:	dbf2      	blt.n	8011d4a <__swhatbuf_r+0x12>
 8011d64:	9a01      	ldr	r2, [sp, #4]
 8011d66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d6e:	425a      	negs	r2, r3
 8011d70:	415a      	adcs	r2, r3
 8011d72:	602a      	str	r2, [r5, #0]
 8011d74:	e7ee      	b.n	8011d54 <__swhatbuf_r+0x1c>
 8011d76:	2340      	movs	r3, #64	; 0x40
 8011d78:	2000      	movs	r0, #0
 8011d7a:	6023      	str	r3, [r4, #0]
 8011d7c:	b016      	add	sp, #88	; 0x58
 8011d7e:	bd70      	pop	{r4, r5, r6, pc}

08011d80 <__smakebuf_r>:
 8011d80:	898b      	ldrh	r3, [r1, #12]
 8011d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011d84:	079d      	lsls	r5, r3, #30
 8011d86:	4606      	mov	r6, r0
 8011d88:	460c      	mov	r4, r1
 8011d8a:	d507      	bpl.n	8011d9c <__smakebuf_r+0x1c>
 8011d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011d90:	6023      	str	r3, [r4, #0]
 8011d92:	6123      	str	r3, [r4, #16]
 8011d94:	2301      	movs	r3, #1
 8011d96:	6163      	str	r3, [r4, #20]
 8011d98:	b002      	add	sp, #8
 8011d9a:	bd70      	pop	{r4, r5, r6, pc}
 8011d9c:	ab01      	add	r3, sp, #4
 8011d9e:	466a      	mov	r2, sp
 8011da0:	f7ff ffca 	bl	8011d38 <__swhatbuf_r>
 8011da4:	9900      	ldr	r1, [sp, #0]
 8011da6:	4605      	mov	r5, r0
 8011da8:	4630      	mov	r0, r6
 8011daa:	f7ff faab 	bl	8011304 <_malloc_r>
 8011dae:	b948      	cbnz	r0, 8011dc4 <__smakebuf_r+0x44>
 8011db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011db4:	059a      	lsls	r2, r3, #22
 8011db6:	d4ef      	bmi.n	8011d98 <__smakebuf_r+0x18>
 8011db8:	f023 0303 	bic.w	r3, r3, #3
 8011dbc:	f043 0302 	orr.w	r3, r3, #2
 8011dc0:	81a3      	strh	r3, [r4, #12]
 8011dc2:	e7e3      	b.n	8011d8c <__smakebuf_r+0xc>
 8011dc4:	4b0d      	ldr	r3, [pc, #52]	; (8011dfc <__smakebuf_r+0x7c>)
 8011dc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8011dc8:	89a3      	ldrh	r3, [r4, #12]
 8011dca:	6020      	str	r0, [r4, #0]
 8011dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dd0:	81a3      	strh	r3, [r4, #12]
 8011dd2:	9b00      	ldr	r3, [sp, #0]
 8011dd4:	6163      	str	r3, [r4, #20]
 8011dd6:	9b01      	ldr	r3, [sp, #4]
 8011dd8:	6120      	str	r0, [r4, #16]
 8011dda:	b15b      	cbz	r3, 8011df4 <__smakebuf_r+0x74>
 8011ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011de0:	4630      	mov	r0, r6
 8011de2:	f000 f833 	bl	8011e4c <_isatty_r>
 8011de6:	b128      	cbz	r0, 8011df4 <__smakebuf_r+0x74>
 8011de8:	89a3      	ldrh	r3, [r4, #12]
 8011dea:	f023 0303 	bic.w	r3, r3, #3
 8011dee:	f043 0301 	orr.w	r3, r3, #1
 8011df2:	81a3      	strh	r3, [r4, #12]
 8011df4:	89a3      	ldrh	r3, [r4, #12]
 8011df6:	431d      	orrs	r5, r3
 8011df8:	81a5      	strh	r5, [r4, #12]
 8011dfa:	e7cd      	b.n	8011d98 <__smakebuf_r+0x18>
 8011dfc:	0801110d 	.word	0x0801110d

08011e00 <__malloc_lock>:
 8011e00:	4770      	bx	lr

08011e02 <__malloc_unlock>:
 8011e02:	4770      	bx	lr

08011e04 <_read_r>:
 8011e04:	b538      	push	{r3, r4, r5, lr}
 8011e06:	4c07      	ldr	r4, [pc, #28]	; (8011e24 <_read_r+0x20>)
 8011e08:	4605      	mov	r5, r0
 8011e0a:	4608      	mov	r0, r1
 8011e0c:	4611      	mov	r1, r2
 8011e0e:	2200      	movs	r2, #0
 8011e10:	6022      	str	r2, [r4, #0]
 8011e12:	461a      	mov	r2, r3
 8011e14:	f7fe ffa8 	bl	8010d68 <_read>
 8011e18:	1c43      	adds	r3, r0, #1
 8011e1a:	d102      	bne.n	8011e22 <_read_r+0x1e>
 8011e1c:	6823      	ldr	r3, [r4, #0]
 8011e1e:	b103      	cbz	r3, 8011e22 <_read_r+0x1e>
 8011e20:	602b      	str	r3, [r5, #0]
 8011e22:	bd38      	pop	{r3, r4, r5, pc}
 8011e24:	20007dcc 	.word	0x20007dcc

08011e28 <_fstat_r>:
 8011e28:	b538      	push	{r3, r4, r5, lr}
 8011e2a:	4c07      	ldr	r4, [pc, #28]	; (8011e48 <_fstat_r+0x20>)
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	4605      	mov	r5, r0
 8011e30:	4608      	mov	r0, r1
 8011e32:	4611      	mov	r1, r2
 8011e34:	6023      	str	r3, [r4, #0]
 8011e36:	f7fe ffdc 	bl	8010df2 <_fstat>
 8011e3a:	1c43      	adds	r3, r0, #1
 8011e3c:	d102      	bne.n	8011e44 <_fstat_r+0x1c>
 8011e3e:	6823      	ldr	r3, [r4, #0]
 8011e40:	b103      	cbz	r3, 8011e44 <_fstat_r+0x1c>
 8011e42:	602b      	str	r3, [r5, #0]
 8011e44:	bd38      	pop	{r3, r4, r5, pc}
 8011e46:	bf00      	nop
 8011e48:	20007dcc 	.word	0x20007dcc

08011e4c <_isatty_r>:
 8011e4c:	b538      	push	{r3, r4, r5, lr}
 8011e4e:	4c06      	ldr	r4, [pc, #24]	; (8011e68 <_isatty_r+0x1c>)
 8011e50:	2300      	movs	r3, #0
 8011e52:	4605      	mov	r5, r0
 8011e54:	4608      	mov	r0, r1
 8011e56:	6023      	str	r3, [r4, #0]
 8011e58:	f7fe ffdb 	bl	8010e12 <_isatty>
 8011e5c:	1c43      	adds	r3, r0, #1
 8011e5e:	d102      	bne.n	8011e66 <_isatty_r+0x1a>
 8011e60:	6823      	ldr	r3, [r4, #0]
 8011e62:	b103      	cbz	r3, 8011e66 <_isatty_r+0x1a>
 8011e64:	602b      	str	r3, [r5, #0]
 8011e66:	bd38      	pop	{r3, r4, r5, pc}
 8011e68:	20007dcc 	.word	0x20007dcc

08011e6c <_init>:
 8011e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e6e:	bf00      	nop
 8011e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e72:	bc08      	pop	{r3}
 8011e74:	469e      	mov	lr, r3
 8011e76:	4770      	bx	lr

08011e78 <_fini>:
 8011e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e7a:	bf00      	nop
 8011e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e7e:	bc08      	pop	{r3}
 8011e80:	469e      	mov	lr, r3
 8011e82:	4770      	bx	lr
